
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010cbc  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d04  08010f60  08010f60  00020f60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08012c64  08012c64  00022c64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  08012c6c  08012c6c  00022c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  08012c74  08012c74  00022c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001f8  24000000  08012c7c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b40  240001f8  08012e74  000301f8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000d38  08012e74  00030d38  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00037d87  00000000  00000000  00030226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00005309  00000000  00000000  00067fad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001638  00000000  00000000  0006d2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000014a0  00000000  00000000  0006e8f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003de64  00000000  00000000  0006fd90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000218f6  00000000  00000000  000adbf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016d8d0  00000000  00000000  000cf4ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  0023cdba  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006ca4  00000000  00000000  0023ce10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f8 	.word	0x240001f8
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010f44 	.word	0x08010f44

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001fc 	.word	0x240001fc
 80002dc:	08010f44 	.word	0x08010f44

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>:
 *  Created on: Jan 26, 2022
 *      Author: SakuranohanaTH
 */
#include "AMT21.h"

AMT21::AMT21(UART_HandleTypeDef *_amt21_huart, uint8_t _address) {
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	60f8      	str	r0, [r7, #12]
 8000690:	60b9      	str	r1, [r7, #8]
 8000692:	4613      	mov	r3, r2
 8000694:	71fb      	strb	r3, [r7, #7]
	this->amt21_huart = _amt21_huart;
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	68ba      	ldr	r2, [r7, #8]
 800069a:	601a      	str	r2, [r3, #0]
	this->address = _address;
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	79fa      	ldrb	r2, [r7, #7]
 80006a0:	729a      	strb	r2, [r3, #10]
}
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	4618      	mov	r0, r3
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr

080006b0 <_ZN5AMT21D1Ev>:

AMT21::~AMT21() {
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]

}
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4618      	mov	r0, r3
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr

080006c6 <_ZN5AMT2110AMT21_ReadEv>:

void AMT21::AMT21_Read() {
 80006c6:	b580      	push	{r7, lr}
 80006c8:	b082      	sub	sp, #8
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 1);
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) &(this->address),
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f103 010a 	add.w	r1, r3, #10
 80006d8:	2364      	movs	r3, #100	; 0x64
 80006da:	2201      	movs	r2, #1
 80006dc:	f00b faee 	bl	800bcbc <HAL_UART_Transmit>
			sizeof(this->address), 100);
//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
	HAL_UART_Receive(this->amt21_huart, (uint8_t*) &(this->uart_buf), 2, 100);
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	6818      	ldr	r0, [r3, #0]
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f103 010c 	add.w	r1, r3, #12
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	2202      	movs	r2, #2
 80006ee:	f00b fb7b 	bl	800bde8 <HAL_UART_Receive>
	this->k0 = (this->uart_buf & 0x4000) == 0x4000;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	899b      	ldrh	r3, [r3, #12]
 80006f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	bf14      	ite	ne
 80006fe:	2301      	movne	r3, #1
 8000700:	2300      	moveq	r3, #0
 8000702:	b2db      	uxtb	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	761a      	strb	r2, [r3, #24]
	this->k1 = (this->uart_buf & 0x8000) == 0x8000;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	899b      	ldrh	r3, [r3, #12]
 800070e:	b21b      	sxth	r3, r3
 8000710:	b29b      	uxth	r3, r3
 8000712:	0bdb      	lsrs	r3, r3, #15
 8000714:	b2db      	uxtb	r3, r3
 8000716:	461a      	mov	r2, r3
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	765a      	strb	r2, [r3, #25]
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <_ZN5AMT2117AMT21_Check_ValueEv>:
	HAL_UART_Transmit(this->amt21_huart, (uint8_t*) set_zero_command,
			sizeof(this->address), 100);
	//	HAL_GPIO_WritePin(dev->DE_port, dev->DE_pin, 0);
}

HAL_StatusTypeDef AMT21::AMT21_Check_Value() {
 8000724:	b480      	push	{r7}
 8000726:	b085      	sub	sp, #20
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	uint16_t raw_value_temp = this->uart_buf & 0x3FFF;
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	899b      	ldrh	r3, [r3, #12]
 8000730:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000734:	817b      	strh	r3, [r7, #10]
	uint8_t k0_check = this->uart_buf & 0x0001;
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	899b      	ldrh	r3, [r3, #12]
 800073a:	b2db      	uxtb	r3, r3
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	73fb      	strb	r3, [r7, #15]
	uint8_t k1_check = (this->uart_buf >> 1) & 0x0001;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	899b      	ldrh	r3, [r3, #12]
 8000746:	105b      	asrs	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000750:	2300      	movs	r3, #0
 8000752:	737b      	strb	r3, [r7, #13]
 8000754:	7b7b      	ldrb	r3, [r7, #13]
 8000756:	2b05      	cmp	r3, #5
 8000758:	d820      	bhi.n	800079c <_ZN5AMT2117AMT21_Check_ValueEv+0x78>
		this->uart_buf = this->uart_buf >> 2;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	899b      	ldrh	r3, [r3, #12]
 800075e:	109b      	asrs	r3, r3, #2
 8000760:	b29a      	uxth	r2, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	819a      	strh	r2, [r3, #12]
		k0_check ^= this->uart_buf & 0x0001;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	899b      	ldrh	r3, [r3, #12]
 800076a:	b25b      	sxtb	r3, r3
 800076c:	f003 0301 	and.w	r3, r3, #1
 8000770:	b25a      	sxtb	r2, r3
 8000772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000776:	4053      	eors	r3, r2
 8000778:	b25b      	sxtb	r3, r3
 800077a:	73fb      	strb	r3, [r7, #15]
		k1_check ^= (this->uart_buf >> 1) & 0x0001;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	899b      	ldrh	r3, [r3, #12]
 8000780:	105b      	asrs	r3, r3, #1
 8000782:	b25b      	sxtb	r3, r3
 8000784:	f003 0301 	and.w	r3, r3, #1
 8000788:	b25a      	sxtb	r2, r3
 800078a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800078e:	4053      	eors	r3, r2
 8000790:	b25b      	sxtb	r3, r3
 8000792:	73bb      	strb	r3, [r7, #14]
	for (uint8_t i = 0; i < 6; i++) {
 8000794:	7b7b      	ldrb	r3, [r7, #13]
 8000796:	3301      	adds	r3, #1
 8000798:	737b      	strb	r3, [r7, #13]
 800079a:	e7db      	b.n	8000754 <_ZN5AMT2117AMT21_Check_ValueEv+0x30>
	}
	k0_check = !k0_check;
 800079c:	7bfb      	ldrb	r3, [r7, #15]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	bf0c      	ite	eq
 80007a2:	2301      	moveq	r3, #1
 80007a4:	2300      	movne	r3, #0
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	73fb      	strb	r3, [r7, #15]
	k1_check = !k1_check;
 80007aa:	7bbb      	ldrb	r3, [r7, #14]
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	bf0c      	ite	eq
 80007b0:	2301      	moveq	r3, #1
 80007b2:	2300      	movne	r3, #0
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	73bb      	strb	r3, [r7, #14]
	if ((this->k0 == k0_check) && (this->k1 == k1_check)) {
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	7e1b      	ldrb	r3, [r3, #24]
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	429a      	cmp	r2, r3
 80007c0:	d10a      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	7e5b      	ldrb	r3, [r3, #25]
 80007c6:	7bba      	ldrb	r2, [r7, #14]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d105      	bne.n	80007d8 <_ZN5AMT2117AMT21_Check_ValueEv+0xb4>
		this->raw_value = raw_value_temp;
 80007cc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	81da      	strh	r2, [r3, #14]
		return HAL_OK;
 80007d4:	2300      	movs	r3, #0
 80007d6:	e003      	b.n	80007e0 <_ZN5AMT2117AMT21_Check_ValueEv+0xbc>
	} else {
		this->raw_value = 0;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2200      	movs	r2, #0
 80007dc:	81da      	strh	r2, [r3, #14]
		return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
	}
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr

080007ec <_ZN5AMT2112getAngPos180Ev>:
}
int16_t AMT21::getPrevRawValue() {
	return this->prev_raw_value;
}

int16_t AMT21::getAngPos180() {
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
	return ((((this->raw_value & 0x2000) >> 13) * (-16383))
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80007fa:	b29b      	uxth	r3, r3
 80007fc:	135b      	asrs	r3, r3, #13
			+ (this->raw_value & 0x3FFF)) * -1;
 80007fe:	b29b      	uxth	r3, r3
 8000800:	f003 0301 	and.w	r3, r3, #1
 8000804:	b29b      	uxth	r3, r3
 8000806:	461a      	mov	r2, r3
 8000808:	0392      	lsls	r2, r2, #14
 800080a:	1ad3      	subs	r3, r2, r3
 800080c:	b29a      	uxth	r2, r3
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000814:	b29b      	uxth	r3, r3
 8000816:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800081a:	b29b      	uxth	r3, r3
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	b29b      	uxth	r3, r3
 8000820:	b21b      	sxth	r3, r3
}
 8000822:	4618      	mov	r0, r3
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
	...

08000830 <_ZN5AMT216unwarpEv>:
void AMT21::unwarp() {
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	int32_t dPulse = 0;
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
	if (this->raw_value - this->prev_raw_value > 8191) {
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000842:	461a      	mov	r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000850:	db0b      	blt.n	800086a <_ZN5AMT216unwarpEv+0x3a>
		dPulse = -(16383 - (this->raw_value - this->prev_raw_value));
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000858:	461a      	mov	r2, r3
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000860:	1ad2      	subs	r2, r2, r3
 8000862:	4b1b      	ldr	r3, [pc, #108]	; (80008d0 <_ZN5AMT216unwarpEv+0xa0>)
 8000864:	4413      	add	r3, r2
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	e020      	b.n	80008ac <_ZN5AMT216unwarpEv+0x7c>
	} else if (this->raw_value - this->prev_raw_value < -8191) {
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8000870:	461a      	mov	r2, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	f513 5f00 	cmn.w	r3, #8192	; 0x2000
 800087e:	dc0c      	bgt.n	800089a <_ZN5AMT216unwarpEv+0x6a>
		dPulse = 16383 - (this->prev_raw_value - this->raw_value);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000886:	461a      	mov	r2, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800088e:	1ad2      	subs	r2, r2, r3
 8000890:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8000894:	1a9b      	subs	r3, r3, r2
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	e008      	b.n	80008ac <_ZN5AMT216unwarpEv+0x7c>
	} else {
		dPulse = this->prev_raw_value - this->raw_value;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80008a0:	461a      	mov	r2, r3
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	60fb      	str	r3, [r7, #12]
	}
	this->prev_raw_value = this->raw_value;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	821a      	strh	r2, [r3, #16]
	this->unwarp_value = this->unwarp_value + dPulse;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	695a      	ldr	r2, [r3, #20]
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	441a      	add	r2, r3
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	615a      	str	r2, [r3, #20]
}
 80008c2:	bf00      	nop
 80008c4:	3714      	adds	r7, #20
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	ffffc001 	.word	0xffffc001

080008d4 <_ZN5AMT2114getUnwarpValueEv>:
int32_t AMT21::getUnwarpValue() {
 80008d4:	b480      	push	{r7}
 80008d6:	b083      	sub	sp, #12
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
	return this->unwarp_value;
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	695b      	ldr	r3, [r3, #20]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr

080008ec <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	ed87 0a01 	vstr	s0, [r7, #4]
 80008f6:	edd7 7a01 	vldr	s15, [r7, #4]
 80008fa:	eef0 7ae7 	vabs.f32	s15, s15
 80008fe:	eeb0 0a67 	vmov.f32	s0, s15
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	ed87 0a01 	vstr	s0, [r7, #4]
 8000916:	edd7 7a01 	vldr	s15, [r7, #4]
 800091a:	fef8 7a67 	vrinta.f32	s15, s15
 800091e:	eeb0 0a67 	vmov.f32	s0, s15
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: Jan 29, 2022
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_stepper_htim, uint32_t _STEPPER_TIM_CHANNEL,
 800092c:	b580      	push	{r7, lr}
 800092e:	b084      	sub	sp, #16
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
 8000938:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	4a18      	ldr	r2, [pc, #96]	; (80009a0 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 800093e:	615a      	str	r2, [r3, #20]
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	4a18      	ldr	r2, [pc, #96]	; (80009a4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8000944:	619a      	str	r2, [r3, #24]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800094c:	61da      	str	r2, [r3, #28]
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	4a15      	ldr	r2, [pc, #84]	; (80009a8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 8000952:	621a      	str	r2, [r3, #32]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800095a:	625a      	str	r2, [r3, #36]	; 0x24
	this->stepper_htim = _stepper_htim;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	68ba      	ldr	r2, [r7, #8]
 8000960:	601a      	str	r2, [r3, #0]
	this->STEPPER_TIM_CHANNEL = _STEPPER_TIM_CHANNEL;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	687a      	ldr	r2, [r7, #4]
 8000966:	605a      	str	r2, [r3, #4]
	this->stepper_htim->Instance->PSC = _PSC_STEPPER_MOTOR - 1U;
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	22c7      	movs	r2, #199	; 0xc7
 8000970:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 60.0f;
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	4a0d      	ldr	r2, [pc, #52]	; (80009ac <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>)
 8000976:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 800097c:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 800097e:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80009b0 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x84>
 8000982:	68f8      	ldr	r0, [r7, #12]
 8000984:	f000 f832 	bl	80009ec <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	683a      	ldr	r2, [r7, #0]
 800098c:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	60da      	str	r2, [r3, #12]
}
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	4618      	mov	r0, r3
 8000998:	3710      	adds	r7, #16
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	41a00000 	.word	0x41a00000
 80009a4:	469c4000 	.word	0x469c4000
 80009a8:	43480000 	.word	0x43480000
 80009ac:	42700000 	.word	0x42700000
 80009b0:	00000000 	.word	0x00000000

080009b4 <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
}
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4618      	mov	r0, r3
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr

080009ca <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b082      	sub	sp, #8
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	4619      	mov	r1, r3
 80009dc:	4610      	mov	r0, r2
 80009de:	f009 ff5d 	bl	800a89c <HAL_TIM_PWM_Start>
}
 80009e2:	bf00      	nop
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
	...

080009ec <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->stepper_htim, this->STEPPER_TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	ed2d 8b02 	vpush	{d8}
 80009f2:	b084      	sub	sp, #16
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
 80009f8:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency ;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	683a      	ldr	r2, [r7, #0]
 8000a00:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a08:	eeb0 0a67 	vmov.f32	s0, s15
 8000a0c:	f7ff ff6e 	bl	80008ec <_ZSt4fabsf>
 8000a10:	eeb0 7a40 	vmov.f32	s14, s0
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	edd3 7a05 	vldr	s15, [r3, #20]
 8000a1a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a22:	bf94      	ite	ls
 8000a24:	2301      	movls	r3, #1
 8000a26:	2300      	movhi	r3, #0
 8000a28:	b2db      	uxtb	r3, r3
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d003      	beq.n	8000a36 <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	695b      	ldr	r3, [r3, #20]
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	e01b      	b.n	8000a6e <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a3c:	eeb0 0a67 	vmov.f32	s0, s15
 8000a40:	f7ff ff54 	bl	80008ec <_ZSt4fabsf>
 8000a44:	eeb0 7a40 	vmov.f32	s14, s0
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	edd3 7a06 	vldr	s15, [r3, #24]
 8000a4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a56:	bfac      	ite	ge
 8000a58:	2301      	movge	r3, #1
 8000a5a:	2300      	movlt	r3, #0
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d003      	beq.n	8000a6a <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	699b      	ldr	r3, [r3, #24]
 8000a66:	60fb      	str	r3, [r7, #12]
 8000a68:	e001      	b.n	8000a6e <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	60fb      	str	r3, [r7, #12]

	if (this->frequency >= 0.001f) {
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a74:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8000d10 <_ZN7Stepper19StepperSetFrequencyEf+0x324>
 8000a78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a80:	f2c0 80db 	blt.w	8000c3a <_ZN7Stepper19StepperSetFrequencyEf+0x24e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	6898      	ldr	r0, [r3, #8]
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	68db      	ldr	r3, [r3, #12]
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	2201      	movs	r2, #1
 8000a90:	4619      	mov	r1, r3
 8000a92:	f007 f929 	bl	8007ce8 <HAL_GPIO_WritePin>
		this->stepper_htim->Instance->ARR = round(
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * (f))) - 1U);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	ee07 3a90 	vmov	s15, r3
 8000aa4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000aa8:	edd7 7a03 	vldr	s15, [r7, #12]
 8000aac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ab0:	eddf 6a98 	vldr	s13, [pc, #608]	; 8000d14 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8000ab4:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8000ab8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000abc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ac0:	eeb0 0a67 	vmov.f32	s0, s15
 8000ac4:	f7ff ff22 	bl	800090c <_ZSt5roundf>
 8000ac8:	eef0 7a40 	vmov.f32	s15, s0
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ad6:	ee17 2a90 	vmov	r2, s15
 8000ada:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d113      	bne.n	8000b0c <_ZN7Stepper19StepperSetFrequencyEf+0x120>
			this->stepper_htim->Instance->CCR1 = round(
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aec:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000aee:	085b      	lsrs	r3, r3, #1
 8000af0:	4618      	mov	r0, r3
 8000af2:	f000 fa59 	bl	8000fa8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000af6:	eeb0 7b40 	vmov.f64	d7, d0
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b04:	ee17 2a90 	vmov	r2, s15
 8000b08:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR4 = 0;
			this->stepper_htim->Instance->CCR5 = 0;
			this->stepper_htim->Instance->CCR6 = 0;
		}
	}
}
 8000b0a:	e1e0      	b.n	8000ece <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	2b04      	cmp	r3, #4
 8000b12:	d113      	bne.n	8000b3c <_ZN7Stepper19StepperSetFrequencyEf+0x150>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b1c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000b1e:	085b      	lsrs	r3, r3, #1
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 fa41 	bl	8000fa8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000b26:	eeb0 7b40 	vmov.f64	d7, d0
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b34:	ee17 2a90 	vmov	r2, s15
 8000b38:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b3a:	e1c8      	b.n	8000ece <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	685b      	ldr	r3, [r3, #4]
 8000b40:	2b08      	cmp	r3, #8
 8000b42:	d113      	bne.n	8000b6c <_ZN7Stepper19StepperSetFrequencyEf+0x180>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b4c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8000b4e:	085b      	lsrs	r3, r3, #1
 8000b50:	4618      	mov	r0, r3
 8000b52:	f000 fa29 	bl	8000fa8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000b56:	eeb0 7b40 	vmov.f64	d7, d0
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b64:	ee17 2a90 	vmov	r2, s15
 8000b68:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000b6a:	e1b0      	b.n	8000ece <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	2b0c      	cmp	r3, #12
 8000b72:	d113      	bne.n	8000b9c <_ZN7Stepper19StepperSetFrequencyEf+0x1b0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b7c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8000b7e:	085b      	lsrs	r3, r3, #1
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 fa11 	bl	8000fa8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000b86:	eeb0 7b40 	vmov.f64	d7, d0
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b94:	ee17 2a90 	vmov	r2, s15
 8000b98:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000b9a:	e198      	b.n	8000ece <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	2b10      	cmp	r3, #16
 8000ba2:	d113      	bne.n	8000bcc <_ZN7Stepper19StepperSetFrequencyEf+0x1e0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bac:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8000bae:	085b      	lsrs	r3, r3, #1
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f000 f9f9 	bl	8000fa8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000bb6:	eeb0 7b40 	vmov.f64	d7, d0
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bc4:	ee17 2a90 	vmov	r2, s15
 8000bc8:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000bca:	e180      	b.n	8000ece <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	2b14      	cmp	r3, #20
 8000bd2:	d113      	bne.n	8000bfc <_ZN7Stepper19StepperSetFrequencyEf+0x210>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bdc:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8000bde:	085b      	lsrs	r3, r3, #1
 8000be0:	4618      	mov	r0, r3
 8000be2:	f000 f9e1 	bl	8000fa8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000be6:	eeb0 7b40 	vmov.f64	d7, d0
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000bf4:	ee17 2a90 	vmov	r2, s15
 8000bf8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000bfa:	e168      	b.n	8000ece <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2200      	movs	r2, #0
 8000c04:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	2200      	movs	r2, #0
 8000c18:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	2200      	movs	r2, #0
 8000c22:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2200      	movs	r2, #0
 8000c36:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000c38:	e149      	b.n	8000ece <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
	} else if (this->frequency <= -0.001f) {
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	edd3 7a04 	vldr	s15, [r3, #16]
 8000c40:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000d18 <_ZN7Stepper19StepperSetFrequencyEf+0x32c>
 8000c44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c4c:	f200 80e5 	bhi.w	8000e1a <_ZN7Stepper19StepperSetFrequencyEf+0x42e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	6898      	ldr	r0, [r3, #8]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	b29b      	uxth	r3, r3
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	f007 f843 	bl	8007ce8 <HAL_GPIO_WritePin>
				(_FCY / ((this->stepper_htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	ee07 3a90 	vmov	s15, r3
 8000c70:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000c74:	ed97 0a03 	vldr	s0, [r7, #12]
 8000c78:	f7ff fe38 	bl	80008ec <_ZSt4fabsf>
 8000c7c:	eef0 7a40 	vmov.f32	s15, s0
 8000c80:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000c84:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000d14 <_ZN7Stepper19StepperSetFrequencyEf+0x328>
 8000c88:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->stepper_htim->Instance->ARR = round(
 8000c8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c90:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c94:	eeb0 0a67 	vmov.f32	s0, s15
 8000c98:	f7ff fe38 	bl	800090c <_ZSt5roundf>
 8000c9c:	eef0 7a40 	vmov.f32	s15, s0
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000caa:	ee17 2a90 	vmov	r2, s15
 8000cae:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d113      	bne.n	8000ce0 <_ZN7Stepper19StepperSetFrequencyEf+0x2f4>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR1 = round(
 8000cc2:	085b      	lsrs	r3, r3, #1
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 f96f 	bl	8000fa8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000cca:	eeb0 7b40 	vmov.f64	d7, d0
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000cd8:	ee17 2a90 	vmov	r2, s15
 8000cdc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000cde:	e0f6      	b.n	8000ece <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	685b      	ldr	r3, [r3, #4]
 8000ce4:	2b04      	cmp	r3, #4
 8000ce6:	d119      	bne.n	8000d1c <_ZN7Stepper19StepperSetFrequencyEf+0x330>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cf0:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR2 = round(
 8000cf2:	085b      	lsrs	r3, r3, #1
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f000 f957 	bl	8000fa8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000cfa:	eeb0 7b40 	vmov.f64	d7, d0
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d08:	ee17 2a90 	vmov	r2, s15
 8000d0c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000d0e:	e0de      	b.n	8000ece <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
 8000d10:	3a83126f 	.word	0x3a83126f
 8000d14:	4d64e1c0 	.word	0x4d64e1c0
 8000d18:	ba83126f 	.word	0xba83126f
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2b08      	cmp	r3, #8
 8000d22:	d113      	bne.n	8000d4c <_ZN7Stepper19StepperSetFrequencyEf+0x360>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d2c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR3 = round(
 8000d2e:	085b      	lsrs	r3, r3, #1
 8000d30:	4618      	mov	r0, r3
 8000d32:	f000 f939 	bl	8000fa8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000d36:	eeb0 7b40 	vmov.f64	d7, d0
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d44:	ee17 2a90 	vmov	r2, s15
 8000d48:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000d4a:	e0c0      	b.n	8000ece <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2b0c      	cmp	r3, #12
 8000d52:	d113      	bne.n	8000d7c <_ZN7Stepper19StepperSetFrequencyEf+0x390>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d5c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR4 = round(
 8000d5e:	085b      	lsrs	r3, r3, #1
 8000d60:	4618      	mov	r0, r3
 8000d62:	f000 f921 	bl	8000fa8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000d66:	eeb0 7b40 	vmov.f64	d7, d0
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000d74:	ee17 2a90 	vmov	r2, s15
 8000d78:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000d7a:	e0a8      	b.n	8000ece <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	2b10      	cmp	r3, #16
 8000d82:	d113      	bne.n	8000dac <_ZN7Stepper19StepperSetFrequencyEf+0x3c0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d8c:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR5 = round(
 8000d8e:	085b      	lsrs	r3, r3, #1
 8000d90:	4618      	mov	r0, r3
 8000d92:	f000 f909 	bl	8000fa8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000d96:	eeb0 7b40 	vmov.f64	d7, d0
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000da4:	ee17 2a90 	vmov	r2, s15
 8000da8:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000daa:	e090      	b.n	8000ece <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b14      	cmp	r3, #20
 8000db2:	d113      	bne.n	8000ddc <_ZN7Stepper19StepperSetFrequencyEf+0x3f0>
					(this->stepper_htim->Instance->ARR + 1U) / 2U);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dbc:	3301      	adds	r3, #1
			this->stepper_htim->Instance->CCR6 = round(
 8000dbe:	085b      	lsrs	r3, r3, #1
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f000 f8f1 	bl	8000fa8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000dc6:	eeb0 7b40 	vmov.f64	d7, d0
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000dd4:	ee17 2a90 	vmov	r2, s15
 8000dd8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000dda:	e078      	b.n	8000ece <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2200      	movs	r2, #0
 8000de4:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2200      	movs	r2, #0
 8000dee:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2200      	movs	r2, #0
 8000df8:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2200      	movs	r2, #0
 8000e02:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2200      	movs	r2, #0
 8000e16:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000e18:	e059      	b.n	8000ece <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_1) {
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d105      	bne.n	8000e2e <_ZN7Stepper19StepperSetFrequencyEf+0x442>
			this->stepper_htim->Instance->CCR1 = 0;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e2c:	e04f      	b.n	8000ece <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_2) {
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	2b04      	cmp	r3, #4
 8000e34:	d105      	bne.n	8000e42 <_ZN7Stepper19StepperSetFrequencyEf+0x456>
			this->stepper_htim->Instance->CCR2 = 0;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000e40:	e045      	b.n	8000ece <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_3) {
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	685b      	ldr	r3, [r3, #4]
 8000e46:	2b08      	cmp	r3, #8
 8000e48:	d105      	bne.n	8000e56 <_ZN7Stepper19StepperSetFrequencyEf+0x46a>
			this->stepper_htim->Instance->CCR3 = 0;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2200      	movs	r2, #0
 8000e52:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e54:	e03b      	b.n	8000ece <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_4) {
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	2b0c      	cmp	r3, #12
 8000e5c:	d105      	bne.n	8000e6a <_ZN7Stepper19StepperSetFrequencyEf+0x47e>
			this->stepper_htim->Instance->CCR4 = 0;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2200      	movs	r2, #0
 8000e66:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000e68:	e031      	b.n	8000ece <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_5) {
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	2b10      	cmp	r3, #16
 8000e70:	d105      	bne.n	8000e7e <_ZN7Stepper19StepperSetFrequencyEf+0x492>
			this->stepper_htim->Instance->CCR5 = 0;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2200      	movs	r2, #0
 8000e7a:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000e7c:	e027      	b.n	8000ece <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
		else if (this->STEPPER_TIM_CHANNEL == TIM_CHANNEL_6) {
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	2b14      	cmp	r3, #20
 8000e84:	d105      	bne.n	8000e92 <_ZN7Stepper19StepperSetFrequencyEf+0x4a6>
			this->stepper_htim->Instance->CCR6 = 0;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000e90:	e01d      	b.n	8000ece <_ZN7Stepper19StepperSetFrequencyEf+0x4e2>
			this->stepper_htim->Instance->CCR1 = 0;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2200      	movs	r2, #0
 8000e9a:	635a      	str	r2, [r3, #52]	; 0x34
			this->stepper_htim->Instance->CCR2 = 0;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	639a      	str	r2, [r3, #56]	; 0x38
			this->stepper_htim->Instance->CCR3 = 0;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2200      	movs	r2, #0
 8000eae:	63da      	str	r2, [r3, #60]	; 0x3c
			this->stepper_htim->Instance->CCR4 = 0;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	641a      	str	r2, [r3, #64]	; 0x40
			this->stepper_htim->Instance->CCR5 = 0;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	659a      	str	r2, [r3, #88]	; 0x58
			this->stepper_htim->Instance->CCR6 = 0;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2200      	movs	r2, #0
 8000ecc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	ecbd 8b02 	vpop	{d8}
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop

08000edc <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 8000ee8:	ed97 0a00 	vldr	s0, [r7]
 8000eec:	f7ff fcfe 	bl	80008ec <_ZSt4fabsf>
 8000ef0:	eef0 7a40 	vmov.f32	s15, s0
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	4603      	mov	r3, r0
 8000f0a:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	ee07 3a90 	vmov	s15, r3
 8000f12:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000f16:	eeb0 0b47 	vmov.f64	d0, d7
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff ffe5 	bl	8000f02 <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000f38:	eeb0 7b40 	vmov.f64	d7, d0
 8000f3c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <_ZN7Stepper20StepperOpenLoopSpeedEf>:
void Stepper::StepperOpenLoopSpeed(float _speed) {
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	ed87 0a00 	vstr	s0, [r7]
//	if (_speed > -0.07853981634f && _speed < 0.07853981634f) { // upper than abs(-20Hz) and lower than 20Hz
//		this->StepperSetFrequency(0.0f);
//	} else {
		this->StepperSetFrequency(
				(float) (_speed * this->microStep * this->ratio * this->SPR * 1
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	ed93 7a07 	vldr	s14, [r3, #28]
 8000f62:	edd7 7a00 	vldr	s15, [r7]
 8000f66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8000f70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	edd3 7a08 	vldr	s15, [r3, #32]
 8000f7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f7e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
						/ (2.0f * PI)));
 8000f82:	ed9f 5b07 	vldr	d5, [pc, #28]	; 8000fa0 <_ZN7Stepper20StepperOpenLoopSpeedEf+0x50>
 8000f86:	ee86 7b05 	vdiv.f64	d7, d6, d5
		this->StepperSetFrequency(
 8000f8a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff fd2a 	bl	80009ec <_ZN7Stepper19StepperSetFrequencyEf>
//	}
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	54442eea 	.word	0x54442eea
 8000fa4:	401921fb 	.word	0x401921fb

08000fa8 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	ee07 3a90 	vmov	s15, r3
 8000fb6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000fba:	eeb0 0b47 	vmov.f64	d0, d7
 8000fbe:	370c      	adds	r7, #12
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc6:	4770      	bx	lr

08000fc8 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000fcc:	4b13      	ldr	r3, [pc, #76]	; (800101c <MX_CRC_Init+0x54>)
 8000fce:	4a14      	ldr	r2, [pc, #80]	; (8001020 <MX_CRC_Init+0x58>)
 8000fd0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_DISABLE;
 8000fd2:	4b12      	ldr	r3, [pc, #72]	; (800101c <MX_CRC_Init+0x54>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8000fd8:	4b10      	ldr	r3, [pc, #64]	; (800101c <MX_CRC_Init+0x54>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.GeneratingPolynomial = 32773;
 8000fde:	4b0f      	ldr	r3, [pc, #60]	; (800101c <MX_CRC_Init+0x54>)
 8000fe0:	f248 0205 	movw	r2, #32773	; 0x8005
 8000fe4:	609a      	str	r2, [r3, #8]
  hcrc.Init.CRCLength = CRC_POLYLENGTH_16B;
 8000fe6:	4b0d      	ldr	r3, [pc, #52]	; (800101c <MX_CRC_Init+0x54>)
 8000fe8:	2208      	movs	r2, #8
 8000fea:	60da      	str	r2, [r3, #12]
  hcrc.Init.InitValue = 0xFFFF;
 8000fec:	4b0b      	ldr	r3, [pc, #44]	; (800101c <MX_CRC_Init+0x54>)
 8000fee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ff2:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_BYTE;
 8000ff4:	4b09      	ldr	r3, [pc, #36]	; (800101c <MX_CRC_Init+0x54>)
 8000ff6:	2220      	movs	r2, #32
 8000ff8:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_ENABLE;
 8000ffa:	4b08      	ldr	r3, [pc, #32]	; (800101c <MX_CRC_Init+0x54>)
 8000ffc:	2280      	movs	r2, #128	; 0x80
 8000ffe:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001000:	4b06      	ldr	r3, [pc, #24]	; (800101c <MX_CRC_Init+0x54>)
 8001002:	2201      	movs	r2, #1
 8001004:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001006:	4805      	ldr	r0, [pc, #20]	; (800101c <MX_CRC_Init+0x54>)
 8001008:	f003 fc86 	bl	8004918 <HAL_CRC_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_CRC_Init+0x4e>
  {
    Error_Handler();
 8001012:	f001 fd15 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8001016:	bf00      	nop
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	2400052c 	.word	0x2400052c
 8001020:	58024c00 	.word	0x58024c00

08001024 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0b      	ldr	r2, [pc, #44]	; (8001060 <HAL_CRC_MspInit+0x3c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d10e      	bne.n	8001054 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <HAL_CRC_MspInit+0x40>)
 8001038:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800103c:	4a09      	ldr	r2, [pc, #36]	; (8001064 <HAL_CRC_MspInit+0x40>)
 800103e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001042:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <HAL_CRC_MspInit+0x40>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800104c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8001054:	bf00      	nop
 8001056:	3714      	adds	r7, #20
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	58024c00 	.word	0x58024c00
 8001064:	58024400 	.word	0x58024400

08001068 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <MX_DMA_Init+0x7c>)
 8001070:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001074:	4a1b      	ldr	r2, [pc, #108]	; (80010e4 <MX_DMA_Init+0x7c>)
 8001076:	f043 0301 	orr.w	r3, r3, #1
 800107a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800107e:	4b19      	ldr	r3, [pc, #100]	; (80010e4 <MX_DMA_Init+0x7c>)
 8001080:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	607b      	str	r3, [r7, #4]
 800108a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800108c:	2200      	movs	r2, #0
 800108e:	2100      	movs	r1, #0
 8001090:	200b      	movs	r0, #11
 8001092:	f003 fc00 	bl	8004896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001096:	200b      	movs	r0, #11
 8001098:	f003 fc17 	bl	80048ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800109c:	2200      	movs	r2, #0
 800109e:	2100      	movs	r1, #0
 80010a0:	200c      	movs	r0, #12
 80010a2:	f003 fbf8 	bl	8004896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80010a6:	200c      	movs	r0, #12
 80010a8:	f003 fc0f 	bl	80048ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80010ac:	2200      	movs	r2, #0
 80010ae:	2100      	movs	r1, #0
 80010b0:	200d      	movs	r0, #13
 80010b2:	f003 fbf0 	bl	8004896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80010b6:	200d      	movs	r0, #13
 80010b8:	f003 fc07 	bl	80048ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 80010bc:	2200      	movs	r2, #0
 80010be:	2100      	movs	r1, #0
 80010c0:	200e      	movs	r0, #14
 80010c2:	f003 fbe8 	bl	8004896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80010c6:	200e      	movs	r0, #14
 80010c8:	f003 fbff 	bl	80048ca <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80010cc:	2200      	movs	r2, #0
 80010ce:	2100      	movs	r1, #0
 80010d0:	200f      	movs	r0, #15
 80010d2:	f003 fbe0 	bl	8004896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80010d6:	200f      	movs	r0, #15
 80010d8:	f003 fbf7 	bl	80048ca <HAL_NVIC_EnableIRQ>

}
 80010dc:	bf00      	nop
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	58024400 	.word	0x58024400

080010e8 <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08c      	sub	sp, #48	; 0x30
 80010ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ee:	f107 031c 	add.w	r3, r7, #28
 80010f2:	2200      	movs	r2, #0
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	605a      	str	r2, [r3, #4]
 80010f8:	609a      	str	r2, [r3, #8]
 80010fa:	60da      	str	r2, [r3, #12]
 80010fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010fe:	4b8e      	ldr	r3, [pc, #568]	; (8001338 <MX_GPIO_Init+0x250>)
 8001100:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001104:	4a8c      	ldr	r2, [pc, #560]	; (8001338 <MX_GPIO_Init+0x250>)
 8001106:	f043 0310 	orr.w	r3, r3, #16
 800110a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800110e:	4b8a      	ldr	r3, [pc, #552]	; (8001338 <MX_GPIO_Init+0x250>)
 8001110:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001114:	f003 0310 	and.w	r3, r3, #16
 8001118:	61bb      	str	r3, [r7, #24]
 800111a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800111c:	4b86      	ldr	r3, [pc, #536]	; (8001338 <MX_GPIO_Init+0x250>)
 800111e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001122:	4a85      	ldr	r2, [pc, #532]	; (8001338 <MX_GPIO_Init+0x250>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800112c:	4b82      	ldr	r3, [pc, #520]	; (8001338 <MX_GPIO_Init+0x250>)
 800112e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800113a:	4b7f      	ldr	r3, [pc, #508]	; (8001338 <MX_GPIO_Init+0x250>)
 800113c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001140:	4a7d      	ldr	r2, [pc, #500]	; (8001338 <MX_GPIO_Init+0x250>)
 8001142:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001146:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800114a:	4b7b      	ldr	r3, [pc, #492]	; (8001338 <MX_GPIO_Init+0x250>)
 800114c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001150:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001158:	4b77      	ldr	r3, [pc, #476]	; (8001338 <MX_GPIO_Init+0x250>)
 800115a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800115e:	4a76      	ldr	r2, [pc, #472]	; (8001338 <MX_GPIO_Init+0x250>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001168:	4b73      	ldr	r3, [pc, #460]	; (8001338 <MX_GPIO_Init+0x250>)
 800116a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001176:	4b70      	ldr	r3, [pc, #448]	; (8001338 <MX_GPIO_Init+0x250>)
 8001178:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800117c:	4a6e      	ldr	r2, [pc, #440]	; (8001338 <MX_GPIO_Init+0x250>)
 800117e:	f043 0302 	orr.w	r3, r3, #2
 8001182:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001186:	4b6c      	ldr	r3, [pc, #432]	; (8001338 <MX_GPIO_Init+0x250>)
 8001188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800118c:	f003 0302 	and.w	r3, r3, #2
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001194:	4b68      	ldr	r3, [pc, #416]	; (8001338 <MX_GPIO_Init+0x250>)
 8001196:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119a:	4a67      	ldr	r2, [pc, #412]	; (8001338 <MX_GPIO_Init+0x250>)
 800119c:	f043 0308 	orr.w	r3, r3, #8
 80011a0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a4:	4b64      	ldr	r3, [pc, #400]	; (8001338 <MX_GPIO_Init+0x250>)
 80011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011aa:	f003 0308 	and.w	r3, r3, #8
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011b2:	4b61      	ldr	r3, [pc, #388]	; (8001338 <MX_GPIO_Init+0x250>)
 80011b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011b8:	4a5f      	ldr	r2, [pc, #380]	; (8001338 <MX_GPIO_Init+0x250>)
 80011ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c2:	4b5d      	ldr	r3, [pc, #372]	; (8001338 <MX_GPIO_Init+0x250>)
 80011c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011cc:	603b      	str	r3, [r7, #0]
 80011ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 80011d0:	2200      	movs	r2, #0
 80011d2:	f644 2121 	movw	r1, #18977	; 0x4a21
 80011d6:	4859      	ldr	r0, [pc, #356]	; (800133c <MX_GPIO_Init+0x254>)
 80011d8:	f006 fd86 	bl	8007ce8 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011dc:	2200      	movs	r2, #0
 80011de:	f24c 0102 	movw	r1, #49154	; 0xc002
 80011e2:	4857      	ldr	r0, [pc, #348]	; (8001340 <MX_GPIO_Init+0x258>)
 80011e4:	f006 fd80 	bl	8007ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80011e8:	2200      	movs	r2, #0
 80011ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ee:	4855      	ldr	r0, [pc, #340]	; (8001344 <MX_GPIO_Init+0x25c>)
 80011f0:	f006 fd7a 	bl	8007ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 80011f4:	2200      	movs	r2, #0
 80011f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011fa:	4853      	ldr	r0, [pc, #332]	; (8001348 <MX_GPIO_Init+0x260>)
 80011fc:	f006 fd74 	bl	8007ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 8001200:	2200      	movs	r2, #0
 8001202:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001206:	4851      	ldr	r0, [pc, #324]	; (800134c <MX_GPIO_Init+0x264>)
 8001208:	f006 fd6e 	bl	8007ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Blue_Button_Pin_Pin;
 800120c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001212:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_Pin_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4619      	mov	r1, r3
 8001222:	4849      	ldr	r0, [pc, #292]	; (8001348 <MX_GPIO_Init+0x260>)
 8001224:	f006 fbb0 	bl	8007988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001228:	f644 2321 	movw	r3, #18977	; 0x4a21
 800122c:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800122e:	2301      	movs	r3, #1
 8001230:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001236:	2300      	movs	r3, #0
 8001238:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123a:	f107 031c 	add.w	r3, r7, #28
 800123e:	4619      	mov	r1, r3
 8001240:	483e      	ldr	r0, [pc, #248]	; (800133c <MX_GPIO_Init+0x254>)
 8001242:	f006 fba1 	bl	8007988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 8001246:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800124a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800124c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001250:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	4619      	mov	r1, r3
 800125c:	4838      	ldr	r0, [pc, #224]	; (8001340 <MX_GPIO_Init+0x258>)
 800125e:	f006 fb93 	bl	8007988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8001262:	f24c 0302 	movw	r3, #49154	; 0xc002
 8001266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001268:	2301      	movs	r3, #1
 800126a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001274:	f107 031c 	add.w	r3, r7, #28
 8001278:	4619      	mov	r1, r3
 800127a:	4831      	ldr	r0, [pc, #196]	; (8001340 <MX_GPIO_Init+0x258>)
 800127c:	f006 fb84 	bl	8007988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001280:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001286:	2301      	movs	r3, #1
 8001288:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	4619      	mov	r1, r3
 8001298:	482a      	ldr	r0, [pc, #168]	; (8001344 <MX_GPIO_Init+0x25c>)
 800129a:	f006 fb75 	bl	8007988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 800129e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a4:	2301      	movs	r3, #1
 80012a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	4824      	ldr	r0, [pc, #144]	; (8001348 <MX_GPIO_Init+0x260>)
 80012b8:	f006 fb66 	bl	8007988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 80012bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ca:	2300      	movs	r3, #0
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 80012ce:	f107 031c 	add.w	r3, r7, #28
 80012d2:	4619      	mov	r1, r3
 80012d4:	481d      	ldr	r0, [pc, #116]	; (800134c <MX_GPIO_Init+0x264>)
 80012d6:	f006 fb57 	bl	8007988 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LM5_Pin;
 80012da:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012e0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 80012ea:	f107 031c 	add.w	r3, r7, #28
 80012ee:	4619      	mov	r1, r3
 80012f0:	4817      	ldr	r0, [pc, #92]	; (8001350 <MX_GPIO_Init+0x268>)
 80012f2:	f006 fb49 	bl	8007988 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 80012f6:	23c0      	movs	r3, #192	; 0xc0
 80012f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f107 031c 	add.w	r3, r7, #28
 8001308:	4619      	mov	r1, r3
 800130a:	480c      	ldr	r0, [pc, #48]	; (800133c <MX_GPIO_Init+0x254>)
 800130c:	f006 fb3c 	bl	8007988 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001310:	2200      	movs	r2, #0
 8001312:	2100      	movs	r1, #0
 8001314:	2017      	movs	r0, #23
 8001316:	f003 fabe 	bl	8004896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800131a:	2017      	movs	r0, #23
 800131c:	f003 fad5 	bl	80048ca <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001320:	2200      	movs	r2, #0
 8001322:	2100      	movs	r1, #0
 8001324:	2028      	movs	r0, #40	; 0x28
 8001326:	f003 fab6 	bl	8004896 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800132a:	2028      	movs	r0, #40	; 0x28
 800132c:	f003 facd 	bl	80048ca <HAL_NVIC_EnableIRQ>

}
 8001330:	bf00      	nop
 8001332:	3730      	adds	r7, #48	; 0x30
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	58024400 	.word	0x58024400
 800133c:	58020400 	.word	0x58020400
 8001340:	58021000 	.word	0x58021000
 8001344:	58020c00 	.word	0x58020c00
 8001348:	58020800 	.word	0x58020800
 800134c:	58020000 	.word	0x58020000
 8001350:	58021800 	.word	0x58021800

08001354 <HAL_UARTEx_RxEventCallback>:
#define Rx_BUFFER_SIZE   20
uint8_t Old_Rx_Buffer[Rx_BUFFER_SIZE] = {0};
uint8_t New_Rx_Buffer[Rx_BUFFER_SIZE] = {0};
volatile uint16_t cmdDataSize = 0;

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001354:	b5b0      	push	{r4, r5, r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	807b      	strh	r3, [r7, #2]
	if (huart == &huart3) {
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4a99      	ldr	r2, [pc, #612]	; (80015c8 <HAL_UARTEx_RxEventCallback+0x274>)
 8001364:	4293      	cmp	r3, r2
 8001366:	f040 8216 	bne.w	8001796 <HAL_UARTEx_RxEventCallback+0x442>
		memcpy(Old_Rx_Buffer, &New_Rx_Buffer, Rx_BUFFER_SIZE);	// Keep buffer.
 800136a:	4a98      	ldr	r2, [pc, #608]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 800136c:	4b98      	ldr	r3, [pc, #608]	; (80015d0 <HAL_UARTEx_RxEventCallback+0x27c>)
 800136e:	4614      	mov	r4, r2
 8001370:	461d      	mov	r5, r3
 8001372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001376:	682b      	ldr	r3, [r5, #0]
 8001378:	6023      	str	r3, [r4, #0]
		memset(New_Rx_Buffer, 0, Rx_BUFFER_SIZE);	// Clear received data.
 800137a:	2214      	movs	r2, #20
 800137c:	2100      	movs	r1, #0
 800137e:	4894      	ldr	r0, [pc, #592]	; (80015d0 <HAL_UARTEx_RxEventCallback+0x27c>)
 8001380:	f00d f9a6 	bl	800e6d0 <memset>
		if(Size - 2 > 0 && Size <= Rx_BUFFER_SIZE){	// Check if there's some data.
 8001384:	887b      	ldrh	r3, [r7, #2]
 8001386:	2b02      	cmp	r3, #2
 8001388:	f240 818c 	bls.w	80016a4 <HAL_UARTEx_RxEventCallback+0x350>
 800138c:	887b      	ldrh	r3, [r7, #2]
 800138e:	2b14      	cmp	r3, #20
 8001390:	f200 8188 	bhi.w	80016a4 <HAL_UARTEx_RxEventCallback+0x350>
			cmdDataSize = Size - 2;	// Calculate data length.
 8001394:	887b      	ldrh	r3, [r7, #2]
 8001396:	3b02      	subs	r3, #2
 8001398:	b29a      	uxth	r2, r3
 800139a:	4b8e      	ldr	r3, [pc, #568]	; (80015d4 <HAL_UARTEx_RxEventCallback+0x280>)
 800139c:	801a      	strh	r2, [r3, #0]
			CRCValue = HAL_CRC_Calculate(&hcrc, (uint32_t *)Old_Rx_Buffer, cmdDataSize); // Calculate data only by STM32 Hardware CRC.
 800139e:	4b8d      	ldr	r3, [pc, #564]	; (80015d4 <HAL_UARTEx_RxEventCallback+0x280>)
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	461a      	mov	r2, r3
 80013a6:	4989      	ldr	r1, [pc, #548]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 80013a8:	488b      	ldr	r0, [pc, #556]	; (80015d8 <HAL_UARTEx_RxEventCallback+0x284>)
 80013aa:	f003 fb19 	bl	80049e0 <HAL_CRC_Calculate>
 80013ae:	4603      	mov	r3, r0
 80013b0:	b29a      	uxth	r2, r3
 80013b2:	4b8a      	ldr	r3, [pc, #552]	; (80015dc <HAL_UARTEx_RxEventCallback+0x288>)
 80013b4:	801a      	strh	r2, [r3, #0]
			ExpectedCRCValue = Old_Rx_Buffer[cmdDataSize] << 8 | Old_Rx_Buffer[cmdDataSize+1]; // Read Expected CRC from Protocol.
 80013b6:	4b87      	ldr	r3, [pc, #540]	; (80015d4 <HAL_UARTEx_RxEventCallback+0x280>)
 80013b8:	881b      	ldrh	r3, [r3, #0]
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	461a      	mov	r2, r3
 80013be:	4b83      	ldr	r3, [pc, #524]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 80013c0:	5c9b      	ldrb	r3, [r3, r2]
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	4b83      	ldr	r3, [pc, #524]	; (80015d4 <HAL_UARTEx_RxEventCallback+0x280>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	3301      	adds	r3, #1
 80013ce:	497f      	ldr	r1, [pc, #508]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 80013d0:	5ccb      	ldrb	r3, [r1, r3]
 80013d2:	b21b      	sxth	r3, r3
 80013d4:	4313      	orrs	r3, r2
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	b29a      	uxth	r2, r3
 80013da:	4b81      	ldr	r3, [pc, #516]	; (80015e0 <HAL_UARTEx_RxEventCallback+0x28c>)
 80013dc:	801a      	strh	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80013de:	4b7f      	ldr	r3, [pc, #508]	; (80015dc <HAL_UARTEx_RxEventCallback+0x288>)
 80013e0:	881b      	ldrh	r3, [r3, #0]
 80013e2:	b29a      	uxth	r2, r3
 80013e4:	4b7e      	ldr	r3, [pc, #504]	; (80015e0 <HAL_UARTEx_RxEventCallback+0x28c>)
 80013e6:	881b      	ldrh	r3, [r3, #0]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	429a      	cmp	r2, r3
 80013ec:	bf0c      	ite	eq
 80013ee:	2301      	moveq	r3, #1
 80013f0:	2300      	movne	r3, #0
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 8144 	beq.w	8001682 <HAL_UARTEx_RxEventCallback+0x32e>
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80013fa:	2201      	movs	r2, #1
 80013fc:	2102      	movs	r1, #2
 80013fe:	4879      	ldr	r0, [pc, #484]	; (80015e4 <HAL_UARTEx_RxEventCallback+0x290>)
 8001400:	f006 fc72 	bl	8007ce8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001404:	2200      	movs	r2, #0
 8001406:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800140a:	4877      	ldr	r0, [pc, #476]	; (80015e8 <HAL_UARTEx_RxEventCallback+0x294>)
 800140c:	f006 fc6c 	bl	8007ce8 <HAL_GPIO_WritePin>
				if(Old_Rx_Buffer[0] == 0x41 && cmdDataSize == 3){	// Joint Jog q1
 8001410:	4b6e      	ldr	r3, [pc, #440]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	2b41      	cmp	r3, #65	; 0x41
 8001416:	d106      	bne.n	8001426 <HAL_UARTEx_RxEventCallback+0xd2>
 8001418:	4b6e      	ldr	r3, [pc, #440]	; (80015d4 <HAL_UARTEx_RxEventCallback+0x280>)
 800141a:	881b      	ldrh	r3, [r3, #0]
 800141c:	b29b      	uxth	r3, r3
 800141e:	2b03      	cmp	r3, #3
 8001420:	d101      	bne.n	8001426 <HAL_UARTEx_RxEventCallback+0xd2>
 8001422:	2301      	movs	r3, #1
 8001424:	e000      	b.n	8001428 <HAL_UARTEx_RxEventCallback+0xd4>
 8001426:	2300      	movs	r3, #0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d00b      	beq.n	8001444 <HAL_UARTEx_RxEventCallback+0xf0>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 800142c:	4b67      	ldr	r3, [pc, #412]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 800142e:	785b      	ldrb	r3, [r3, #1]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	b25a      	sxtb	r2, r3
 8001434:	4b65      	ldr	r3, [pc, #404]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 8001436:	789b      	ldrb	r3, [r3, #2]
 8001438:	b25b      	sxtb	r3, r3
 800143a:	4313      	orrs	r3, r2
 800143c:	b25a      	sxtb	r2, r3
 800143e:	4b6b      	ldr	r3, [pc, #428]	; (80015ec <HAL_UARTEx_RxEventCallback+0x298>)
 8001440:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 8001442:	e140      	b.n	80016c6 <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x42 && cmdDataSize == 3){	// Joint Jog q2
 8001444:	4b61      	ldr	r3, [pc, #388]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b42      	cmp	r3, #66	; 0x42
 800144a:	d106      	bne.n	800145a <HAL_UARTEx_RxEventCallback+0x106>
 800144c:	4b61      	ldr	r3, [pc, #388]	; (80015d4 <HAL_UARTEx_RxEventCallback+0x280>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	b29b      	uxth	r3, r3
 8001452:	2b03      	cmp	r3, #3
 8001454:	d101      	bne.n	800145a <HAL_UARTEx_RxEventCallback+0x106>
 8001456:	2301      	movs	r3, #1
 8001458:	e000      	b.n	800145c <HAL_UARTEx_RxEventCallback+0x108>
 800145a:	2300      	movs	r3, #0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d00b      	beq.n	8001478 <HAL_UARTEx_RxEventCallback+0x124>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq2 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001460:	4b5a      	ldr	r3, [pc, #360]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 8001462:	785b      	ldrb	r3, [r3, #1]
 8001464:	021b      	lsls	r3, r3, #8
 8001466:	b25a      	sxtb	r2, r3
 8001468:	4b58      	ldr	r3, [pc, #352]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 800146a:	789b      	ldrb	r3, [r3, #2]
 800146c:	b25b      	sxtb	r3, r3
 800146e:	4313      	orrs	r3, r2
 8001470:	b25a      	sxtb	r2, r3
 8001472:	4b5f      	ldr	r3, [pc, #380]	; (80015f0 <HAL_UARTEx_RxEventCallback+0x29c>)
 8001474:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 8001476:	e126      	b.n	80016c6 <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x43 && cmdDataSize == 3){	// Joint Jog q3
 8001478:	4b54      	ldr	r3, [pc, #336]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b43      	cmp	r3, #67	; 0x43
 800147e:	d106      	bne.n	800148e <HAL_UARTEx_RxEventCallback+0x13a>
 8001480:	4b54      	ldr	r3, [pc, #336]	; (80015d4 <HAL_UARTEx_RxEventCallback+0x280>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	b29b      	uxth	r3, r3
 8001486:	2b03      	cmp	r3, #3
 8001488:	d101      	bne.n	800148e <HAL_UARTEx_RxEventCallback+0x13a>
 800148a:	2301      	movs	r3, #1
 800148c:	e000      	b.n	8001490 <HAL_UARTEx_RxEventCallback+0x13c>
 800148e:	2300      	movs	r3, #0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d00b      	beq.n	80014ac <HAL_UARTEx_RxEventCallback+0x158>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq3 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001494:	4b4d      	ldr	r3, [pc, #308]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 8001496:	785b      	ldrb	r3, [r3, #1]
 8001498:	021b      	lsls	r3, r3, #8
 800149a:	b25a      	sxtb	r2, r3
 800149c:	4b4b      	ldr	r3, [pc, #300]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 800149e:	789b      	ldrb	r3, [r3, #2]
 80014a0:	b25b      	sxtb	r3, r3
 80014a2:	4313      	orrs	r3, r2
 80014a4:	b25a      	sxtb	r2, r3
 80014a6:	4b53      	ldr	r3, [pc, #332]	; (80015f4 <HAL_UARTEx_RxEventCallback+0x2a0>)
 80014a8:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80014aa:	e10c      	b.n	80016c6 <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x44 && cmdDataSize == 3){	// Joint Jog q4
 80014ac:	4b47      	ldr	r3, [pc, #284]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b44      	cmp	r3, #68	; 0x44
 80014b2:	d106      	bne.n	80014c2 <HAL_UARTEx_RxEventCallback+0x16e>
 80014b4:	4b47      	ldr	r3, [pc, #284]	; (80015d4 <HAL_UARTEx_RxEventCallback+0x280>)
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	b29b      	uxth	r3, r3
 80014ba:	2b03      	cmp	r3, #3
 80014bc:	d101      	bne.n	80014c2 <HAL_UARTEx_RxEventCallback+0x16e>
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <HAL_UARTEx_RxEventCallback+0x170>
 80014c2:	2300      	movs	r3, #0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d00b      	beq.n	80014e0 <HAL_UARTEx_RxEventCallback+0x18c>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq4 = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 80014c8:	4b40      	ldr	r3, [pc, #256]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 80014ca:	785b      	ldrb	r3, [r3, #1]
 80014cc:	021b      	lsls	r3, r3, #8
 80014ce:	b25a      	sxtb	r2, r3
 80014d0:	4b3e      	ldr	r3, [pc, #248]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 80014d2:	789b      	ldrb	r3, [r3, #2]
 80014d4:	b25b      	sxtb	r3, r3
 80014d6:	4313      	orrs	r3, r2
 80014d8:	b25a      	sxtb	r2, r3
 80014da:	4b47      	ldr	r3, [pc, #284]	; (80015f8 <HAL_UARTEx_RxEventCallback+0x2a4>)
 80014dc:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80014de:	e0f2      	b.n	80016c6 <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x51 && cmdDataSize == 3){	// Linear Jog X
 80014e0:	4b3a      	ldr	r3, [pc, #232]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b51      	cmp	r3, #81	; 0x51
 80014e6:	d106      	bne.n	80014f6 <HAL_UARTEx_RxEventCallback+0x1a2>
 80014e8:	4b3a      	ldr	r3, [pc, #232]	; (80015d4 <HAL_UARTEx_RxEventCallback+0x280>)
 80014ea:	881b      	ldrh	r3, [r3, #0]
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	2b03      	cmp	r3, #3
 80014f0:	d101      	bne.n	80014f6 <HAL_UARTEx_RxEventCallback+0x1a2>
 80014f2:	2301      	movs	r3, #1
 80014f4:	e000      	b.n	80014f8 <HAL_UARTEx_RxEventCallback+0x1a4>
 80014f6:	2300      	movs	r3, #0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d00b      	beq.n	8001514 <HAL_UARTEx_RxEventCallback+0x1c0>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dx = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 80014fc:	4b33      	ldr	r3, [pc, #204]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 80014fe:	785b      	ldrb	r3, [r3, #1]
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	b25a      	sxtb	r2, r3
 8001504:	4b31      	ldr	r3, [pc, #196]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 8001506:	789b      	ldrb	r3, [r3, #2]
 8001508:	b25b      	sxtb	r3, r3
 800150a:	4313      	orrs	r3, r2
 800150c:	b25a      	sxtb	r2, r3
 800150e:	4b3b      	ldr	r3, [pc, #236]	; (80015fc <HAL_UARTEx_RxEventCallback+0x2a8>)
 8001510:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 8001512:	e0d8      	b.n	80016c6 <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x52 && cmdDataSize == 3){	// Linear Jog Y
 8001514:	4b2d      	ldr	r3, [pc, #180]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	2b52      	cmp	r3, #82	; 0x52
 800151a:	d106      	bne.n	800152a <HAL_UARTEx_RxEventCallback+0x1d6>
 800151c:	4b2d      	ldr	r3, [pc, #180]	; (80015d4 <HAL_UARTEx_RxEventCallback+0x280>)
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	b29b      	uxth	r3, r3
 8001522:	2b03      	cmp	r3, #3
 8001524:	d101      	bne.n	800152a <HAL_UARTEx_RxEventCallback+0x1d6>
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <HAL_UARTEx_RxEventCallback+0x1d8>
 800152a:	2300      	movs	r3, #0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d00b      	beq.n	8001548 <HAL_UARTEx_RxEventCallback+0x1f4>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dy = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001530:	4b26      	ldr	r3, [pc, #152]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 8001532:	785b      	ldrb	r3, [r3, #1]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	b25a      	sxtb	r2, r3
 8001538:	4b24      	ldr	r3, [pc, #144]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 800153a:	789b      	ldrb	r3, [r3, #2]
 800153c:	b25b      	sxtb	r3, r3
 800153e:	4313      	orrs	r3, r2
 8001540:	b25a      	sxtb	r2, r3
 8001542:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <HAL_UARTEx_RxEventCallback+0x2ac>)
 8001544:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 8001546:	e0be      	b.n	80016c6 <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x53 && cmdDataSize == 3){	// Linear Jog Z
 8001548:	4b20      	ldr	r3, [pc, #128]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b53      	cmp	r3, #83	; 0x53
 800154e:	d106      	bne.n	800155e <HAL_UARTEx_RxEventCallback+0x20a>
 8001550:	4b20      	ldr	r3, [pc, #128]	; (80015d4 <HAL_UARTEx_RxEventCallback+0x280>)
 8001552:	881b      	ldrh	r3, [r3, #0]
 8001554:	b29b      	uxth	r3, r3
 8001556:	2b03      	cmp	r3, #3
 8001558:	d101      	bne.n	800155e <HAL_UARTEx_RxEventCallback+0x20a>
 800155a:	2301      	movs	r3, #1
 800155c:	e000      	b.n	8001560 <HAL_UARTEx_RxEventCallback+0x20c>
 800155e:	2300      	movs	r3, #0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00b      	beq.n	800157c <HAL_UARTEx_RxEventCallback+0x228>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dz = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001564:	4b19      	ldr	r3, [pc, #100]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 8001566:	785b      	ldrb	r3, [r3, #1]
 8001568:	021b      	lsls	r3, r3, #8
 800156a:	b25a      	sxtb	r2, r3
 800156c:	4b17      	ldr	r3, [pc, #92]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 800156e:	789b      	ldrb	r3, [r3, #2]
 8001570:	b25b      	sxtb	r3, r3
 8001572:	4313      	orrs	r3, r2
 8001574:	b25a      	sxtb	r2, r3
 8001576:	4b23      	ldr	r3, [pc, #140]	; (8001604 <HAL_UARTEx_RxEventCallback+0x2b0>)
 8001578:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 800157a:	e0a4      	b.n	80016c6 <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x54 && cmdDataSize == 3){	// Linear Jog Yaw
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b54      	cmp	r3, #84	; 0x54
 8001582:	d106      	bne.n	8001592 <HAL_UARTEx_RxEventCallback+0x23e>
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <HAL_UARTEx_RxEventCallback+0x280>)
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	b29b      	uxth	r3, r3
 800158a:	2b03      	cmp	r3, #3
 800158c:	d101      	bne.n	8001592 <HAL_UARTEx_RxEventCallback+0x23e>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <HAL_UARTEx_RxEventCallback+0x240>
 8001592:	2300      	movs	r3, #0
 8001594:	2b00      	cmp	r3, #0
 8001596:	d00b      	beq.n	80015b0 <HAL_UARTEx_RxEventCallback+0x25c>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dyaw = (Old_Rx_Buffer[1] << 8) | Old_Rx_Buffer[2];
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 800159a:	785b      	ldrb	r3, [r3, #1]
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	b25a      	sxtb	r2, r3
 80015a0:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 80015a2:	789b      	ldrb	r3, [r3, #2]
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	4313      	orrs	r3, r2
 80015a8:	b25a      	sxtb	r2, r3
 80015aa:	4b17      	ldr	r3, [pc, #92]	; (8001608 <HAL_UARTEx_RxEventCallback+0x2b4>)
 80015ac:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80015ae:	e08a      	b.n	80016c6 <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x61 && cmdDataSize == 5){ // Joint Jog 4q
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <HAL_UARTEx_RxEventCallback+0x278>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b61      	cmp	r3, #97	; 0x61
 80015b6:	d129      	bne.n	800160c <HAL_UARTEx_RxEventCallback+0x2b8>
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <HAL_UARTEx_RxEventCallback+0x280>)
 80015ba:	881b      	ldrh	r3, [r3, #0]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	2b05      	cmp	r3, #5
 80015c0:	d124      	bne.n	800160c <HAL_UARTEx_RxEventCallback+0x2b8>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e023      	b.n	800160e <HAL_UARTEx_RxEventCallback+0x2ba>
 80015c6:	bf00      	nop
 80015c8:	24000a9c 	.word	0x24000a9c
 80015cc:	24000220 	.word	0x24000220
 80015d0:	24000234 	.word	0x24000234
 80015d4:	24000248 	.word	0x24000248
 80015d8:	2400052c 	.word	0x2400052c
 80015dc:	2400021c 	.word	0x2400021c
 80015e0:	2400021e 	.word	0x2400021e
 80015e4:	58021000 	.word	0x58021000
 80015e8:	58020400 	.word	0x58020400
 80015ec:	24000214 	.word	0x24000214
 80015f0:	24000215 	.word	0x24000215
 80015f4:	24000216 	.word	0x24000216
 80015f8:	24000217 	.word	0x24000217
 80015fc:	24000218 	.word	0x24000218
 8001600:	24000219 	.word	0x24000219
 8001604:	2400021a 	.word	0x2400021a
 8001608:	2400021b 	.word	0x2400021b
 800160c:	2300      	movs	r3, #0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d014      	beq.n	800163c <HAL_UARTEx_RxEventCallback+0x2e8>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dq1 = Old_Rx_Buffer[1];
 8001612:	4b63      	ldr	r3, [pc, #396]	; (80017a0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8001614:	785b      	ldrb	r3, [r3, #1]
 8001616:	b25a      	sxtb	r2, r3
 8001618:	4b62      	ldr	r3, [pc, #392]	; (80017a4 <HAL_UARTEx_RxEventCallback+0x450>)
 800161a:	701a      	strb	r2, [r3, #0]
					dq2 = Old_Rx_Buffer[2];
 800161c:	4b60      	ldr	r3, [pc, #384]	; (80017a0 <HAL_UARTEx_RxEventCallback+0x44c>)
 800161e:	789b      	ldrb	r3, [r3, #2]
 8001620:	b25a      	sxtb	r2, r3
 8001622:	4b61      	ldr	r3, [pc, #388]	; (80017a8 <HAL_UARTEx_RxEventCallback+0x454>)
 8001624:	701a      	strb	r2, [r3, #0]
					dq3 = Old_Rx_Buffer[3];
 8001626:	4b5e      	ldr	r3, [pc, #376]	; (80017a0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8001628:	78db      	ldrb	r3, [r3, #3]
 800162a:	b25a      	sxtb	r2, r3
 800162c:	4b5f      	ldr	r3, [pc, #380]	; (80017ac <HAL_UARTEx_RxEventCallback+0x458>)
 800162e:	701a      	strb	r2, [r3, #0]
					dq4 = Old_Rx_Buffer[4];
 8001630:	4b5b      	ldr	r3, [pc, #364]	; (80017a0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8001632:	791b      	ldrb	r3, [r3, #4]
 8001634:	b25a      	sxtb	r2, r3
 8001636:	4b5e      	ldr	r3, [pc, #376]	; (80017b0 <HAL_UARTEx_RxEventCallback+0x45c>)
 8001638:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 800163a:	e044      	b.n	80016c6 <HAL_UARTEx_RxEventCallback+0x372>
				}
				else if(Old_Rx_Buffer[0] == 0x71 && cmdDataSize == 5){ // Linear Jog X,Y,Z,Yaw
 800163c:	4b58      	ldr	r3, [pc, #352]	; (80017a0 <HAL_UARTEx_RxEventCallback+0x44c>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b71      	cmp	r3, #113	; 0x71
 8001642:	d106      	bne.n	8001652 <HAL_UARTEx_RxEventCallback+0x2fe>
 8001644:	4b5b      	ldr	r3, [pc, #364]	; (80017b4 <HAL_UARTEx_RxEventCallback+0x460>)
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	b29b      	uxth	r3, r3
 800164a:	2b05      	cmp	r3, #5
 800164c:	d101      	bne.n	8001652 <HAL_UARTEx_RxEventCallback+0x2fe>
 800164e:	2301      	movs	r3, #1
 8001650:	e000      	b.n	8001654 <HAL_UARTEx_RxEventCallback+0x300>
 8001652:	2300      	movs	r3, #0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d036      	beq.n	80016c6 <HAL_UARTEx_RxEventCallback+0x372>
//					HAL_UART_Transmit_DMA(&huart3, &Old_Rx_Buffer[0], 1);
					dx = Old_Rx_Buffer[1];
 8001658:	4b51      	ldr	r3, [pc, #324]	; (80017a0 <HAL_UARTEx_RxEventCallback+0x44c>)
 800165a:	785b      	ldrb	r3, [r3, #1]
 800165c:	b25a      	sxtb	r2, r3
 800165e:	4b56      	ldr	r3, [pc, #344]	; (80017b8 <HAL_UARTEx_RxEventCallback+0x464>)
 8001660:	701a      	strb	r2, [r3, #0]
					dy = Old_Rx_Buffer[2];
 8001662:	4b4f      	ldr	r3, [pc, #316]	; (80017a0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8001664:	789b      	ldrb	r3, [r3, #2]
 8001666:	b25a      	sxtb	r2, r3
 8001668:	4b54      	ldr	r3, [pc, #336]	; (80017bc <HAL_UARTEx_RxEventCallback+0x468>)
 800166a:	701a      	strb	r2, [r3, #0]
					dz = Old_Rx_Buffer[3];
 800166c:	4b4c      	ldr	r3, [pc, #304]	; (80017a0 <HAL_UARTEx_RxEventCallback+0x44c>)
 800166e:	78db      	ldrb	r3, [r3, #3]
 8001670:	b25a      	sxtb	r2, r3
 8001672:	4b53      	ldr	r3, [pc, #332]	; (80017c0 <HAL_UARTEx_RxEventCallback+0x46c>)
 8001674:	701a      	strb	r2, [r3, #0]
					dyaw = Old_Rx_Buffer[4];
 8001676:	4b4a      	ldr	r3, [pc, #296]	; (80017a0 <HAL_UARTEx_RxEventCallback+0x44c>)
 8001678:	791b      	ldrb	r3, [r3, #4]
 800167a:	b25a      	sxtb	r2, r3
 800167c:	4b51      	ldr	r3, [pc, #324]	; (80017c4 <HAL_UARTEx_RxEventCallback+0x470>)
 800167e:	701a      	strb	r2, [r3, #0]
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 8001680:	e021      	b.n	80016c6 <HAL_UARTEx_RxEventCallback+0x372>
				}
			}
			else{
				HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	2102      	movs	r1, #2
 8001686:	4850      	ldr	r0, [pc, #320]	; (80017c8 <HAL_UARTEx_RxEventCallback+0x474>)
 8001688:	f006 fb2e 	bl	8007ce8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800168c:	2201      	movs	r2, #1
 800168e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001692:	484e      	ldr	r0, [pc, #312]	; (80017cc <HAL_UARTEx_RxEventCallback+0x478>)
 8001694:	f006 fb28 	bl	8007ce8 <HAL_GPIO_WritePin>
				HAL_UART_Transmit_DMA(&huart3, (uint8_t *)"CRC16 error\n", 12);
 8001698:	220c      	movs	r2, #12
 800169a:	494d      	ldr	r1, [pc, #308]	; (80017d0 <HAL_UARTEx_RxEventCallback+0x47c>)
 800169c:	484d      	ldr	r0, [pc, #308]	; (80017d4 <HAL_UARTEx_RxEventCallback+0x480>)
 800169e:	f00a fc77 	bl	800bf90 <HAL_UART_Transmit_DMA>
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80016a2:	e010      	b.n	80016c6 <HAL_UARTEx_RxEventCallback+0x372>
			}
		}
		else{
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2102      	movs	r1, #2
 80016a8:	4847      	ldr	r0, [pc, #284]	; (80017c8 <HAL_UARTEx_RxEventCallback+0x474>)
 80016aa:	f006 fb1d 	bl	8007ce8 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80016ae:	2201      	movs	r2, #1
 80016b0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80016b4:	4845      	ldr	r0, [pc, #276]	; (80017cc <HAL_UARTEx_RxEventCallback+0x478>)
 80016b6:	f006 fb17 	bl	8007ce8 <HAL_GPIO_WritePin>
			HAL_UART_Transmit_DMA(&huart3, (uint8_t *)"Protocol match error\n", 21);
 80016ba:	2215      	movs	r2, #21
 80016bc:	4946      	ldr	r1, [pc, #280]	; (80017d8 <HAL_UARTEx_RxEventCallback+0x484>)
 80016be:	4845      	ldr	r0, [pc, #276]	; (80017d4 <HAL_UARTEx_RxEventCallback+0x480>)
 80016c0:	f00a fc66 	bl	800bf90 <HAL_UART_Transmit_DMA>
 80016c4:	e000      	b.n	80016c8 <HAL_UARTEx_RxEventCallback+0x374>
			if(CRCValue == ExpectedCRCValue){ // Check if CRC value is equal to Expected CRC value.
 80016c6:	bf00      	nop
		}
		/* start the DMA again */
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 80016c8:	2214      	movs	r2, #20
 80016ca:	4944      	ldr	r1, [pc, #272]	; (80017dc <HAL_UARTEx_RxEventCallback+0x488>)
 80016cc:	4841      	ldr	r0, [pc, #260]	; (80017d4 <HAL_UARTEx_RxEventCallback+0x480>)
 80016ce:	f00c fbb2 	bl	800de36 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 80016d2:	4b43      	ldr	r3, [pc, #268]	; (80017e0 <HAL_UARTEx_RxEventCallback+0x48c>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a43      	ldr	r2, [pc, #268]	; (80017e4 <HAL_UARTEx_RxEventCallback+0x490>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d04a      	beq.n	8001772 <HAL_UARTEx_RxEventCallback+0x41e>
 80016dc:	4b40      	ldr	r3, [pc, #256]	; (80017e0 <HAL_UARTEx_RxEventCallback+0x48c>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4a41      	ldr	r2, [pc, #260]	; (80017e8 <HAL_UARTEx_RxEventCallback+0x494>)
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d045      	beq.n	8001772 <HAL_UARTEx_RxEventCallback+0x41e>
 80016e6:	4b3e      	ldr	r3, [pc, #248]	; (80017e0 <HAL_UARTEx_RxEventCallback+0x48c>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a40      	ldr	r2, [pc, #256]	; (80017ec <HAL_UARTEx_RxEventCallback+0x498>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d040      	beq.n	8001772 <HAL_UARTEx_RxEventCallback+0x41e>
 80016f0:	4b3b      	ldr	r3, [pc, #236]	; (80017e0 <HAL_UARTEx_RxEventCallback+0x48c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a3e      	ldr	r2, [pc, #248]	; (80017f0 <HAL_UARTEx_RxEventCallback+0x49c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d03b      	beq.n	8001772 <HAL_UARTEx_RxEventCallback+0x41e>
 80016fa:	4b39      	ldr	r3, [pc, #228]	; (80017e0 <HAL_UARTEx_RxEventCallback+0x48c>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a3d      	ldr	r2, [pc, #244]	; (80017f4 <HAL_UARTEx_RxEventCallback+0x4a0>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d036      	beq.n	8001772 <HAL_UARTEx_RxEventCallback+0x41e>
 8001704:	4b36      	ldr	r3, [pc, #216]	; (80017e0 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a3b      	ldr	r2, [pc, #236]	; (80017f8 <HAL_UARTEx_RxEventCallback+0x4a4>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d031      	beq.n	8001772 <HAL_UARTEx_RxEventCallback+0x41e>
 800170e:	4b34      	ldr	r3, [pc, #208]	; (80017e0 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a3a      	ldr	r2, [pc, #232]	; (80017fc <HAL_UARTEx_RxEventCallback+0x4a8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d02c      	beq.n	8001772 <HAL_UARTEx_RxEventCallback+0x41e>
 8001718:	4b31      	ldr	r3, [pc, #196]	; (80017e0 <HAL_UARTEx_RxEventCallback+0x48c>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a38      	ldr	r2, [pc, #224]	; (8001800 <HAL_UARTEx_RxEventCallback+0x4ac>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d027      	beq.n	8001772 <HAL_UARTEx_RxEventCallback+0x41e>
 8001722:	4b2f      	ldr	r3, [pc, #188]	; (80017e0 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a37      	ldr	r2, [pc, #220]	; (8001804 <HAL_UARTEx_RxEventCallback+0x4b0>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d022      	beq.n	8001772 <HAL_UARTEx_RxEventCallback+0x41e>
 800172c:	4b2c      	ldr	r3, [pc, #176]	; (80017e0 <HAL_UARTEx_RxEventCallback+0x48c>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a35      	ldr	r2, [pc, #212]	; (8001808 <HAL_UARTEx_RxEventCallback+0x4b4>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d01d      	beq.n	8001772 <HAL_UARTEx_RxEventCallback+0x41e>
 8001736:	4b2a      	ldr	r3, [pc, #168]	; (80017e0 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a34      	ldr	r2, [pc, #208]	; (800180c <HAL_UARTEx_RxEventCallback+0x4b8>)
 800173c:	4293      	cmp	r3, r2
 800173e:	d018      	beq.n	8001772 <HAL_UARTEx_RxEventCallback+0x41e>
 8001740:	4b27      	ldr	r3, [pc, #156]	; (80017e0 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	4a32      	ldr	r2, [pc, #200]	; (8001810 <HAL_UARTEx_RxEventCallback+0x4bc>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d013      	beq.n	8001772 <HAL_UARTEx_RxEventCallback+0x41e>
 800174a:	4b25      	ldr	r3, [pc, #148]	; (80017e0 <HAL_UARTEx_RxEventCallback+0x48c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a31      	ldr	r2, [pc, #196]	; (8001814 <HAL_UARTEx_RxEventCallback+0x4c0>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d00e      	beq.n	8001772 <HAL_UARTEx_RxEventCallback+0x41e>
 8001754:	4b22      	ldr	r3, [pc, #136]	; (80017e0 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a2f      	ldr	r2, [pc, #188]	; (8001818 <HAL_UARTEx_RxEventCallback+0x4c4>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d009      	beq.n	8001772 <HAL_UARTEx_RxEventCallback+0x41e>
 800175e:	4b20      	ldr	r3, [pc, #128]	; (80017e0 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a2e      	ldr	r2, [pc, #184]	; (800181c <HAL_UARTEx_RxEventCallback+0x4c8>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d004      	beq.n	8001772 <HAL_UARTEx_RxEventCallback+0x41e>
 8001768:	4b1d      	ldr	r3, [pc, #116]	; (80017e0 <HAL_UARTEx_RxEventCallback+0x48c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a2c      	ldr	r2, [pc, #176]	; (8001820 <HAL_UARTEx_RxEventCallback+0x4cc>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d109      	bne.n	8001786 <HAL_UARTEx_RxEventCallback+0x432>
 8001772:	4b1b      	ldr	r3, [pc, #108]	; (80017e0 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <HAL_UARTEx_RxEventCallback+0x48c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0208 	bic.w	r2, r2, #8
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	bf00      	nop
	}
}
 8001784:	e007      	b.n	8001796 <HAL_UARTEx_RxEventCallback+0x442>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001786:	4b16      	ldr	r3, [pc, #88]	; (80017e0 <HAL_UARTEx_RxEventCallback+0x48c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b14      	ldr	r3, [pc, #80]	; (80017e0 <HAL_UARTEx_RxEventCallback+0x48c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0204 	bic.w	r2, r2, #4
 8001794:	601a      	str	r2, [r3, #0]
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bdb0      	pop	{r4, r5, r7, pc}
 800179e:	bf00      	nop
 80017a0:	24000220 	.word	0x24000220
 80017a4:	24000214 	.word	0x24000214
 80017a8:	24000215 	.word	0x24000215
 80017ac:	24000216 	.word	0x24000216
 80017b0:	24000217 	.word	0x24000217
 80017b4:	24000248 	.word	0x24000248
 80017b8:	24000218 	.word	0x24000218
 80017bc:	24000219 	.word	0x24000219
 80017c0:	2400021a 	.word	0x2400021a
 80017c4:	2400021b 	.word	0x2400021b
 80017c8:	58021000 	.word	0x58021000
 80017cc:	58020400 	.word	0x58020400
 80017d0:	08010f60 	.word	0x08010f60
 80017d4:	24000a9c 	.word	0x24000a9c
 80017d8:	08010f70 	.word	0x08010f70
 80017dc:	24000234 	.word	0x24000234
 80017e0:	24000a24 	.word	0x24000a24
 80017e4:	40020010 	.word	0x40020010
 80017e8:	40020028 	.word	0x40020028
 80017ec:	40020040 	.word	0x40020040
 80017f0:	40020058 	.word	0x40020058
 80017f4:	40020070 	.word	0x40020070
 80017f8:	40020088 	.word	0x40020088
 80017fc:	400200a0 	.word	0x400200a0
 8001800:	400200b8 	.word	0x400200b8
 8001804:	40020410 	.word	0x40020410
 8001808:	40020428 	.word	0x40020428
 800180c:	40020440 	.word	0x40020440
 8001810:	40020458 	.word	0x40020458
 8001814:	40020470 	.word	0x40020470
 8001818:	40020488 	.word	0x40020488
 800181c:	400204a0 	.word	0x400204a0
 8001820:	400204b8 	.word	0x400204b8

08001824 <_ZN11robot_jointC1Ev>:
struct joint_state {
    float q1,q2,q3,q4;
};
typedef struct joint_state joint_config;

struct robot_joint{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	65da      	str	r2, [r3, #92]	; 0x5c
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	f04f 0200 	mov.w	r2, #0
 800183a:	661a      	str	r2, [r3, #96]	; 0x60
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001842:	665a      	str	r2, [r3, #100]	; 0x64
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	669a      	str	r2, [r3, #104]	; 0x68
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001852:	66da      	str	r2, [r3, #108]	; 0x6c
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	671a      	str	r2, [r3, #112]	; 0x70
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f04f 0200 	mov.w	r2, #0
 8001862:	675a      	str	r2, [r3, #116]	; 0x74
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	679a      	str	r2, [r3, #120]	; 0x78
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	4a06      	ldr	r2, [pc, #24]	; (8001888 <_ZN11robot_jointC1Ev+0x64>)
 8001870:	67da      	str	r2, [r3, #124]	; 0x7c
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a05      	ldr	r2, [pc, #20]	; (800188c <_ZN11robot_jointC1Ev+0x68>)
 8001876:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	3dc28f5c 	.word	0x3dc28f5c
 800188c:	387ba882 	.word	0x387ba882

08001890 <_Z12KalmanFilterf11robot_joint>:
////     p21 = P21 + P22*dt + (Q*dt3)/2 - (((Q*dt3)/2 + P22*dt + P21)*(P11 + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt)))/(P11 + R + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt));
////	 p22 = P22 + Q*dt2 - (((Q*dt3)/2 + P22*dt + P12)*((Q*dt3)/2 + P22*dt + P21))/(P11 + R + P21*dt + (Q*dt2)/4 + dt*(P12 + P22*dt));
//}

fcb_joint KalmanFilter(float theta_k, fcb_joint joint)
{
 8001890:	b084      	sub	sp, #16
 8001892:	b580      	push	{r7, lr}
 8001894:	ed2d 8b08 	vpush	{d8-d11}
 8001898:	b08a      	sub	sp, #40	; 0x28
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	ed87 0a00 	vstr	s0, [r7]
 80018a2:	f107 0054 	add.w	r0, r7, #84	; 0x54
 80018a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
//	bug1 = joint.Encoder;
	float X1 = joint.X11;
 80018aa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80018ae:	627b      	str	r3, [r7, #36]	; 0x24
	float X2 = joint.X21;
 80018b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80018b4:	623b      	str	r3, [r7, #32]
	float P11 = joint.p11;
 80018b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80018ba:	61fb      	str	r3, [r7, #28]
	float P12 = joint.p12;
 80018bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80018c0:	61bb      	str	r3, [r7, #24]
	float P21 = joint.p21;
 80018c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80018c6:	617b      	str	r3, [r7, #20]
	float P22 = joint.p22;
 80018c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80018cc:	613b      	str	r3, [r7, #16]
	float Q = joint.Q;
 80018ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80018d2:	60fb      	str	r3, [r7, #12]
	float R = joint.R;
 80018d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80018d8:	60bb      	str	r3, [r7, #8]

	joint.X11 = X1 + (X2*dt) - ((X1 - theta_k + X2*dt)*(P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 80018da:	4bef      	ldr	r3, [pc, #956]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 80018dc:	ed93 7a00 	vldr	s14, [r3]
 80018e0:	edd7 7a08 	vldr	s15, [r7, #32]
 80018e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018e8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80018ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f0:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80018f4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80018f8:	edd7 7a00 	vldr	s15, [r7]
 80018fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001900:	4be5      	ldr	r3, [pc, #916]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001902:	edd3 6a00 	vldr	s13, [r3]
 8001906:	edd7 7a08 	vldr	s15, [r7, #32]
 800190a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800190e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001912:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001916:	4be0      	ldr	r3, [pc, #896]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001918:	ed93 7a00 	vldr	s14, [r3]
 800191c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001920:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001924:	edd7 7a07 	vldr	s15, [r7, #28]
 8001928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800192c:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001930:	edd7 7a03 	vldr	s15, [r7, #12]
 8001934:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001938:	4bd7      	ldr	r3, [pc, #860]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 800193a:	edd3 7a00 	vldr	s15, [r3]
 800193e:	2004      	movs	r0, #4
 8001940:	eeb0 0a67 	vmov.f32	s0, s15
 8001944:	f001 f896 	bl	8002a74 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001948:	eeb0 7b40 	vmov.f64	d7, d0
 800194c:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001950:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001954:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001958:	ee3a 6b07 	vadd.f64	d6, d10, d7
 800195c:	4bce      	ldr	r3, [pc, #824]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 800195e:	ed93 7a00 	vldr	s14, [r3]
 8001962:	edd7 7a04 	vldr	s15, [r7, #16]
 8001966:	ee27 7a27 	vmul.f32	s14, s14, s15
 800196a:	edd7 7a06 	vldr	s15, [r7, #24]
 800196e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001972:	4bc9      	ldr	r3, [pc, #804]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001980:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001984:	ee29 9b07 	vmul.f64	d9, d9, d7
 8001988:	ed97 7a07 	vldr	s14, [r7, #28]
 800198c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001990:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001994:	4bc0      	ldr	r3, [pc, #768]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001996:	edd3 6a00 	vldr	s13, [r3]
 800199a:	edd7 7a05 	vldr	s15, [r7, #20]
 800199e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a6:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 80019aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80019ae:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 80019b2:	4bb9      	ldr	r3, [pc, #740]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	2004      	movs	r0, #4
 80019ba:	eeb0 0a67 	vmov.f32	s0, s15
 80019be:	f001 f859 	bl	8002a74 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80019c2:	eeb0 7b40 	vmov.f64	d7, d0
 80019c6:	ee2b 6b07 	vmul.f64	d6, d11, d7
 80019ca:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 80019ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80019d2:	ee3a 6b07 	vadd.f64	d6, d10, d7
 80019d6:	4bb0      	ldr	r3, [pc, #704]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 80019d8:	ed93 7a00 	vldr	s14, [r3]
 80019dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80019e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80019e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019ec:	4baa      	ldr	r3, [pc, #680]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 80019ee:	edd3 7a00 	vldr	s15, [r3]
 80019f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80019fa:	ee36 6b07 	vadd.f64	d6, d6, d7
 80019fe:	ee89 7b06 	vdiv.f64	d7, d9, d6
 8001a02:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001a06:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001a0a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
	joint.X21 = X2 - (((Q*pow(dt,3))/2 + P22*dt + P21)*(X1 - theta_k + X2*dt))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 8001a0e:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a12:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001a16:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a1a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001a1e:	4b9e      	ldr	r3, [pc, #632]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001a20:	edd3 7a00 	vldr	s15, [r3]
 8001a24:	2003      	movs	r0, #3
 8001a26:	eeb0 0a67 	vmov.f32	s0, s15
 8001a2a:	f001 f823 	bl	8002a74 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001a2e:	eeb0 7b40 	vmov.f64	d7, d0
 8001a32:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001a36:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001a3a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001a3e:	4b96      	ldr	r3, [pc, #600]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001a40:	ed93 7a00 	vldr	s14, [r3]
 8001a44:	edd7 7a04 	vldr	s15, [r7, #16]
 8001a48:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a4c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a50:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001a54:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a5c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001a60:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001a64:	edd7 7a00 	vldr	s15, [r7]
 8001a68:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a6c:	4b8a      	ldr	r3, [pc, #552]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001a6e:	edd3 5a00 	vldr	s11, [r3]
 8001a72:	edd7 7a08 	vldr	s15, [r7, #32]
 8001a76:	ee65 7aa7 	vmul.f32	s15, s11, s15
 8001a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001a82:	ee26 9b07 	vmul.f64	d9, d6, d7
 8001a86:	ed97 7a07 	vldr	s14, [r7, #28]
 8001a8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a92:	4b81      	ldr	r3, [pc, #516]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001a94:	edd3 6a00 	vldr	s13, [r3]
 8001a98:	edd7 7a05 	vldr	s15, [r7, #20]
 8001a9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa4:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001aa8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001aac:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001ab0:	4b79      	ldr	r3, [pc, #484]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	2004      	movs	r0, #4
 8001ab8:	eeb0 0a67 	vmov.f32	s0, s15
 8001abc:	f000 ffda 	bl	8002a74 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001ac0:	eeb0 7b40 	vmov.f64	d7, d0
 8001ac4:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001ac8:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001acc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001ad0:	ee3a 6b07 	vadd.f64	d6, d10, d7
 8001ad4:	4b70      	ldr	r3, [pc, #448]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001ad6:	ed93 7a00 	vldr	s14, [r3]
 8001ada:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ade:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ae2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001ae6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aea:	4b6b      	ldr	r3, [pc, #428]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001af8:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001afc:	ee89 7b06 	vdiv.f64	d7, d9, d6
 8001b00:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001b04:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001b08:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
	joint.p11 = -((P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)) - 1)*(P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 8001b0c:	4b62      	ldr	r3, [pc, #392]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001b0e:	ed93 7a00 	vldr	s14, [r3]
 8001b12:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b16:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b1a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b22:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001b26:	edd7 7a03 	vldr	s15, [r7, #12]
 8001b2a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001b2e:	4b5a      	ldr	r3, [pc, #360]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001b30:	edd3 7a00 	vldr	s15, [r3]
 8001b34:	2004      	movs	r0, #4
 8001b36:	eeb0 0a67 	vmov.f32	s0, s15
 8001b3a:	f000 ff9b 	bl	8002a74 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001b3e:	eeb0 7b40 	vmov.f64	d7, d0
 8001b42:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001b46:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001b4a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001b4e:	ee38 6b07 	vadd.f64	d6, d8, d7
 8001b52:	4b51      	ldr	r3, [pc, #324]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001b54:	ed93 7a00 	vldr	s14, [r3]
 8001b58:	edd7 7a04 	vldr	s15, [r7, #16]
 8001b5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b60:	edd7 7a06 	vldr	s15, [r7, #24]
 8001b64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b68:	4b4b      	ldr	r3, [pc, #300]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001b6a:	edd3 7a00 	vldr	s15, [r3]
 8001b6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b72:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001b76:	ee36 8b07 	vadd.f64	d8, d6, d7
 8001b7a:	ed97 7a07 	vldr	s14, [r7, #28]
 8001b7e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b82:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b86:	4b44      	ldr	r3, [pc, #272]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001b88:	edd3 6a00 	vldr	s13, [r3]
 8001b8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001b90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b98:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001b9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ba0:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001ba4:	4b3c      	ldr	r3, [pc, #240]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001ba6:	edd3 7a00 	vldr	s15, [r3]
 8001baa:	2004      	movs	r0, #4
 8001bac:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb0:	f000 ff60 	bl	8002a74 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001bb4:	eeb0 7b40 	vmov.f64	d7, d0
 8001bb8:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8001bbc:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001bc0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001bc4:	ee39 6b07 	vadd.f64	d6, d9, d7
 8001bc8:	4b33      	ldr	r3, [pc, #204]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001bca:	ed93 7a00 	vldr	s14, [r3]
 8001bce:	edd7 7a04 	vldr	s15, [r7, #16]
 8001bd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bde:	4b2e      	ldr	r3, [pc, #184]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001be0:	edd3 7a00 	vldr	s15, [r3]
 8001be4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001be8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001bec:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001bf0:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001bf4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001bf8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001bfc:	eeb1 8b47 	vneg.f64	d8, d7
 8001c00:	4b25      	ldr	r3, [pc, #148]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001c02:	ed93 7a00 	vldr	s14, [r3]
 8001c06:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c0e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c16:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001c1a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c1e:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001c22:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001c24:	edd3 7a00 	vldr	s15, [r3]
 8001c28:	2004      	movs	r0, #4
 8001c2a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c2e:	f000 ff21 	bl	8002a74 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001c32:	eeb0 7b40 	vmov.f64	d7, d0
 8001c36:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8001c3a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001c3e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001c42:	ee39 6b07 	vadd.f64	d6, d9, d7
 8001c46:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001c48:	ed93 7a00 	vldr	s14, [r3]
 8001c4c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c50:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c54:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c5c:	4b0e      	ldr	r3, [pc, #56]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001c5e:	edd3 7a00 	vldr	s15, [r3]
 8001c62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c66:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001c6a:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001c6e:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001c72:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001c76:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
	joint.p12 = -((P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)) - 1)*((Q*pow(dt,3))/2 + P22*dt + P12);
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <_Z12KalmanFilterf11robot_joint+0x408>)
 8001c7c:	ed93 7a00 	vldr	s14, [r3]
 8001c80:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c88:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c90:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001c94:	e002      	b.n	8001c9c <_Z12KalmanFilterf11robot_joint+0x40c>
 8001c96:	bf00      	nop
 8001c98:	24000014 	.word	0x24000014
 8001c9c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ca0:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001ca4:	4bef      	ldr	r3, [pc, #956]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001ca6:	edd3 7a00 	vldr	s15, [r3]
 8001caa:	2004      	movs	r0, #4
 8001cac:	eeb0 0a67 	vmov.f32	s0, s15
 8001cb0:	f000 fee0 	bl	8002a74 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001cb4:	eeb0 7b40 	vmov.f64	d7, d0
 8001cb8:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001cbc:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001cc0:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001cc4:	ee38 6b07 	vadd.f64	d6, d8, d7
 8001cc8:	4be6      	ldr	r3, [pc, #920]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001cca:	ed93 7a00 	vldr	s14, [r3]
 8001cce:	edd7 7a04 	vldr	s15, [r7, #16]
 8001cd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cd6:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cda:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cde:	4be1      	ldr	r3, [pc, #900]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001ce0:	edd3 7a00 	vldr	s15, [r3]
 8001ce4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ce8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001cec:	ee36 8b07 	vadd.f64	d8, d6, d7
 8001cf0:	ed97 7a07 	vldr	s14, [r7, #28]
 8001cf4:	edd7 7a02 	vldr	s15, [r7, #8]
 8001cf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cfc:	4bd9      	ldr	r3, [pc, #868]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001cfe:	edd3 6a00 	vldr	s13, [r3]
 8001d02:	edd7 7a05 	vldr	s15, [r7, #20]
 8001d06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d0e:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001d12:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d16:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001d1a:	4bd2      	ldr	r3, [pc, #840]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001d1c:	edd3 7a00 	vldr	s15, [r3]
 8001d20:	2004      	movs	r0, #4
 8001d22:	eeb0 0a67 	vmov.f32	s0, s15
 8001d26:	f000 fea5 	bl	8002a74 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001d2a:	eeb0 7b40 	vmov.f64	d7, d0
 8001d2e:	ee2a 6b07 	vmul.f64	d6, d10, d7
 8001d32:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001d36:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001d3a:	ee39 6b07 	vadd.f64	d6, d9, d7
 8001d3e:	4bc9      	ldr	r3, [pc, #804]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001d40:	ed93 7a00 	vldr	s14, [r3]
 8001d44:	edd7 7a04 	vldr	s15, [r7, #16]
 8001d48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d4c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001d50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d54:	4bc3      	ldr	r3, [pc, #780]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001d56:	edd3 7a00 	vldr	s15, [r3]
 8001d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001d62:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001d66:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8001d6a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8001d6e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8001d72:	eeb1 8b47 	vneg.f64	d8, d7
 8001d76:	edd7 7a03 	vldr	s15, [r7, #12]
 8001d7a:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001d7e:	4bb9      	ldr	r3, [pc, #740]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001d80:	edd3 7a00 	vldr	s15, [r3]
 8001d84:	2003      	movs	r0, #3
 8001d86:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8a:	f000 fe73 	bl	8002a74 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001d8e:	eeb0 7b40 	vmov.f64	d7, d0
 8001d92:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001d96:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001d9a:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001d9e:	4bb1      	ldr	r3, [pc, #708]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001da0:	ed93 7a00 	vldr	s14, [r3]
 8001da4:	edd7 7a04 	vldr	s15, [r7, #16]
 8001da8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001db0:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001db4:	edd7 7a06 	vldr	s15, [r7, #24]
 8001db8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001dbc:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001dc0:	ee28 7b07 	vmul.f64	d7, d8, d7
 8001dc4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001dc8:	edc7 7a2f 	vstr	s15, [r7, #188]	; 0xbc
	joint.p21 = P21 + P22*dt + (Q*pow(dt,3))/2 - (((Q*pow(dt,3))/2 + P22*dt + P21)*(P11 + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt)))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 8001dcc:	4ba5      	ldr	r3, [pc, #660]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001dce:	ed93 7a00 	vldr	s14, [r3]
 8001dd2:	edd7 7a04 	vldr	s15, [r7, #16]
 8001dd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dda:	edd7 7a05 	vldr	s15, [r7, #20]
 8001dde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de2:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001de6:	edd7 7a03 	vldr	s15, [r7, #12]
 8001dea:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001dee:	4b9d      	ldr	r3, [pc, #628]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001df0:	edd3 7a00 	vldr	s15, [r3]
 8001df4:	2003      	movs	r0, #3
 8001df6:	eeb0 0a67 	vmov.f32	s0, s15
 8001dfa:	f000 fe3b 	bl	8002a74 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001dfe:	eeb0 7b40 	vmov.f64	d7, d0
 8001e02:	ee29 6b07 	vmul.f64	d6, d9, d7
 8001e06:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001e0a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e0e:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001e12:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e16:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001e1a:	4b92      	ldr	r3, [pc, #584]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001e1c:	edd3 7a00 	vldr	s15, [r3]
 8001e20:	2003      	movs	r0, #3
 8001e22:	eeb0 0a67 	vmov.f32	s0, s15
 8001e26:	f000 fe25 	bl	8002a74 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001e2a:	eeb0 7b40 	vmov.f64	d7, d0
 8001e2e:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001e32:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001e36:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001e3a:	4b8a      	ldr	r3, [pc, #552]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001e3c:	ed93 7a00 	vldr	s14, [r3]
 8001e40:	edd7 7a04 	vldr	s15, [r7, #16]
 8001e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e48:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e4c:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001e50:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e54:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001e58:	ee36 9b07 	vadd.f64	d9, d6, d7
 8001e5c:	4b81      	ldr	r3, [pc, #516]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001e5e:	ed93 7a00 	vldr	s14, [r3]
 8001e62:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e6a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e72:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001e76:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e7a:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001e7e:	4b79      	ldr	r3, [pc, #484]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001e80:	edd3 7a00 	vldr	s15, [r3]
 8001e84:	2004      	movs	r0, #4
 8001e86:	eeb0 0a67 	vmov.f32	s0, s15
 8001e8a:	f000 fdf3 	bl	8002a74 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001e8e:	eeb0 7b40 	vmov.f64	d7, d0
 8001e92:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001e96:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001e9a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001e9e:	ee3a 6b07 	vadd.f64	d6, d10, d7
 8001ea2:	4b70      	ldr	r3, [pc, #448]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001ea4:	ed93 7a00 	vldr	s14, [r3]
 8001ea8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001eac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eb0:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eb8:	4b6a      	ldr	r3, [pc, #424]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001eba:	edd3 7a00 	vldr	s15, [r3]
 8001ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001ec6:	ee36 7b07 	vadd.f64	d7, d6, d7
 8001eca:	ee29 9b07 	vmul.f64	d9, d9, d7
 8001ece:	ed97 7a07 	vldr	s14, [r7, #28]
 8001ed2:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ed6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001eda:	4b62      	ldr	r3, [pc, #392]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001edc:	edd3 6a00 	vldr	s13, [r3]
 8001ee0:	edd7 7a05 	vldr	s15, [r7, #20]
 8001ee4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eec:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001ef0:	edd7 7a03 	vldr	s15, [r7, #12]
 8001ef4:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8001ef8:	4b5a      	ldr	r3, [pc, #360]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001efa:	edd3 7a00 	vldr	s15, [r3]
 8001efe:	2004      	movs	r0, #4
 8001f00:	eeb0 0a67 	vmov.f32	s0, s15
 8001f04:	f000 fdb6 	bl	8002a74 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001f08:	eeb0 7b40 	vmov.f64	d7, d0
 8001f0c:	ee2b 6b07 	vmul.f64	d6, d11, d7
 8001f10:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 8001f14:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8001f18:	ee3a 6b07 	vadd.f64	d6, d10, d7
 8001f1c:	4b51      	ldr	r3, [pc, #324]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001f1e:	ed93 7a00 	vldr	s14, [r3]
 8001f22:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f2a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001f2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f32:	4b4c      	ldr	r3, [pc, #304]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001f34:	edd3 7a00 	vldr	s15, [r3]
 8001f38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001f40:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001f44:	ee89 7b06 	vdiv.f64	d7, d9, d6
 8001f48:	ee38 7b47 	vsub.f64	d7, d8, d7
 8001f4c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8001f50:	edc7 7a30 	vstr	s15, [r7, #192]	; 0xc0
	joint.p22 = P22 + Q*pow(dt,2) - (((Q*pow(dt,3))/2 + P22*dt + P12)*((Q*pow(dt,3))/2 + P22*dt + P21))/(P11 + R + P21*dt + (Q*pow(dt,4))/4 + dt*(P12 + P22*dt));
 8001f54:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f58:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8001f5c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f60:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001f64:	4b3f      	ldr	r3, [pc, #252]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001f66:	edd3 7a00 	vldr	s15, [r3]
 8001f6a:	2002      	movs	r0, #2
 8001f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f70:	f000 fd80 	bl	8002a74 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001f74:	eeb0 7b40 	vmov.f64	d7, d0
 8001f78:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001f7c:	ee38 8b07 	vadd.f64	d8, d8, d7
 8001f80:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f84:	eeb7 9ae7 	vcvt.f64.f32	d9, s15
 8001f88:	4b36      	ldr	r3, [pc, #216]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001f8a:	edd3 7a00 	vldr	s15, [r3]
 8001f8e:	2003      	movs	r0, #3
 8001f90:	eeb0 0a67 	vmov.f32	s0, s15
 8001f94:	f000 fd6e 	bl	8002a74 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001f98:	eeb0 7b40 	vmov.f64	d7, d0
 8001f9c:	ee29 7b07 	vmul.f64	d7, d9, d7
 8001fa0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001fa4:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001fa8:	4b2e      	ldr	r3, [pc, #184]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001faa:	ed93 7a00 	vldr	s14, [r3]
 8001fae:	edd7 7a04 	vldr	s15, [r7, #16]
 8001fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fba:	ee36 6b07 	vadd.f64	d6, d6, d7
 8001fbe:	edd7 7a06 	vldr	s15, [r7, #24]
 8001fc2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001fc6:	ee36 9b07 	vadd.f64	d9, d6, d7
 8001fca:	edd7 7a03 	vldr	s15, [r7, #12]
 8001fce:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 8001fd2:	4b24      	ldr	r3, [pc, #144]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001fd4:	edd3 7a00 	vldr	s15, [r3]
 8001fd8:	2003      	movs	r0, #3
 8001fda:	eeb0 0a67 	vmov.f32	s0, s15
 8001fde:	f000 fd49 	bl	8002a74 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8001fe2:	eeb0 7b40 	vmov.f64	d7, d0
 8001fe6:	ee2a 7b07 	vmul.f64	d7, d10, d7
 8001fea:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 8001fee:	ee87 6b05 	vdiv.f64	d6, d7, d5
 8001ff2:	4b1c      	ldr	r3, [pc, #112]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8001ff4:	ed93 7a00 	vldr	s14, [r3]
 8001ff8:	edd7 7a04 	vldr	s15, [r7, #16]
 8001ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002000:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002004:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002008:	edd7 7a05 	vldr	s15, [r7, #20]
 800200c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002010:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002014:	ee29 9b07 	vmul.f64	d9, d9, d7
 8002018:	ed97 7a07 	vldr	s14, [r7, #28]
 800201c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002020:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002026:	edd3 6a00 	vldr	s13, [r3]
 800202a:	edd7 7a05 	vldr	s15, [r7, #20]
 800202e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002032:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002036:	eeb7 aae7 	vcvt.f64.f32	d10, s15
 800203a:	edd7 7a03 	vldr	s15, [r7, #12]
 800203e:	eeb7 bae7 	vcvt.f64.f32	d11, s15
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <_Z12KalmanFilterf11robot_joint+0x7d4>)
 8002044:	edd3 7a00 	vldr	s15, [r3]
 8002048:	2004      	movs	r0, #4
 800204a:	eeb0 0a67 	vmov.f32	s0, s15
 800204e:	f000 fd11 	bl	8002a74 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002052:	eeb0 7b40 	vmov.f64	d7, d0
 8002056:	ee2b 6b07 	vmul.f64	d6, d11, d7
 800205a:	eeb1 5b00 	vmov.f64	d5, #16	; 0x40800000  4.0
 800205e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002062:	e001      	b.n	8002068 <_Z12KalmanFilterf11robot_joint+0x7d8>
 8002064:	24000014 	.word	0x24000014
 8002068:	ee3a 6b07 	vadd.f64	d6, d10, d7
 800206c:	4b16      	ldr	r3, [pc, #88]	; (80020c8 <_Z12KalmanFilterf11robot_joint+0x838>)
 800206e:	ed93 7a00 	vldr	s14, [r3]
 8002072:	edd7 7a04 	vldr	s15, [r7, #16]
 8002076:	ee27 7a27 	vmul.f32	s14, s14, s15
 800207a:	edd7 7a06 	vldr	s15, [r7, #24]
 800207e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002082:	4b11      	ldr	r3, [pc, #68]	; (80020c8 <_Z12KalmanFilterf11robot_joint+0x838>)
 8002084:	edd3 7a00 	vldr	s15, [r3]
 8002088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800208c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002090:	ee36 6b07 	vadd.f64	d6, d6, d7
 8002094:	ee89 7b06 	vdiv.f64	d7, d9, d6
 8002098:	ee38 7b47 	vsub.f64	d7, d8, d7
 800209c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80020a0:	edc7 7a31 	vstr	s15, [r7, #196]	; 0xc4
//	joint.p11 = (R*(4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22))/(4*R + 4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22);
//	joint.p12 = (2*R*(Q*dt3 + 2*p22*dt + 2*p12))/(4*R + 4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22);
//	joint.p21 = (2*R*(Q*dt3 + 2*p22*dt + 2*p21))/(4*R + 4*p11 + 4*dt*p12 + 4*dt*p21 + Q*dt4 + 4*dt2*p22);
//	joint.p22 = p22 + Q*dt2 - (((Q*dt3)/2 + p22*dt + p12)*((Q*dt3)/2 + p22*dt + p21))/(R + p11 + dt*p21 + (Q*dt4)/4 + dt*(p12 + dt*p22));

	return  joint;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80020ac:	2284      	movs	r2, #132	; 0x84
 80020ae:	4619      	mov	r1, r3
 80020b0:	f00c fb00 	bl	800e6b4 <memcpy>

}
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	3728      	adds	r7, #40	; 0x28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	ecbd 8b08 	vpop	{d8-d11}
 80020be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80020c2:	b004      	add	sp, #16
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	24000014 	.word	0x24000014
 80020cc:	00000000 	.word	0x00000000

080020d0 <HAL_TIM_PeriodElapsedCallback>:
}




void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80020d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d2:	ed2d 8b02 	vpush	{d8}
 80020d6:	b0c9      	sub	sp, #292	; 0x124
 80020d8:	af1e      	add	r7, sp, #120	; 0x78
 80020da:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	if (htim == &htim14){	//

	}
	if (htim == &htim12){	//
	}
	if (htim == &htim5){	//
 80020de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020e2:	4a7f      	ldr	r2, [pc, #508]	; (80022e0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d12b      	bne.n	8002140 <HAL_TIM_PeriodElapsedCallback+0x70>
		encoderJ1.AMT21_Read();
 80020e8:	487e      	ldr	r0, [pc, #504]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80020ea:	f7fe faec 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ1OK = encoderJ1.AMT21_Check_Value();
 80020ee:	487d      	ldr	r0, [pc, #500]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 80020f0:	f7fe fb18 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 80020f4:	4603      	mov	r3, r0
 80020f6:	461a      	mov	r2, r3
 80020f8:	4b7b      	ldr	r3, [pc, #492]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80020fa:	701a      	strb	r2, [r3, #0]
		if (HALENCJ1OK == HAL_OK) {
 80020fc:	4b7a      	ldr	r3, [pc, #488]	; (80022e8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d106      	bne.n	8002112 <HAL_TIM_PeriodElapsedCallback+0x42>
			fcb_joint1.Encoder = encoderJ1.getAngPos180() ;
 8002104:	4877      	ldr	r0, [pc, #476]	; (80022e4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8002106:	f7fe fb71 	bl	80007ec <_ZN5AMT2112getAngPos180Ev>
 800210a:	4603      	mov	r3, r0
 800210c:	461a      	mov	r2, r3
 800210e:	4b77      	ldr	r3, [pc, #476]	; (80022ec <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8002110:	801a      	strh	r2, [r3, #0]
		}

		encoderJ2.AMT21_Read();
 8002112:	4877      	ldr	r0, [pc, #476]	; (80022f0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002114:	f7fe fad7 	bl	80006c6 <_ZN5AMT2110AMT21_ReadEv>
		HALENCJ2OK = encoderJ2.AMT21_Check_Value();
 8002118:	4875      	ldr	r0, [pc, #468]	; (80022f0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800211a:	f7fe fb03 	bl	8000724 <_ZN5AMT2117AMT21_Check_ValueEv>
 800211e:	4603      	mov	r3, r0
 8002120:	461a      	mov	r2, r3
 8002122:	4b74      	ldr	r3, [pc, #464]	; (80022f4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002124:	701a      	strb	r2, [r3, #0]
		if(HALENCJ2OK == HAL_OK){
 8002126:	4b73      	ldr	r3, [pc, #460]	; (80022f4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8002128:	781b      	ldrb	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d108      	bne.n	8002140 <HAL_TIM_PeriodElapsedCallback+0x70>
			encoderJ2.unwarp();
 800212e:	4870      	ldr	r0, [pc, #448]	; (80022f0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002130:	f7fe fb7e 	bl	8000830 <_ZN5AMT216unwarpEv>
			posJ2 = encoderJ2.getUnwarpValue();
 8002134:	486e      	ldr	r0, [pc, #440]	; (80022f0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8002136:	f7fe fbcd 	bl	80008d4 <_ZN5AMT2114getUnwarpValueEv>
 800213a:	4603      	mov	r3, r0
 800213c:	4a6e      	ldr	r2, [pc, #440]	; (80022f8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 800213e:	6013      	str	r3, [r2, #0]
//		stepperJ1.StepperOpenLoopSpeed(u_q1/50.0);
//		stepperJ3.StepperOpenLoopSpeed(u_q3/50.0);


	}
	if (htim == &htim7) { 	//
 8002140:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002144:	4a6d      	ldr	r2, [pc, #436]	; (80022fc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	f040 824d 	bne.w	80025e6 <HAL_TIM_PeriodElapsedCallback+0x516>
//			fcb_joint3.Encoder = encoderJ3.getAngPos180() ;
//		}



	    float t_2 = t*t;
 800214c:	4b6c      	ldr	r3, [pc, #432]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x230>)
 800214e:	ed93 7a00 	vldr	s14, [r3]
 8002152:	4b6b      	ldr	r3, [pc, #428]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002154:	edd3 7a00 	vldr	s15, [r3]
 8002158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800215c:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
	    float t_3 = t*t*t;
 8002160:	4b67      	ldr	r3, [pc, #412]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002162:	ed93 7a00 	vldr	s14, [r3]
 8002166:	4b66      	ldr	r3, [pc, #408]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002168:	edd3 7a00 	vldr	s15, [r3]
 800216c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002170:	4b63      	ldr	r3, [pc, #396]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002172:	edd3 7a00 	vldr	s15, [r3]
 8002176:	ee67 7a27 	vmul.f32	s15, s14, s15
 800217a:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0

	    fcb_joint3.Goal_Position =  C0_q1 + (C2_q1*t_2) - (C3_q1*t_3);
 800217e:	4b61      	ldr	r3, [pc, #388]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002180:	ed93 7a00 	vldr	s14, [r3]
 8002184:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002188:	ee27 7a27 	vmul.f32	s14, s14, s15
 800218c:	4b5e      	ldr	r3, [pc, #376]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800218e:	edd3 7a00 	vldr	s15, [r3]
 8002192:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002196:	4b5d      	ldr	r3, [pc, #372]	; (800230c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002198:	edd3 6a00 	vldr	s13, [r3]
 800219c:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 80021a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80021a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a8:	4b59      	ldr	r3, [pc, #356]	; (8002310 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80021aa:	edc3 7a01 	vstr	s15, [r3, #4]

//	    kalman_pos = fcb_joint1.Goal_Position;
	    kalman_pos = (fcb_joint1.Old_p - fcb_joint1.Encoder);
 80021ae:	4b4f      	ldr	r3, [pc, #316]	; (80022ec <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80021b0:	ed93 7a13 	vldr	s14, [r3, #76]	; 0x4c
 80021b4:	4b4d      	ldr	r3, [pc, #308]	; (80022ec <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	b21b      	sxth	r3, r3
 80021ba:	ee07 3a90 	vmov	s15, r3
 80021be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021c6:	4b53      	ldr	r3, [pc, #332]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80021c8:	edc3 7a00 	vstr	s15, [r3]

	    kalman_velo_input =  kalman_pos ;
 80021cc:	4b51      	ldr	r3, [pc, #324]	; (8002314 <HAL_TIM_PeriodElapsedCallback+0x244>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a51      	ldr	r2, [pc, #324]	; (8002318 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80021d2:	6013      	str	r3, [r2, #0]

	    if (direction_traj == 1){
 80021d4:	4b51      	ldr	r3, [pc, #324]	; (800231c <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	bf0c      	ite	eq
 80021dc:	2301      	moveq	r3, #1
 80021de:	2300      	movne	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	f000 809e 	beq.w	8002324 <HAL_TIM_PeriodElapsedCallback+0x254>
	    	fcb_joint1.Goal_Position = unwrap_pose + (C0_q1 + (C2_q1*t_2) - (C3_q1*t_3)) - 0.8 ;
 80021e8:	4b46      	ldr	r3, [pc, #280]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x234>)
 80021ea:	ed93 7a00 	vldr	s14, [r3]
 80021ee:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80021f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021f6:	4b44      	ldr	r3, [pc, #272]	; (8002308 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80021f8:	edd3 7a00 	vldr	s15, [r3]
 80021fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002200:	4b42      	ldr	r3, [pc, #264]	; (800230c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002202:	edd3 6a00 	vldr	s13, [r3]
 8002206:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800220a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800220e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002212:	4b43      	ldr	r3, [pc, #268]	; (8002320 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8002214:	edd3 7a00 	vldr	s15, [r3]
 8002218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800221c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002220:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 80022d8 <HAL_TIM_PeriodElapsedCallback+0x208>
 8002224:	ee37 7b46 	vsub.f64	d7, d7, d6
 8002228:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800222c:	4b2f      	ldr	r3, [pc, #188]	; (80022ec <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800222e:	edc3 7a01 	vstr	s15, [r3, #4]
	    	fcb_joint1.Goal_Velocity = ((2.0*C2_q1*t) - (3.0 * C3_q1*t_2)) * -2 ;
 8002232:	4b34      	ldr	r3, [pc, #208]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002234:	edd3 7a00 	vldr	s15, [r3]
 8002238:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800223c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002240:	4b2f      	ldr	r3, [pc, #188]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002242:	edd3 7a00 	vldr	s15, [r3]
 8002246:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800224a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800224e:	4b2f      	ldr	r3, [pc, #188]	; (800230c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8002250:	edd3 7a00 	vldr	s15, [r3]
 8002254:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002258:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 800225c:	ee27 5b05 	vmul.f64	d5, d7, d5
 8002260:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002264:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002268:	ee25 7b07 	vmul.f64	d7, d5, d7
 800226c:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002270:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 8002274:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002278:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800227c:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <HAL_TIM_PeriodElapsedCallback+0x21c>)
 800227e:	edc3 7a02 	vstr	s15, [r3, #8]
	    	fcb_joint3.Goal_Velocity = ((2.0*C2_q1*t) - (3.0 * C3_q1*t_2)) * -2 ;
 8002282:	4b20      	ldr	r3, [pc, #128]	; (8002304 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8002284:	edd3 7a00 	vldr	s15, [r3]
 8002288:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800228c:	ee37 6b07 	vadd.f64	d6, d7, d7
 8002290:	4b1b      	ldr	r3, [pc, #108]	; (8002300 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8002292:	edd3 7a00 	vldr	s15, [r3]
 8002296:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800229a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800229e:	4b1b      	ldr	r3, [pc, #108]	; (800230c <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80022a0:	edd3 7a00 	vldr	s15, [r3]
 80022a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022a8:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80022ac:	ee27 5b05 	vmul.f64	d5, d7, d5
 80022b0:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80022b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80022b8:	ee25 7b07 	vmul.f64	d7, d5, d7
 80022bc:	ee36 7b47 	vsub.f64	d7, d6, d7
 80022c0:	eeb8 6b00 	vmov.f64	d6, #128	; 0xc0000000 -2.0
 80022c4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80022c8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80022cc:	4b10      	ldr	r3, [pc, #64]	; (8002310 <HAL_TIM_PeriodElapsedCallback+0x240>)
 80022ce:	edc3 7a02 	vstr	s15, [r3, #8]
 80022d2:	e098      	b.n	8002406 <HAL_TIM_PeriodElapsedCallback+0x336>
 80022d4:	f3af 8000 	nop.w
 80022d8:	9999999a 	.word	0x9999999a
 80022dc:	3fe99999 	.word	0x3fe99999
 80022e0:	24000670 	.word	0x24000670
 80022e4:	2400024c 	.word	0x2400024c
 80022e8:	240002d4 	.word	0x240002d4
 80022ec:	24000310 	.word	0x24000310
 80022f0:	24000268 	.word	0x24000268
 80022f4:	240002d5 	.word	0x240002d5
 80022f8:	240002d8 	.word	0x240002d8
 80022fc:	240008d0 	.word	0x240008d0
 8002300:	240002e4 	.word	0x240002e4
 8002304:	240002e8 	.word	0x240002e8
 8002308:	24000004 	.word	0x24000004
 800230c:	240002ec 	.word	0x240002ec
 8002310:	24000418 	.word	0x24000418
 8002314:	240002f8 	.word	0x240002f8
 8002318:	24000308 	.word	0x24000308
 800231c:	240002dc 	.word	0x240002dc
 8002320:	2400030c 	.word	0x2400030c
	    }
	    else
	    {
	    	fcb_joint1.Goal_Position = unwrap_pose - (C0_q1 + (C2_q1*t_2) - (C3_q1*t_3)) + 0.8;
 8002324:	4bb8      	ldr	r3, [pc, #736]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x538>)
 8002326:	ed93 7a00 	vldr	s14, [r3]
 800232a:	4bb8      	ldr	r3, [pc, #736]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 800232c:	edd3 6a00 	vldr	s13, [r3]
 8002330:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002334:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002338:	4bb5      	ldr	r3, [pc, #724]	; (8002610 <HAL_TIM_PeriodElapsedCallback+0x540>)
 800233a:	edd3 7a00 	vldr	s15, [r3]
 800233e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8002342:	4bb4      	ldr	r3, [pc, #720]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0x544>)
 8002344:	ed93 6a00 	vldr	s12, [r3]
 8002348:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800234c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002350:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002358:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800235c:	ed9f 6ba6 	vldr	d6, [pc, #664]	; 80025f8 <HAL_TIM_PeriodElapsedCallback+0x528>
 8002360:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002364:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002368:	4bab      	ldr	r3, [pc, #684]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x548>)
 800236a:	edc3 7a01 	vstr	s15, [r3, #4]
	    	fcb_joint1.Goal_Velocity = ((2.0*C2_q1*t) - (3.0 * C3_q1*t_2)) * 2 ;
 800236e:	4ba7      	ldr	r3, [pc, #668]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 8002370:	edd3 7a00 	vldr	s15, [r3]
 8002374:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002378:	ee37 6b07 	vadd.f64	d6, d7, d7
 800237c:	4ba7      	ldr	r3, [pc, #668]	; (800261c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 800237e:	edd3 7a00 	vldr	s15, [r3]
 8002382:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002386:	ee26 6b07 	vmul.f64	d6, d6, d7
 800238a:	4ba2      	ldr	r3, [pc, #648]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0x544>)
 800238c:	edd3 7a00 	vldr	s15, [r3]
 8002390:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002394:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 8002398:	ee27 5b05 	vmul.f64	d5, d7, d5
 800239c:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80023a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023a4:	ee25 7b07 	vmul.f64	d7, d5, d7
 80023a8:	ee36 7b47 	vsub.f64	d7, d6, d7
 80023ac:	ee37 7b07 	vadd.f64	d7, d7, d7
 80023b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80023b4:	4b98      	ldr	r3, [pc, #608]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x548>)
 80023b6:	edc3 7a02 	vstr	s15, [r3, #8]
	    	fcb_joint3.Goal_Velocity = ((2.0*C2_q1*t) - (3.0 * C3_q1*t_2)) * 2 ;
 80023ba:	4b94      	ldr	r3, [pc, #592]	; (800260c <HAL_TIM_PeriodElapsedCallback+0x53c>)
 80023bc:	edd3 7a00 	vldr	s15, [r3]
 80023c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023c4:	ee37 6b07 	vadd.f64	d6, d7, d7
 80023c8:	4b94      	ldr	r3, [pc, #592]	; (800261c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80023ca:	edd3 7a00 	vldr	s15, [r3]
 80023ce:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023d2:	ee26 6b07 	vmul.f64	d6, d6, d7
 80023d6:	4b8f      	ldr	r3, [pc, #572]	; (8002614 <HAL_TIM_PeriodElapsedCallback+0x544>)
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023e0:	eeb0 5b08 	vmov.f64	d5, #8	; 0x40400000  3.0
 80023e4:	ee27 5b05 	vmul.f64	d5, d7, d5
 80023e8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80023ec:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80023f0:	ee25 7b07 	vmul.f64	d7, d5, d7
 80023f4:	ee36 7b47 	vsub.f64	d7, d6, d7
 80023f8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80023fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002400:	4b87      	ldr	r3, [pc, #540]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002402:	edc3 7a02 	vstr	s15, [r3, #8]


//		fcb_joint1.Goal_Velocity = sin(0.314 * 2 * t) * 2000;
//		fcb_joint3.Goal_Velocity = sin(0.314 * 2 * t) * 4000;

	    chess_board_ang = chessboard_angular_velocity * t;
 8002406:	4b87      	ldr	r3, [pc, #540]	; (8002624 <HAL_TIM_PeriodElapsedCallback+0x554>)
 8002408:	ed93 7a00 	vldr	s14, [r3]
 800240c:	4b83      	ldr	r3, [pc, #524]	; (800261c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 800240e:	edd3 7a00 	vldr	s15, [r3]
 8002412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002416:	4b84      	ldr	r3, [pc, #528]	; (8002628 <HAL_TIM_PeriodElapsedCallback+0x558>)
 8002418:	edc3 7a00 	vstr	s15, [r3]

//		setpointJ1 = Goal_velocity_q1;
//		setpointJ3 = Goal_velocity_q3;


		fcb_joint1.Error_p = fcb_joint1.Goal_Position - fcb_joint1.Encoder;
 800241c:	4b7e      	ldr	r3, [pc, #504]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x548>)
 800241e:	ed93 7a01 	vldr	s14, [r3, #4]
 8002422:	4b7d      	ldr	r3, [pc, #500]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002424:	881b      	ldrh	r3, [r3, #0]
 8002426:	b21b      	sxth	r3, r3
 8002428:	ee07 3a90 	vmov	s15, r3
 800242c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002430:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002434:	4b78      	ldr	r3, [pc, #480]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002436:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		fcb_joint3.Error_p = fcb_joint3.Goal_Position - fcb_joint3.Encoder;
 800243a:	4b79      	ldr	r3, [pc, #484]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x550>)
 800243c:	ed93 7a01 	vldr	s14, [r3, #4]
 8002440:	4b77      	ldr	r3, [pc, #476]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002442:	881b      	ldrh	r3, [r3, #0]
 8002444:	b21b      	sxth	r3, r3
 8002446:	ee07 3a90 	vmov	s15, r3
 800244a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800244e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002452:	4b73      	ldr	r3, [pc, #460]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002454:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		fcb_joint1.Sum_Error_p += fcb_joint1.Error_p;
 8002458:	4b6f      	ldr	r3, [pc, #444]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x548>)
 800245a:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 800245e:	4b6e      	ldr	r3, [pc, #440]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002460:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002464:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002468:	4b6b      	ldr	r3, [pc, #428]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x548>)
 800246a:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
		fcb_joint3.Sum_Error_p += fcb_joint3.Error_p;
 800246e:	4b6c      	ldr	r3, [pc, #432]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002470:	ed93 7a0d 	vldr	s14, [r3, #52]	; 0x34
 8002474:	4b6a      	ldr	r3, [pc, #424]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002476:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800247a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800247e:	4b68      	ldr	r3, [pc, #416]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002480:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

		fcb_joint1.Kp_p = 0.0 ;
 8002484:	4b64      	ldr	r3, [pc, #400]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002486:	f04f 0200 	mov.w	r2, #0
 800248a:	61da      	str	r2, [r3, #28]
		fcb_joint1.Ki_p = 0.0 ;
 800248c:	4b62      	ldr	r3, [pc, #392]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x548>)
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	621a      	str	r2, [r3, #32]
		fcb_joint1.Kd_p = 0.0 ;
 8002494:	4b60      	ldr	r3, [pc, #384]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	625a      	str	r2, [r3, #36]	; 0x24

		fcb_joint1.Kp_v = 0.0 ;
 800249c:	4b5e      	ldr	r3, [pc, #376]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x548>)
 800249e:	f04f 0200 	mov.w	r2, #0
 80024a2:	629a      	str	r2, [r3, #40]	; 0x28
		fcb_joint1.Ki_v = 0.0 ;
 80024a4:	4b5c      	ldr	r3, [pc, #368]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x548>)
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	62da      	str	r2, [r3, #44]	; 0x2c
		fcb_joint1.Kd_v = 0.0 ;
 80024ac:	4b5a      	ldr	r3, [pc, #360]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x548>)
 80024ae:	f04f 0200 	mov.w	r2, #0
 80024b2:	631a      	str	r2, [r3, #48]	; 0x30

		fcb_joint3.Kp_p = 0.0 ;
 80024b4:	4b5a      	ldr	r3, [pc, #360]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80024b6:	f04f 0200 	mov.w	r2, #0
 80024ba:	61da      	str	r2, [r3, #28]
		fcb_joint3.Ki_p = 0.0 ;
 80024bc:	4b58      	ldr	r3, [pc, #352]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	621a      	str	r2, [r3, #32]
		fcb_joint3.Kd_p = 0.0 ;
 80024c4:	4b56      	ldr	r3, [pc, #344]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	625a      	str	r2, [r3, #36]	; 0x24

		fcb_joint3.Kp_v = 0.0 ;
 80024cc:	4b54      	ldr	r3, [pc, #336]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80024ce:	f04f 0200 	mov.w	r2, #0
 80024d2:	629a      	str	r2, [r3, #40]	; 0x28
		fcb_joint3.Ki_v = 0.0 ;
 80024d4:	4b52      	ldr	r3, [pc, #328]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80024d6:	f04f 0200 	mov.w	r2, #0
 80024da:	62da      	str	r2, [r3, #44]	; 0x2c
		fcb_joint3.Kd_v = 0.0 ;
 80024dc:	4b50      	ldr	r3, [pc, #320]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x550>)
 80024de:	f04f 0200 	mov.w	r2, #0
 80024e2:	631a      	str	r2, [r3, #48]	; 0x30

//		KalmanFilter(float theta_k,float kalman_pos,float kalman_velo,float P11,float P12,float P21,float P22);
//		KalmanFilter(fcb_joint1.Encoder/ 2609.0 , X11, X21, p11, p12, p21, p22, fcb_joint1);

		fcb_joint1 = KalmanFilter(fcb_joint1.Encoder/ 2609.0 ,fcb_joint1);
 80024e4:	4b4c      	ldr	r3, [pc, #304]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x548>)
 80024e6:	881b      	ldrh	r3, [r3, #0]
 80024e8:	b21b      	sxth	r3, r3
 80024ea:	ee07 3a90 	vmov	s15, r3
 80024ee:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80024f2:	ed9f 5b43 	vldr	d5, [pc, #268]	; 8002600 <HAL_TIM_PeriodElapsedCallback+0x530>
 80024f6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80024fa:	eeb7 8bc7 	vcvt.f32.f64	s16, d7
 80024fe:	4e46      	ldr	r6, [pc, #280]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002500:	463d      	mov	r5, r7
 8002502:	4c45      	ldr	r4, [pc, #276]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002504:	4668      	mov	r0, sp
 8002506:	f104 030c 	add.w	r3, r4, #12
 800250a:	2278      	movs	r2, #120	; 0x78
 800250c:	4619      	mov	r1, r3
 800250e:	f00c f8d1 	bl	800e6b4 <memcpy>
 8002512:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8002516:	eeb0 0a48 	vmov.f32	s0, s16
 800251a:	4628      	mov	r0, r5
 800251c:	f7ff f9b8 	bl	8001890 <_Z12KalmanFilterf11robot_joint>
 8002520:	4630      	mov	r0, r6
 8002522:	463b      	mov	r3, r7
 8002524:	2284      	movs	r2, #132	; 0x84
 8002526:	4619      	mov	r1, r3
 8002528:	f00c f8c4 	bl	800e6b4 <memcpy>
//											  (fcb_joint3.Kd_p * (fcb_joint3.Error_p - fcb_joint3.Old_Error_p));
//
//		fcb_joint1.Output_Stepper_Frequency = (fcb_joint1.Kp_p * fcb_joint1.Error_p);
//		fcb_joint3.Output_Stepper_Frequency = (fcb_joint3.Kp_p * fcb_joint3.Error_p);

		fcb_joint1.Output_Stepper_Frequency = fcb_joint1.Goal_Position;
 800252c:	4b3a      	ldr	r3, [pc, #232]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x548>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	4a39      	ldr	r2, [pc, #228]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002532:	6553      	str	r3, [r2, #84]	; 0x54
		fcb_joint3.Output_Stepper_Frequency = fcb_joint3.Goal_Position;
 8002534:	4b3a      	ldr	r3, [pc, #232]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	4a39      	ldr	r2, [pc, #228]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x550>)
 800253a:	6553      	str	r3, [r2, #84]	; 0x54



		fcb_joint1.Old_Error_p = fcb_joint1.Error_p;
 800253c:	4b36      	ldr	r3, [pc, #216]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x548>)
 800253e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002540:	4a35      	ldr	r2, [pc, #212]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002542:	6393      	str	r3, [r2, #56]	; 0x38
		fcb_joint3.Old_Error_p = fcb_joint3.Error_p;
 8002544:	4b36      	ldr	r3, [pc, #216]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002548:	4a35      	ldr	r2, [pc, #212]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x550>)
 800254a:	6393      	str	r3, [r2, #56]	; 0x38
		fcb_joint1.Old_p = fcb_joint1.Encoder;
 800254c:	4b32      	ldr	r3, [pc, #200]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x548>)
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	b21b      	sxth	r3, r3
 8002552:	ee07 3a90 	vmov	s15, r3
 8002556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800255a:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x548>)
 800255c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		fcb_joint3.Old_p = fcb_joint3.Encoder;
 8002560:	4b2f      	ldr	r3, [pc, #188]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002562:	881b      	ldrh	r3, [r3, #0]
 8002564:	b21b      	sxth	r3, r3
 8002566:	ee07 3a90 	vmov	s15, r3
 800256a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800256e:	4b2c      	ldr	r3, [pc, #176]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002570:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
//		stepperJ1.StepperSetFrequency(300.0f);

//		stepperJ1.StepperSetFrequency(uJ1);
//		stepperJ3.StepperSetFrequency(0.0f);

		stepperJ1.StepperOpenLoopSpeed(fcb_joint1.Goal_Velocity);
 8002574:	4b28      	ldr	r3, [pc, #160]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x548>)
 8002576:	edd3 7a02 	vldr	s15, [r3, #8]
 800257a:	eeb0 0a67 	vmov.f32	s0, s15
 800257e:	482b      	ldr	r0, [pc, #172]	; (800262c <HAL_TIM_PeriodElapsedCallback+0x55c>)
 8002580:	f7fe fce6 	bl	8000f50 <_ZN7Stepper20StepperOpenLoopSpeedEf>
		stepperJ3.StepperOpenLoopSpeed(fcb_joint3.Goal_Velocity);
 8002584:	4b26      	ldr	r3, [pc, #152]	; (8002620 <HAL_TIM_PeriodElapsedCallback+0x550>)
 8002586:	edd3 7a02 	vldr	s15, [r3, #8]
 800258a:	eeb0 0a67 	vmov.f32	s0, s15
 800258e:	4828      	ldr	r0, [pc, #160]	; (8002630 <HAL_TIM_PeriodElapsedCallback+0x560>)
 8002590:	f7fe fcde 	bl	8000f50 <_ZN7Stepper20StepperOpenLoopSpeedEf>

		#endif

		t = t + (sample_time_1000) ;
 8002594:	4b21      	ldr	r3, [pc, #132]	; (800261c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 8002596:	ed93 7a00 	vldr	s14, [r3]
 800259a:	4b26      	ldr	r3, [pc, #152]	; (8002634 <HAL_TIM_PeriodElapsedCallback+0x564>)
 800259c:	edd3 7a00 	vldr	s15, [r3]
 80025a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a4:	4b1d      	ldr	r3, [pc, #116]	; (800261c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80025a6:	edc3 7a00 	vstr	s15, [r3]
		if (t >= Time)
 80025aa:	4b1c      	ldr	r3, [pc, #112]	; (800261c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80025ac:	ed93 7a00 	vldr	s14, [r3]
 80025b0:	4b21      	ldr	r3, [pc, #132]	; (8002638 <HAL_TIM_PeriodElapsedCallback+0x568>)
 80025b2:	edd3 7a00 	vldr	s15, [r3]
 80025b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025be:	bfac      	ite	ge
 80025c0:	2301      	movge	r3, #1
 80025c2:	2300      	movlt	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d00d      	beq.n	80025e6 <HAL_TIM_PeriodElapsedCallback+0x516>
		{
			t = 0.0;
 80025ca:	4b14      	ldr	r3, [pc, #80]	; (800261c <HAL_TIM_PeriodElapsedCallback+0x54c>)
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
			direction_traj ^= 1;
 80025d2:	4b1a      	ldr	r3, [pc, #104]	; (800263c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f083 0301 	eor.w	r3, r3, #1
 80025da:	4a18      	ldr	r2, [pc, #96]	; (800263c <HAL_TIM_PeriodElapsedCallback+0x56c>)
 80025dc:	6013      	str	r3, [r2, #0]
			unwrap_pose =  fcb_joint1.Goal_Position;
 80025de:	4b0e      	ldr	r3, [pc, #56]	; (8002618 <HAL_TIM_PeriodElapsedCallback+0x548>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	4a09      	ldr	r2, [pc, #36]	; (8002608 <HAL_TIM_PeriodElapsedCallback+0x538>)
 80025e4:	6013      	str	r3, [r2, #0]
		}

	}
}
 80025e6:	bf00      	nop
 80025e8:	37ac      	adds	r7, #172	; 0xac
 80025ea:	46bd      	mov	sp, r7
 80025ec:	ecbd 8b02 	vpop	{d8}
 80025f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025f2:	bf00      	nop
 80025f4:	f3af 8000 	nop.w
 80025f8:	9999999a 	.word	0x9999999a
 80025fc:	3fe99999 	.word	0x3fe99999
 8002600:	00000000 	.word	0x00000000
 8002604:	40a46200 	.word	0x40a46200
 8002608:	2400030c 	.word	0x2400030c
 800260c:	240002e8 	.word	0x240002e8
 8002610:	24000004 	.word	0x24000004
 8002614:	240002ec 	.word	0x240002ec
 8002618:	24000310 	.word	0x24000310
 800261c:	240002e4 	.word	0x240002e4
 8002620:	24000418 	.word	0x24000418
 8002624:	24000010 	.word	0x24000010
 8002628:	240002e0 	.word	0x240002e0
 800262c:	24000284 	.word	0x24000284
 8002630:	240002ac 	.word	0x240002ac
 8002634:	2400000c 	.word	0x2400000c
 8002638:	24000000 	.word	0x24000000
 800263c:	240002dc 	.word	0x240002dc

08002640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002644:	f001 ffae 	bl	80045a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002648:	f000 f95a 	bl	8002900 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800264c:	f7fe fd4c 	bl	80010e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002650:	f7fe fd0a 	bl	8001068 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8002654:	f001 fcfa 	bl	800404c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8002658:	f000 fefe 	bl	8003458 <MX_TIM2_Init>
  MX_UART4_Init();
 800265c:	f001 fc54 	bl	8003f08 <MX_UART4_Init>
  MX_TIM4_Init();
 8002660:	f000 ffea 	bl	8003638 <MX_TIM4_Init>
  MX_SPI3_Init();
 8002664:	f000 fb4c 	bl	8002d00 <MX_SPI3_Init>
  MX_TIM1_Init();
 8002668:	f000 fe48 	bl	80032fc <MX_TIM1_Init>
  MX_TIM3_Init();
 800266c:	f000 ff6c 	bl	8003548 <MX_TIM3_Init>
  MX_TIM5_Init();
 8002670:	f001 f85a 	bl	8003728 <MX_TIM5_Init>
  MX_TIM15_Init();
 8002674:	f001 f994 	bl	80039a0 <MX_TIM15_Init>
  MX_CRC_Init();
 8002678:	f7fe fca6 	bl	8000fc8 <MX_CRC_Init>
  MX_UART7_Init();
 800267c:	f001 fc98 	bl	8003fb0 <MX_UART7_Init>
  MX_TIM6_Init();
 8002680:	f001 f8a0 	bl	80037c4 <MX_TIM6_Init>
  MX_TIM7_Init();
 8002684:	f001 f8d4 	bl	8003830 <MX_TIM7_Init>
  MX_TIM12_Init();
 8002688:	f001 f908 	bl	800389c <MX_TIM12_Init>
  MX_TIM13_Init();
 800268c:	f001 f940 	bl	8003910 <MX_TIM13_Init>
  MX_TIM14_Init();
 8002690:	f001 f962 	bl	8003958 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8002694:	2201      	movs	r2, #1
 8002696:	2101      	movs	r1, #1
 8002698:	487c      	ldr	r0, [pc, #496]	; (800288c <main+0x24c>)
 800269a:	f005 fb25 	bl	8007ce8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800269e:	2201      	movs	r2, #1
 80026a0:	2102      	movs	r1, #2
 80026a2:	487b      	ldr	r0, [pc, #492]	; (8002890 <main+0x250>)
 80026a4:	f005 fb20 	bl	8007ce8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80026a8:	2200      	movs	r2, #0
 80026aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80026ae:	4877      	ldr	r0, [pc, #476]	; (800288c <main+0x24c>)
 80026b0:	f005 fb1a 	bl	8007ce8 <HAL_GPIO_WritePin>

#ifdef __cplusplus
	stepperJ1.StepperSetFrequency(0.0f);
 80026b4:	ed9f 0a77 	vldr	s0, [pc, #476]	; 8002894 <main+0x254>
 80026b8:	4877      	ldr	r0, [pc, #476]	; (8002898 <main+0x258>)
 80026ba:	f7fe f997 	bl	80009ec <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ1.StepperSetMicrostep(16);
 80026be:	2110      	movs	r1, #16
 80026c0:	4875      	ldr	r0, [pc, #468]	; (8002898 <main+0x258>)
 80026c2:	f7fe fc2f 	bl	8000f24 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(3);
 80026c6:	eeb0 0a08 	vmov.f32	s0, #8	; 0x40400000  3.0
 80026ca:	4873      	ldr	r0, [pc, #460]	; (8002898 <main+0x258>)
 80026cc:	f7fe fc06 	bl	8000edc <_ZN7Stepper15StepperSetRatioEf>
	stepperJ1.StepperEnable();
 80026d0:	4871      	ldr	r0, [pc, #452]	; (8002898 <main+0x258>)
 80026d2:	f7fe f97a 	bl	80009ca <_ZN7Stepper13StepperEnableEv>
//	stepperJ2.StepperSetMicrostep(1);
//	stepperJ2.StepperSetRatio(1);
//	stepperJ1.StepperSetFrequency(15842.0f);
	stepperJ3.StepperSetFrequency(0.0f);
 80026d6:	ed9f 0a6f 	vldr	s0, [pc, #444]	; 8002894 <main+0x254>
 80026da:	4870      	ldr	r0, [pc, #448]	; (800289c <main+0x25c>)
 80026dc:	f7fe f986 	bl	80009ec <_ZN7Stepper19StepperSetFrequencyEf>
	stepperJ3.StepperSetMicrostep(8);
 80026e0:	2108      	movs	r1, #8
 80026e2:	486e      	ldr	r0, [pc, #440]	; (800289c <main+0x25c>)
 80026e4:	f7fe fc1e 	bl	8000f24 <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(9);
 80026e8:	eeb2 0a02 	vmov.f32	s0, #34	; 0x41100000  9.0
 80026ec:	486b      	ldr	r0, [pc, #428]	; (800289c <main+0x25c>)
 80026ee:	f7fe fbf5 	bl	8000edc <_ZN7Stepper15StepperSetRatioEf>
	stepperJ3.StepperEnable();
 80026f2:	486a      	ldr	r0, [pc, #424]	; (800289c <main+0x25c>)
 80026f4:	f7fe f969 	bl	80009ca <_ZN7Stepper13StepperEnableEv>

//	stepperJ4.StepperSetMicrostep(1);
//	stepperJ4.StepperSetRatio(1);
#endif

	HAL_TIM_Base_Start_IT(&htim5);
 80026f8:	4869      	ldr	r0, [pc, #420]	; (80028a0 <main+0x260>)
 80026fa:	f007 fff5 	bl	800a6e8 <HAL_TIM_Base_Start_IT>
//	HAL_TIM_Base_Start_IT(&htim7);
//	HAL_TIM_Base_Start_IT(&htim12);
//	HAL_TIM_Base_Start_IT(&htim14);

	// Encoder
	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, (uint8_t*) New_Rx_Buffer, Rx_BUFFER_SIZE);
 80026fe:	2214      	movs	r2, #20
 8002700:	4968      	ldr	r1, [pc, #416]	; (80028a4 <main+0x264>)
 8002702:	4869      	ldr	r0, [pc, #420]	; (80028a8 <main+0x268>)
 8002704:	f00b fb97 	bl	800de36 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8002708:	4b68      	ldr	r3, [pc, #416]	; (80028ac <main+0x26c>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a68      	ldr	r2, [pc, #416]	; (80028b0 <main+0x270>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d04a      	beq.n	80027a8 <main+0x168>
 8002712:	4b66      	ldr	r3, [pc, #408]	; (80028ac <main+0x26c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a67      	ldr	r2, [pc, #412]	; (80028b4 <main+0x274>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d045      	beq.n	80027a8 <main+0x168>
 800271c:	4b63      	ldr	r3, [pc, #396]	; (80028ac <main+0x26c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a65      	ldr	r2, [pc, #404]	; (80028b8 <main+0x278>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d040      	beq.n	80027a8 <main+0x168>
 8002726:	4b61      	ldr	r3, [pc, #388]	; (80028ac <main+0x26c>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a64      	ldr	r2, [pc, #400]	; (80028bc <main+0x27c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d03b      	beq.n	80027a8 <main+0x168>
 8002730:	4b5e      	ldr	r3, [pc, #376]	; (80028ac <main+0x26c>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a62      	ldr	r2, [pc, #392]	; (80028c0 <main+0x280>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d036      	beq.n	80027a8 <main+0x168>
 800273a:	4b5c      	ldr	r3, [pc, #368]	; (80028ac <main+0x26c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a61      	ldr	r2, [pc, #388]	; (80028c4 <main+0x284>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d031      	beq.n	80027a8 <main+0x168>
 8002744:	4b59      	ldr	r3, [pc, #356]	; (80028ac <main+0x26c>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a5f      	ldr	r2, [pc, #380]	; (80028c8 <main+0x288>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d02c      	beq.n	80027a8 <main+0x168>
 800274e:	4b57      	ldr	r3, [pc, #348]	; (80028ac <main+0x26c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a5e      	ldr	r2, [pc, #376]	; (80028cc <main+0x28c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d027      	beq.n	80027a8 <main+0x168>
 8002758:	4b54      	ldr	r3, [pc, #336]	; (80028ac <main+0x26c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a5c      	ldr	r2, [pc, #368]	; (80028d0 <main+0x290>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d022      	beq.n	80027a8 <main+0x168>
 8002762:	4b52      	ldr	r3, [pc, #328]	; (80028ac <main+0x26c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a5b      	ldr	r2, [pc, #364]	; (80028d4 <main+0x294>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d01d      	beq.n	80027a8 <main+0x168>
 800276c:	4b4f      	ldr	r3, [pc, #316]	; (80028ac <main+0x26c>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a59      	ldr	r2, [pc, #356]	; (80028d8 <main+0x298>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d018      	beq.n	80027a8 <main+0x168>
 8002776:	4b4d      	ldr	r3, [pc, #308]	; (80028ac <main+0x26c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a58      	ldr	r2, [pc, #352]	; (80028dc <main+0x29c>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d013      	beq.n	80027a8 <main+0x168>
 8002780:	4b4a      	ldr	r3, [pc, #296]	; (80028ac <main+0x26c>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a56      	ldr	r2, [pc, #344]	; (80028e0 <main+0x2a0>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d00e      	beq.n	80027a8 <main+0x168>
 800278a:	4b48      	ldr	r3, [pc, #288]	; (80028ac <main+0x26c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a55      	ldr	r2, [pc, #340]	; (80028e4 <main+0x2a4>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d009      	beq.n	80027a8 <main+0x168>
 8002794:	4b45      	ldr	r3, [pc, #276]	; (80028ac <main+0x26c>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a53      	ldr	r2, [pc, #332]	; (80028e8 <main+0x2a8>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d004      	beq.n	80027a8 <main+0x168>
 800279e:	4b43      	ldr	r3, [pc, #268]	; (80028ac <main+0x26c>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a52      	ldr	r2, [pc, #328]	; (80028ec <main+0x2ac>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d108      	bne.n	80027ba <main+0x17a>
 80027a8:	4b40      	ldr	r3, [pc, #256]	; (80028ac <main+0x26c>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	4b3f      	ldr	r3, [pc, #252]	; (80028ac <main+0x26c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0208 	bic.w	r2, r2, #8
 80027b6:	601a      	str	r2, [r3, #0]
 80027b8:	e007      	b.n	80027ca <main+0x18a>
 80027ba:	4b3c      	ldr	r3, [pc, #240]	; (80028ac <main+0x26c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b3a      	ldr	r3, [pc, #232]	; (80028ac <main+0x26c>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0204 	bic.w	r2, r2, #4
 80027c8:	601a      	str	r2, [r3, #0]
//	stepperJ1.StepperOpenLoopSpeed(1.00f);

	// Backup
	fcb_joint1.Kp_p = 0.0 ;
 80027ca:	4b49      	ldr	r3, [pc, #292]	; (80028f0 <main+0x2b0>)
 80027cc:	f04f 0200 	mov.w	r2, #0
 80027d0:	61da      	str	r2, [r3, #28]
	fcb_joint1.Kp_v = 0.0 ;
 80027d2:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <main+0x2b0>)
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint1.Ki_p = 0.0 ;
 80027da:	4b45      	ldr	r3, [pc, #276]	; (80028f0 <main+0x2b0>)
 80027dc:	f04f 0200 	mov.w	r2, #0
 80027e0:	621a      	str	r2, [r3, #32]
	fcb_joint1.Ki_v = 0.0 ;
 80027e2:	4b43      	ldr	r3, [pc, #268]	; (80028f0 <main+0x2b0>)
 80027e4:	f04f 0200 	mov.w	r2, #0
 80027e8:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint1.Kd_p = 0.0 ;
 80027ea:	4b41      	ldr	r3, [pc, #260]	; (80028f0 <main+0x2b0>)
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint1.Kd_p = 0.0 ;
 80027f2:	4b3f      	ldr	r3, [pc, #252]	; (80028f0 <main+0x2b0>)
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint2.Kp_p = 0.0 ;
 80027fa:	4b3e      	ldr	r3, [pc, #248]	; (80028f4 <main+0x2b4>)
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	61da      	str	r2, [r3, #28]
	fcb_joint2.Kp_v = 0.0 ;
 8002802:	4b3c      	ldr	r3, [pc, #240]	; (80028f4 <main+0x2b4>)
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint2.Ki_p = 0.0 ;
 800280a:	4b3a      	ldr	r3, [pc, #232]	; (80028f4 <main+0x2b4>)
 800280c:	f04f 0200 	mov.w	r2, #0
 8002810:	621a      	str	r2, [r3, #32]
	fcb_joint2.Ki_v = 0.0 ;
 8002812:	4b38      	ldr	r3, [pc, #224]	; (80028f4 <main+0x2b4>)
 8002814:	f04f 0200 	mov.w	r2, #0
 8002818:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint2.Kd_p = 0.0 ;
 800281a:	4b36      	ldr	r3, [pc, #216]	; (80028f4 <main+0x2b4>)
 800281c:	f04f 0200 	mov.w	r2, #0
 8002820:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint2.Kd_p = 0.0 ;
 8002822:	4b34      	ldr	r3, [pc, #208]	; (80028f4 <main+0x2b4>)
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint3.Kp_p = 0.0 ;
 800282a:	4b33      	ldr	r3, [pc, #204]	; (80028f8 <main+0x2b8>)
 800282c:	f04f 0200 	mov.w	r2, #0
 8002830:	61da      	str	r2, [r3, #28]
	fcb_joint3.Kp_v = 0.0 ;
 8002832:	4b31      	ldr	r3, [pc, #196]	; (80028f8 <main+0x2b8>)
 8002834:	f04f 0200 	mov.w	r2, #0
 8002838:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint3.Ki_p = 0.0 ;
 800283a:	4b2f      	ldr	r3, [pc, #188]	; (80028f8 <main+0x2b8>)
 800283c:	f04f 0200 	mov.w	r2, #0
 8002840:	621a      	str	r2, [r3, #32]
	fcb_joint3.Ki_v = 0.0 ;
 8002842:	4b2d      	ldr	r3, [pc, #180]	; (80028f8 <main+0x2b8>)
 8002844:	f04f 0200 	mov.w	r2, #0
 8002848:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint3.Kd_p = 0.0 ;
 800284a:	4b2b      	ldr	r3, [pc, #172]	; (80028f8 <main+0x2b8>)
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint3.Kd_p = 0.0 ;
 8002852:	4b29      	ldr	r3, [pc, #164]	; (80028f8 <main+0x2b8>)
 8002854:	f04f 0200 	mov.w	r2, #0
 8002858:	625a      	str	r2, [r3, #36]	; 0x24

	fcb_joint4.Kp_p = 0.0 ;
 800285a:	4b28      	ldr	r3, [pc, #160]	; (80028fc <main+0x2bc>)
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	61da      	str	r2, [r3, #28]
	fcb_joint4.Kp_v = 0.0 ;
 8002862:	4b26      	ldr	r3, [pc, #152]	; (80028fc <main+0x2bc>)
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	629a      	str	r2, [r3, #40]	; 0x28
	fcb_joint4.Ki_p = 0.0 ;
 800286a:	4b24      	ldr	r3, [pc, #144]	; (80028fc <main+0x2bc>)
 800286c:	f04f 0200 	mov.w	r2, #0
 8002870:	621a      	str	r2, [r3, #32]
	fcb_joint4.Ki_v = 0.0 ;
 8002872:	4b22      	ldr	r3, [pc, #136]	; (80028fc <main+0x2bc>)
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	62da      	str	r2, [r3, #44]	; 0x2c
	fcb_joint4.Kd_p = 0.0 ;
 800287a:	4b20      	ldr	r3, [pc, #128]	; (80028fc <main+0x2bc>)
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	625a      	str	r2, [r3, #36]	; 0x24
	fcb_joint4.Kd_p = 0.0 ;
 8002882:	4b1e      	ldr	r3, [pc, #120]	; (80028fc <main+0x2bc>)
 8002884:	f04f 0200 	mov.w	r2, #0
 8002888:	625a      	str	r2, [r3, #36]	; 0x24

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 800288a:	e7fe      	b.n	800288a <main+0x24a>
 800288c:	58020400 	.word	0x58020400
 8002890:	58021000 	.word	0x58021000
 8002894:	00000000 	.word	0x00000000
 8002898:	24000284 	.word	0x24000284
 800289c:	240002ac 	.word	0x240002ac
 80028a0:	24000670 	.word	0x24000670
 80028a4:	24000234 	.word	0x24000234
 80028a8:	24000a9c 	.word	0x24000a9c
 80028ac:	24000a24 	.word	0x24000a24
 80028b0:	40020010 	.word	0x40020010
 80028b4:	40020028 	.word	0x40020028
 80028b8:	40020040 	.word	0x40020040
 80028bc:	40020058 	.word	0x40020058
 80028c0:	40020070 	.word	0x40020070
 80028c4:	40020088 	.word	0x40020088
 80028c8:	400200a0 	.word	0x400200a0
 80028cc:	400200b8 	.word	0x400200b8
 80028d0:	40020410 	.word	0x40020410
 80028d4:	40020428 	.word	0x40020428
 80028d8:	40020440 	.word	0x40020440
 80028dc:	40020458 	.word	0x40020458
 80028e0:	40020470 	.word	0x40020470
 80028e4:	40020488 	.word	0x40020488
 80028e8:	400204a0 	.word	0x400204a0
 80028ec:	400204b8 	.word	0x400204b8
 80028f0:	24000310 	.word	0x24000310
 80028f4:	24000394 	.word	0x24000394
 80028f8:	24000418 	.word	0x24000418
 80028fc:	2400049c 	.word	0x2400049c

08002900 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b09c      	sub	sp, #112	; 0x70
 8002904:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800290a:	224c      	movs	r2, #76	; 0x4c
 800290c:	2100      	movs	r1, #0
 800290e:	4618      	mov	r0, r3
 8002910:	f00b fede 	bl	800e6d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002914:	1d3b      	adds	r3, r7, #4
 8002916:	2220      	movs	r2, #32
 8002918:	2100      	movs	r1, #0
 800291a:	4618      	mov	r0, r3
 800291c:	f00b fed8 	bl	800e6d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002920:	2002      	movs	r0, #2
 8002922:	f005 fa15 	bl	8007d50 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8002926:	2300      	movs	r3, #0
 8002928:	603b      	str	r3, [r7, #0]
 800292a:	4b38      	ldr	r3, [pc, #224]	; (8002a0c <_Z18SystemClock_Configv+0x10c>)
 800292c:	699b      	ldr	r3, [r3, #24]
 800292e:	4a37      	ldr	r2, [pc, #220]	; (8002a0c <_Z18SystemClock_Configv+0x10c>)
 8002930:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002934:	6193      	str	r3, [r2, #24]
 8002936:	4b35      	ldr	r3, [pc, #212]	; (8002a0c <_Z18SystemClock_Configv+0x10c>)
 8002938:	699b      	ldr	r3, [r3, #24]
 800293a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	4b33      	ldr	r3, [pc, #204]	; (8002a10 <_Z18SystemClock_Configv+0x110>)
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	4a32      	ldr	r2, [pc, #200]	; (8002a10 <_Z18SystemClock_Configv+0x110>)
 8002946:	f043 0301 	orr.w	r3, r3, #1
 800294a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800294c:	4b30      	ldr	r3, [pc, #192]	; (8002a10 <_Z18SystemClock_Configv+0x110>)
 800294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	603b      	str	r3, [r7, #0]
 8002956:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002958:	4b2c      	ldr	r3, [pc, #176]	; (8002a0c <_Z18SystemClock_Configv+0x10c>)
 800295a:	699b      	ldr	r3, [r3, #24]
 800295c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002960:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002964:	bf14      	ite	ne
 8002966:	2301      	movne	r3, #1
 8002968:	2300      	moveq	r3, #0
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	d000      	beq.n	8002972 <_Z18SystemClock_Configv+0x72>
 8002970:	e7f2      	b.n	8002958 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002972:	2302      	movs	r3, #2
 8002974:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8002976:	2301      	movs	r3, #1
 8002978:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800297a:	2340      	movs	r3, #64	; 0x40
 800297c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800297e:	2302      	movs	r3, #2
 8002980:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002982:	2300      	movs	r3, #0
 8002984:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002986:	2304      	movs	r3, #4
 8002988:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 800298a:	233c      	movs	r3, #60	; 0x3c
 800298c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800298e:	2302      	movs	r3, #2
 8002990:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8002992:	2306      	movs	r3, #6
 8002994:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002996:	2302      	movs	r3, #2
 8002998:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800299a:	230c      	movs	r3, #12
 800299c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800299e:	2300      	movs	r3, #0
 80029a0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80029a2:	2300      	movs	r3, #0
 80029a4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80029a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029aa:	4618      	mov	r0, r3
 80029ac:	f005 fa0a 	bl	8007dc4 <HAL_RCC_OscConfig>
 80029b0:	4603      	mov	r3, r0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	bf14      	ite	ne
 80029b6:	2301      	movne	r3, #1
 80029b8:	2300      	moveq	r3, #0
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d001      	beq.n	80029c4 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 80029c0:	f000 f83e 	bl	8002a40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80029c4:	233f      	movs	r3, #63	; 0x3f
 80029c6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80029c8:	2303      	movs	r3, #3
 80029ca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80029d0:	2308      	movs	r3, #8
 80029d2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80029d4:	2340      	movs	r3, #64	; 0x40
 80029d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80029d8:	2340      	movs	r3, #64	; 0x40
 80029da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80029dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029e0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80029e2:	2340      	movs	r3, #64	; 0x40
 80029e4:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80029e6:	1d3b      	adds	r3, r7, #4
 80029e8:	2104      	movs	r1, #4
 80029ea:	4618      	mov	r0, r3
 80029ec:	f005 fe16 	bl	800861c <HAL_RCC_ClockConfig>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	bf14      	ite	ne
 80029f6:	2301      	movne	r3, #1
 80029f8:	2300      	moveq	r3, #0
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d001      	beq.n	8002a04 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8002a00:	f000 f81e 	bl	8002a40 <Error_Handler>
  }
}
 8002a04:	bf00      	nop
 8002a06:	3770      	adds	r7, #112	; 0x70
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}
 8002a0c:	58024800 	.word	0x58024800
 8002a10:	58000400 	.word	0x58000400

08002a14 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]

}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_GPIO_EXTI_Callback>:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	80fb      	strh	r3, [r7, #6]

}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
	...

08002a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8002a44:	2200      	movs	r2, #0
 8002a46:	2101      	movs	r1, #1
 8002a48:	4808      	ldr	r0, [pc, #32]	; (8002a6c <Error_Handler+0x2c>)
 8002a4a:	f005 f94d 	bl	8007ce8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	2102      	movs	r1, #2
 8002a52:	4807      	ldr	r0, [pc, #28]	; (8002a70 <Error_Handler+0x30>)
 8002a54:	f005 f948 	bl	8007ce8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002a5e:	4803      	ldr	r0, [pc, #12]	; (8002a6c <Error_Handler+0x2c>)
 8002a60:	f005 f942 	bl	8007ce8 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a64:	b672      	cpsid	i
}
 8002a66:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002a68:	e7fe      	b.n	8002a68 <Error_Handler+0x28>
 8002a6a:	bf00      	nop
 8002a6c:	58020400 	.word	0x58020400
 8002a70:	58021000 	.word	0x58021000

08002a74 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	ed87 0a01 	vstr	s0, [r7, #4]
 8002a7e:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8002a80:	edd7 7a01 	vldr	s15, [r7, #4]
 8002a84:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	ee06 3a90 	vmov	s13, r3
 8002a8e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8002a92:	eeb0 1b46 	vmov.f64	d1, d6
 8002a96:	eeb0 0b47 	vmov.f64	d0, d7
 8002a9a:	f00b faad 	bl	800dff8 <pow>
 8002a9e:	eeb0 7b40 	vmov.f64	d7, d0
    }
 8002aa2:	eeb0 0b47 	vmov.f64	d0, d7
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af02      	add	r7, sp, #8
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	f040 80c8 	bne.w	8002c4e <_Z41__static_initialization_and_destruction_0ii+0x1a2>
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	f040 80c2 	bne.w	8002c4e <_Z41__static_initialization_and_destruction_0ii+0x1a2>
AMT21 encoderJ1(&huart4, 0xD4);
 8002aca:	22d4      	movs	r2, #212	; 0xd4
 8002acc:	496c      	ldr	r1, [pc, #432]	; (8002c80 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8002ace:	486d      	ldr	r0, [pc, #436]	; (8002c84 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8002ad0:	f7fd fdda 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
AMT21 encoderJ2(&huart4, 0xB4);
 8002ad4:	22b4      	movs	r2, #180	; 0xb4
 8002ad6:	496a      	ldr	r1, [pc, #424]	; (8002c80 <_Z41__static_initialization_and_destruction_0ii+0x1d4>)
 8002ad8:	486b      	ldr	r0, [pc, #428]	; (8002c88 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002ada:	f7fd fdd5 	bl	8000688 <_ZN5AMT21C1EP20__UART_HandleTypeDefh>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8002ade:	2320      	movs	r3, #32
 8002ae0:	9300      	str	r3, [sp, #0]
 8002ae2:	4b6a      	ldr	r3, [pc, #424]	; (8002c8c <_Z41__static_initialization_and_destruction_0ii+0x1e0>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	496a      	ldr	r1, [pc, #424]	; (8002c90 <_Z41__static_initialization_and_destruction_0ii+0x1e4>)
 8002ae8:	486a      	ldr	r0, [pc, #424]	; (8002c94 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8002aea:	f7fd ff1f 	bl	800092c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8002aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	4b68      	ldr	r3, [pc, #416]	; (8002c98 <_Z41__static_initialization_and_destruction_0ii+0x1ec>)
 8002af6:	2204      	movs	r2, #4
 8002af8:	4968      	ldr	r1, [pc, #416]	; (8002c9c <_Z41__static_initialization_and_destruction_0ii+0x1f0>)
 8002afa:	4869      	ldr	r0, [pc, #420]	; (8002ca0 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8002afc:	f7fd ff16 	bl	800092c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
volatile const float C2_q1 = (3.0*C0_q1) / (Time*Time);
 8002b00:	4b68      	ldr	r3, [pc, #416]	; (8002ca4 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8002b02:	edd3 7a00 	vldr	s15, [r3]
 8002b06:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b0a:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8002b0e:	ee27 5b06 	vmul.f64	d5, d7, d6
 8002b12:	4b65      	ldr	r3, [pc, #404]	; (8002ca8 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8002b14:	ed93 7a00 	vldr	s14, [r3]
 8002b18:	4b63      	ldr	r3, [pc, #396]	; (8002ca8 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8002b1a:	edd3 7a00 	vldr	s15, [r3]
 8002b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b22:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002b26:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002b2a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b2e:	4b5f      	ldr	r3, [pc, #380]	; (8002cac <_Z41__static_initialization_and_destruction_0ii+0x200>)
 8002b30:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q1 = (2.0*C0_q1) / (Time*Time*Time);
 8002b34:	4b5b      	ldr	r3, [pc, #364]	; (8002ca4 <_Z41__static_initialization_and_destruction_0ii+0x1f8>)
 8002b36:	edd3 7a00 	vldr	s15, [r3]
 8002b3a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b3e:	ee37 5b07 	vadd.f64	d5, d7, d7
 8002b42:	4b59      	ldr	r3, [pc, #356]	; (8002ca8 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8002b44:	ed93 7a00 	vldr	s14, [r3]
 8002b48:	4b57      	ldr	r3, [pc, #348]	; (8002ca8 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8002b4a:	edd3 7a00 	vldr	s15, [r3]
 8002b4e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b52:	4b55      	ldr	r3, [pc, #340]	; (8002ca8 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8002b54:	edd3 7a00 	vldr	s15, [r3]
 8002b58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b5c:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002b60:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002b64:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b68:	4b51      	ldr	r3, [pc, #324]	; (8002cb0 <_Z41__static_initialization_and_destruction_0ii+0x204>)
 8002b6a:	edc3 7a00 	vstr	s15, [r3]
volatile const float C2_q3 = (3.0*C0_q3) / (Time*Time);
 8002b6e:	4b51      	ldr	r3, [pc, #324]	; (8002cb4 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8002b70:	edd3 7a00 	vldr	s15, [r3]
 8002b74:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002b78:	eeb0 6b08 	vmov.f64	d6, #8	; 0x40400000  3.0
 8002b7c:	ee27 5b06 	vmul.f64	d5, d7, d6
 8002b80:	4b49      	ldr	r3, [pc, #292]	; (8002ca8 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8002b82:	ed93 7a00 	vldr	s14, [r3]
 8002b86:	4b48      	ldr	r3, [pc, #288]	; (8002ca8 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8002b88:	edd3 7a00 	vldr	s15, [r3]
 8002b8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b90:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002b94:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002b98:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002b9c:	4b46      	ldr	r3, [pc, #280]	; (8002cb8 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8002b9e:	edc3 7a00 	vstr	s15, [r3]
volatile const float C3_q3 = (2.0*C0_q3) / (Time*Time*Time);
 8002ba2:	4b44      	ldr	r3, [pc, #272]	; (8002cb4 <_Z41__static_initialization_and_destruction_0ii+0x208>)
 8002ba4:	edd3 7a00 	vldr	s15, [r3]
 8002ba8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002bac:	ee37 5b07 	vadd.f64	d5, d7, d7
 8002bb0:	4b3d      	ldr	r3, [pc, #244]	; (8002ca8 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8002bb2:	ed93 7a00 	vldr	s14, [r3]
 8002bb6:	4b3c      	ldr	r3, [pc, #240]	; (8002ca8 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8002bb8:	edd3 7a00 	vldr	s15, [r3]
 8002bbc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bc0:	4b39      	ldr	r3, [pc, #228]	; (8002ca8 <_Z41__static_initialization_and_destruction_0ii+0x1fc>)
 8002bc2:	edd3 7a00 	vldr	s15, [r3]
 8002bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bca:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8002bce:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002bd2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002bd6:	4b39      	ldr	r3, [pc, #228]	; (8002cbc <_Z41__static_initialization_and_destruction_0ii+0x210>)
 8002bd8:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt2 = pow(dt,2);
 8002bdc:	4b38      	ldr	r3, [pc, #224]	; (8002cc0 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8002bde:	edd3 7a00 	vldr	s15, [r3]
 8002be2:	2002      	movs	r0, #2
 8002be4:	eeb0 0a67 	vmov.f32	s0, s15
 8002be8:	f7ff ff44 	bl	8002a74 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002bec:	eeb0 7b40 	vmov.f64	d7, d0
 8002bf0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002bf4:	4b33      	ldr	r3, [pc, #204]	; (8002cc4 <_Z41__static_initialization_and_destruction_0ii+0x218>)
 8002bf6:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt3 = pow(dt,3);
 8002bfa:	4b31      	ldr	r3, [pc, #196]	; (8002cc0 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8002bfc:	edd3 7a00 	vldr	s15, [r3]
 8002c00:	2003      	movs	r0, #3
 8002c02:	eeb0 0a67 	vmov.f32	s0, s15
 8002c06:	f7ff ff35 	bl	8002a74 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002c0a:	eeb0 7b40 	vmov.f64	d7, d0
 8002c0e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c12:	4b2d      	ldr	r3, [pc, #180]	; (8002cc8 <_Z41__static_initialization_and_destruction_0ii+0x21c>)
 8002c14:	edc3 7a00 	vstr	s15, [r3]
volatile const float dt4 = pow(dt,4);
 8002c18:	4b29      	ldr	r3, [pc, #164]	; (8002cc0 <_Z41__static_initialization_and_destruction_0ii+0x214>)
 8002c1a:	edd3 7a00 	vldr	s15, [r3]
 8002c1e:	2004      	movs	r0, #4
 8002c20:	eeb0 0a67 	vmov.f32	s0, s15
 8002c24:	f7ff ff26 	bl	8002a74 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8002c28:	eeb0 7b40 	vmov.f64	d7, d0
 8002c2c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8002c30:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <_Z41__static_initialization_and_destruction_0ii+0x220>)
 8002c32:	edc3 7a00 	vstr	s15, [r3]
fcb_joint fcb_joint1, fcb_joint2, fcb_joint3, fcb_joint4;
 8002c36:	4826      	ldr	r0, [pc, #152]	; (8002cd0 <_Z41__static_initialization_and_destruction_0ii+0x224>)
 8002c38:	f7fe fdf4 	bl	8001824 <_ZN11robot_jointC1Ev>
 8002c3c:	4825      	ldr	r0, [pc, #148]	; (8002cd4 <_Z41__static_initialization_and_destruction_0ii+0x228>)
 8002c3e:	f7fe fdf1 	bl	8001824 <_ZN11robot_jointC1Ev>
 8002c42:	4825      	ldr	r0, [pc, #148]	; (8002cd8 <_Z41__static_initialization_and_destruction_0ii+0x22c>)
 8002c44:	f7fe fdee 	bl	8001824 <_ZN11robot_jointC1Ev>
 8002c48:	4824      	ldr	r0, [pc, #144]	; (8002cdc <_Z41__static_initialization_and_destruction_0ii+0x230>)
 8002c4a:	f7fe fdeb 	bl	8001824 <_ZN11robot_jointC1Ev>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d110      	bne.n	8002c76 <_Z41__static_initialization_and_destruction_0ii+0x1ca>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d10b      	bne.n	8002c76 <_Z41__static_initialization_and_destruction_0ii+0x1ca>
Stepper stepperJ3(&htim15, TIM_CHANNEL_2, DIR_5_GPIO_Port, DIR_5_Pin);
 8002c5e:	4810      	ldr	r0, [pc, #64]	; (8002ca0 <_Z41__static_initialization_and_destruction_0ii+0x1f4>)
 8002c60:	f7fd fea8 	bl	80009b4 <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8002c64:	480b      	ldr	r0, [pc, #44]	; (8002c94 <_Z41__static_initialization_and_destruction_0ii+0x1e8>)
 8002c66:	f7fd fea5 	bl	80009b4 <_ZN7StepperD1Ev>
AMT21 encoderJ2(&huart4, 0xB4);
 8002c6a:	4807      	ldr	r0, [pc, #28]	; (8002c88 <_Z41__static_initialization_and_destruction_0ii+0x1dc>)
 8002c6c:	f7fd fd20 	bl	80006b0 <_ZN5AMT21D1Ev>
AMT21 encoderJ1(&huart4, 0xD4);
 8002c70:	4804      	ldr	r0, [pc, #16]	; (8002c84 <_Z41__static_initialization_and_destruction_0ii+0x1d8>)
 8002c72:	f7fd fd1d 	bl	80006b0 <_ZN5AMT21D1Ev>
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	24000c1c 	.word	0x24000c1c
 8002c84:	2400024c 	.word	0x2400024c
 8002c88:	24000268 	.word	0x24000268
 8002c8c:	58020400 	.word	0x58020400
 8002c90:	240006bc 	.word	0x240006bc
 8002c94:	24000284 	.word	0x24000284
 8002c98:	58021000 	.word	0x58021000
 8002c9c:	24000624 	.word	0x24000624
 8002ca0:	240002ac 	.word	0x240002ac
 8002ca4:	24000004 	.word	0x24000004
 8002ca8:	24000000 	.word	0x24000000
 8002cac:	240002e8 	.word	0x240002e8
 8002cb0:	240002ec 	.word	0x240002ec
 8002cb4:	24000008 	.word	0x24000008
 8002cb8:	240002f0 	.word	0x240002f0
 8002cbc:	240002f4 	.word	0x240002f4
 8002cc0:	24000014 	.word	0x24000014
 8002cc4:	240002fc 	.word	0x240002fc
 8002cc8:	24000300 	.word	0x24000300
 8002ccc:	24000304 	.word	0x24000304
 8002cd0:	24000310 	.word	0x24000310
 8002cd4:	24000394 	.word	0x24000394
 8002cd8:	24000418 	.word	0x24000418
 8002cdc:	2400049c 	.word	0x2400049c

08002ce0 <_GLOBAL__sub_I_TIM_MS>:
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002ce8:	2001      	movs	r0, #1
 8002cea:	f7ff fedf 	bl	8002aac <_Z41__static_initialization_and_destruction_0ii>
 8002cee:	bd80      	pop	{r7, pc}

08002cf0 <_GLOBAL__sub_D_TIM_MS>:
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	f7ff fed7 	bl	8002aac <_Z41__static_initialization_and_destruction_0ii>
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002d04:	4b27      	ldr	r3, [pc, #156]	; (8002da4 <MX_SPI3_Init+0xa4>)
 8002d06:	4a28      	ldr	r2, [pc, #160]	; (8002da8 <MX_SPI3_Init+0xa8>)
 8002d08:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002d0a:	4b26      	ldr	r3, [pc, #152]	; (8002da4 <MX_SPI3_Init+0xa4>)
 8002d0c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002d10:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8002d12:	4b24      	ldr	r3, [pc, #144]	; (8002da4 <MX_SPI3_Init+0xa4>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8002d18:	4b22      	ldr	r3, [pc, #136]	; (8002da4 <MX_SPI3_Init+0xa4>)
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d1e:	4b21      	ldr	r3, [pc, #132]	; (8002da4 <MX_SPI3_Init+0xa4>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d24:	4b1f      	ldr	r3, [pc, #124]	; (8002da4 <MX_SPI3_Init+0xa4>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002d2a:	4b1e      	ldr	r3, [pc, #120]	; (8002da4 <MX_SPI3_Init+0xa4>)
 8002d2c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002d30:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d32:	4b1c      	ldr	r3, [pc, #112]	; (8002da4 <MX_SPI3_Init+0xa4>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d38:	4b1a      	ldr	r3, [pc, #104]	; (8002da4 <MX_SPI3_Init+0xa4>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002d3e:	4b19      	ldr	r3, [pc, #100]	; (8002da4 <MX_SPI3_Init+0xa4>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d44:	4b17      	ldr	r3, [pc, #92]	; (8002da4 <MX_SPI3_Init+0xa4>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002d4a:	4b16      	ldr	r3, [pc, #88]	; (8002da4 <MX_SPI3_Init+0xa4>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002d50:	4b14      	ldr	r3, [pc, #80]	; (8002da4 <MX_SPI3_Init+0xa4>)
 8002d52:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d56:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002d58:	4b12      	ldr	r3, [pc, #72]	; (8002da4 <MX_SPI3_Init+0xa4>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002d5e:	4b11      	ldr	r3, [pc, #68]	; (8002da4 <MX_SPI3_Init+0xa4>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002d64:	4b0f      	ldr	r3, [pc, #60]	; (8002da4 <MX_SPI3_Init+0xa4>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002d6a:	4b0e      	ldr	r3, [pc, #56]	; (8002da4 <MX_SPI3_Init+0xa4>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002d70:	4b0c      	ldr	r3, [pc, #48]	; (8002da4 <MX_SPI3_Init+0xa4>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002d76:	4b0b      	ldr	r3, [pc, #44]	; (8002da4 <MX_SPI3_Init+0xa4>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002d7c:	4b09      	ldr	r3, [pc, #36]	; (8002da4 <MX_SPI3_Init+0xa4>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002d82:	4b08      	ldr	r3, [pc, #32]	; (8002da4 <MX_SPI3_Init+0xa4>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002d88:	4b06      	ldr	r3, [pc, #24]	; (8002da4 <MX_SPI3_Init+0xa4>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002d8e:	4805      	ldr	r0, [pc, #20]	; (8002da4 <MX_SPI3_Init+0xa4>)
 8002d90:	f007 fb32 	bl	800a3f8 <HAL_SPI_Init>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8002d9a:	f7ff fe51 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	24000550 	.word	0x24000550
 8002da8:	40003c00 	.word	0x40003c00

08002dac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b0b8      	sub	sp, #224	; 0xe0
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002dc4:	f107 0310 	add.w	r3, r7, #16
 8002dc8:	22bc      	movs	r2, #188	; 0xbc
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f00b fc7f 	bl	800e6d0 <memset>
  if(spiHandle->Instance==SPI3)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a25      	ldr	r2, [pc, #148]	; (8002e6c <HAL_SPI_MspInit+0xc0>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d142      	bne.n	8002e62 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8002ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002de0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002de6:	f107 0310 	add.w	r3, r7, #16
 8002dea:	4618      	mov	r0, r3
 8002dec:	f005 ffa2 	bl	8008d34 <HAL_RCCEx_PeriphCLKConfig>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8002df6:	f7ff fe23 	bl	8002a40 <Error_Handler>
    }

    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002dfa:	4b1d      	ldr	r3, [pc, #116]	; (8002e70 <HAL_SPI_MspInit+0xc4>)
 8002dfc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e00:	4a1b      	ldr	r2, [pc, #108]	; (8002e70 <HAL_SPI_MspInit+0xc4>)
 8002e02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e06:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002e0a:	4b19      	ldr	r3, [pc, #100]	; (8002e70 <HAL_SPI_MspInit+0xc4>)
 8002e0c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002e10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e14:	60fb      	str	r3, [r7, #12]
 8002e16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e18:	4b15      	ldr	r3, [pc, #84]	; (8002e70 <HAL_SPI_MspInit+0xc4>)
 8002e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e1e:	4a14      	ldr	r2, [pc, #80]	; (8002e70 <HAL_SPI_MspInit+0xc4>)
 8002e20:	f043 0304 	orr.w	r3, r3, #4
 8002e24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e28:	4b11      	ldr	r3, [pc, #68]	; (8002e70 <HAL_SPI_MspInit+0xc4>)
 8002e2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002e36:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8002e3a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e3e:	2302      	movs	r3, #2
 8002e40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002e50:	2306      	movs	r3, #6
 8002e52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e56:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4805      	ldr	r0, [pc, #20]	; (8002e74 <HAL_SPI_MspInit+0xc8>)
 8002e5e:	f004 fd93 	bl	8007988 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002e62:	bf00      	nop
 8002e64:	37e0      	adds	r7, #224	; 0xe0
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	40003c00 	.word	0x40003c00
 8002e70:	58024400 	.word	0x58024400
 8002e74:	58020800 	.word	0x58020800

08002e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ea8 <HAL_MspInit+0x30>)
 8002e80:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e84:	4a08      	ldr	r2, [pc, #32]	; (8002ea8 <HAL_MspInit+0x30>)
 8002e86:	f043 0302 	orr.w	r3, r3, #2
 8002e8a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002e8e:	4b06      	ldr	r3, [pc, #24]	; (8002ea8 <HAL_MspInit+0x30>)
 8002e90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e94:	f003 0302 	and.w	r3, r3, #2
 8002e98:	607b      	str	r3, [r7, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr
 8002ea8:	58024400 	.word	0x58024400

08002eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002eb0:	e7fe      	b.n	8002eb0 <NMI_Handler+0x4>

08002eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eb6:	e7fe      	b.n	8002eb6 <HardFault_Handler+0x4>

08002eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ebc:	e7fe      	b.n	8002ebc <MemManage_Handler+0x4>

08002ebe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ec2:	e7fe      	b.n	8002ec2 <BusFault_Handler+0x4>

08002ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ec8:	e7fe      	b.n	8002ec8 <UsageFault_Handler+0x4>

08002eca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ece:	bf00      	nop
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr

08002ed8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002edc:	bf00      	nop
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr

08002ee6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eea:	bf00      	nop
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ef8:	f001 fbc6 	bl	8004688 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_IRQHandler();
 8002efc:	f001 fcff 	bl	80048fe <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 1 */
}
 8002f00:	bf00      	nop
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 8002f08:	4802      	ldr	r0, [pc, #8]	; (8002f14 <DMA1_Stream0_IRQHandler+0x10>)
 8002f0a:	f003 fa2b 	bl	8006364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002f0e:	bf00      	nop
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	bf00      	nop
 8002f14:	24000ba4 	.word	0x24000ba4

08002f18 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002f1c:	4802      	ldr	r0, [pc, #8]	; (8002f28 <DMA1_Stream1_IRQHandler+0x10>)
 8002f1e:	f003 fa21 	bl	8006364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002f22:	bf00      	nop
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	24000a24 	.word	0x24000a24

08002f2c <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002f30:	4802      	ldr	r0, [pc, #8]	; (8002f3c <DMA1_Stream2_IRQHandler+0x10>)
 8002f32:	f003 fa17 	bl	8006364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002f36:	bf00      	nop
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	24000b2c 	.word	0x24000b2c

08002f40 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002f44:	4802      	ldr	r0, [pc, #8]	; (8002f50 <DMA1_Stream3_IRQHandler+0x10>)
 8002f46:	f003 fa0d 	bl	8006364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002f4a:	bf00      	nop
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	2400091c 	.word	0x2400091c

08002f54 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002f58:	4802      	ldr	r0, [pc, #8]	; (8002f64 <DMA1_Stream4_IRQHandler+0x10>)
 8002f5a:	f003 fa03 	bl	8006364 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	24000cac 	.word	0x24000cac

08002f68 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 8002f6c:	2040      	movs	r0, #64	; 0x40
 8002f6e:	f004 fed4 	bl	8007d1a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM3_Pin);
 8002f72:	2080      	movs	r0, #128	; 0x80
 8002f74:	f004 fed1 	bl	8007d1a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002f78:	bf00      	nop
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002f80:	4802      	ldr	r0, [pc, #8]	; (8002f8c <USART3_IRQHandler+0x10>)
 8002f82:	f009 f897 	bl	800c0b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002f86:	bf00      	nop
 8002f88:	bd80      	pop	{r7, pc}
 8002f8a:	bf00      	nop
 8002f8c:	24000a9c 	.word	0x24000a9c

08002f90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8002f94:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002f98:	f004 febf 	bl	8007d1a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 8002f9c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002fa0:	f004 febb 	bl	8007d1a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin_Pin);
 8002fa4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002fa8:	f004 feb7 	bl	8007d1a <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 8002fac:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002fb0:	f004 feb3 	bl	8007d1a <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002fb4:	bf00      	nop
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 8002fbc:	4802      	ldr	r0, [pc, #8]	; (8002fc8 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8002fbe:	f007 fd7b 	bl	800aab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	24000884 	.word	0x24000884

08002fcc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002fd0:	4802      	ldr	r0, [pc, #8]	; (8002fdc <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002fd2:	f007 fd71 	bl	800aab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	24000708 	.word	0x24000708

08002fe0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002fe4:	4802      	ldr	r0, [pc, #8]	; (8002ff0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002fe6:	f007 fd67 	bl	800aab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	24000838 	.word	0x24000838

08002ff4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002ff8:	4802      	ldr	r0, [pc, #8]	; (8003004 <TIM5_IRQHandler+0x10>)
 8002ffa:	f007 fd5d 	bl	800aab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002ffe:	bf00      	nop
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	24000670 	.word	0x24000670

08003008 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800300c:	4802      	ldr	r0, [pc, #8]	; (8003018 <UART4_IRQHandler+0x10>)
 800300e:	f009 f851 	bl	800c0b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003012:	bf00      	nop
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	24000c1c 	.word	0x24000c1c

0800301c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1_CH1 and DAC1_CH2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003020:	4802      	ldr	r0, [pc, #8]	; (800302c <TIM6_DAC_IRQHandler+0x10>)
 8003022:	f007 fd49 	bl	800aab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003026:	bf00      	nop
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	24000754 	.word	0x24000754

08003030 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003034:	4802      	ldr	r0, [pc, #8]	; (8003040 <TIM7_IRQHandler+0x10>)
 8003036:	f007 fd3f 	bl	800aab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800303a:	bf00      	nop
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	240008d0 	.word	0x240008d0

08003044 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8003048:	4802      	ldr	r0, [pc, #8]	; (8003054 <UART7_IRQHandler+0x10>)
 800304a:	f009 f833 	bl	800c0b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800304e:	bf00      	nop
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	24000994 	.word	0x24000994

08003058 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
	return 1;
 800305c:	2301      	movs	r3, #1
}
 800305e:	4618      	mov	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <_kill>:

int _kill(int pid, int sig)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003072:	f00b faf5 	bl	800e660 <__errno>
 8003076:	4603      	mov	r3, r0
 8003078:	2216      	movs	r2, #22
 800307a:	601a      	str	r2, [r3, #0]
	return -1;
 800307c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003080:	4618      	mov	r0, r3
 8003082:	3708      	adds	r7, #8
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <_exit>:

void _exit (int status)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b082      	sub	sp, #8
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003090:	f04f 31ff 	mov.w	r1, #4294967295
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff ffe7 	bl	8003068 <_kill>
	while (1) {}		/* Make sure we hang here */
 800309a:	e7fe      	b.n	800309a <_exit+0x12>

0800309c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030a8:	2300      	movs	r3, #0
 80030aa:	617b      	str	r3, [r7, #20]
 80030ac:	e00a      	b.n	80030c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80030ae:	f3af 8000 	nop.w
 80030b2:	4601      	mov	r1, r0
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	1c5a      	adds	r2, r3, #1
 80030b8:	60ba      	str	r2, [r7, #8]
 80030ba:	b2ca      	uxtb	r2, r1
 80030bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	3301      	adds	r3, #1
 80030c2:	617b      	str	r3, [r7, #20]
 80030c4:	697a      	ldr	r2, [r7, #20]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	dbf0      	blt.n	80030ae <_read+0x12>
	}

return len;
 80030cc:	687b      	ldr	r3, [r7, #4]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b086      	sub	sp, #24
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	e009      	b.n	80030fc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	1c5a      	adds	r2, r3, #1
 80030ec:	60ba      	str	r2, [r7, #8]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	3301      	adds	r3, #1
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	697a      	ldr	r2, [r7, #20]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	429a      	cmp	r2, r3
 8003102:	dbf1      	blt.n	80030e8 <_write+0x12>
	}
	return len;
 8003104:	687b      	ldr	r3, [r7, #4]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}

0800310e <_close>:

int _close(int file)
{
 800310e:	b480      	push	{r7}
 8003110:	b083      	sub	sp, #12
 8003112:	af00      	add	r7, sp, #0
 8003114:	6078      	str	r0, [r7, #4]
	return -1;
 8003116:	f04f 33ff 	mov.w	r3, #4294967295
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003126:	b480      	push	{r7}
 8003128:	b083      	sub	sp, #12
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
 800312e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003136:	605a      	str	r2, [r3, #4]
	return 0;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <_isatty>:

int _isatty(int file)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
	return 1;
 800314e:	2301      	movs	r3, #1
}
 8003150:	4618      	mov	r0, r3
 8003152:	370c      	adds	r7, #12
 8003154:	46bd      	mov	sp, r7
 8003156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315a:	4770      	bx	lr

0800315c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	60f8      	str	r0, [r7, #12]
 8003164:	60b9      	str	r1, [r7, #8]
 8003166:	607a      	str	r2, [r7, #4]
	return 0;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3714      	adds	r7, #20
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
	...

08003178 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b086      	sub	sp, #24
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003180:	4a14      	ldr	r2, [pc, #80]	; (80031d4 <_sbrk+0x5c>)
 8003182:	4b15      	ldr	r3, [pc, #84]	; (80031d8 <_sbrk+0x60>)
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800318c:	4b13      	ldr	r3, [pc, #76]	; (80031dc <_sbrk+0x64>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d102      	bne.n	800319a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003194:	4b11      	ldr	r3, [pc, #68]	; (80031dc <_sbrk+0x64>)
 8003196:	4a12      	ldr	r2, [pc, #72]	; (80031e0 <_sbrk+0x68>)
 8003198:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800319a:	4b10      	ldr	r3, [pc, #64]	; (80031dc <_sbrk+0x64>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4413      	add	r3, r2
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	429a      	cmp	r2, r3
 80031a6:	d207      	bcs.n	80031b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031a8:	f00b fa5a 	bl	800e660 <__errno>
 80031ac:	4603      	mov	r3, r0
 80031ae:	220c      	movs	r2, #12
 80031b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031b2:	f04f 33ff 	mov.w	r3, #4294967295
 80031b6:	e009      	b.n	80031cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80031b8:	4b08      	ldr	r3, [pc, #32]	; (80031dc <_sbrk+0x64>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80031be:	4b07      	ldr	r3, [pc, #28]	; (80031dc <_sbrk+0x64>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4413      	add	r3, r2
 80031c6:	4a05      	ldr	r2, [pc, #20]	; (80031dc <_sbrk+0x64>)
 80031c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80031ca:	68fb      	ldr	r3, [r7, #12]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3718      	adds	r7, #24
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	24001338 	.word	0x24001338
 80031d8:	00000400 	.word	0x00000400
 80031dc:	24000520 	.word	0x24000520
 80031e0:	24000d38 	.word	0x24000d38

080031e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80031e4:	b480      	push	{r7}
 80031e6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80031e8:	4b39      	ldr	r3, [pc, #228]	; (80032d0 <SystemInit+0xec>)
 80031ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ee:	4a38      	ldr	r2, [pc, #224]	; (80032d0 <SystemInit+0xec>)
 80031f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80031f8:	4b36      	ldr	r3, [pc, #216]	; (80032d4 <SystemInit+0xf0>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	2b06      	cmp	r3, #6
 8003202:	d807      	bhi.n	8003214 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003204:	4b33      	ldr	r3, [pc, #204]	; (80032d4 <SystemInit+0xf0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f023 030f 	bic.w	r3, r3, #15
 800320c:	4a31      	ldr	r2, [pc, #196]	; (80032d4 <SystemInit+0xf0>)
 800320e:	f043 0307 	orr.w	r3, r3, #7
 8003212:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003214:	4b30      	ldr	r3, [pc, #192]	; (80032d8 <SystemInit+0xf4>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a2f      	ldr	r2, [pc, #188]	; (80032d8 <SystemInit+0xf4>)
 800321a:	f043 0301 	orr.w	r3, r3, #1
 800321e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003220:	4b2d      	ldr	r3, [pc, #180]	; (80032d8 <SystemInit+0xf4>)
 8003222:	2200      	movs	r2, #0
 8003224:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003226:	4b2c      	ldr	r3, [pc, #176]	; (80032d8 <SystemInit+0xf4>)
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	492b      	ldr	r1, [pc, #172]	; (80032d8 <SystemInit+0xf4>)
 800322c:	4b2b      	ldr	r3, [pc, #172]	; (80032dc <SystemInit+0xf8>)
 800322e:	4013      	ands	r3, r2
 8003230:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003232:	4b28      	ldr	r3, [pc, #160]	; (80032d4 <SystemInit+0xf0>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0308 	and.w	r3, r3, #8
 800323a:	2b00      	cmp	r3, #0
 800323c:	d007      	beq.n	800324e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800323e:	4b25      	ldr	r3, [pc, #148]	; (80032d4 <SystemInit+0xf0>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f023 030f 	bic.w	r3, r3, #15
 8003246:	4a23      	ldr	r2, [pc, #140]	; (80032d4 <SystemInit+0xf0>)
 8003248:	f043 0307 	orr.w	r3, r3, #7
 800324c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800324e:	4b22      	ldr	r3, [pc, #136]	; (80032d8 <SystemInit+0xf4>)
 8003250:	2200      	movs	r2, #0
 8003252:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003254:	4b20      	ldr	r3, [pc, #128]	; (80032d8 <SystemInit+0xf4>)
 8003256:	2200      	movs	r2, #0
 8003258:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800325a:	4b1f      	ldr	r3, [pc, #124]	; (80032d8 <SystemInit+0xf4>)
 800325c:	2200      	movs	r2, #0
 800325e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003260:	4b1d      	ldr	r3, [pc, #116]	; (80032d8 <SystemInit+0xf4>)
 8003262:	4a1f      	ldr	r2, [pc, #124]	; (80032e0 <SystemInit+0xfc>)
 8003264:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003266:	4b1c      	ldr	r3, [pc, #112]	; (80032d8 <SystemInit+0xf4>)
 8003268:	4a1e      	ldr	r2, [pc, #120]	; (80032e4 <SystemInit+0x100>)
 800326a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800326c:	4b1a      	ldr	r3, [pc, #104]	; (80032d8 <SystemInit+0xf4>)
 800326e:	4a1e      	ldr	r2, [pc, #120]	; (80032e8 <SystemInit+0x104>)
 8003270:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003272:	4b19      	ldr	r3, [pc, #100]	; (80032d8 <SystemInit+0xf4>)
 8003274:	2200      	movs	r2, #0
 8003276:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003278:	4b17      	ldr	r3, [pc, #92]	; (80032d8 <SystemInit+0xf4>)
 800327a:	4a1b      	ldr	r2, [pc, #108]	; (80032e8 <SystemInit+0x104>)
 800327c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800327e:	4b16      	ldr	r3, [pc, #88]	; (80032d8 <SystemInit+0xf4>)
 8003280:	2200      	movs	r2, #0
 8003282:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003284:	4b14      	ldr	r3, [pc, #80]	; (80032d8 <SystemInit+0xf4>)
 8003286:	4a18      	ldr	r2, [pc, #96]	; (80032e8 <SystemInit+0x104>)
 8003288:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800328a:	4b13      	ldr	r3, [pc, #76]	; (80032d8 <SystemInit+0xf4>)
 800328c:	2200      	movs	r2, #0
 800328e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003290:	4b11      	ldr	r3, [pc, #68]	; (80032d8 <SystemInit+0xf4>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a10      	ldr	r2, [pc, #64]	; (80032d8 <SystemInit+0xf4>)
 8003296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800329a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800329c:	4b0e      	ldr	r3, [pc, #56]	; (80032d8 <SystemInit+0xf4>)
 800329e:	2200      	movs	r2, #0
 80032a0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80032a2:	4b12      	ldr	r3, [pc, #72]	; (80032ec <SystemInit+0x108>)
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	4b12      	ldr	r3, [pc, #72]	; (80032f0 <SystemInit+0x10c>)
 80032a8:	4013      	ands	r3, r2
 80032aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032ae:	d202      	bcs.n	80032b6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80032b0:	4b10      	ldr	r3, [pc, #64]	; (80032f4 <SystemInit+0x110>)
 80032b2:	2201      	movs	r2, #1
 80032b4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80032b6:	4b10      	ldr	r3, [pc, #64]	; (80032f8 <SystemInit+0x114>)
 80032b8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80032bc:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80032be:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <SystemInit+0xec>)
 80032c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80032c4:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80032c6:	bf00      	nop
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr
 80032d0:	e000ed00 	.word	0xe000ed00
 80032d4:	52002000 	.word	0x52002000
 80032d8:	58024400 	.word	0x58024400
 80032dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80032e0:	02020200 	.word	0x02020200
 80032e4:	01ff0000 	.word	0x01ff0000
 80032e8:	01010280 	.word	0x01010280
 80032ec:	5c001000 	.word	0x5c001000
 80032f0:	ffff0000 	.word	0xffff0000
 80032f4:	51008108 	.word	0x51008108
 80032f8:	52004000 	.word	0x52004000

080032fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim14;
TIM_HandleTypeDef htim15;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b09a      	sub	sp, #104	; 0x68
 8003300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003302:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	605a      	str	r2, [r3, #4]
 800330c:	609a      	str	r2, [r3, #8]
 800330e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003310:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
 8003318:	605a      	str	r2, [r3, #4]
 800331a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800331c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	609a      	str	r2, [r3, #8]
 8003328:	60da      	str	r2, [r3, #12]
 800332a:	611a      	str	r2, [r3, #16]
 800332c:	615a      	str	r2, [r3, #20]
 800332e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003330:	1d3b      	adds	r3, r7, #4
 8003332:	222c      	movs	r2, #44	; 0x2c
 8003334:	2100      	movs	r1, #0
 8003336:	4618      	mov	r0, r3
 8003338:	f00b f9ca 	bl	800e6d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800333c:	4b44      	ldr	r3, [pc, #272]	; (8003450 <MX_TIM1_Init+0x154>)
 800333e:	4a45      	ldr	r2, [pc, #276]	; (8003454 <MX_TIM1_Init+0x158>)
 8003340:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 8003342:	4b43      	ldr	r3, [pc, #268]	; (8003450 <MX_TIM1_Init+0x154>)
 8003344:	22c7      	movs	r2, #199	; 0xc7
 8003346:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003348:	4b41      	ldr	r3, [pc, #260]	; (8003450 <MX_TIM1_Init+0x154>)
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 800334e:	4b40      	ldr	r3, [pc, #256]	; (8003450 <MX_TIM1_Init+0x154>)
 8003350:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003354:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003356:	4b3e      	ldr	r3, [pc, #248]	; (8003450 <MX_TIM1_Init+0x154>)
 8003358:	2200      	movs	r2, #0
 800335a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800335c:	4b3c      	ldr	r3, [pc, #240]	; (8003450 <MX_TIM1_Init+0x154>)
 800335e:	2200      	movs	r2, #0
 8003360:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003362:	4b3b      	ldr	r3, [pc, #236]	; (8003450 <MX_TIM1_Init+0x154>)
 8003364:	2280      	movs	r2, #128	; 0x80
 8003366:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003368:	4839      	ldr	r0, [pc, #228]	; (8003450 <MX_TIM1_Init+0x154>)
 800336a:	f007 f966 	bl	800a63a <HAL_TIM_Base_Init>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8003374:	f7ff fb64 	bl	8002a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003378:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800337c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800337e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003382:	4619      	mov	r1, r3
 8003384:	4832      	ldr	r0, [pc, #200]	; (8003450 <MX_TIM1_Init+0x154>)
 8003386:	f007 fdcb 	bl	800af20 <HAL_TIM_ConfigClockSource>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8003390:	f7ff fb56 	bl	8002a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003394:	482e      	ldr	r0, [pc, #184]	; (8003450 <MX_TIM1_Init+0x154>)
 8003396:	f007 fa1f 	bl	800a7d8 <HAL_TIM_PWM_Init>
 800339a:	4603      	mov	r3, r0
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80033a0:	f7ff fb4e 	bl	8002a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80033a4:	2300      	movs	r3, #0
 80033a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80033a8:	2300      	movs	r3, #0
 80033aa:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80033ac:	2300      	movs	r3, #0
 80033ae:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80033b0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80033b4:	4619      	mov	r1, r3
 80033b6:	4826      	ldr	r0, [pc, #152]	; (8003450 <MX_TIM1_Init+0x154>)
 80033b8:	f008 fb06 	bl	800b9c8 <HAL_TIMEx_MasterConfigSynchronization>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80033c2:	f7ff fb3d 	bl	8002a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80033c6:	2360      	movs	r3, #96	; 0x60
 80033c8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 80033ca:	f240 1339 	movw	r3, #313	; 0x139
 80033ce:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80033d0:	2300      	movs	r3, #0
 80033d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80033d4:	2300      	movs	r3, #0
 80033d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80033d8:	2300      	movs	r3, #0
 80033da:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80033dc:	2300      	movs	r3, #0
 80033de:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80033e0:	2300      	movs	r3, #0
 80033e2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80033e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80033e8:	2204      	movs	r2, #4
 80033ea:	4619      	mov	r1, r3
 80033ec:	4818      	ldr	r0, [pc, #96]	; (8003450 <MX_TIM1_Init+0x154>)
 80033ee:	f007 fc83 	bl	800acf8 <HAL_TIM_PWM_ConfigChannel>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d001      	beq.n	80033fc <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80033f8:	f7ff fb22 	bl	8002a40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80033fc:	2300      	movs	r3, #0
 80033fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003400:	2300      	movs	r3, #0
 8003402:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003404:	2300      	movs	r3, #0
 8003406:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800340c:	2300      	movs	r3, #0
 800340e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003414:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800341a:	2300      	movs	r3, #0
 800341c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800341e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003422:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003428:	2300      	movs	r3, #0
 800342a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800342c:	1d3b      	adds	r3, r7, #4
 800342e:	4619      	mov	r1, r3
 8003430:	4807      	ldr	r0, [pc, #28]	; (8003450 <MX_TIM1_Init+0x154>)
 8003432:	f008 fb57 	bl	800bae4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 800343c:	f7ff fb00 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003440:	4803      	ldr	r0, [pc, #12]	; (8003450 <MX_TIM1_Init+0x154>)
 8003442:	f000 fc85 	bl	8003d50 <HAL_TIM_MspPostInit>

}
 8003446:	bf00      	nop
 8003448:	3768      	adds	r7, #104	; 0x68
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	240007a0 	.word	0x240007a0
 8003454:	40010000 	.word	0x40010000

08003458 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b08e      	sub	sp, #56	; 0x38
 800345c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800345e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003462:	2200      	movs	r2, #0
 8003464:	601a      	str	r2, [r3, #0]
 8003466:	605a      	str	r2, [r3, #4]
 8003468:	609a      	str	r2, [r3, #8]
 800346a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800346c:	f107 031c 	add.w	r3, r7, #28
 8003470:	2200      	movs	r2, #0
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	605a      	str	r2, [r3, #4]
 8003476:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003478:	463b      	mov	r3, r7
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]
 800347e:	605a      	str	r2, [r3, #4]
 8003480:	609a      	str	r2, [r3, #8]
 8003482:	60da      	str	r2, [r3, #12]
 8003484:	611a      	str	r2, [r3, #16]
 8003486:	615a      	str	r2, [r3, #20]
 8003488:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800348a:	4b2e      	ldr	r3, [pc, #184]	; (8003544 <MX_TIM2_Init+0xec>)
 800348c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003490:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8003492:	4b2c      	ldr	r3, [pc, #176]	; (8003544 <MX_TIM2_Init+0xec>)
 8003494:	22c7      	movs	r2, #199	; 0xc7
 8003496:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003498:	4b2a      	ldr	r3, [pc, #168]	; (8003544 <MX_TIM2_Init+0xec>)
 800349a:	2200      	movs	r2, #0
 800349c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 800349e:	4b29      	ldr	r3, [pc, #164]	; (8003544 <MX_TIM2_Init+0xec>)
 80034a0:	f64e 225f 	movw	r2, #59999	; 0xea5f
 80034a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034a6:	4b27      	ldr	r3, [pc, #156]	; (8003544 <MX_TIM2_Init+0xec>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80034ac:	4b25      	ldr	r3, [pc, #148]	; (8003544 <MX_TIM2_Init+0xec>)
 80034ae:	2280      	movs	r2, #128	; 0x80
 80034b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80034b2:	4824      	ldr	r0, [pc, #144]	; (8003544 <MX_TIM2_Init+0xec>)
 80034b4:	f007 f8c1 	bl	800a63a <HAL_TIM_Base_Init>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d001      	beq.n	80034c2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80034be:	f7ff fabf 	bl	8002a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034c6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80034c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80034cc:	4619      	mov	r1, r3
 80034ce:	481d      	ldr	r0, [pc, #116]	; (8003544 <MX_TIM2_Init+0xec>)
 80034d0:	f007 fd26 	bl	800af20 <HAL_TIM_ConfigClockSource>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80034da:	f7ff fab1 	bl	8002a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80034de:	4819      	ldr	r0, [pc, #100]	; (8003544 <MX_TIM2_Init+0xec>)
 80034e0:	f007 f97a 	bl	800a7d8 <HAL_TIM_PWM_Init>
 80034e4:	4603      	mov	r3, r0
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d001      	beq.n	80034ee <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80034ea:	f7ff faa9 	bl	8002a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034ee:	2300      	movs	r3, #0
 80034f0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034f2:	2300      	movs	r3, #0
 80034f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80034f6:	f107 031c 	add.w	r3, r7, #28
 80034fa:	4619      	mov	r1, r3
 80034fc:	4811      	ldr	r0, [pc, #68]	; (8003544 <MX_TIM2_Init+0xec>)
 80034fe:	f008 fa63 	bl	800b9c8 <HAL_TIMEx_MasterConfigSynchronization>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8003508:	f7ff fa9a 	bl	8002a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800350c:	2360      	movs	r3, #96	; 0x60
 800350e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 8003510:	f240 1339 	movw	r3, #313	; 0x139
 8003514:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003516:	2300      	movs	r3, #0
 8003518:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800351a:	2300      	movs	r3, #0
 800351c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800351e:	463b      	mov	r3, r7
 8003520:	2208      	movs	r2, #8
 8003522:	4619      	mov	r1, r3
 8003524:	4807      	ldr	r0, [pc, #28]	; (8003544 <MX_TIM2_Init+0xec>)
 8003526:	f007 fbe7 	bl	800acf8 <HAL_TIM_PWM_ConfigChannel>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8003530:	f7ff fa86 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003534:	4803      	ldr	r0, [pc, #12]	; (8003544 <MX_TIM2_Init+0xec>)
 8003536:	f000 fc0b 	bl	8003d50 <HAL_TIM_MspPostInit>

}
 800353a:	bf00      	nop
 800353c:	3738      	adds	r7, #56	; 0x38
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	240007ec 	.word	0x240007ec

08003548 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08e      	sub	sp, #56	; 0x38
 800354c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800354e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
 8003556:	605a      	str	r2, [r3, #4]
 8003558:	609a      	str	r2, [r3, #8]
 800355a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800355c:	f107 031c 	add.w	r3, r7, #28
 8003560:	2200      	movs	r2, #0
 8003562:	601a      	str	r2, [r3, #0]
 8003564:	605a      	str	r2, [r3, #4]
 8003566:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003568:	463b      	mov	r3, r7
 800356a:	2200      	movs	r2, #0
 800356c:	601a      	str	r2, [r3, #0]
 800356e:	605a      	str	r2, [r3, #4]
 8003570:	609a      	str	r2, [r3, #8]
 8003572:	60da      	str	r2, [r3, #12]
 8003574:	611a      	str	r2, [r3, #16]
 8003576:	615a      	str	r2, [r3, #20]
 8003578:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800357a:	4b2d      	ldr	r3, [pc, #180]	; (8003630 <MX_TIM3_Init+0xe8>)
 800357c:	4a2d      	ldr	r2, [pc, #180]	; (8003634 <MX_TIM3_Init+0xec>)
 800357e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8003580:	4b2b      	ldr	r3, [pc, #172]	; (8003630 <MX_TIM3_Init+0xe8>)
 8003582:	22c7      	movs	r2, #199	; 0xc7
 8003584:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003586:	4b2a      	ldr	r3, [pc, #168]	; (8003630 <MX_TIM3_Init+0xe8>)
 8003588:	2200      	movs	r2, #0
 800358a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2400-1;
 800358c:	4b28      	ldr	r3, [pc, #160]	; (8003630 <MX_TIM3_Init+0xe8>)
 800358e:	f640 125f 	movw	r2, #2399	; 0x95f
 8003592:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003594:	4b26      	ldr	r3, [pc, #152]	; (8003630 <MX_TIM3_Init+0xe8>)
 8003596:	2200      	movs	r2, #0
 8003598:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800359a:	4b25      	ldr	r3, [pc, #148]	; (8003630 <MX_TIM3_Init+0xe8>)
 800359c:	2280      	movs	r2, #128	; 0x80
 800359e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80035a0:	4823      	ldr	r0, [pc, #140]	; (8003630 <MX_TIM3_Init+0xe8>)
 80035a2:	f007 f84a 	bl	800a63a <HAL_TIM_Base_Init>
 80035a6:	4603      	mov	r3, r0
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d001      	beq.n	80035b0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80035ac:	f7ff fa48 	bl	8002a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035b4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80035b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80035ba:	4619      	mov	r1, r3
 80035bc:	481c      	ldr	r0, [pc, #112]	; (8003630 <MX_TIM3_Init+0xe8>)
 80035be:	f007 fcaf 	bl	800af20 <HAL_TIM_ConfigClockSource>
 80035c2:	4603      	mov	r3, r0
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d001      	beq.n	80035cc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80035c8:	f7ff fa3a 	bl	8002a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80035cc:	4818      	ldr	r0, [pc, #96]	; (8003630 <MX_TIM3_Init+0xe8>)
 80035ce:	f007 f903 	bl	800a7d8 <HAL_TIM_PWM_Init>
 80035d2:	4603      	mov	r3, r0
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d001      	beq.n	80035dc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80035d8:	f7ff fa32 	bl	8002a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035dc:	2300      	movs	r3, #0
 80035de:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035e0:	2300      	movs	r3, #0
 80035e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80035e4:	f107 031c 	add.w	r3, r7, #28
 80035e8:	4619      	mov	r1, r3
 80035ea:	4811      	ldr	r0, [pc, #68]	; (8003630 <MX_TIM3_Init+0xe8>)
 80035ec:	f008 f9ec 	bl	800b9c8 <HAL_TIMEx_MasterConfigSynchronization>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80035f6:	f7ff fa23 	bl	8002a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80035fa:	2360      	movs	r3, #96	; 0x60
 80035fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80035fe:	2300      	movs	r3, #0
 8003600:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003602:	2300      	movs	r3, #0
 8003604:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003606:	2300      	movs	r3, #0
 8003608:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800360a:	463b      	mov	r3, r7
 800360c:	2200      	movs	r2, #0
 800360e:	4619      	mov	r1, r3
 8003610:	4807      	ldr	r0, [pc, #28]	; (8003630 <MX_TIM3_Init+0xe8>)
 8003612:	f007 fb71 	bl	800acf8 <HAL_TIM_PWM_ConfigChannel>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800361c:	f7ff fa10 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003620:	4803      	ldr	r0, [pc, #12]	; (8003630 <MX_TIM3_Init+0xe8>)
 8003622:	f000 fb95 	bl	8003d50 <HAL_TIM_MspPostInit>

}
 8003626:	bf00      	nop
 8003628:	3738      	adds	r7, #56	; 0x38
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	240006bc 	.word	0x240006bc
 8003634:	40000400 	.word	0x40000400

08003638 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b08e      	sub	sp, #56	; 0x38
 800363c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800363e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003642:	2200      	movs	r2, #0
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	605a      	str	r2, [r3, #4]
 8003648:	609a      	str	r2, [r3, #8]
 800364a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800364c:	f107 031c 	add.w	r3, r7, #28
 8003650:	2200      	movs	r2, #0
 8003652:	601a      	str	r2, [r3, #0]
 8003654:	605a      	str	r2, [r3, #4]
 8003656:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003658:	463b      	mov	r3, r7
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
 800365e:	605a      	str	r2, [r3, #4]
 8003660:	609a      	str	r2, [r3, #8]
 8003662:	60da      	str	r2, [r3, #12]
 8003664:	611a      	str	r2, [r3, #16]
 8003666:	615a      	str	r2, [r3, #20]
 8003668:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800366a:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <MX_TIM4_Init+0xe8>)
 800366c:	4a2d      	ldr	r2, [pc, #180]	; (8003724 <MX_TIM4_Init+0xec>)
 800366e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 8003670:	4b2b      	ldr	r3, [pc, #172]	; (8003720 <MX_TIM4_Init+0xe8>)
 8003672:	22c7      	movs	r2, #199	; 0xc7
 8003674:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003676:	4b2a      	ldr	r3, [pc, #168]	; (8003720 <MX_TIM4_Init+0xe8>)
 8003678:	2200      	movs	r2, #0
 800367a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 800367c:	4b28      	ldr	r3, [pc, #160]	; (8003720 <MX_TIM4_Init+0xe8>)
 800367e:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003682:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003684:	4b26      	ldr	r3, [pc, #152]	; (8003720 <MX_TIM4_Init+0xe8>)
 8003686:	2200      	movs	r2, #0
 8003688:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800368a:	4b25      	ldr	r3, [pc, #148]	; (8003720 <MX_TIM4_Init+0xe8>)
 800368c:	2280      	movs	r2, #128	; 0x80
 800368e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003690:	4823      	ldr	r0, [pc, #140]	; (8003720 <MX_TIM4_Init+0xe8>)
 8003692:	f006 ffd2 	bl	800a63a <HAL_TIM_Base_Init>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800369c:	f7ff f9d0 	bl	8002a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036a4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80036a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80036aa:	4619      	mov	r1, r3
 80036ac:	481c      	ldr	r0, [pc, #112]	; (8003720 <MX_TIM4_Init+0xe8>)
 80036ae:	f007 fc37 	bl	800af20 <HAL_TIM_ConfigClockSource>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 80036b8:	f7ff f9c2 	bl	8002a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80036bc:	4818      	ldr	r0, [pc, #96]	; (8003720 <MX_TIM4_Init+0xe8>)
 80036be:	f007 f88b 	bl	800a7d8 <HAL_TIM_PWM_Init>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80036c8:	f7ff f9ba 	bl	8002a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036d0:	2300      	movs	r3, #0
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80036d4:	f107 031c 	add.w	r3, r7, #28
 80036d8:	4619      	mov	r1, r3
 80036da:	4811      	ldr	r0, [pc, #68]	; (8003720 <MX_TIM4_Init+0xe8>)
 80036dc:	f008 f974 	bl	800b9c8 <HAL_TIMEx_MasterConfigSynchronization>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d001      	beq.n	80036ea <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80036e6:	f7ff f9ab 	bl	8002a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036ea:	2360      	movs	r3, #96	; 0x60
 80036ec:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80036ee:	f240 1339 	movw	r3, #313	; 0x139
 80036f2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036f4:	2300      	movs	r3, #0
 80036f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036f8:	2300      	movs	r3, #0
 80036fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80036fc:	463b      	mov	r3, r7
 80036fe:	2208      	movs	r2, #8
 8003700:	4619      	mov	r1, r3
 8003702:	4807      	ldr	r0, [pc, #28]	; (8003720 <MX_TIM4_Init+0xe8>)
 8003704:	f007 faf8 	bl	800acf8 <HAL_TIM_PWM_ConfigChannel>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 800370e:	f7ff f997 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003712:	4803      	ldr	r0, [pc, #12]	; (8003720 <MX_TIM4_Init+0xe8>)
 8003714:	f000 fb1c 	bl	8003d50 <HAL_TIM_MspPostInit>

}
 8003718:	bf00      	nop
 800371a:	3738      	adds	r7, #56	; 0x38
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	240005d8 	.word	0x240005d8
 8003724:	40000800 	.word	0x40000800

08003728 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800372e:	f107 0310 	add.w	r3, r7, #16
 8003732:	2200      	movs	r2, #0
 8003734:	601a      	str	r2, [r3, #0]
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	609a      	str	r2, [r3, #8]
 800373a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800373c:	1d3b      	adds	r3, r7, #4
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]
 8003742:	605a      	str	r2, [r3, #4]
 8003744:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003746:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <MX_TIM5_Init+0x94>)
 8003748:	4a1d      	ldr	r2, [pc, #116]	; (80037c0 <MX_TIM5_Init+0x98>)
 800374a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 800374c:	4b1b      	ldr	r3, [pc, #108]	; (80037bc <MX_TIM5_Init+0x94>)
 800374e:	22c7      	movs	r2, #199	; 0xc7
 8003750:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003752:	4b1a      	ldr	r3, [pc, #104]	; (80037bc <MX_TIM5_Init+0x94>)
 8003754:	2200      	movs	r2, #0
 8003756:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8003758:	4b18      	ldr	r3, [pc, #96]	; (80037bc <MX_TIM5_Init+0x94>)
 800375a:	f642 62df 	movw	r2, #11999	; 0x2edf
 800375e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003760:	4b16      	ldr	r3, [pc, #88]	; (80037bc <MX_TIM5_Init+0x94>)
 8003762:	2200      	movs	r2, #0
 8003764:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003766:	4b15      	ldr	r3, [pc, #84]	; (80037bc <MX_TIM5_Init+0x94>)
 8003768:	2280      	movs	r2, #128	; 0x80
 800376a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800376c:	4813      	ldr	r0, [pc, #76]	; (80037bc <MX_TIM5_Init+0x94>)
 800376e:	f006 ff64 	bl	800a63a <HAL_TIM_Base_Init>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8003778:	f7ff f962 	bl	8002a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800377c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003780:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8003782:	f107 0310 	add.w	r3, r7, #16
 8003786:	4619      	mov	r1, r3
 8003788:	480c      	ldr	r0, [pc, #48]	; (80037bc <MX_TIM5_Init+0x94>)
 800378a:	f007 fbc9 	bl	800af20 <HAL_TIM_ConfigClockSource>
 800378e:	4603      	mov	r3, r0
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8003794:	f7ff f954 	bl	8002a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003798:	2300      	movs	r3, #0
 800379a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800379c:	2300      	movs	r3, #0
 800379e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80037a0:	1d3b      	adds	r3, r7, #4
 80037a2:	4619      	mov	r1, r3
 80037a4:	4805      	ldr	r0, [pc, #20]	; (80037bc <MX_TIM5_Init+0x94>)
 80037a6:	f008 f90f 	bl	800b9c8 <HAL_TIMEx_MasterConfigSynchronization>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d001      	beq.n	80037b4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80037b0:	f7ff f946 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80037b4:	bf00      	nop
 80037b6:	3720      	adds	r7, #32
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}
 80037bc:	24000670 	.word	0x24000670
 80037c0:	40000c00 	.word	0x40000c00

080037c4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037ca:	1d3b      	adds	r3, r7, #4
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]
 80037d0:	605a      	str	r2, [r3, #4]
 80037d2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80037d4:	4b14      	ldr	r3, [pc, #80]	; (8003828 <MX_TIM6_Init+0x64>)
 80037d6:	4a15      	ldr	r2, [pc, #84]	; (800382c <MX_TIM6_Init+0x68>)
 80037d8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 200-1;
 80037da:	4b13      	ldr	r3, [pc, #76]	; (8003828 <MX_TIM6_Init+0x64>)
 80037dc:	22c7      	movs	r2, #199	; 0xc7
 80037de:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037e0:	4b11      	ldr	r3, [pc, #68]	; (8003828 <MX_TIM6_Init+0x64>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 6000-1;
 80037e6:	4b10      	ldr	r3, [pc, #64]	; (8003828 <MX_TIM6_Init+0x64>)
 80037e8:	f241 726f 	movw	r2, #5999	; 0x176f
 80037ec:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037ee:	4b0e      	ldr	r3, [pc, #56]	; (8003828 <MX_TIM6_Init+0x64>)
 80037f0:	2280      	movs	r2, #128	; 0x80
 80037f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80037f4:	480c      	ldr	r0, [pc, #48]	; (8003828 <MX_TIM6_Init+0x64>)
 80037f6:	f006 ff20 	bl	800a63a <HAL_TIM_Base_Init>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003800:	f7ff f91e 	bl	8002a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003804:	2300      	movs	r3, #0
 8003806:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003808:	2300      	movs	r3, #0
 800380a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800380c:	1d3b      	adds	r3, r7, #4
 800380e:	4619      	mov	r1, r3
 8003810:	4805      	ldr	r0, [pc, #20]	; (8003828 <MX_TIM6_Init+0x64>)
 8003812:	f008 f8d9 	bl	800b9c8 <HAL_TIMEx_MasterConfigSynchronization>
 8003816:	4603      	mov	r3, r0
 8003818:	2b00      	cmp	r3, #0
 800381a:	d001      	beq.n	8003820 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800381c:	f7ff f910 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003820:	bf00      	nop
 8003822:	3710      	adds	r7, #16
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}
 8003828:	24000754 	.word	0x24000754
 800382c:	40001000 	.word	0x40001000

08003830 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003836:	1d3b      	adds	r3, r7, #4
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]
 800383c:	605a      	str	r2, [r3, #4]
 800383e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003840:	4b14      	ldr	r3, [pc, #80]	; (8003894 <MX_TIM7_Init+0x64>)
 8003842:	4a15      	ldr	r2, [pc, #84]	; (8003898 <MX_TIM7_Init+0x68>)
 8003844:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 200-1;
 8003846:	4b13      	ldr	r3, [pc, #76]	; (8003894 <MX_TIM7_Init+0x64>)
 8003848:	22c7      	movs	r2, #199	; 0xc7
 800384a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800384c:	4b11      	ldr	r3, [pc, #68]	; (8003894 <MX_TIM7_Init+0x64>)
 800384e:	2200      	movs	r2, #0
 8003850:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1200-1;
 8003852:	4b10      	ldr	r3, [pc, #64]	; (8003894 <MX_TIM7_Init+0x64>)
 8003854:	f240 42af 	movw	r2, #1199	; 0x4af
 8003858:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800385a:	4b0e      	ldr	r3, [pc, #56]	; (8003894 <MX_TIM7_Init+0x64>)
 800385c:	2280      	movs	r2, #128	; 0x80
 800385e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003860:	480c      	ldr	r0, [pc, #48]	; (8003894 <MX_TIM7_Init+0x64>)
 8003862:	f006 feea 	bl	800a63a <HAL_TIM_Base_Init>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800386c:	f7ff f8e8 	bl	8002a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003870:	2300      	movs	r3, #0
 8003872:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003874:	2300      	movs	r3, #0
 8003876:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003878:	1d3b      	adds	r3, r7, #4
 800387a:	4619      	mov	r1, r3
 800387c:	4805      	ldr	r0, [pc, #20]	; (8003894 <MX_TIM7_Init+0x64>)
 800387e:	f008 f8a3 	bl	800b9c8 <HAL_TIMEx_MasterConfigSynchronization>
 8003882:	4603      	mov	r3, r0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d001      	beq.n	800388c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003888:	f7ff f8da 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800388c:	bf00      	nop
 800388e:	3710      	adds	r7, #16
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	240008d0 	.word	0x240008d0
 8003898:	40001400 	.word	0x40001400

0800389c <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80038a2:	463b      	mov	r3, r7
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]
 80038a8:	605a      	str	r2, [r3, #4]
 80038aa:	609a      	str	r2, [r3, #8]
 80038ac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 80038ae:	4b16      	ldr	r3, [pc, #88]	; (8003908 <MX_TIM12_Init+0x6c>)
 80038b0:	4a16      	ldr	r2, [pc, #88]	; (800390c <MX_TIM12_Init+0x70>)
 80038b2:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 80038b4:	4b14      	ldr	r3, [pc, #80]	; (8003908 <MX_TIM12_Init+0x6c>)
 80038b6:	22c7      	movs	r2, #199	; 0xc7
 80038b8:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038ba:	4b13      	ldr	r3, [pc, #76]	; (8003908 <MX_TIM12_Init+0x6c>)
 80038bc:	2200      	movs	r2, #0
 80038be:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 600-1;
 80038c0:	4b11      	ldr	r3, [pc, #68]	; (8003908 <MX_TIM12_Init+0x6c>)
 80038c2:	f240 2257 	movw	r2, #599	; 0x257
 80038c6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038c8:	4b0f      	ldr	r3, [pc, #60]	; (8003908 <MX_TIM12_Init+0x6c>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80038ce:	4b0e      	ldr	r3, [pc, #56]	; (8003908 <MX_TIM12_Init+0x6c>)
 80038d0:	2280      	movs	r2, #128	; 0x80
 80038d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 80038d4:	480c      	ldr	r0, [pc, #48]	; (8003908 <MX_TIM12_Init+0x6c>)
 80038d6:	f006 feb0 	bl	800a63a <HAL_TIM_Base_Init>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d001      	beq.n	80038e4 <MX_TIM12_Init+0x48>
  {
    Error_Handler();
 80038e0:	f7ff f8ae 	bl	8002a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80038e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038e8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 80038ea:	463b      	mov	r3, r7
 80038ec:	4619      	mov	r1, r3
 80038ee:	4806      	ldr	r0, [pc, #24]	; (8003908 <MX_TIM12_Init+0x6c>)
 80038f0:	f007 fb16 	bl	800af20 <HAL_TIM_ConfigClockSource>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <MX_TIM12_Init+0x62>
  {
    Error_Handler();
 80038fa:	f7ff f8a1 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */

}
 80038fe:	bf00      	nop
 8003900:	3710      	adds	r7, #16
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	24000884 	.word	0x24000884
 800390c:	40001800 	.word	0x40001800

08003910 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8003914:	4b0e      	ldr	r3, [pc, #56]	; (8003950 <MX_TIM13_Init+0x40>)
 8003916:	4a0f      	ldr	r2, [pc, #60]	; (8003954 <MX_TIM13_Init+0x44>)
 8003918:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 200-1;
 800391a:	4b0d      	ldr	r3, [pc, #52]	; (8003950 <MX_TIM13_Init+0x40>)
 800391c:	22c7      	movs	r2, #199	; 0xc7
 800391e:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003920:	4b0b      	ldr	r3, [pc, #44]	; (8003950 <MX_TIM13_Init+0x40>)
 8003922:	2200      	movs	r2, #0
 8003924:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 600-1;
 8003926:	4b0a      	ldr	r3, [pc, #40]	; (8003950 <MX_TIM13_Init+0x40>)
 8003928:	f240 2257 	movw	r2, #599	; 0x257
 800392c:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800392e:	4b08      	ldr	r3, [pc, #32]	; (8003950 <MX_TIM13_Init+0x40>)
 8003930:	2200      	movs	r2, #0
 8003932:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003934:	4b06      	ldr	r3, [pc, #24]	; (8003950 <MX_TIM13_Init+0x40>)
 8003936:	2280      	movs	r2, #128	; 0x80
 8003938:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 800393a:	4805      	ldr	r0, [pc, #20]	; (8003950 <MX_TIM13_Init+0x40>)
 800393c:	f006 fe7d 	bl	800a63a <HAL_TIM_Base_Init>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8003946:	f7ff f87b 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 800394a:	bf00      	nop
 800394c:	bd80      	pop	{r7, pc}
 800394e:	bf00      	nop
 8003950:	24000708 	.word	0x24000708
 8003954:	40001c00 	.word	0x40001c00

08003958 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800395c:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <MX_TIM14_Init+0x40>)
 800395e:	4a0f      	ldr	r2, [pc, #60]	; (800399c <MX_TIM14_Init+0x44>)
 8003960:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 200-1;
 8003962:	4b0d      	ldr	r3, [pc, #52]	; (8003998 <MX_TIM14_Init+0x40>)
 8003964:	22c7      	movs	r2, #199	; 0xc7
 8003966:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003968:	4b0b      	ldr	r3, [pc, #44]	; (8003998 <MX_TIM14_Init+0x40>)
 800396a:	2200      	movs	r2, #0
 800396c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 2400-1;
 800396e:	4b0a      	ldr	r3, [pc, #40]	; (8003998 <MX_TIM14_Init+0x40>)
 8003970:	f640 125f 	movw	r2, #2399	; 0x95f
 8003974:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003976:	4b08      	ldr	r3, [pc, #32]	; (8003998 <MX_TIM14_Init+0x40>)
 8003978:	2200      	movs	r2, #0
 800397a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800397c:	4b06      	ldr	r3, [pc, #24]	; (8003998 <MX_TIM14_Init+0x40>)
 800397e:	2280      	movs	r2, #128	; 0x80
 8003980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003982:	4805      	ldr	r0, [pc, #20]	; (8003998 <MX_TIM14_Init+0x40>)
 8003984:	f006 fe59 	bl	800a63a <HAL_TIM_Base_Init>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800398e:	f7ff f857 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003992:	bf00      	nop
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	24000838 	.word	0x24000838
 800399c:	40002000 	.word	0x40002000

080039a0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b09a      	sub	sp, #104	; 0x68
 80039a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80039a6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	605a      	str	r2, [r3, #4]
 80039b0:	609a      	str	r2, [r3, #8]
 80039b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80039b4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	605a      	str	r2, [r3, #4]
 80039be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80039c0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039c4:	2200      	movs	r2, #0
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	605a      	str	r2, [r3, #4]
 80039ca:	609a      	str	r2, [r3, #8]
 80039cc:	60da      	str	r2, [r3, #12]
 80039ce:	611a      	str	r2, [r3, #16]
 80039d0:	615a      	str	r2, [r3, #20]
 80039d2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80039d4:	1d3b      	adds	r3, r7, #4
 80039d6:	222c      	movs	r2, #44	; 0x2c
 80039d8:	2100      	movs	r1, #0
 80039da:	4618      	mov	r0, r3
 80039dc:	f00a fe78 	bl	800e6d0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80039e0:	4b3f      	ldr	r3, [pc, #252]	; (8003ae0 <MX_TIM15_Init+0x140>)
 80039e2:	4a40      	ldr	r2, [pc, #256]	; (8003ae4 <MX_TIM15_Init+0x144>)
 80039e4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 80039e6:	4b3e      	ldr	r3, [pc, #248]	; (8003ae0 <MX_TIM15_Init+0x140>)
 80039e8:	22ef      	movs	r2, #239	; 0xef
 80039ea:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039ec:	4b3c      	ldr	r3, [pc, #240]	; (8003ae0 <MX_TIM15_Init+0x140>)
 80039ee:	2200      	movs	r2, #0
 80039f0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 80039f2:	4b3b      	ldr	r3, [pc, #236]	; (8003ae0 <MX_TIM15_Init+0x140>)
 80039f4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80039f8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039fa:	4b39      	ldr	r3, [pc, #228]	; (8003ae0 <MX_TIM15_Init+0x140>)
 80039fc:	2200      	movs	r2, #0
 80039fe:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8003a00:	4b37      	ldr	r3, [pc, #220]	; (8003ae0 <MX_TIM15_Init+0x140>)
 8003a02:	2200      	movs	r2, #0
 8003a04:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003a06:	4b36      	ldr	r3, [pc, #216]	; (8003ae0 <MX_TIM15_Init+0x140>)
 8003a08:	2280      	movs	r2, #128	; 0x80
 8003a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003a0c:	4834      	ldr	r0, [pc, #208]	; (8003ae0 <MX_TIM15_Init+0x140>)
 8003a0e:	f006 fe14 	bl	800a63a <HAL_TIM_Base_Init>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 8003a18:	f7ff f812 	bl	8002a40 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a20:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003a22:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003a26:	4619      	mov	r1, r3
 8003a28:	482d      	ldr	r0, [pc, #180]	; (8003ae0 <MX_TIM15_Init+0x140>)
 8003a2a:	f007 fa79 	bl	800af20 <HAL_TIM_ConfigClockSource>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d001      	beq.n	8003a38 <MX_TIM15_Init+0x98>
  {
    Error_Handler();
 8003a34:	f7ff f804 	bl	8002a40 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8003a38:	4829      	ldr	r0, [pc, #164]	; (8003ae0 <MX_TIM15_Init+0x140>)
 8003a3a:	f006 fecd 	bl	800a7d8 <HAL_TIM_PWM_Init>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d001      	beq.n	8003a48 <MX_TIM15_Init+0xa8>
  {
    Error_Handler();
 8003a44:	f7fe fffc 	bl	8002a40 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003a50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003a54:	4619      	mov	r1, r3
 8003a56:	4822      	ldr	r0, [pc, #136]	; (8003ae0 <MX_TIM15_Init+0x140>)
 8003a58:	f007 ffb6 	bl	800b9c8 <HAL_TIMEx_MasterConfigSynchronization>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <MX_TIM15_Init+0xc6>
  {
    Error_Handler();
 8003a62:	f7fe ffed 	bl	8002a40 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a66:	2360      	movs	r3, #96	; 0x60
 8003a68:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 8003a6a:	f240 1339 	movw	r3, #313	; 0x139
 8003a6e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a70:	2300      	movs	r3, #0
 8003a72:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003a74:	2300      	movs	r3, #0
 8003a76:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003a80:	2300      	movs	r3, #0
 8003a82:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a88:	2204      	movs	r2, #4
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4814      	ldr	r0, [pc, #80]	; (8003ae0 <MX_TIM15_Init+0x140>)
 8003a8e:	f007 f933 	bl	800acf8 <HAL_TIM_PWM_ConfigChannel>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <MX_TIM15_Init+0xfc>
  {
    Error_Handler();
 8003a98:	f7fe ffd2 	bl	8002a40 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003aac:	2300      	movs	r3, #0
 8003aae:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003ab0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ab4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003aba:	2300      	movs	r3, #0
 8003abc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8003abe:	1d3b      	adds	r3, r7, #4
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4807      	ldr	r0, [pc, #28]	; (8003ae0 <MX_TIM15_Init+0x140>)
 8003ac4:	f008 f80e 	bl	800bae4 <HAL_TIMEx_ConfigBreakDeadTime>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <MX_TIM15_Init+0x132>
  {
    Error_Handler();
 8003ace:	f7fe ffb7 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8003ad2:	4803      	ldr	r0, [pc, #12]	; (8003ae0 <MX_TIM15_Init+0x140>)
 8003ad4:	f000 f93c 	bl	8003d50 <HAL_TIM_MspPostInit>

}
 8003ad8:	bf00      	nop
 8003ada:	3768      	adds	r7, #104	; 0x68
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	24000624 	.word	0x24000624
 8003ae4:	40014000 	.word	0x40014000

08003ae8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08e      	sub	sp, #56	; 0x38
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	4a8b      	ldr	r2, [pc, #556]	; (8003d24 <HAL_TIM_Base_MspInit+0x23c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d10f      	bne.n	8003b1a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003afa:	4b8b      	ldr	r3, [pc, #556]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003afc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b00:	4a89      	ldr	r2, [pc, #548]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003b02:	f043 0301 	orr.w	r3, r3, #1
 8003b06:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003b0a:	4b87      	ldr	r3, [pc, #540]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003b0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003b10:	f003 0301 	and.w	r3, r3, #1
 8003b14:	637b      	str	r3, [r7, #52]	; 0x34
 8003b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_TIM15_CLK_ENABLE();
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8003b18:	e100      	b.n	8003d1c <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM2)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b22:	d10f      	bne.n	8003b44 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b24:	4b80      	ldr	r3, [pc, #512]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003b26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b2a:	4a7f      	ldr	r2, [pc, #508]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003b2c:	f043 0301 	orr.w	r3, r3, #1
 8003b30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b34:	4b7c      	ldr	r3, [pc, #496]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003b36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	633b      	str	r3, [r7, #48]	; 0x30
 8003b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003b42:	e0eb      	b.n	8003d1c <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM3)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a78      	ldr	r2, [pc, #480]	; (8003d2c <HAL_TIM_Base_MspInit+0x244>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d10f      	bne.n	8003b6e <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003b4e:	4b76      	ldr	r3, [pc, #472]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003b50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b54:	4a74      	ldr	r2, [pc, #464]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003b56:	f043 0302 	orr.w	r3, r3, #2
 8003b5a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b5e:	4b72      	ldr	r3, [pc, #456]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003b60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8003b6c:	e0d6      	b.n	8003d1c <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM4)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a6f      	ldr	r2, [pc, #444]	; (8003d30 <HAL_TIM_Base_MspInit+0x248>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d10f      	bne.n	8003b98 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b78:	4b6b      	ldr	r3, [pc, #428]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003b7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b7e:	4a6a      	ldr	r2, [pc, #424]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003b80:	f043 0304 	orr.w	r3, r3, #4
 8003b84:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003b88:	4b67      	ldr	r3, [pc, #412]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003b8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b8e:	f003 0304 	and.w	r3, r3, #4
 8003b92:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003b96:	e0c1      	b.n	8003d1c <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM5)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a65      	ldr	r2, [pc, #404]	; (8003d34 <HAL_TIM_Base_MspInit+0x24c>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d117      	bne.n	8003bd2 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003ba2:	4b61      	ldr	r3, [pc, #388]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003ba4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ba8:	4a5f      	ldr	r2, [pc, #380]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003baa:	f043 0308 	orr.w	r3, r3, #8
 8003bae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003bb2:	4b5d      	ldr	r3, [pc, #372]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003bb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bb8:	f003 0308 	and.w	r3, r3, #8
 8003bbc:	627b      	str	r3, [r7, #36]	; 0x24
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	2100      	movs	r1, #0
 8003bc4:	2032      	movs	r0, #50	; 0x32
 8003bc6:	f000 fe66 	bl	8004896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003bca:	2032      	movs	r0, #50	; 0x32
 8003bcc:	f000 fe7d 	bl	80048ca <HAL_NVIC_EnableIRQ>
}
 8003bd0:	e0a4      	b.n	8003d1c <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM6)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a58      	ldr	r2, [pc, #352]	; (8003d38 <HAL_TIM_Base_MspInit+0x250>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d117      	bne.n	8003c0c <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003bdc:	4b52      	ldr	r3, [pc, #328]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003bde:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003be2:	4a51      	ldr	r2, [pc, #324]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003be4:	f043 0310 	orr.w	r3, r3, #16
 8003be8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003bec:	4b4e      	ldr	r3, [pc, #312]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003bee:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bf2:	f003 0310 	and.w	r3, r3, #16
 8003bf6:	623b      	str	r3, [r7, #32]
 8003bf8:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	2036      	movs	r0, #54	; 0x36
 8003c00:	f000 fe49 	bl	8004896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003c04:	2036      	movs	r0, #54	; 0x36
 8003c06:	f000 fe60 	bl	80048ca <HAL_NVIC_EnableIRQ>
}
 8003c0a:	e087      	b.n	8003d1c <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM7)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a4a      	ldr	r2, [pc, #296]	; (8003d3c <HAL_TIM_Base_MspInit+0x254>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d117      	bne.n	8003c46 <HAL_TIM_Base_MspInit+0x15e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003c16:	4b44      	ldr	r3, [pc, #272]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003c18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c1c:	4a42      	ldr	r2, [pc, #264]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003c1e:	f043 0320 	orr.w	r3, r3, #32
 8003c22:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c26:	4b40      	ldr	r3, [pc, #256]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003c28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c2c:	f003 0320 	and.w	r3, r3, #32
 8003c30:	61fb      	str	r3, [r7, #28]
 8003c32:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003c34:	2200      	movs	r2, #0
 8003c36:	2100      	movs	r1, #0
 8003c38:	2037      	movs	r0, #55	; 0x37
 8003c3a:	f000 fe2c 	bl	8004896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003c3e:	2037      	movs	r0, #55	; 0x37
 8003c40:	f000 fe43 	bl	80048ca <HAL_NVIC_EnableIRQ>
}
 8003c44:	e06a      	b.n	8003d1c <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM12)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a3d      	ldr	r2, [pc, #244]	; (8003d40 <HAL_TIM_Base_MspInit+0x258>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d117      	bne.n	8003c80 <HAL_TIM_Base_MspInit+0x198>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003c50:	4b35      	ldr	r3, [pc, #212]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003c52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c56:	4a34      	ldr	r2, [pc, #208]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c5c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c60:	4b31      	ldr	r3, [pc, #196]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003c62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6a:	61bb      	str	r3, [r7, #24]
 8003c6c:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8003c6e:	2200      	movs	r2, #0
 8003c70:	2100      	movs	r1, #0
 8003c72:	202b      	movs	r0, #43	; 0x2b
 8003c74:	f000 fe0f 	bl	8004896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8003c78:	202b      	movs	r0, #43	; 0x2b
 8003c7a:	f000 fe26 	bl	80048ca <HAL_NVIC_EnableIRQ>
}
 8003c7e:	e04d      	b.n	8003d1c <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM13)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a2f      	ldr	r2, [pc, #188]	; (8003d44 <HAL_TIM_Base_MspInit+0x25c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d117      	bne.n	8003cba <HAL_TIM_Base_MspInit+0x1d2>
    __HAL_RCC_TIM13_CLK_ENABLE();
 8003c8a:	4b27      	ldr	r3, [pc, #156]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003c8c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c90:	4a25      	ldr	r2, [pc, #148]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c96:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c9a:	4b23      	ldr	r3, [pc, #140]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003c9c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ca4:	617b      	str	r3, [r7, #20]
 8003ca6:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8003ca8:	2200      	movs	r2, #0
 8003caa:	2100      	movs	r1, #0
 8003cac:	202c      	movs	r0, #44	; 0x2c
 8003cae:	f000 fdf2 	bl	8004896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003cb2:	202c      	movs	r0, #44	; 0x2c
 8003cb4:	f000 fe09 	bl	80048ca <HAL_NVIC_EnableIRQ>
}
 8003cb8:	e030      	b.n	8003d1c <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM14)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a22      	ldr	r2, [pc, #136]	; (8003d48 <HAL_TIM_Base_MspInit+0x260>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d117      	bne.n	8003cf4 <HAL_TIM_Base_MspInit+0x20c>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003cc4:	4b18      	ldr	r3, [pc, #96]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003cc6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cca:	4a17      	ldr	r2, [pc, #92]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003cd4:	4b14      	ldr	r3, [pc, #80]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003cd6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cde:	613b      	str	r3, [r7, #16]
 8003ce0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	202d      	movs	r0, #45	; 0x2d
 8003ce8:	f000 fdd5 	bl	8004896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003cec:	202d      	movs	r0, #45	; 0x2d
 8003cee:	f000 fdec 	bl	80048ca <HAL_NVIC_EnableIRQ>
}
 8003cf2:	e013      	b.n	8003d1c <HAL_TIM_Base_MspInit+0x234>
  else if(tim_baseHandle->Instance==TIM15)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a14      	ldr	r2, [pc, #80]	; (8003d4c <HAL_TIM_Base_MspInit+0x264>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d10e      	bne.n	8003d1c <HAL_TIM_Base_MspInit+0x234>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003cfe:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003d00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d04:	4a08      	ldr	r2, [pc, #32]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003d0e:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <HAL_TIM_Base_MspInit+0x240>)
 8003d10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003d14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
}
 8003d1c:	bf00      	nop
 8003d1e:	3738      	adds	r7, #56	; 0x38
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40010000 	.word	0x40010000
 8003d28:	58024400 	.word	0x58024400
 8003d2c:	40000400 	.word	0x40000400
 8003d30:	40000800 	.word	0x40000800
 8003d34:	40000c00 	.word	0x40000c00
 8003d38:	40001000 	.word	0x40001000
 8003d3c:	40001400 	.word	0x40001400
 8003d40:	40001800 	.word	0x40001800
 8003d44:	40001c00 	.word	0x40001c00
 8003d48:	40002000 	.word	0x40002000
 8003d4c:	40014000 	.word	0x40014000

08003d50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b08c      	sub	sp, #48	; 0x30
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d58:	f107 031c 	add.w	r3, r7, #28
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	601a      	str	r2, [r3, #0]
 8003d60:	605a      	str	r2, [r3, #4]
 8003d62:	609a      	str	r2, [r3, #8]
 8003d64:	60da      	str	r2, [r3, #12]
 8003d66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a5e      	ldr	r2, [pc, #376]	; (8003ee8 <HAL_TIM_MspPostInit+0x198>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d120      	bne.n	8003db4 <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003d72:	4b5e      	ldr	r3, [pc, #376]	; (8003eec <HAL_TIM_MspPostInit+0x19c>)
 8003d74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d78:	4a5c      	ldr	r2, [pc, #368]	; (8003eec <HAL_TIM_MspPostInit+0x19c>)
 8003d7a:	f043 0310 	orr.w	r3, r3, #16
 8003d7e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003d82:	4b5a      	ldr	r3, [pc, #360]	; (8003eec <HAL_TIM_MspPostInit+0x19c>)
 8003d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d88:	f003 0310 	and.w	r3, r3, #16
 8003d8c:	61bb      	str	r3, [r7, #24]
 8003d8e:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8003d90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d96:	2302      	movs	r3, #2
 8003d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003da2:	2301      	movs	r3, #1
 8003da4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 8003da6:	f107 031c 	add.w	r3, r7, #28
 8003daa:	4619      	mov	r1, r3
 8003dac:	4850      	ldr	r0, [pc, #320]	; (8003ef0 <HAL_TIM_MspPostInit+0x1a0>)
 8003dae:	f003 fdeb 	bl	8007988 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8003db2:	e094      	b.n	8003ede <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM2)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dbc:	d120      	bne.n	8003e00 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dbe:	4b4b      	ldr	r3, [pc, #300]	; (8003eec <HAL_TIM_MspPostInit+0x19c>)
 8003dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dc4:	4a49      	ldr	r2, [pc, #292]	; (8003eec <HAL_TIM_MspPostInit+0x19c>)
 8003dc6:	f043 0302 	orr.w	r3, r3, #2
 8003dca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003dce:	4b47      	ldr	r3, [pc, #284]	; (8003eec <HAL_TIM_MspPostInit+0x19c>)
 8003dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003dd4:	f003 0302 	and.w	r3, r3, #2
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 8003ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003de2:	2302      	movs	r3, #2
 8003de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dea:	2300      	movs	r3, #0
 8003dec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003dee:	2301      	movs	r3, #1
 8003df0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 8003df2:	f107 031c 	add.w	r3, r7, #28
 8003df6:	4619      	mov	r1, r3
 8003df8:	483e      	ldr	r0, [pc, #248]	; (8003ef4 <HAL_TIM_MspPostInit+0x1a4>)
 8003dfa:	f003 fdc5 	bl	8007988 <HAL_GPIO_Init>
}
 8003dfe:	e06e      	b.n	8003ede <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM3)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a3c      	ldr	r2, [pc, #240]	; (8003ef8 <HAL_TIM_MspPostInit+0x1a8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d11f      	bne.n	8003e4a <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e0a:	4b38      	ldr	r3, [pc, #224]	; (8003eec <HAL_TIM_MspPostInit+0x19c>)
 8003e0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e10:	4a36      	ldr	r2, [pc, #216]	; (8003eec <HAL_TIM_MspPostInit+0x19c>)
 8003e12:	f043 0301 	orr.w	r3, r3, #1
 8003e16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e1a:	4b34      	ldr	r3, [pc, #208]	; (8003eec <HAL_TIM_MspPostInit+0x19c>)
 8003e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e20:	f003 0301 	and.w	r3, r3, #1
 8003e24:	613b      	str	r3, [r7, #16]
 8003e26:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8003e28:	2340      	movs	r3, #64	; 0x40
 8003e2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e30:	2300      	movs	r3, #0
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e34:	2300      	movs	r3, #0
 8003e36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e38:	2302      	movs	r3, #2
 8003e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8003e3c:	f107 031c 	add.w	r3, r7, #28
 8003e40:	4619      	mov	r1, r3
 8003e42:	482e      	ldr	r0, [pc, #184]	; (8003efc <HAL_TIM_MspPostInit+0x1ac>)
 8003e44:	f003 fda0 	bl	8007988 <HAL_GPIO_Init>
}
 8003e48:	e049      	b.n	8003ede <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM4)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a2c      	ldr	r2, [pc, #176]	; (8003f00 <HAL_TIM_MspPostInit+0x1b0>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d120      	bne.n	8003e96 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e54:	4b25      	ldr	r3, [pc, #148]	; (8003eec <HAL_TIM_MspPostInit+0x19c>)
 8003e56:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e5a:	4a24      	ldr	r2, [pc, #144]	; (8003eec <HAL_TIM_MspPostInit+0x19c>)
 8003e5c:	f043 0302 	orr.w	r3, r3, #2
 8003e60:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e64:	4b21      	ldr	r3, [pc, #132]	; (8003eec <HAL_TIM_MspPostInit+0x19c>)
 8003e66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 8003e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e78:	2302      	movs	r3, #2
 8003e7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e80:	2300      	movs	r3, #0
 8003e82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003e84:	2302      	movs	r3, #2
 8003e86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8003e88:	f107 031c 	add.w	r3, r7, #28
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4819      	ldr	r0, [pc, #100]	; (8003ef4 <HAL_TIM_MspPostInit+0x1a4>)
 8003e90:	f003 fd7a 	bl	8007988 <HAL_GPIO_Init>
}
 8003e94:	e023      	b.n	8003ede <HAL_TIM_MspPostInit+0x18e>
  else if(timHandle->Instance==TIM15)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a1a      	ldr	r2, [pc, #104]	; (8003f04 <HAL_TIM_MspPostInit+0x1b4>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d11e      	bne.n	8003ede <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ea0:	4b12      	ldr	r3, [pc, #72]	; (8003eec <HAL_TIM_MspPostInit+0x19c>)
 8003ea2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ea6:	4a11      	ldr	r2, [pc, #68]	; (8003eec <HAL_TIM_MspPostInit+0x19c>)
 8003ea8:	f043 0310 	orr.w	r3, r3, #16
 8003eac:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003eb0:	4b0e      	ldr	r3, [pc, #56]	; (8003eec <HAL_TIM_MspPostInit+0x19c>)
 8003eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003eb6:	f003 0310 	and.w	r3, r3, #16
 8003eba:	60bb      	str	r3, [r7, #8]
 8003ebc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 8003ebe:	2340      	movs	r3, #64	; 0x40
 8003ec0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eca:	2300      	movs	r3, #0
 8003ecc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 8003ece:	2304      	movs	r3, #4
 8003ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 8003ed2:	f107 031c 	add.w	r3, r7, #28
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	4805      	ldr	r0, [pc, #20]	; (8003ef0 <HAL_TIM_MspPostInit+0x1a0>)
 8003eda:	f003 fd55 	bl	8007988 <HAL_GPIO_Init>
}
 8003ede:	bf00      	nop
 8003ee0:	3730      	adds	r7, #48	; 0x30
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	40010000 	.word	0x40010000
 8003eec:	58024400 	.word	0x58024400
 8003ef0:	58021000 	.word	0x58021000
 8003ef4:	58020400 	.word	0x58020400
 8003ef8:	40000400 	.word	0x40000400
 8003efc:	58020000 	.word	0x58020000
 8003f00:	40000800 	.word	0x40000800
 8003f04:	40014000 	.word	0x40014000

08003f08 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart3_rx;
DMA_HandleTypeDef hdma_usart3_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003f0c:	4b25      	ldr	r3, [pc, #148]	; (8003fa4 <MX_UART4_Init+0x9c>)
 8003f0e:	4a26      	ldr	r2, [pc, #152]	; (8003fa8 <MX_UART4_Init+0xa0>)
 8003f10:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8003f12:	4b24      	ldr	r3, [pc, #144]	; (8003fa4 <MX_UART4_Init+0x9c>)
 8003f14:	4a25      	ldr	r2, [pc, #148]	; (8003fac <MX_UART4_Init+0xa4>)
 8003f16:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003f18:	4b22      	ldr	r3, [pc, #136]	; (8003fa4 <MX_UART4_Init+0x9c>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003f1e:	4b21      	ldr	r3, [pc, #132]	; (8003fa4 <MX_UART4_Init+0x9c>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003f24:	4b1f      	ldr	r3, [pc, #124]	; (8003fa4 <MX_UART4_Init+0x9c>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003f2a:	4b1e      	ldr	r3, [pc, #120]	; (8003fa4 <MX_UART4_Init+0x9c>)
 8003f2c:	220c      	movs	r2, #12
 8003f2e:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f30:	4b1c      	ldr	r3, [pc, #112]	; (8003fa4 <MX_UART4_Init+0x9c>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f36:	4b1b      	ldr	r3, [pc, #108]	; (8003fa4 <MX_UART4_Init+0x9c>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f3c:	4b19      	ldr	r3, [pc, #100]	; (8003fa4 <MX_UART4_Init+0x9c>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f42:	4b18      	ldr	r3, [pc, #96]	; (8003fa4 <MX_UART4_Init+0x9c>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8003f48:	4b16      	ldr	r3, [pc, #88]	; (8003fa4 <MX_UART4_Init+0x9c>)
 8003f4a:	2208      	movs	r2, #8
 8003f4c:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8003f4e:	4b15      	ldr	r3, [pc, #84]	; (8003fa4 <MX_UART4_Init+0x9c>)
 8003f50:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003f54:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003f56:	4813      	ldr	r0, [pc, #76]	; (8003fa4 <MX_UART4_Init+0x9c>)
 8003f58:	f007 fe60 	bl	800bc1c <HAL_UART_Init>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <MX_UART4_Init+0x5e>
  {
    Error_Handler();
 8003f62:	f7fe fd6d 	bl	8002a40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8003f66:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8003f6a:	480e      	ldr	r0, [pc, #56]	; (8003fa4 <MX_UART4_Init+0x9c>)
 8003f6c:	f009 fee7 	bl	800dd3e <HAL_UARTEx_SetTxFifoThreshold>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <MX_UART4_Init+0x72>
  {
    Error_Handler();
 8003f76:	f7fe fd63 	bl	8002a40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8003f7a:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8003f7e:	4809      	ldr	r0, [pc, #36]	; (8003fa4 <MX_UART4_Init+0x9c>)
 8003f80:	f009 ff1b 	bl	800ddba <HAL_UARTEx_SetRxFifoThreshold>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d001      	beq.n	8003f8e <MX_UART4_Init+0x86>
  {
    Error_Handler();
 8003f8a:	f7fe fd59 	bl	8002a40 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 8003f8e:	4805      	ldr	r0, [pc, #20]	; (8003fa4 <MX_UART4_Init+0x9c>)
 8003f90:	f009 fe61 	bl	800dc56 <HAL_UARTEx_EnableFifoMode>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <MX_UART4_Init+0x96>
  {
    Error_Handler();
 8003f9a:	f7fe fd51 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8003f9e:	bf00      	nop
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	24000c1c 	.word	0x24000c1c
 8003fa8:	40004c00 	.word	0x40004c00
 8003fac:	001e8480 	.word	0x001e8480

08003fb0 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8003fb4:	4b23      	ldr	r3, [pc, #140]	; (8004044 <MX_UART7_Init+0x94>)
 8003fb6:	4a24      	ldr	r2, [pc, #144]	; (8004048 <MX_UART7_Init+0x98>)
 8003fb8:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8003fba:	4b22      	ldr	r3, [pc, #136]	; (8004044 <MX_UART7_Init+0x94>)
 8003fbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003fc0:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8003fc2:	4b20      	ldr	r3, [pc, #128]	; (8004044 <MX_UART7_Init+0x94>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8003fc8:	4b1e      	ldr	r3, [pc, #120]	; (8004044 <MX_UART7_Init+0x94>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8003fce:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <MX_UART7_Init+0x94>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8003fd4:	4b1b      	ldr	r3, [pc, #108]	; (8004044 <MX_UART7_Init+0x94>)
 8003fd6:	220c      	movs	r2, #12
 8003fd8:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fda:	4b1a      	ldr	r3, [pc, #104]	; (8004044 <MX_UART7_Init+0x94>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fe0:	4b18      	ldr	r3, [pc, #96]	; (8004044 <MX_UART7_Init+0x94>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003fe6:	4b17      	ldr	r3, [pc, #92]	; (8004044 <MX_UART7_Init+0x94>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003fec:	4b15      	ldr	r3, [pc, #84]	; (8004044 <MX_UART7_Init+0x94>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ff2:	4b14      	ldr	r3, [pc, #80]	; (8004044 <MX_UART7_Init+0x94>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8003ff8:	4812      	ldr	r0, [pc, #72]	; (8004044 <MX_UART7_Init+0x94>)
 8003ffa:	f007 fe0f 	bl	800bc1c <HAL_UART_Init>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <MX_UART7_Init+0x58>
  {
    Error_Handler();
 8004004:	f7fe fd1c 	bl	8002a40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8004008:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800400c:	480d      	ldr	r0, [pc, #52]	; (8004044 <MX_UART7_Init+0x94>)
 800400e:	f009 fe96 	bl	800dd3e <HAL_UARTEx_SetTxFifoThreshold>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <MX_UART7_Init+0x6c>
  {
    Error_Handler();
 8004018:	f7fe fd12 	bl	8002a40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800401c:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8004020:	4808      	ldr	r0, [pc, #32]	; (8004044 <MX_UART7_Init+0x94>)
 8004022:	f009 feca 	bl	800ddba <HAL_UARTEx_SetRxFifoThreshold>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <MX_UART7_Init+0x80>
  {
    Error_Handler();
 800402c:	f7fe fd08 	bl	8002a40 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 8004030:	4804      	ldr	r0, [pc, #16]	; (8004044 <MX_UART7_Init+0x94>)
 8004032:	f009 fe10 	bl	800dc56 <HAL_UARTEx_EnableFifoMode>
 8004036:	4603      	mov	r3, r0
 8004038:	2b00      	cmp	r3, #0
 800403a:	d001      	beq.n	8004040 <MX_UART7_Init+0x90>
  {
    Error_Handler();
 800403c:	f7fe fd00 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8004040:	bf00      	nop
 8004042:	bd80      	pop	{r7, pc}
 8004044:	24000994 	.word	0x24000994
 8004048:	40007800 	.word	0x40007800

0800404c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004050:	4b22      	ldr	r3, [pc, #136]	; (80040dc <MX_USART3_UART_Init+0x90>)
 8004052:	4a23      	ldr	r2, [pc, #140]	; (80040e0 <MX_USART3_UART_Init+0x94>)
 8004054:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8004056:	4b21      	ldr	r3, [pc, #132]	; (80040dc <MX_USART3_UART_Init+0x90>)
 8004058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800405c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800405e:	4b1f      	ldr	r3, [pc, #124]	; (80040dc <MX_USART3_UART_Init+0x90>)
 8004060:	2200      	movs	r2, #0
 8004062:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004064:	4b1d      	ldr	r3, [pc, #116]	; (80040dc <MX_USART3_UART_Init+0x90>)
 8004066:	2200      	movs	r2, #0
 8004068:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800406a:	4b1c      	ldr	r3, [pc, #112]	; (80040dc <MX_USART3_UART_Init+0x90>)
 800406c:	2200      	movs	r2, #0
 800406e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004070:	4b1a      	ldr	r3, [pc, #104]	; (80040dc <MX_USART3_UART_Init+0x90>)
 8004072:	220c      	movs	r2, #12
 8004074:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004076:	4b19      	ldr	r3, [pc, #100]	; (80040dc <MX_USART3_UART_Init+0x90>)
 8004078:	2200      	movs	r2, #0
 800407a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800407c:	4b17      	ldr	r3, [pc, #92]	; (80040dc <MX_USART3_UART_Init+0x90>)
 800407e:	2200      	movs	r2, #0
 8004080:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004082:	4b16      	ldr	r3, [pc, #88]	; (80040dc <MX_USART3_UART_Init+0x90>)
 8004084:	2200      	movs	r2, #0
 8004086:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004088:	4b14      	ldr	r3, [pc, #80]	; (80040dc <MX_USART3_UART_Init+0x90>)
 800408a:	2200      	movs	r2, #0
 800408c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800408e:	4b13      	ldr	r3, [pc, #76]	; (80040dc <MX_USART3_UART_Init+0x90>)
 8004090:	2200      	movs	r2, #0
 8004092:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004094:	4811      	ldr	r0, [pc, #68]	; (80040dc <MX_USART3_UART_Init+0x90>)
 8004096:	f007 fdc1 	bl	800bc1c <HAL_UART_Init>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d001      	beq.n	80040a4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80040a0:	f7fe fcce 	bl	8002a40 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80040a4:	2100      	movs	r1, #0
 80040a6:	480d      	ldr	r0, [pc, #52]	; (80040dc <MX_USART3_UART_Init+0x90>)
 80040a8:	f009 fe49 	bl	800dd3e <HAL_UARTEx_SetTxFifoThreshold>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d001      	beq.n	80040b6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80040b2:	f7fe fcc5 	bl	8002a40 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80040b6:	2100      	movs	r1, #0
 80040b8:	4808      	ldr	r0, [pc, #32]	; (80040dc <MX_USART3_UART_Init+0x90>)
 80040ba:	f009 fe7e 	bl	800ddba <HAL_UARTEx_SetRxFifoThreshold>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80040c4:	f7fe fcbc 	bl	8002a40 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80040c8:	4804      	ldr	r0, [pc, #16]	; (80040dc <MX_USART3_UART_Init+0x90>)
 80040ca:	f009 fdff 	bl	800dccc <HAL_UARTEx_DisableFifoMode>
 80040ce:	4603      	mov	r3, r0
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d001      	beq.n	80040d8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80040d4:	f7fe fcb4 	bl	8002a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80040d8:	bf00      	nop
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	24000a9c 	.word	0x24000a9c
 80040e0:	40004800 	.word	0x40004800

080040e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b0bc      	sub	sp, #240	; 0xf0
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80040f0:	2200      	movs	r2, #0
 80040f2:	601a      	str	r2, [r3, #0]
 80040f4:	605a      	str	r2, [r3, #4]
 80040f6:	609a      	str	r2, [r3, #8]
 80040f8:	60da      	str	r2, [r3, #12]
 80040fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80040fc:	f107 0320 	add.w	r3, r7, #32
 8004100:	22bc      	movs	r2, #188	; 0xbc
 8004102:	2100      	movs	r1, #0
 8004104:	4618      	mov	r0, r3
 8004106:	f00a fae3 	bl	800e6d0 <memset>
  if(uartHandle->Instance==UART4)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4aa1      	ldr	r2, [pc, #644]	; (8004394 <HAL_UART_MspInit+0x2b0>)
 8004110:	4293      	cmp	r3, r2
 8004112:	f040 80b7 	bne.w	8004284 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8004116:	2302      	movs	r3, #2
 8004118:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800411a:	2300      	movs	r3, #0
 800411c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004120:	f107 0320 	add.w	r3, r7, #32
 8004124:	4618      	mov	r0, r3
 8004126:	f004 fe05 	bl	8008d34 <HAL_RCCEx_PeriphCLKConfig>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d001      	beq.n	8004134 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8004130:	f7fe fc86 	bl	8002a40 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8004134:	4b98      	ldr	r3, [pc, #608]	; (8004398 <HAL_UART_MspInit+0x2b4>)
 8004136:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800413a:	4a97      	ldr	r2, [pc, #604]	; (8004398 <HAL_UART_MspInit+0x2b4>)
 800413c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004140:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004144:	4b94      	ldr	r3, [pc, #592]	; (8004398 <HAL_UART_MspInit+0x2b4>)
 8004146:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800414a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800414e:	61fb      	str	r3, [r7, #28]
 8004150:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004152:	4b91      	ldr	r3, [pc, #580]	; (8004398 <HAL_UART_MspInit+0x2b4>)
 8004154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004158:	4a8f      	ldr	r2, [pc, #572]	; (8004398 <HAL_UART_MspInit+0x2b4>)
 800415a:	f043 0308 	orr.w	r3, r3, #8
 800415e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004162:	4b8d      	ldr	r3, [pc, #564]	; (8004398 <HAL_UART_MspInit+0x2b4>)
 8004164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004168:	f003 0308 	and.w	r3, r3, #8
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004170:	2303      	movs	r3, #3
 8004172:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004176:	2302      	movs	r3, #2
 8004178:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800417c:	2300      	movs	r3, #0
 800417e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004182:	2300      	movs	r3, #0
 8004184:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8004188:	2308      	movs	r3, #8
 800418a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800418e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8004192:	4619      	mov	r1, r3
 8004194:	4881      	ldr	r0, [pc, #516]	; (800439c <HAL_UART_MspInit+0x2b8>)
 8004196:	f003 fbf7 	bl	8007988 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 800419a:	4b81      	ldr	r3, [pc, #516]	; (80043a0 <HAL_UART_MspInit+0x2bc>)
 800419c:	4a81      	ldr	r2, [pc, #516]	; (80043a4 <HAL_UART_MspInit+0x2c0>)
 800419e:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80041a0:	4b7f      	ldr	r3, [pc, #508]	; (80043a0 <HAL_UART_MspInit+0x2bc>)
 80041a2:	223f      	movs	r2, #63	; 0x3f
 80041a4:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80041a6:	4b7e      	ldr	r3, [pc, #504]	; (80043a0 <HAL_UART_MspInit+0x2bc>)
 80041a8:	2200      	movs	r2, #0
 80041aa:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80041ac:	4b7c      	ldr	r3, [pc, #496]	; (80043a0 <HAL_UART_MspInit+0x2bc>)
 80041ae:	2200      	movs	r2, #0
 80041b0:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80041b2:	4b7b      	ldr	r3, [pc, #492]	; (80043a0 <HAL_UART_MspInit+0x2bc>)
 80041b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041b8:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80041ba:	4b79      	ldr	r3, [pc, #484]	; (80043a0 <HAL_UART_MspInit+0x2bc>)
 80041bc:	2200      	movs	r2, #0
 80041be:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80041c0:	4b77      	ldr	r3, [pc, #476]	; (80043a0 <HAL_UART_MspInit+0x2bc>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80041c6:	4b76      	ldr	r3, [pc, #472]	; (80043a0 <HAL_UART_MspInit+0x2bc>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80041cc:	4b74      	ldr	r3, [pc, #464]	; (80043a0 <HAL_UART_MspInit+0x2bc>)
 80041ce:	2200      	movs	r2, #0
 80041d0:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80041d2:	4b73      	ldr	r3, [pc, #460]	; (80043a0 <HAL_UART_MspInit+0x2bc>)
 80041d4:	2204      	movs	r2, #4
 80041d6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80041d8:	4b71      	ldr	r3, [pc, #452]	; (80043a0 <HAL_UART_MspInit+0x2bc>)
 80041da:	2203      	movs	r2, #3
 80041dc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80041de:	4b70      	ldr	r3, [pc, #448]	; (80043a0 <HAL_UART_MspInit+0x2bc>)
 80041e0:	2200      	movs	r2, #0
 80041e2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80041e4:	4b6e      	ldr	r3, [pc, #440]	; (80043a0 <HAL_UART_MspInit+0x2bc>)
 80041e6:	2200      	movs	r2, #0
 80041e8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80041ea:	486d      	ldr	r0, [pc, #436]	; (80043a0 <HAL_UART_MspInit+0x2bc>)
 80041ec:	f000 fd92 	bl	8004d14 <HAL_DMA_Init>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d001      	beq.n	80041fa <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 80041f6:	f7fe fc23 	bl	8002a40 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4a68      	ldr	r2, [pc, #416]	; (80043a0 <HAL_UART_MspInit+0x2bc>)
 80041fe:	67da      	str	r2, [r3, #124]	; 0x7c
 8004200:	4a67      	ldr	r2, [pc, #412]	; (80043a0 <HAL_UART_MspInit+0x2bc>)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8004206:	4b68      	ldr	r3, [pc, #416]	; (80043a8 <HAL_UART_MspInit+0x2c4>)
 8004208:	4a68      	ldr	r2, [pc, #416]	; (80043ac <HAL_UART_MspInit+0x2c8>)
 800420a:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 800420c:	4b66      	ldr	r3, [pc, #408]	; (80043a8 <HAL_UART_MspInit+0x2c4>)
 800420e:	2240      	movs	r2, #64	; 0x40
 8004210:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004212:	4b65      	ldr	r3, [pc, #404]	; (80043a8 <HAL_UART_MspInit+0x2c4>)
 8004214:	2240      	movs	r2, #64	; 0x40
 8004216:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004218:	4b63      	ldr	r3, [pc, #396]	; (80043a8 <HAL_UART_MspInit+0x2c4>)
 800421a:	2200      	movs	r2, #0
 800421c:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800421e:	4b62      	ldr	r3, [pc, #392]	; (80043a8 <HAL_UART_MspInit+0x2c4>)
 8004220:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004224:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004226:	4b60      	ldr	r3, [pc, #384]	; (80043a8 <HAL_UART_MspInit+0x2c4>)
 8004228:	2200      	movs	r2, #0
 800422a:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800422c:	4b5e      	ldr	r3, [pc, #376]	; (80043a8 <HAL_UART_MspInit+0x2c4>)
 800422e:	2200      	movs	r2, #0
 8004230:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8004232:	4b5d      	ldr	r3, [pc, #372]	; (80043a8 <HAL_UART_MspInit+0x2c4>)
 8004234:	2200      	movs	r2, #0
 8004236:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004238:	4b5b      	ldr	r3, [pc, #364]	; (80043a8 <HAL_UART_MspInit+0x2c4>)
 800423a:	2200      	movs	r2, #0
 800423c:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800423e:	4b5a      	ldr	r3, [pc, #360]	; (80043a8 <HAL_UART_MspInit+0x2c4>)
 8004240:	2204      	movs	r2, #4
 8004242:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004244:	4b58      	ldr	r3, [pc, #352]	; (80043a8 <HAL_UART_MspInit+0x2c4>)
 8004246:	2203      	movs	r2, #3
 8004248:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800424a:	4b57      	ldr	r3, [pc, #348]	; (80043a8 <HAL_UART_MspInit+0x2c4>)
 800424c:	2200      	movs	r2, #0
 800424e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004250:	4b55      	ldr	r3, [pc, #340]	; (80043a8 <HAL_UART_MspInit+0x2c4>)
 8004252:	2200      	movs	r2, #0
 8004254:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8004256:	4854      	ldr	r0, [pc, #336]	; (80043a8 <HAL_UART_MspInit+0x2c4>)
 8004258:	f000 fd5c 	bl	8004d14 <HAL_DMA_Init>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d001      	beq.n	8004266 <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 8004262:	f7fe fbed 	bl	8002a40 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a4f      	ldr	r2, [pc, #316]	; (80043a8 <HAL_UART_MspInit+0x2c4>)
 800426a:	679a      	str	r2, [r3, #120]	; 0x78
 800426c:	4a4e      	ldr	r2, [pc, #312]	; (80043a8 <HAL_UART_MspInit+0x2c4>)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8004272:	2200      	movs	r2, #0
 8004274:	2100      	movs	r1, #0
 8004276:	2034      	movs	r0, #52	; 0x34
 8004278:	f000 fb0d 	bl	8004896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800427c:	2034      	movs	r0, #52	; 0x34
 800427e:	f000 fb24 	bl	80048ca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8004282:	e153      	b.n	800452c <HAL_UART_MspInit+0x448>
  else if(uartHandle->Instance==UART7)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a49      	ldr	r2, [pc, #292]	; (80043b0 <HAL_UART_MspInit+0x2cc>)
 800428a:	4293      	cmp	r3, r2
 800428c:	f040 8098 	bne.w	80043c0 <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8004290:	2302      	movs	r3, #2
 8004292:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8004294:	2300      	movs	r3, #0
 8004296:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800429a:	f107 0320 	add.w	r3, r7, #32
 800429e:	4618      	mov	r0, r3
 80042a0:	f004 fd48 	bl	8008d34 <HAL_RCCEx_PeriphCLKConfig>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 80042aa:	f7fe fbc9 	bl	8002a40 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80042ae:	4b3a      	ldr	r3, [pc, #232]	; (8004398 <HAL_UART_MspInit+0x2b4>)
 80042b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042b4:	4a38      	ldr	r2, [pc, #224]	; (8004398 <HAL_UART_MspInit+0x2b4>)
 80042b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80042be:	4b36      	ldr	r3, [pc, #216]	; (8004398 <HAL_UART_MspInit+0x2b4>)
 80042c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80042c4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80042c8:	617b      	str	r3, [r7, #20]
 80042ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80042cc:	4b32      	ldr	r3, [pc, #200]	; (8004398 <HAL_UART_MspInit+0x2b4>)
 80042ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042d2:	4a31      	ldr	r2, [pc, #196]	; (8004398 <HAL_UART_MspInit+0x2b4>)
 80042d4:	f043 0310 	orr.w	r3, r3, #16
 80042d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80042dc:	4b2e      	ldr	r3, [pc, #184]	; (8004398 <HAL_UART_MspInit+0x2b4>)
 80042de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80042e2:	f003 0310 	and.w	r3, r3, #16
 80042e6:	613b      	str	r3, [r7, #16]
 80042e8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80042ea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80042ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042f2:	2302      	movs	r3, #2
 80042f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f8:	2300      	movs	r3, #0
 80042fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042fe:	2300      	movs	r3, #0
 8004300:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8004304:	2307      	movs	r3, #7
 8004306:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800430a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800430e:	4619      	mov	r1, r3
 8004310:	4828      	ldr	r0, [pc, #160]	; (80043b4 <HAL_UART_MspInit+0x2d0>)
 8004312:	f003 fb39 	bl	8007988 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 8004316:	4b28      	ldr	r3, [pc, #160]	; (80043b8 <HAL_UART_MspInit+0x2d4>)
 8004318:	4a28      	ldr	r2, [pc, #160]	; (80043bc <HAL_UART_MspInit+0x2d8>)
 800431a:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 800431c:	4b26      	ldr	r3, [pc, #152]	; (80043b8 <HAL_UART_MspInit+0x2d4>)
 800431e:	2250      	movs	r2, #80	; 0x50
 8004320:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004322:	4b25      	ldr	r3, [pc, #148]	; (80043b8 <HAL_UART_MspInit+0x2d4>)
 8004324:	2240      	movs	r2, #64	; 0x40
 8004326:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004328:	4b23      	ldr	r3, [pc, #140]	; (80043b8 <HAL_UART_MspInit+0x2d4>)
 800432a:	2200      	movs	r2, #0
 800432c:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 800432e:	4b22      	ldr	r3, [pc, #136]	; (80043b8 <HAL_UART_MspInit+0x2d4>)
 8004330:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004334:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004336:	4b20      	ldr	r3, [pc, #128]	; (80043b8 <HAL_UART_MspInit+0x2d4>)
 8004338:	2200      	movs	r2, #0
 800433a:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800433c:	4b1e      	ldr	r3, [pc, #120]	; (80043b8 <HAL_UART_MspInit+0x2d4>)
 800433e:	2200      	movs	r2, #0
 8004340:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 8004342:	4b1d      	ldr	r3, [pc, #116]	; (80043b8 <HAL_UART_MspInit+0x2d4>)
 8004344:	2200      	movs	r2, #0
 8004346:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004348:	4b1b      	ldr	r3, [pc, #108]	; (80043b8 <HAL_UART_MspInit+0x2d4>)
 800434a:	2200      	movs	r2, #0
 800434c:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800434e:	4b1a      	ldr	r3, [pc, #104]	; (80043b8 <HAL_UART_MspInit+0x2d4>)
 8004350:	2204      	movs	r2, #4
 8004352:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004354:	4b18      	ldr	r3, [pc, #96]	; (80043b8 <HAL_UART_MspInit+0x2d4>)
 8004356:	2203      	movs	r2, #3
 8004358:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800435a:	4b17      	ldr	r3, [pc, #92]	; (80043b8 <HAL_UART_MspInit+0x2d4>)
 800435c:	2200      	movs	r2, #0
 800435e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004360:	4b15      	ldr	r3, [pc, #84]	; (80043b8 <HAL_UART_MspInit+0x2d4>)
 8004362:	2200      	movs	r2, #0
 8004364:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8004366:	4814      	ldr	r0, [pc, #80]	; (80043b8 <HAL_UART_MspInit+0x2d4>)
 8004368:	f000 fcd4 	bl	8004d14 <HAL_DMA_Init>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_UART_MspInit+0x292>
      Error_Handler();
 8004372:	f7fe fb65 	bl	8002a40 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart7_tx);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a0f      	ldr	r2, [pc, #60]	; (80043b8 <HAL_UART_MspInit+0x2d4>)
 800437a:	679a      	str	r2, [r3, #120]	; 0x78
 800437c:	4a0e      	ldr	r2, [pc, #56]	; (80043b8 <HAL_UART_MspInit+0x2d4>)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 8004382:	2200      	movs	r2, #0
 8004384:	2100      	movs	r1, #0
 8004386:	2052      	movs	r0, #82	; 0x52
 8004388:	f000 fa85 	bl	8004896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 800438c:	2052      	movs	r0, #82	; 0x52
 800438e:	f000 fa9c 	bl	80048ca <HAL_NVIC_EnableIRQ>
}
 8004392:	e0cb      	b.n	800452c <HAL_UART_MspInit+0x448>
 8004394:	40004c00 	.word	0x40004c00
 8004398:	58024400 	.word	0x58024400
 800439c:	58020c00 	.word	0x58020c00
 80043a0:	2400091c 	.word	0x2400091c
 80043a4:	40020058 	.word	0x40020058
 80043a8:	24000cac 	.word	0x24000cac
 80043ac:	40020070 	.word	0x40020070
 80043b0:	40007800 	.word	0x40007800
 80043b4:	58021000 	.word	0x58021000
 80043b8:	24000ba4 	.word	0x24000ba4
 80043bc:	40020010 	.word	0x40020010
  else if(uartHandle->Instance==USART3)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a5b      	ldr	r2, [pc, #364]	; (8004534 <HAL_UART_MspInit+0x450>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	f040 80b0 	bne.w	800452c <HAL_UART_MspInit+0x448>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80043cc:	2302      	movs	r3, #2
 80043ce:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80043d0:	2300      	movs	r3, #0
 80043d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80043d6:	f107 0320 	add.w	r3, r7, #32
 80043da:	4618      	mov	r0, r3
 80043dc:	f004 fcaa 	bl	8008d34 <HAL_RCCEx_PeriphCLKConfig>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d001      	beq.n	80043ea <HAL_UART_MspInit+0x306>
      Error_Handler();
 80043e6:	f7fe fb2b 	bl	8002a40 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80043ea:	4b53      	ldr	r3, [pc, #332]	; (8004538 <HAL_UART_MspInit+0x454>)
 80043ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80043f0:	4a51      	ldr	r2, [pc, #324]	; (8004538 <HAL_UART_MspInit+0x454>)
 80043f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80043fa:	4b4f      	ldr	r3, [pc, #316]	; (8004538 <HAL_UART_MspInit+0x454>)
 80043fc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004400:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004404:	60fb      	str	r3, [r7, #12]
 8004406:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004408:	4b4b      	ldr	r3, [pc, #300]	; (8004538 <HAL_UART_MspInit+0x454>)
 800440a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800440e:	4a4a      	ldr	r2, [pc, #296]	; (8004538 <HAL_UART_MspInit+0x454>)
 8004410:	f043 0308 	orr.w	r3, r3, #8
 8004414:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004418:	4b47      	ldr	r3, [pc, #284]	; (8004538 <HAL_UART_MspInit+0x454>)
 800441a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800441e:	f003 0308 	and.w	r3, r3, #8
 8004422:	60bb      	str	r3, [r7, #8]
 8004424:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004426:	f44f 7340 	mov.w	r3, #768	; 0x300
 800442a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800442e:	2302      	movs	r3, #2
 8004430:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004434:	2300      	movs	r3, #0
 8004436:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800443a:	2300      	movs	r3, #0
 800443c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004440:	2307      	movs	r3, #7
 8004442:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004446:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800444a:	4619      	mov	r1, r3
 800444c:	483b      	ldr	r0, [pc, #236]	; (800453c <HAL_UART_MspInit+0x458>)
 800444e:	f003 fa9b 	bl	8007988 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004452:	4b3b      	ldr	r3, [pc, #236]	; (8004540 <HAL_UART_MspInit+0x45c>)
 8004454:	4a3b      	ldr	r2, [pc, #236]	; (8004544 <HAL_UART_MspInit+0x460>)
 8004456:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8004458:	4b39      	ldr	r3, [pc, #228]	; (8004540 <HAL_UART_MspInit+0x45c>)
 800445a:	222d      	movs	r2, #45	; 0x2d
 800445c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800445e:	4b38      	ldr	r3, [pc, #224]	; (8004540 <HAL_UART_MspInit+0x45c>)
 8004460:	2200      	movs	r2, #0
 8004462:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004464:	4b36      	ldr	r3, [pc, #216]	; (8004540 <HAL_UART_MspInit+0x45c>)
 8004466:	2200      	movs	r2, #0
 8004468:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800446a:	4b35      	ldr	r3, [pc, #212]	; (8004540 <HAL_UART_MspInit+0x45c>)
 800446c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004470:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004472:	4b33      	ldr	r3, [pc, #204]	; (8004540 <HAL_UART_MspInit+0x45c>)
 8004474:	2200      	movs	r2, #0
 8004476:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004478:	4b31      	ldr	r3, [pc, #196]	; (8004540 <HAL_UART_MspInit+0x45c>)
 800447a:	2200      	movs	r2, #0
 800447c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800447e:	4b30      	ldr	r3, [pc, #192]	; (8004540 <HAL_UART_MspInit+0x45c>)
 8004480:	2200      	movs	r2, #0
 8004482:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004484:	4b2e      	ldr	r3, [pc, #184]	; (8004540 <HAL_UART_MspInit+0x45c>)
 8004486:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800448a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800448c:	4b2c      	ldr	r3, [pc, #176]	; (8004540 <HAL_UART_MspInit+0x45c>)
 800448e:	2200      	movs	r2, #0
 8004490:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004492:	482b      	ldr	r0, [pc, #172]	; (8004540 <HAL_UART_MspInit+0x45c>)
 8004494:	f000 fc3e 	bl	8004d14 <HAL_DMA_Init>
 8004498:	4603      	mov	r3, r0
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <HAL_UART_MspInit+0x3be>
      Error_Handler();
 800449e:	f7fe facf 	bl	8002a40 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a26      	ldr	r2, [pc, #152]	; (8004540 <HAL_UART_MspInit+0x45c>)
 80044a6:	67da      	str	r2, [r3, #124]	; 0x7c
 80044a8:	4a25      	ldr	r2, [pc, #148]	; (8004540 <HAL_UART_MspInit+0x45c>)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 80044ae:	4b26      	ldr	r3, [pc, #152]	; (8004548 <HAL_UART_MspInit+0x464>)
 80044b0:	4a26      	ldr	r2, [pc, #152]	; (800454c <HAL_UART_MspInit+0x468>)
 80044b2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80044b4:	4b24      	ldr	r3, [pc, #144]	; (8004548 <HAL_UART_MspInit+0x464>)
 80044b6:	222e      	movs	r2, #46	; 0x2e
 80044b8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044ba:	4b23      	ldr	r3, [pc, #140]	; (8004548 <HAL_UART_MspInit+0x464>)
 80044bc:	2240      	movs	r2, #64	; 0x40
 80044be:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044c0:	4b21      	ldr	r3, [pc, #132]	; (8004548 <HAL_UART_MspInit+0x464>)
 80044c2:	2200      	movs	r2, #0
 80044c4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80044c6:	4b20      	ldr	r3, [pc, #128]	; (8004548 <HAL_UART_MspInit+0x464>)
 80044c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80044cc:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044ce:	4b1e      	ldr	r3, [pc, #120]	; (8004548 <HAL_UART_MspInit+0x464>)
 80044d0:	2200      	movs	r2, #0
 80044d2:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044d4:	4b1c      	ldr	r3, [pc, #112]	; (8004548 <HAL_UART_MspInit+0x464>)
 80044d6:	2200      	movs	r2, #0
 80044d8:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80044da:	4b1b      	ldr	r3, [pc, #108]	; (8004548 <HAL_UART_MspInit+0x464>)
 80044dc:	2200      	movs	r2, #0
 80044de:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80044e0:	4b19      	ldr	r3, [pc, #100]	; (8004548 <HAL_UART_MspInit+0x464>)
 80044e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80044e6:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80044e8:	4b17      	ldr	r3, [pc, #92]	; (8004548 <HAL_UART_MspInit+0x464>)
 80044ea:	2204      	movs	r2, #4
 80044ec:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80044ee:	4b16      	ldr	r3, [pc, #88]	; (8004548 <HAL_UART_MspInit+0x464>)
 80044f0:	2203      	movs	r2, #3
 80044f2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80044f4:	4b14      	ldr	r3, [pc, #80]	; (8004548 <HAL_UART_MspInit+0x464>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80044fa:	4b13      	ldr	r3, [pc, #76]	; (8004548 <HAL_UART_MspInit+0x464>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004500:	4811      	ldr	r0, [pc, #68]	; (8004548 <HAL_UART_MspInit+0x464>)
 8004502:	f000 fc07 	bl	8004d14 <HAL_DMA_Init>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d001      	beq.n	8004510 <HAL_UART_MspInit+0x42c>
      Error_Handler();
 800450c:	f7fe fa98 	bl	8002a40 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart3_tx);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a0d      	ldr	r2, [pc, #52]	; (8004548 <HAL_UART_MspInit+0x464>)
 8004514:	679a      	str	r2, [r3, #120]	; 0x78
 8004516:	4a0c      	ldr	r2, [pc, #48]	; (8004548 <HAL_UART_MspInit+0x464>)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800451c:	2200      	movs	r2, #0
 800451e:	2100      	movs	r1, #0
 8004520:	2027      	movs	r0, #39	; 0x27
 8004522:	f000 f9b8 	bl	8004896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004526:	2027      	movs	r0, #39	; 0x27
 8004528:	f000 f9cf 	bl	80048ca <HAL_NVIC_EnableIRQ>
}
 800452c:	bf00      	nop
 800452e:	37f0      	adds	r7, #240	; 0xf0
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40004800 	.word	0x40004800
 8004538:	58024400 	.word	0x58024400
 800453c:	58020c00 	.word	0x58020c00
 8004540:	24000a24 	.word	0x24000a24
 8004544:	40020028 	.word	0x40020028
 8004548:	24000b2c 	.word	0x24000b2c
 800454c:	40020040 	.word	0x40020040

08004550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
 ldr   sp, =_estack      /* set stack pointer */
 8004550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004588 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004554:	f7fe fe46 	bl	80031e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004558:	480c      	ldr	r0, [pc, #48]	; (800458c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800455a:	490d      	ldr	r1, [pc, #52]	; (8004590 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800455c:	4a0d      	ldr	r2, [pc, #52]	; (8004594 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800455e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004560:	e002      	b.n	8004568 <LoopCopyDataInit>

08004562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004566:	3304      	adds	r3, #4

08004568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800456a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800456c:	d3f9      	bcc.n	8004562 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800456e:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004570:	4c0a      	ldr	r4, [pc, #40]	; (800459c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004574:	e001      	b.n	800457a <LoopFillZerobss>

08004576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004578:	3204      	adds	r2, #4

0800457a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800457a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800457c:	d3fb      	bcc.n	8004576 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800457e:	f00a f875 	bl	800e66c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004582:	f7fe f85d 	bl	8002640 <main>
  bx  lr
 8004586:	4770      	bx	lr
 ldr   sp, =_estack      /* set stack pointer */
 8004588:	24001338 	.word	0x24001338
  ldr r0, =_sdata
 800458c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8004590:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 8004594:	08012c7c 	.word	0x08012c7c
  ldr r2, =_sbss
 8004598:	240001f8 	.word	0x240001f8
  ldr r4, =_ebss
 800459c:	24000d38 	.word	0x24000d38

080045a0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045a0:	e7fe      	b.n	80045a0 <ADC3_IRQHandler>
	...

080045a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80045aa:	2003      	movs	r0, #3
 80045ac:	f000 f968 	bl	8004880 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80045b0:	f004 f9ea 	bl	8008988 <HAL_RCC_GetSysClockFreq>
 80045b4:	4602      	mov	r2, r0
 80045b6:	4b15      	ldr	r3, [pc, #84]	; (800460c <HAL_Init+0x68>)
 80045b8:	699b      	ldr	r3, [r3, #24]
 80045ba:	0a1b      	lsrs	r3, r3, #8
 80045bc:	f003 030f 	and.w	r3, r3, #15
 80045c0:	4913      	ldr	r1, [pc, #76]	; (8004610 <HAL_Init+0x6c>)
 80045c2:	5ccb      	ldrb	r3, [r1, r3]
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	fa22 f303 	lsr.w	r3, r2, r3
 80045cc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80045ce:	4b0f      	ldr	r3, [pc, #60]	; (800460c <HAL_Init+0x68>)
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	4a0e      	ldr	r2, [pc, #56]	; (8004610 <HAL_Init+0x6c>)
 80045d8:	5cd3      	ldrb	r3, [r2, r3]
 80045da:	f003 031f 	and.w	r3, r3, #31
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	fa22 f303 	lsr.w	r3, r2, r3
 80045e4:	4a0b      	ldr	r2, [pc, #44]	; (8004614 <HAL_Init+0x70>)
 80045e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80045e8:	4a0b      	ldr	r2, [pc, #44]	; (8004618 <HAL_Init+0x74>)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80045ee:	2000      	movs	r0, #0
 80045f0:	f000 f814 	bl	800461c <HAL_InitTick>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e002      	b.n	8004604 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80045fe:	f7fe fc3b 	bl	8002e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	3708      	adds	r7, #8
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	58024400 	.word	0x58024400
 8004610:	08010f88 	.word	0x08010f88
 8004614:	2400001c 	.word	0x2400001c
 8004618:	24000018 	.word	0x24000018

0800461c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b082      	sub	sp, #8
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004624:	4b15      	ldr	r3, [pc, #84]	; (800467c <HAL_InitTick+0x60>)
 8004626:	781b      	ldrb	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e021      	b.n	8004674 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004630:	4b13      	ldr	r3, [pc, #76]	; (8004680 <HAL_InitTick+0x64>)
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	4b11      	ldr	r3, [pc, #68]	; (800467c <HAL_InitTick+0x60>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	4619      	mov	r1, r3
 800463a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800463e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004642:	fbb2 f3f3 	udiv	r3, r2, r3
 8004646:	4618      	mov	r0, r3
 8004648:	f000 f94d 	bl	80048e6 <HAL_SYSTICK_Config>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e00e      	b.n	8004674 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b0f      	cmp	r3, #15
 800465a:	d80a      	bhi.n	8004672 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800465c:	2200      	movs	r2, #0
 800465e:	6879      	ldr	r1, [r7, #4]
 8004660:	f04f 30ff 	mov.w	r0, #4294967295
 8004664:	f000 f917 	bl	8004896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004668:	4a06      	ldr	r2, [pc, #24]	; (8004684 <HAL_InitTick+0x68>)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800466e:	2300      	movs	r3, #0
 8004670:	e000      	b.n	8004674 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
}
 8004674:	4618      	mov	r0, r3
 8004676:	3708      	adds	r7, #8
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	24000024 	.word	0x24000024
 8004680:	24000018 	.word	0x24000018
 8004684:	24000020 	.word	0x24000020

08004688 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800468c:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <HAL_IncTick+0x20>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	461a      	mov	r2, r3
 8004692:	4b06      	ldr	r3, [pc, #24]	; (80046ac <HAL_IncTick+0x24>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4413      	add	r3, r2
 8004698:	4a04      	ldr	r2, [pc, #16]	; (80046ac <HAL_IncTick+0x24>)
 800469a:	6013      	str	r3, [r2, #0]
}
 800469c:	bf00      	nop
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	24000024 	.word	0x24000024
 80046ac:	24000d24 	.word	0x24000d24

080046b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046b0:	b480      	push	{r7}
 80046b2:	af00      	add	r7, sp, #0
  return uwTick;
 80046b4:	4b03      	ldr	r3, [pc, #12]	; (80046c4 <HAL_GetTick+0x14>)
 80046b6:	681b      	ldr	r3, [r3, #0]
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	24000d24 	.word	0x24000d24

080046c8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80046c8:	b480      	push	{r7}
 80046ca:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80046cc:	4b03      	ldr	r3, [pc, #12]	; (80046dc <HAL_GetREVID+0x14>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	0c1b      	lsrs	r3, r3, #16
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr
 80046dc:	5c001000 	.word	0x5c001000

080046e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f003 0307 	and.w	r3, r3, #7
 80046ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80046f0:	4b0b      	ldr	r3, [pc, #44]	; (8004720 <__NVIC_SetPriorityGrouping+0x40>)
 80046f2:	68db      	ldr	r3, [r3, #12]
 80046f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80046fc:	4013      	ands	r3, r2
 80046fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004708:	4b06      	ldr	r3, [pc, #24]	; (8004724 <__NVIC_SetPriorityGrouping+0x44>)
 800470a:	4313      	orrs	r3, r2
 800470c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800470e:	4a04      	ldr	r2, [pc, #16]	; (8004720 <__NVIC_SetPriorityGrouping+0x40>)
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	60d3      	str	r3, [r2, #12]
}
 8004714:	bf00      	nop
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr
 8004720:	e000ed00 	.word	0xe000ed00
 8004724:	05fa0000 	.word	0x05fa0000

08004728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004728:	b480      	push	{r7}
 800472a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800472c:	4b04      	ldr	r3, [pc, #16]	; (8004740 <__NVIC_GetPriorityGrouping+0x18>)
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	0a1b      	lsrs	r3, r3, #8
 8004732:	f003 0307 	and.w	r3, r3, #7
}
 8004736:	4618      	mov	r0, r3
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr
 8004740:	e000ed00 	.word	0xe000ed00

08004744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	4603      	mov	r3, r0
 800474c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800474e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004752:	2b00      	cmp	r3, #0
 8004754:	db0b      	blt.n	800476e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004756:	88fb      	ldrh	r3, [r7, #6]
 8004758:	f003 021f 	and.w	r2, r3, #31
 800475c:	4907      	ldr	r1, [pc, #28]	; (800477c <__NVIC_EnableIRQ+0x38>)
 800475e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004762:	095b      	lsrs	r3, r3, #5
 8004764:	2001      	movs	r0, #1
 8004766:	fa00 f202 	lsl.w	r2, r0, r2
 800476a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800476e:	bf00      	nop
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	e000e100 	.word	0xe000e100

08004780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	4603      	mov	r3, r0
 8004788:	6039      	str	r1, [r7, #0]
 800478a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800478c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004790:	2b00      	cmp	r3, #0
 8004792:	db0a      	blt.n	80047aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	b2da      	uxtb	r2, r3
 8004798:	490c      	ldr	r1, [pc, #48]	; (80047cc <__NVIC_SetPriority+0x4c>)
 800479a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800479e:	0112      	lsls	r2, r2, #4
 80047a0:	b2d2      	uxtb	r2, r2
 80047a2:	440b      	add	r3, r1
 80047a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80047a8:	e00a      	b.n	80047c0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	4908      	ldr	r1, [pc, #32]	; (80047d0 <__NVIC_SetPriority+0x50>)
 80047b0:	88fb      	ldrh	r3, [r7, #6]
 80047b2:	f003 030f 	and.w	r3, r3, #15
 80047b6:	3b04      	subs	r3, #4
 80047b8:	0112      	lsls	r2, r2, #4
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	440b      	add	r3, r1
 80047be:	761a      	strb	r2, [r3, #24]
}
 80047c0:	bf00      	nop
 80047c2:	370c      	adds	r7, #12
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	e000e100 	.word	0xe000e100
 80047d0:	e000ed00 	.word	0xe000ed00

080047d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b089      	sub	sp, #36	; 0x24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	f003 0307 	and.w	r3, r3, #7
 80047e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	f1c3 0307 	rsb	r3, r3, #7
 80047ee:	2b04      	cmp	r3, #4
 80047f0:	bf28      	it	cs
 80047f2:	2304      	movcs	r3, #4
 80047f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	3304      	adds	r3, #4
 80047fa:	2b06      	cmp	r3, #6
 80047fc:	d902      	bls.n	8004804 <NVIC_EncodePriority+0x30>
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	3b03      	subs	r3, #3
 8004802:	e000      	b.n	8004806 <NVIC_EncodePriority+0x32>
 8004804:	2300      	movs	r3, #0
 8004806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004808:	f04f 32ff 	mov.w	r2, #4294967295
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	fa02 f303 	lsl.w	r3, r2, r3
 8004812:	43da      	mvns	r2, r3
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	401a      	ands	r2, r3
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800481c:	f04f 31ff 	mov.w	r1, #4294967295
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	fa01 f303 	lsl.w	r3, r1, r3
 8004826:	43d9      	mvns	r1, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800482c:	4313      	orrs	r3, r2
         );
}
 800482e:	4618      	mov	r0, r3
 8004830:	3724      	adds	r7, #36	; 0x24
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
	...

0800483c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b082      	sub	sp, #8
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3b01      	subs	r3, #1
 8004848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800484c:	d301      	bcc.n	8004852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800484e:	2301      	movs	r3, #1
 8004850:	e00f      	b.n	8004872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004852:	4a0a      	ldr	r2, [pc, #40]	; (800487c <SysTick_Config+0x40>)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	3b01      	subs	r3, #1
 8004858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800485a:	210f      	movs	r1, #15
 800485c:	f04f 30ff 	mov.w	r0, #4294967295
 8004860:	f7ff ff8e 	bl	8004780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004864:	4b05      	ldr	r3, [pc, #20]	; (800487c <SysTick_Config+0x40>)
 8004866:	2200      	movs	r2, #0
 8004868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800486a:	4b04      	ldr	r3, [pc, #16]	; (800487c <SysTick_Config+0x40>)
 800486c:	2207      	movs	r2, #7
 800486e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3708      	adds	r7, #8
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	e000e010 	.word	0xe000e010

08004880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004888:	6878      	ldr	r0, [r7, #4]
 800488a:	f7ff ff29 	bl	80046e0 <__NVIC_SetPriorityGrouping>
}
 800488e:	bf00      	nop
 8004890:	3708      	adds	r7, #8
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}

08004896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004896:	b580      	push	{r7, lr}
 8004898:	b086      	sub	sp, #24
 800489a:	af00      	add	r7, sp, #0
 800489c:	4603      	mov	r3, r0
 800489e:	60b9      	str	r1, [r7, #8]
 80048a0:	607a      	str	r2, [r7, #4]
 80048a2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80048a4:	f7ff ff40 	bl	8004728 <__NVIC_GetPriorityGrouping>
 80048a8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	68b9      	ldr	r1, [r7, #8]
 80048ae:	6978      	ldr	r0, [r7, #20]
 80048b0:	f7ff ff90 	bl	80047d4 <NVIC_EncodePriority>
 80048b4:	4602      	mov	r2, r0
 80048b6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80048ba:	4611      	mov	r1, r2
 80048bc:	4618      	mov	r0, r3
 80048be:	f7ff ff5f 	bl	8004780 <__NVIC_SetPriority>
}
 80048c2:	bf00      	nop
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b082      	sub	sp, #8
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	4603      	mov	r3, r0
 80048d2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80048d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80048d8:	4618      	mov	r0, r3
 80048da:	f7ff ff33 	bl	8004744 <__NVIC_EnableIRQ>
}
 80048de:	bf00      	nop
 80048e0:	3708      	adds	r7, #8
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80048e6:	b580      	push	{r7, lr}
 80048e8:	b082      	sub	sp, #8
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7ff ffa4 	bl	800483c <SysTick_Config>
 80048f4:	4603      	mov	r3, r0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3708      	adds	r7, #8
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8004902:	f000 f802 	bl	800490a <HAL_SYSTICK_Callback>
}
 8004906:	bf00      	nop
 8004908:	bd80      	pop	{r7, pc}

0800490a <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 800490a:	b480      	push	{r7}
 800490c:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 800490e:	bf00      	nop
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e054      	b.n	80049d4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	7f5b      	ldrb	r3, [r3, #29]
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b00      	cmp	r3, #0
 8004932:	d105      	bne.n	8004940 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2200      	movs	r2, #0
 8004938:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7fc fb72 	bl	8001024 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	791b      	ldrb	r3, [r3, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10c      	bne.n	8004968 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a22      	ldr	r2, [pc, #136]	; (80049dc <HAL_CRC_Init+0xc4>)
 8004954:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f022 0218 	bic.w	r2, r2, #24
 8004964:	609a      	str	r2, [r3, #8]
 8004966:	e00c      	b.n	8004982 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6899      	ldr	r1, [r3, #8]
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	461a      	mov	r2, r3
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f948 	bl	8004c08 <HAL_CRCEx_Polynomial_Set>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e028      	b.n	80049d4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	795b      	ldrb	r3, [r3, #5]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d105      	bne.n	8004996 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f04f 32ff 	mov.w	r2, #4294967295
 8004992:	611a      	str	r2, [r3, #16]
 8004994:	e004      	b.n	80049a0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	6912      	ldr	r2, [r2, #16]
 800499e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	695a      	ldr	r2, [r3, #20]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	689b      	ldr	r3, [r3, #8]
 80049bc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699a      	ldr	r2, [r3, #24]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3708      	adds	r7, #8
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	04c11db7 	.word	0x04c11db7

080049e0 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b086      	sub	sp, #24
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80049ec:	2300      	movs	r3, #0
 80049ee:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2202      	movs	r2, #2
 80049f4:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f042 0201 	orr.w	r2, r2, #1
 8004a04:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a1b      	ldr	r3, [r3, #32]
 8004a0a:	2b03      	cmp	r3, #3
 8004a0c:	d006      	beq.n	8004a1c <HAL_CRC_Calculate+0x3c>
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d829      	bhi.n	8004a66 <HAL_CRC_Calculate+0x86>
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d019      	beq.n	8004a4a <HAL_CRC_Calculate+0x6a>
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d01e      	beq.n	8004a58 <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 8004a1a:	e024      	b.n	8004a66 <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	e00a      	b.n	8004a38 <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	441a      	add	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	6812      	ldr	r2, [r2, #0]
 8004a30:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	3301      	adds	r3, #1
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	697a      	ldr	r2, [r7, #20]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d3f0      	bcc.n	8004a22 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	613b      	str	r3, [r7, #16]
      break;
 8004a48:	e00e      	b.n	8004a68 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	68b9      	ldr	r1, [r7, #8]
 8004a4e:	68f8      	ldr	r0, [r7, #12]
 8004a50:	f000 f812 	bl	8004a78 <CRC_Handle_8>
 8004a54:	6138      	str	r0, [r7, #16]
      break;
 8004a56:	e007      	b.n	8004a68 <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	68b9      	ldr	r1, [r7, #8]
 8004a5c:	68f8      	ldr	r0, [r7, #12]
 8004a5e:	f000 f899 	bl	8004b94 <CRC_Handle_16>
 8004a62:	6138      	str	r0, [r7, #16]
      break;
 8004a64:	e000      	b.n	8004a68 <HAL_CRC_Calculate+0x88>
      break;
 8004a66:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8004a6e:	693b      	ldr	r3, [r7, #16]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3718      	adds	r7, #24
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}

08004a78 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b089      	sub	sp, #36	; 0x24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004a84:	2300      	movs	r3, #0
 8004a86:	61fb      	str	r3, [r7, #28]
 8004a88:	e023      	b.n	8004ad2 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	68ba      	ldr	r2, [r7, #8]
 8004a90:	4413      	add	r3, r2
 8004a92:	781b      	ldrb	r3, [r3, #0]
 8004a94:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	68b9      	ldr	r1, [r7, #8]
 8004a9e:	440b      	add	r3, r1
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004aa4:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	3302      	adds	r3, #2
 8004aac:	68b9      	ldr	r1, [r7, #8]
 8004aae:	440b      	add	r3, r1
 8004ab0:	781b      	ldrb	r3, [r3, #0]
 8004ab2:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8004ab4:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	3303      	adds	r3, #3
 8004abc:	68b9      	ldr	r1, [r7, #8]
 8004abe:	440b      	add	r3, r1
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8004ac8:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8004aca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	3301      	adds	r3, #1
 8004ad0:	61fb      	str	r3, [r7, #28]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	089b      	lsrs	r3, r3, #2
 8004ad6:	69fa      	ldr	r2, [r7, #28]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d3d6      	bcc.n	8004a8a <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d04d      	beq.n	8004b82 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f003 0303 	and.w	r3, r3, #3
 8004aec:	2b01      	cmp	r3, #1
 8004aee:	d107      	bne.n	8004b00 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	68ba      	ldr	r2, [r7, #8]
 8004af6:	4413      	add	r3, r2
 8004af8:	68fa      	ldr	r2, [r7, #12]
 8004afa:	6812      	ldr	r2, [r2, #0]
 8004afc:	781b      	ldrb	r3, [r3, #0]
 8004afe:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d116      	bne.n	8004b38 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004b0a:	69fb      	ldr	r3, [r7, #28]
 8004b0c:	009b      	lsls	r3, r3, #2
 8004b0e:	68ba      	ldr	r2, [r7, #8]
 8004b10:	4413      	add	r3, r2
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	021b      	lsls	r3, r3, #8
 8004b16:	b21a      	sxth	r2, r3
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	68b9      	ldr	r1, [r7, #8]
 8004b20:	440b      	add	r3, r1
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	b21b      	sxth	r3, r3
 8004b26:	4313      	orrs	r3, r2
 8004b28:	b21b      	sxth	r3, r3
 8004b2a:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	8b7a      	ldrh	r2, [r7, #26]
 8004b36:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	2b03      	cmp	r3, #3
 8004b40:	d11f      	bne.n	8004b82 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	009b      	lsls	r3, r3, #2
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	4413      	add	r3, r2
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	021b      	lsls	r3, r3, #8
 8004b4e:	b21a      	sxth	r2, r3
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	3301      	adds	r3, #1
 8004b56:	68b9      	ldr	r1, [r7, #8]
 8004b58:	440b      	add	r3, r1
 8004b5a:	781b      	ldrb	r3, [r3, #0]
 8004b5c:	b21b      	sxth	r3, r3
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	b21b      	sxth	r3, r3
 8004b62:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	8b7a      	ldrh	r2, [r7, #26]
 8004b6e:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8004b70:	69fb      	ldr	r3, [r7, #28]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	3302      	adds	r3, #2
 8004b76:	68ba      	ldr	r2, [r7, #8]
 8004b78:	4413      	add	r3, r2
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	781b      	ldrb	r3, [r3, #0]
 8004b80:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	681b      	ldr	r3, [r3, #0]
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3724      	adds	r7, #36	; 0x24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	e013      	b.n	8004bce <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	4413      	add	r3, r2
 8004bae:	881b      	ldrh	r3, [r3, #0]
 8004bb0:	041a      	lsls	r2, r3, #16
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	3302      	adds	r3, #2
 8004bb8:	68b9      	ldr	r1, [r7, #8]
 8004bba:	440b      	add	r3, r1
 8004bbc:	881b      	ldrh	r3, [r3, #0]
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	3301      	adds	r3, #1
 8004bcc:	617b      	str	r3, [r7, #20]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	085b      	lsrs	r3, r3, #1
 8004bd2:	697a      	ldr	r2, [r7, #20]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d3e6      	bcc.n	8004ba6 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d009      	beq.n	8004bf6 <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	68ba      	ldr	r2, [r7, #8]
 8004bee:	4413      	add	r3, r2
 8004bf0:	881a      	ldrh	r2, [r3, #0]
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	371c      	adds	r7, #28
 8004c00:	46bd      	mov	sp, r7
 8004c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c06:	4770      	bx	lr

08004c08 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b087      	sub	sp, #28
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c14:	2300      	movs	r3, #0
 8004c16:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8004c18:	231f      	movs	r3, #31
 8004c1a:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004c1c:	bf00      	nop
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	1e5a      	subs	r2, r3, #1
 8004c22:	613a      	str	r2, [r7, #16]
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d009      	beq.n	8004c3c <HAL_CRCEx_Polynomial_Set+0x34>
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f003 031f 	and.w	r3, r3, #31
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	fa22 f303 	lsr.w	r3, r2, r3
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d0f0      	beq.n	8004c1e <HAL_CRCEx_Polynomial_Set+0x16>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2b18      	cmp	r3, #24
 8004c40:	d846      	bhi.n	8004cd0 <HAL_CRCEx_Polynomial_Set+0xc8>
 8004c42:	a201      	add	r2, pc, #4	; (adr r2, 8004c48 <HAL_CRCEx_Polynomial_Set+0x40>)
 8004c44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c48:	08004cd7 	.word	0x08004cd7
 8004c4c:	08004cd1 	.word	0x08004cd1
 8004c50:	08004cd1 	.word	0x08004cd1
 8004c54:	08004cd1 	.word	0x08004cd1
 8004c58:	08004cd1 	.word	0x08004cd1
 8004c5c:	08004cd1 	.word	0x08004cd1
 8004c60:	08004cd1 	.word	0x08004cd1
 8004c64:	08004cd1 	.word	0x08004cd1
 8004c68:	08004cc5 	.word	0x08004cc5
 8004c6c:	08004cd1 	.word	0x08004cd1
 8004c70:	08004cd1 	.word	0x08004cd1
 8004c74:	08004cd1 	.word	0x08004cd1
 8004c78:	08004cd1 	.word	0x08004cd1
 8004c7c:	08004cd1 	.word	0x08004cd1
 8004c80:	08004cd1 	.word	0x08004cd1
 8004c84:	08004cd1 	.word	0x08004cd1
 8004c88:	08004cb9 	.word	0x08004cb9
 8004c8c:	08004cd1 	.word	0x08004cd1
 8004c90:	08004cd1 	.word	0x08004cd1
 8004c94:	08004cd1 	.word	0x08004cd1
 8004c98:	08004cd1 	.word	0x08004cd1
 8004c9c:	08004cd1 	.word	0x08004cd1
 8004ca0:	08004cd1 	.word	0x08004cd1
 8004ca4:	08004cd1 	.word	0x08004cd1
 8004ca8:	08004cad 	.word	0x08004cad
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	2b06      	cmp	r3, #6
 8004cb0:	d913      	bls.n	8004cda <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004cb6:	e010      	b.n	8004cda <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	2b07      	cmp	r3, #7
 8004cbc:	d90f      	bls.n	8004cde <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004cc2:	e00c      	b.n	8004cde <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	2b0f      	cmp	r3, #15
 8004cc8:	d90b      	bls.n	8004ce2 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8004cce:	e008      	b.n	8004ce2 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	75fb      	strb	r3, [r7, #23]
      break;
 8004cd4:	e006      	b.n	8004ce4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004cd6:	bf00      	nop
 8004cd8:	e004      	b.n	8004ce4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004cda:	bf00      	nop
 8004cdc:	e002      	b.n	8004ce4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004cde:	bf00      	nop
 8004ce0:	e000      	b.n	8004ce4 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8004ce2:	bf00      	nop
  }
  if (status == HAL_OK)
 8004ce4:	7dfb      	ldrb	r3, [r7, #23]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10d      	bne.n	8004d06 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f023 0118 	bic.w	r1, r3, #24
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8004d06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	371c      	adds	r7, #28
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004d1c:	f7ff fcc8 	bl	80046b0 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d101      	bne.n	8004d2c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	e316      	b.n	800535a <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a66      	ldr	r2, [pc, #408]	; (8004ecc <HAL_DMA_Init+0x1b8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d04a      	beq.n	8004dcc <HAL_DMA_Init+0xb8>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a65      	ldr	r2, [pc, #404]	; (8004ed0 <HAL_DMA_Init+0x1bc>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d045      	beq.n	8004dcc <HAL_DMA_Init+0xb8>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a63      	ldr	r2, [pc, #396]	; (8004ed4 <HAL_DMA_Init+0x1c0>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d040      	beq.n	8004dcc <HAL_DMA_Init+0xb8>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a62      	ldr	r2, [pc, #392]	; (8004ed8 <HAL_DMA_Init+0x1c4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d03b      	beq.n	8004dcc <HAL_DMA_Init+0xb8>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a60      	ldr	r2, [pc, #384]	; (8004edc <HAL_DMA_Init+0x1c8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d036      	beq.n	8004dcc <HAL_DMA_Init+0xb8>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a5f      	ldr	r2, [pc, #380]	; (8004ee0 <HAL_DMA_Init+0x1cc>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d031      	beq.n	8004dcc <HAL_DMA_Init+0xb8>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a5d      	ldr	r2, [pc, #372]	; (8004ee4 <HAL_DMA_Init+0x1d0>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d02c      	beq.n	8004dcc <HAL_DMA_Init+0xb8>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a5c      	ldr	r2, [pc, #368]	; (8004ee8 <HAL_DMA_Init+0x1d4>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d027      	beq.n	8004dcc <HAL_DMA_Init+0xb8>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	4a5a      	ldr	r2, [pc, #360]	; (8004eec <HAL_DMA_Init+0x1d8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d022      	beq.n	8004dcc <HAL_DMA_Init+0xb8>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	4a59      	ldr	r2, [pc, #356]	; (8004ef0 <HAL_DMA_Init+0x1dc>)
 8004d8c:	4293      	cmp	r3, r2
 8004d8e:	d01d      	beq.n	8004dcc <HAL_DMA_Init+0xb8>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a57      	ldr	r2, [pc, #348]	; (8004ef4 <HAL_DMA_Init+0x1e0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d018      	beq.n	8004dcc <HAL_DMA_Init+0xb8>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a56      	ldr	r2, [pc, #344]	; (8004ef8 <HAL_DMA_Init+0x1e4>)
 8004da0:	4293      	cmp	r3, r2
 8004da2:	d013      	beq.n	8004dcc <HAL_DMA_Init+0xb8>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	4a54      	ldr	r2, [pc, #336]	; (8004efc <HAL_DMA_Init+0x1e8>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d00e      	beq.n	8004dcc <HAL_DMA_Init+0xb8>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a53      	ldr	r2, [pc, #332]	; (8004f00 <HAL_DMA_Init+0x1ec>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d009      	beq.n	8004dcc <HAL_DMA_Init+0xb8>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a51      	ldr	r2, [pc, #324]	; (8004f04 <HAL_DMA_Init+0x1f0>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d004      	beq.n	8004dcc <HAL_DMA_Init+0xb8>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a50      	ldr	r2, [pc, #320]	; (8004f08 <HAL_DMA_Init+0x1f4>)
 8004dc8:	4293      	cmp	r3, r2
 8004dca:	d101      	bne.n	8004dd0 <HAL_DMA_Init+0xbc>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e000      	b.n	8004dd2 <HAL_DMA_Init+0xbe>
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	f000 813b 	beq.w	800504e <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2202      	movs	r2, #2
 8004ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a37      	ldr	r2, [pc, #220]	; (8004ecc <HAL_DMA_Init+0x1b8>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d04a      	beq.n	8004e88 <HAL_DMA_Init+0x174>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a36      	ldr	r2, [pc, #216]	; (8004ed0 <HAL_DMA_Init+0x1bc>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d045      	beq.n	8004e88 <HAL_DMA_Init+0x174>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a34      	ldr	r2, [pc, #208]	; (8004ed4 <HAL_DMA_Init+0x1c0>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d040      	beq.n	8004e88 <HAL_DMA_Init+0x174>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a33      	ldr	r2, [pc, #204]	; (8004ed8 <HAL_DMA_Init+0x1c4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d03b      	beq.n	8004e88 <HAL_DMA_Init+0x174>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a31      	ldr	r2, [pc, #196]	; (8004edc <HAL_DMA_Init+0x1c8>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d036      	beq.n	8004e88 <HAL_DMA_Init+0x174>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a30      	ldr	r2, [pc, #192]	; (8004ee0 <HAL_DMA_Init+0x1cc>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d031      	beq.n	8004e88 <HAL_DMA_Init+0x174>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a2e      	ldr	r2, [pc, #184]	; (8004ee4 <HAL_DMA_Init+0x1d0>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d02c      	beq.n	8004e88 <HAL_DMA_Init+0x174>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a2d      	ldr	r2, [pc, #180]	; (8004ee8 <HAL_DMA_Init+0x1d4>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d027      	beq.n	8004e88 <HAL_DMA_Init+0x174>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a2b      	ldr	r2, [pc, #172]	; (8004eec <HAL_DMA_Init+0x1d8>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d022      	beq.n	8004e88 <HAL_DMA_Init+0x174>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a2a      	ldr	r2, [pc, #168]	; (8004ef0 <HAL_DMA_Init+0x1dc>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d01d      	beq.n	8004e88 <HAL_DMA_Init+0x174>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a28      	ldr	r2, [pc, #160]	; (8004ef4 <HAL_DMA_Init+0x1e0>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d018      	beq.n	8004e88 <HAL_DMA_Init+0x174>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4a27      	ldr	r2, [pc, #156]	; (8004ef8 <HAL_DMA_Init+0x1e4>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d013      	beq.n	8004e88 <HAL_DMA_Init+0x174>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a25      	ldr	r2, [pc, #148]	; (8004efc <HAL_DMA_Init+0x1e8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d00e      	beq.n	8004e88 <HAL_DMA_Init+0x174>
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a24      	ldr	r2, [pc, #144]	; (8004f00 <HAL_DMA_Init+0x1ec>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d009      	beq.n	8004e88 <HAL_DMA_Init+0x174>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a22      	ldr	r2, [pc, #136]	; (8004f04 <HAL_DMA_Init+0x1f0>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d004      	beq.n	8004e88 <HAL_DMA_Init+0x174>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a21      	ldr	r2, [pc, #132]	; (8004f08 <HAL_DMA_Init+0x1f4>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d108      	bne.n	8004e9a <HAL_DMA_Init+0x186>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0201 	bic.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	e007      	b.n	8004eaa <HAL_DMA_Init+0x196>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f022 0201 	bic.w	r2, r2, #1
 8004ea8:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004eaa:	e02f      	b.n	8004f0c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004eac:	f7ff fc00 	bl	80046b0 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b05      	cmp	r3, #5
 8004eb8:	d928      	bls.n	8004f0c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2220      	movs	r2, #32
 8004ebe:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2203      	movs	r2, #3
 8004ec4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e246      	b.n	800535a <HAL_DMA_Init+0x646>
 8004ecc:	40020010 	.word	0x40020010
 8004ed0:	40020028 	.word	0x40020028
 8004ed4:	40020040 	.word	0x40020040
 8004ed8:	40020058 	.word	0x40020058
 8004edc:	40020070 	.word	0x40020070
 8004ee0:	40020088 	.word	0x40020088
 8004ee4:	400200a0 	.word	0x400200a0
 8004ee8:	400200b8 	.word	0x400200b8
 8004eec:	40020410 	.word	0x40020410
 8004ef0:	40020428 	.word	0x40020428
 8004ef4:	40020440 	.word	0x40020440
 8004ef8:	40020458 	.word	0x40020458
 8004efc:	40020470 	.word	0x40020470
 8004f00:	40020488 	.word	0x40020488
 8004f04:	400204a0 	.word	0x400204a0
 8004f08:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 0301 	and.w	r3, r3, #1
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d1c8      	bne.n	8004eac <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4b83      	ldr	r3, [pc, #524]	; (8005134 <HAL_DMA_Init+0x420>)
 8004f26:	4013      	ands	r3, r2
 8004f28:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004f32:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004f3e:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004f4a:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004f52:	697a      	ldr	r2, [r7, #20]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	2b04      	cmp	r3, #4
 8004f5e:	d107      	bne.n	8004f70 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	697a      	ldr	r2, [r7, #20]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004f70:	4b71      	ldr	r3, [pc, #452]	; (8005138 <HAL_DMA_Init+0x424>)
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	4b71      	ldr	r3, [pc, #452]	; (800513c <HAL_DMA_Init+0x428>)
 8004f76:	4013      	ands	r3, r2
 8004f78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f7c:	d328      	bcc.n	8004fd0 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	2b28      	cmp	r3, #40	; 0x28
 8004f84:	d903      	bls.n	8004f8e <HAL_DMA_Init+0x27a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	2b2e      	cmp	r3, #46	; 0x2e
 8004f8c:	d917      	bls.n	8004fbe <HAL_DMA_Init+0x2aa>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	2b3e      	cmp	r3, #62	; 0x3e
 8004f94:	d903      	bls.n	8004f9e <HAL_DMA_Init+0x28a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	2b42      	cmp	r3, #66	; 0x42
 8004f9c:	d90f      	bls.n	8004fbe <HAL_DMA_Init+0x2aa>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	2b46      	cmp	r3, #70	; 0x46
 8004fa4:	d903      	bls.n	8004fae <HAL_DMA_Init+0x29a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	2b48      	cmp	r3, #72	; 0x48
 8004fac:	d907      	bls.n	8004fbe <HAL_DMA_Init+0x2aa>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b4e      	cmp	r3, #78	; 0x4e
 8004fb4:	d905      	bls.n	8004fc2 <HAL_DMA_Init+0x2ae>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2b52      	cmp	r3, #82	; 0x52
 8004fbc:	d801      	bhi.n	8004fc2 <HAL_DMA_Init+0x2ae>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e000      	b.n	8004fc4 <HAL_DMA_Init+0x2b0>
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d003      	beq.n	8004fd0 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fce:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	697a      	ldr	r2, [r7, #20]
 8004fd6:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f023 0307 	bic.w	r3, r3, #7
 8004fe6:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	697a      	ldr	r2, [r7, #20]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	d117      	bne.n	800502a <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffe:	697a      	ldr	r2, [r7, #20]
 8005000:	4313      	orrs	r3, r2
 8005002:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00e      	beq.n	800502a <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f002 fb31 	bl	8007674 <DMA_CheckFifoParam>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d008      	beq.n	800502a <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2240      	movs	r2, #64	; 0x40
 800501c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2201      	movs	r2, #1
 8005022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e197      	b.n	800535a <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005032:	6878      	ldr	r0, [r7, #4]
 8005034:	f002 fa6c 	bl	8007510 <DMA_CalcBaseAndBitshift>
 8005038:	4603      	mov	r3, r0
 800503a:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005040:	f003 031f 	and.w	r3, r3, #31
 8005044:	223f      	movs	r2, #63	; 0x3f
 8005046:	409a      	lsls	r2, r3
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	609a      	str	r2, [r3, #8]
 800504c:	e0cd      	b.n	80051ea <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a3b      	ldr	r2, [pc, #236]	; (8005140 <HAL_DMA_Init+0x42c>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d022      	beq.n	800509e <HAL_DMA_Init+0x38a>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a39      	ldr	r2, [pc, #228]	; (8005144 <HAL_DMA_Init+0x430>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d01d      	beq.n	800509e <HAL_DMA_Init+0x38a>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a38      	ldr	r2, [pc, #224]	; (8005148 <HAL_DMA_Init+0x434>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d018      	beq.n	800509e <HAL_DMA_Init+0x38a>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a36      	ldr	r2, [pc, #216]	; (800514c <HAL_DMA_Init+0x438>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d013      	beq.n	800509e <HAL_DMA_Init+0x38a>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a35      	ldr	r2, [pc, #212]	; (8005150 <HAL_DMA_Init+0x43c>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00e      	beq.n	800509e <HAL_DMA_Init+0x38a>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a33      	ldr	r2, [pc, #204]	; (8005154 <HAL_DMA_Init+0x440>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d009      	beq.n	800509e <HAL_DMA_Init+0x38a>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a32      	ldr	r2, [pc, #200]	; (8005158 <HAL_DMA_Init+0x444>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d004      	beq.n	800509e <HAL_DMA_Init+0x38a>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a30      	ldr	r2, [pc, #192]	; (800515c <HAL_DMA_Init+0x448>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d101      	bne.n	80050a2 <HAL_DMA_Init+0x38e>
 800509e:	2301      	movs	r3, #1
 80050a0:	e000      	b.n	80050a4 <HAL_DMA_Init+0x390>
 80050a2:	2300      	movs	r3, #0
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	f000 8097 	beq.w	80051d8 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a24      	ldr	r2, [pc, #144]	; (8005140 <HAL_DMA_Init+0x42c>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d021      	beq.n	80050f8 <HAL_DMA_Init+0x3e4>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a22      	ldr	r2, [pc, #136]	; (8005144 <HAL_DMA_Init+0x430>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d01c      	beq.n	80050f8 <HAL_DMA_Init+0x3e4>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a21      	ldr	r2, [pc, #132]	; (8005148 <HAL_DMA_Init+0x434>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d017      	beq.n	80050f8 <HAL_DMA_Init+0x3e4>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a1f      	ldr	r2, [pc, #124]	; (800514c <HAL_DMA_Init+0x438>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d012      	beq.n	80050f8 <HAL_DMA_Init+0x3e4>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a1e      	ldr	r2, [pc, #120]	; (8005150 <HAL_DMA_Init+0x43c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d00d      	beq.n	80050f8 <HAL_DMA_Init+0x3e4>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1c      	ldr	r2, [pc, #112]	; (8005154 <HAL_DMA_Init+0x440>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d008      	beq.n	80050f8 <HAL_DMA_Init+0x3e4>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a1b      	ldr	r2, [pc, #108]	; (8005158 <HAL_DMA_Init+0x444>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d003      	beq.n	80050f8 <HAL_DMA_Init+0x3e4>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a19      	ldr	r2, [pc, #100]	; (800515c <HAL_DMA_Init+0x448>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2202      	movs	r2, #2
 80050fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	4b12      	ldr	r3, [pc, #72]	; (8005160 <HAL_DMA_Init+0x44c>)
 8005116:	4013      	ands	r3, r2
 8005118:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	2b40      	cmp	r3, #64	; 0x40
 8005120:	d020      	beq.n	8005164 <HAL_DMA_Init+0x450>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	2b80      	cmp	r3, #128	; 0x80
 8005128:	d102      	bne.n	8005130 <HAL_DMA_Init+0x41c>
 800512a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800512e:	e01a      	b.n	8005166 <HAL_DMA_Init+0x452>
 8005130:	2300      	movs	r3, #0
 8005132:	e018      	b.n	8005166 <HAL_DMA_Init+0x452>
 8005134:	fe10803f 	.word	0xfe10803f
 8005138:	5c001000 	.word	0x5c001000
 800513c:	ffff0000 	.word	0xffff0000
 8005140:	58025408 	.word	0x58025408
 8005144:	5802541c 	.word	0x5802541c
 8005148:	58025430 	.word	0x58025430
 800514c:	58025444 	.word	0x58025444
 8005150:	58025458 	.word	0x58025458
 8005154:	5802546c 	.word	0x5802546c
 8005158:	58025480 	.word	0x58025480
 800515c:	58025494 	.word	0x58025494
 8005160:	fffe000f 	.word	0xfffe000f
 8005164:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005166:	687a      	ldr	r2, [r7, #4]
 8005168:	68d2      	ldr	r2, [r2, #12]
 800516a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800516c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8005174:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800517c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8005184:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	69db      	ldr	r3, [r3, #28]
 800518a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800518c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6a1b      	ldr	r3, [r3, #32]
 8005192:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8005194:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	4313      	orrs	r3, r2
 800519a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	461a      	mov	r2, r3
 80051aa:	4b6e      	ldr	r3, [pc, #440]	; (8005364 <HAL_DMA_Init+0x650>)
 80051ac:	4413      	add	r3, r2
 80051ae:	4a6e      	ldr	r2, [pc, #440]	; (8005368 <HAL_DMA_Init+0x654>)
 80051b0:	fba2 2303 	umull	r2, r3, r2, r3
 80051b4:	091b      	lsrs	r3, r3, #4
 80051b6:	009a      	lsls	r2, r3, #2
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f002 f9a7 	bl	8007510 <DMA_CalcBaseAndBitshift>
 80051c2:	4603      	mov	r3, r0
 80051c4:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051ca:	f003 031f 	and.w	r3, r3, #31
 80051ce:	2201      	movs	r2, #1
 80051d0:	409a      	lsls	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	605a      	str	r2, [r3, #4]
 80051d6:	e008      	b.n	80051ea <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2240      	movs	r2, #64	; 0x40
 80051dc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2203      	movs	r2, #3
 80051e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e0b7      	b.n	800535a <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a5f      	ldr	r2, [pc, #380]	; (800536c <HAL_DMA_Init+0x658>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d072      	beq.n	80052da <HAL_DMA_Init+0x5c6>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a5d      	ldr	r2, [pc, #372]	; (8005370 <HAL_DMA_Init+0x65c>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d06d      	beq.n	80052da <HAL_DMA_Init+0x5c6>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a5c      	ldr	r2, [pc, #368]	; (8005374 <HAL_DMA_Init+0x660>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d068      	beq.n	80052da <HAL_DMA_Init+0x5c6>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a5a      	ldr	r2, [pc, #360]	; (8005378 <HAL_DMA_Init+0x664>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d063      	beq.n	80052da <HAL_DMA_Init+0x5c6>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a59      	ldr	r2, [pc, #356]	; (800537c <HAL_DMA_Init+0x668>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d05e      	beq.n	80052da <HAL_DMA_Init+0x5c6>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a57      	ldr	r2, [pc, #348]	; (8005380 <HAL_DMA_Init+0x66c>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d059      	beq.n	80052da <HAL_DMA_Init+0x5c6>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a56      	ldr	r2, [pc, #344]	; (8005384 <HAL_DMA_Init+0x670>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d054      	beq.n	80052da <HAL_DMA_Init+0x5c6>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a54      	ldr	r2, [pc, #336]	; (8005388 <HAL_DMA_Init+0x674>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d04f      	beq.n	80052da <HAL_DMA_Init+0x5c6>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a53      	ldr	r2, [pc, #332]	; (800538c <HAL_DMA_Init+0x678>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d04a      	beq.n	80052da <HAL_DMA_Init+0x5c6>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a51      	ldr	r2, [pc, #324]	; (8005390 <HAL_DMA_Init+0x67c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d045      	beq.n	80052da <HAL_DMA_Init+0x5c6>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a50      	ldr	r2, [pc, #320]	; (8005394 <HAL_DMA_Init+0x680>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d040      	beq.n	80052da <HAL_DMA_Init+0x5c6>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a4e      	ldr	r2, [pc, #312]	; (8005398 <HAL_DMA_Init+0x684>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d03b      	beq.n	80052da <HAL_DMA_Init+0x5c6>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a4d      	ldr	r2, [pc, #308]	; (800539c <HAL_DMA_Init+0x688>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d036      	beq.n	80052da <HAL_DMA_Init+0x5c6>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a4b      	ldr	r2, [pc, #300]	; (80053a0 <HAL_DMA_Init+0x68c>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d031      	beq.n	80052da <HAL_DMA_Init+0x5c6>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a4a      	ldr	r2, [pc, #296]	; (80053a4 <HAL_DMA_Init+0x690>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d02c      	beq.n	80052da <HAL_DMA_Init+0x5c6>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a48      	ldr	r2, [pc, #288]	; (80053a8 <HAL_DMA_Init+0x694>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d027      	beq.n	80052da <HAL_DMA_Init+0x5c6>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a47      	ldr	r2, [pc, #284]	; (80053ac <HAL_DMA_Init+0x698>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d022      	beq.n	80052da <HAL_DMA_Init+0x5c6>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a45      	ldr	r2, [pc, #276]	; (80053b0 <HAL_DMA_Init+0x69c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d01d      	beq.n	80052da <HAL_DMA_Init+0x5c6>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a44      	ldr	r2, [pc, #272]	; (80053b4 <HAL_DMA_Init+0x6a0>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d018      	beq.n	80052da <HAL_DMA_Init+0x5c6>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a42      	ldr	r2, [pc, #264]	; (80053b8 <HAL_DMA_Init+0x6a4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d013      	beq.n	80052da <HAL_DMA_Init+0x5c6>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a41      	ldr	r2, [pc, #260]	; (80053bc <HAL_DMA_Init+0x6a8>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d00e      	beq.n	80052da <HAL_DMA_Init+0x5c6>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a3f      	ldr	r2, [pc, #252]	; (80053c0 <HAL_DMA_Init+0x6ac>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d009      	beq.n	80052da <HAL_DMA_Init+0x5c6>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a3e      	ldr	r2, [pc, #248]	; (80053c4 <HAL_DMA_Init+0x6b0>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d004      	beq.n	80052da <HAL_DMA_Init+0x5c6>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a3c      	ldr	r2, [pc, #240]	; (80053c8 <HAL_DMA_Init+0x6b4>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d101      	bne.n	80052de <HAL_DMA_Init+0x5ca>
 80052da:	2301      	movs	r3, #1
 80052dc:	e000      	b.n	80052e0 <HAL_DMA_Init+0x5cc>
 80052de:	2300      	movs	r3, #0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d032      	beq.n	800534a <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f002 fa41 	bl	800776c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	2b80      	cmp	r3, #128	; 0x80
 80052f0:	d102      	bne.n	80052f8 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005300:	b2d2      	uxtb	r2, r2
 8005302:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800530c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d010      	beq.n	8005338 <HAL_DMA_Init+0x624>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	2b08      	cmp	r3, #8
 800531c:	d80c      	bhi.n	8005338 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f002 fabe 	bl	80078a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005328:	2200      	movs	r2, #0
 800532a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005330:	687a      	ldr	r2, [r7, #4]
 8005332:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005334:	605a      	str	r2, [r3, #4]
 8005336:	e008      	b.n	800534a <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3718      	adds	r7, #24
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	a7fdabf8 	.word	0xa7fdabf8
 8005368:	cccccccd 	.word	0xcccccccd
 800536c:	40020010 	.word	0x40020010
 8005370:	40020028 	.word	0x40020028
 8005374:	40020040 	.word	0x40020040
 8005378:	40020058 	.word	0x40020058
 800537c:	40020070 	.word	0x40020070
 8005380:	40020088 	.word	0x40020088
 8005384:	400200a0 	.word	0x400200a0
 8005388:	400200b8 	.word	0x400200b8
 800538c:	40020410 	.word	0x40020410
 8005390:	40020428 	.word	0x40020428
 8005394:	40020440 	.word	0x40020440
 8005398:	40020458 	.word	0x40020458
 800539c:	40020470 	.word	0x40020470
 80053a0:	40020488 	.word	0x40020488
 80053a4:	400204a0 	.word	0x400204a0
 80053a8:	400204b8 	.word	0x400204b8
 80053ac:	58025408 	.word	0x58025408
 80053b0:	5802541c 	.word	0x5802541c
 80053b4:	58025430 	.word	0x58025430
 80053b8:	58025444 	.word	0x58025444
 80053bc:	58025458 	.word	0x58025458
 80053c0:	5802546c 	.word	0x5802546c
 80053c4:	58025480 	.word	0x58025480
 80053c8:	58025494 	.word	0x58025494

080053cc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	b086      	sub	sp, #24
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	60f8      	str	r0, [r7, #12]
 80053d4:	60b9      	str	r1, [r7, #8]
 80053d6:	607a      	str	r2, [r7, #4]
 80053d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053da:	2300      	movs	r3, #0
 80053dc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d101      	bne.n	80053e8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80053e4:	2301      	movs	r3, #1
 80053e6:	e226      	b.n	8005836 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d101      	bne.n	80053f6 <HAL_DMA_Start_IT+0x2a>
 80053f2:	2302      	movs	r3, #2
 80053f4:	e21f      	b.n	8005836 <HAL_DMA_Start_IT+0x46a>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	2201      	movs	r2, #1
 80053fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005404:	b2db      	uxtb	r3, r3
 8005406:	2b01      	cmp	r3, #1
 8005408:	f040 820a 	bne.w	8005820 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2202      	movs	r2, #2
 8005410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a68      	ldr	r2, [pc, #416]	; (80055c0 <HAL_DMA_Start_IT+0x1f4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d04a      	beq.n	80054ba <HAL_DMA_Start_IT+0xee>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a66      	ldr	r2, [pc, #408]	; (80055c4 <HAL_DMA_Start_IT+0x1f8>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d045      	beq.n	80054ba <HAL_DMA_Start_IT+0xee>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a65      	ldr	r2, [pc, #404]	; (80055c8 <HAL_DMA_Start_IT+0x1fc>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d040      	beq.n	80054ba <HAL_DMA_Start_IT+0xee>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a63      	ldr	r2, [pc, #396]	; (80055cc <HAL_DMA_Start_IT+0x200>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d03b      	beq.n	80054ba <HAL_DMA_Start_IT+0xee>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a62      	ldr	r2, [pc, #392]	; (80055d0 <HAL_DMA_Start_IT+0x204>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d036      	beq.n	80054ba <HAL_DMA_Start_IT+0xee>
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a60      	ldr	r2, [pc, #384]	; (80055d4 <HAL_DMA_Start_IT+0x208>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d031      	beq.n	80054ba <HAL_DMA_Start_IT+0xee>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a5f      	ldr	r2, [pc, #380]	; (80055d8 <HAL_DMA_Start_IT+0x20c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d02c      	beq.n	80054ba <HAL_DMA_Start_IT+0xee>
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a5d      	ldr	r2, [pc, #372]	; (80055dc <HAL_DMA_Start_IT+0x210>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d027      	beq.n	80054ba <HAL_DMA_Start_IT+0xee>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a5c      	ldr	r2, [pc, #368]	; (80055e0 <HAL_DMA_Start_IT+0x214>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d022      	beq.n	80054ba <HAL_DMA_Start_IT+0xee>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a5a      	ldr	r2, [pc, #360]	; (80055e4 <HAL_DMA_Start_IT+0x218>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d01d      	beq.n	80054ba <HAL_DMA_Start_IT+0xee>
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a59      	ldr	r2, [pc, #356]	; (80055e8 <HAL_DMA_Start_IT+0x21c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d018      	beq.n	80054ba <HAL_DMA_Start_IT+0xee>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a57      	ldr	r2, [pc, #348]	; (80055ec <HAL_DMA_Start_IT+0x220>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d013      	beq.n	80054ba <HAL_DMA_Start_IT+0xee>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a56      	ldr	r2, [pc, #344]	; (80055f0 <HAL_DMA_Start_IT+0x224>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d00e      	beq.n	80054ba <HAL_DMA_Start_IT+0xee>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a54      	ldr	r2, [pc, #336]	; (80055f4 <HAL_DMA_Start_IT+0x228>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d009      	beq.n	80054ba <HAL_DMA_Start_IT+0xee>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a53      	ldr	r2, [pc, #332]	; (80055f8 <HAL_DMA_Start_IT+0x22c>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d004      	beq.n	80054ba <HAL_DMA_Start_IT+0xee>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a51      	ldr	r2, [pc, #324]	; (80055fc <HAL_DMA_Start_IT+0x230>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d108      	bne.n	80054cc <HAL_DMA_Start_IT+0x100>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0201 	bic.w	r2, r2, #1
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	e007      	b.n	80054dc <HAL_DMA_Start_IT+0x110>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	681a      	ldr	r2, [r3, #0]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f022 0201 	bic.w	r2, r2, #1
 80054da:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	68b9      	ldr	r1, [r7, #8]
 80054e2:	68f8      	ldr	r0, [r7, #12]
 80054e4:	f001 fe68 	bl	80071b8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a34      	ldr	r2, [pc, #208]	; (80055c0 <HAL_DMA_Start_IT+0x1f4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d04a      	beq.n	8005588 <HAL_DMA_Start_IT+0x1bc>
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a33      	ldr	r2, [pc, #204]	; (80055c4 <HAL_DMA_Start_IT+0x1f8>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d045      	beq.n	8005588 <HAL_DMA_Start_IT+0x1bc>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a31      	ldr	r2, [pc, #196]	; (80055c8 <HAL_DMA_Start_IT+0x1fc>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d040      	beq.n	8005588 <HAL_DMA_Start_IT+0x1bc>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a30      	ldr	r2, [pc, #192]	; (80055cc <HAL_DMA_Start_IT+0x200>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d03b      	beq.n	8005588 <HAL_DMA_Start_IT+0x1bc>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a2e      	ldr	r2, [pc, #184]	; (80055d0 <HAL_DMA_Start_IT+0x204>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d036      	beq.n	8005588 <HAL_DMA_Start_IT+0x1bc>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a2d      	ldr	r2, [pc, #180]	; (80055d4 <HAL_DMA_Start_IT+0x208>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d031      	beq.n	8005588 <HAL_DMA_Start_IT+0x1bc>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a2b      	ldr	r2, [pc, #172]	; (80055d8 <HAL_DMA_Start_IT+0x20c>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d02c      	beq.n	8005588 <HAL_DMA_Start_IT+0x1bc>
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a2a      	ldr	r2, [pc, #168]	; (80055dc <HAL_DMA_Start_IT+0x210>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d027      	beq.n	8005588 <HAL_DMA_Start_IT+0x1bc>
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	4a28      	ldr	r2, [pc, #160]	; (80055e0 <HAL_DMA_Start_IT+0x214>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d022      	beq.n	8005588 <HAL_DMA_Start_IT+0x1bc>
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4a27      	ldr	r2, [pc, #156]	; (80055e4 <HAL_DMA_Start_IT+0x218>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d01d      	beq.n	8005588 <HAL_DMA_Start_IT+0x1bc>
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4a25      	ldr	r2, [pc, #148]	; (80055e8 <HAL_DMA_Start_IT+0x21c>)
 8005552:	4293      	cmp	r3, r2
 8005554:	d018      	beq.n	8005588 <HAL_DMA_Start_IT+0x1bc>
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a24      	ldr	r2, [pc, #144]	; (80055ec <HAL_DMA_Start_IT+0x220>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d013      	beq.n	8005588 <HAL_DMA_Start_IT+0x1bc>
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4a22      	ldr	r2, [pc, #136]	; (80055f0 <HAL_DMA_Start_IT+0x224>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d00e      	beq.n	8005588 <HAL_DMA_Start_IT+0x1bc>
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a21      	ldr	r2, [pc, #132]	; (80055f4 <HAL_DMA_Start_IT+0x228>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d009      	beq.n	8005588 <HAL_DMA_Start_IT+0x1bc>
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a1f      	ldr	r2, [pc, #124]	; (80055f8 <HAL_DMA_Start_IT+0x22c>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d004      	beq.n	8005588 <HAL_DMA_Start_IT+0x1bc>
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4a1e      	ldr	r2, [pc, #120]	; (80055fc <HAL_DMA_Start_IT+0x230>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d101      	bne.n	800558c <HAL_DMA_Start_IT+0x1c0>
 8005588:	2301      	movs	r3, #1
 800558a:	e000      	b.n	800558e <HAL_DMA_Start_IT+0x1c2>
 800558c:	2300      	movs	r3, #0
 800558e:	2b00      	cmp	r3, #0
 8005590:	d036      	beq.n	8005600 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f023 021e 	bic.w	r2, r3, #30
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f042 0216 	orr.w	r2, r2, #22
 80055a4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d03e      	beq.n	800562c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f042 0208 	orr.w	r2, r2, #8
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	e035      	b.n	800562c <HAL_DMA_Start_IT+0x260>
 80055c0:	40020010 	.word	0x40020010
 80055c4:	40020028 	.word	0x40020028
 80055c8:	40020040 	.word	0x40020040
 80055cc:	40020058 	.word	0x40020058
 80055d0:	40020070 	.word	0x40020070
 80055d4:	40020088 	.word	0x40020088
 80055d8:	400200a0 	.word	0x400200a0
 80055dc:	400200b8 	.word	0x400200b8
 80055e0:	40020410 	.word	0x40020410
 80055e4:	40020428 	.word	0x40020428
 80055e8:	40020440 	.word	0x40020440
 80055ec:	40020458 	.word	0x40020458
 80055f0:	40020470 	.word	0x40020470
 80055f4:	40020488 	.word	0x40020488
 80055f8:	400204a0 	.word	0x400204a0
 80055fc:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f023 020e 	bic.w	r2, r3, #14
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f042 020a 	orr.w	r2, r2, #10
 8005612:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005618:	2b00      	cmp	r3, #0
 800561a:	d007      	beq.n	800562c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f042 0204 	orr.w	r2, r2, #4
 800562a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a83      	ldr	r2, [pc, #524]	; (8005840 <HAL_DMA_Start_IT+0x474>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d072      	beq.n	800571c <HAL_DMA_Start_IT+0x350>
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a82      	ldr	r2, [pc, #520]	; (8005844 <HAL_DMA_Start_IT+0x478>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d06d      	beq.n	800571c <HAL_DMA_Start_IT+0x350>
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a80      	ldr	r2, [pc, #512]	; (8005848 <HAL_DMA_Start_IT+0x47c>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d068      	beq.n	800571c <HAL_DMA_Start_IT+0x350>
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a7f      	ldr	r2, [pc, #508]	; (800584c <HAL_DMA_Start_IT+0x480>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d063      	beq.n	800571c <HAL_DMA_Start_IT+0x350>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a7d      	ldr	r2, [pc, #500]	; (8005850 <HAL_DMA_Start_IT+0x484>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d05e      	beq.n	800571c <HAL_DMA_Start_IT+0x350>
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a7c      	ldr	r2, [pc, #496]	; (8005854 <HAL_DMA_Start_IT+0x488>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d059      	beq.n	800571c <HAL_DMA_Start_IT+0x350>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a7a      	ldr	r2, [pc, #488]	; (8005858 <HAL_DMA_Start_IT+0x48c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d054      	beq.n	800571c <HAL_DMA_Start_IT+0x350>
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a79      	ldr	r2, [pc, #484]	; (800585c <HAL_DMA_Start_IT+0x490>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d04f      	beq.n	800571c <HAL_DMA_Start_IT+0x350>
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a77      	ldr	r2, [pc, #476]	; (8005860 <HAL_DMA_Start_IT+0x494>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d04a      	beq.n	800571c <HAL_DMA_Start_IT+0x350>
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a76      	ldr	r2, [pc, #472]	; (8005864 <HAL_DMA_Start_IT+0x498>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d045      	beq.n	800571c <HAL_DMA_Start_IT+0x350>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	4a74      	ldr	r2, [pc, #464]	; (8005868 <HAL_DMA_Start_IT+0x49c>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d040      	beq.n	800571c <HAL_DMA_Start_IT+0x350>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a73      	ldr	r2, [pc, #460]	; (800586c <HAL_DMA_Start_IT+0x4a0>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d03b      	beq.n	800571c <HAL_DMA_Start_IT+0x350>
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a71      	ldr	r2, [pc, #452]	; (8005870 <HAL_DMA_Start_IT+0x4a4>)
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d036      	beq.n	800571c <HAL_DMA_Start_IT+0x350>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	4a70      	ldr	r2, [pc, #448]	; (8005874 <HAL_DMA_Start_IT+0x4a8>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d031      	beq.n	800571c <HAL_DMA_Start_IT+0x350>
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a6e      	ldr	r2, [pc, #440]	; (8005878 <HAL_DMA_Start_IT+0x4ac>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d02c      	beq.n	800571c <HAL_DMA_Start_IT+0x350>
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a6d      	ldr	r2, [pc, #436]	; (800587c <HAL_DMA_Start_IT+0x4b0>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d027      	beq.n	800571c <HAL_DMA_Start_IT+0x350>
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a6b      	ldr	r2, [pc, #428]	; (8005880 <HAL_DMA_Start_IT+0x4b4>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d022      	beq.n	800571c <HAL_DMA_Start_IT+0x350>
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a6a      	ldr	r2, [pc, #424]	; (8005884 <HAL_DMA_Start_IT+0x4b8>)
 80056dc:	4293      	cmp	r3, r2
 80056de:	d01d      	beq.n	800571c <HAL_DMA_Start_IT+0x350>
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	4a68      	ldr	r2, [pc, #416]	; (8005888 <HAL_DMA_Start_IT+0x4bc>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d018      	beq.n	800571c <HAL_DMA_Start_IT+0x350>
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a67      	ldr	r2, [pc, #412]	; (800588c <HAL_DMA_Start_IT+0x4c0>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d013      	beq.n	800571c <HAL_DMA_Start_IT+0x350>
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	4a65      	ldr	r2, [pc, #404]	; (8005890 <HAL_DMA_Start_IT+0x4c4>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d00e      	beq.n	800571c <HAL_DMA_Start_IT+0x350>
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4a64      	ldr	r2, [pc, #400]	; (8005894 <HAL_DMA_Start_IT+0x4c8>)
 8005704:	4293      	cmp	r3, r2
 8005706:	d009      	beq.n	800571c <HAL_DMA_Start_IT+0x350>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a62      	ldr	r2, [pc, #392]	; (8005898 <HAL_DMA_Start_IT+0x4cc>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d004      	beq.n	800571c <HAL_DMA_Start_IT+0x350>
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a61      	ldr	r2, [pc, #388]	; (800589c <HAL_DMA_Start_IT+0x4d0>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d101      	bne.n	8005720 <HAL_DMA_Start_IT+0x354>
 800571c:	2301      	movs	r3, #1
 800571e:	e000      	b.n	8005722 <HAL_DMA_Start_IT+0x356>
 8005720:	2300      	movs	r3, #0
 8005722:	2b00      	cmp	r3, #0
 8005724:	d01a      	beq.n	800575c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005730:	2b00      	cmp	r3, #0
 8005732:	d007      	beq.n	8005744 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800573e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005742:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005748:	2b00      	cmp	r3, #0
 800574a:	d007      	beq.n	800575c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005756:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800575a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a37      	ldr	r2, [pc, #220]	; (8005840 <HAL_DMA_Start_IT+0x474>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d04a      	beq.n	80057fc <HAL_DMA_Start_IT+0x430>
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a36      	ldr	r2, [pc, #216]	; (8005844 <HAL_DMA_Start_IT+0x478>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d045      	beq.n	80057fc <HAL_DMA_Start_IT+0x430>
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a34      	ldr	r2, [pc, #208]	; (8005848 <HAL_DMA_Start_IT+0x47c>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d040      	beq.n	80057fc <HAL_DMA_Start_IT+0x430>
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a33      	ldr	r2, [pc, #204]	; (800584c <HAL_DMA_Start_IT+0x480>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d03b      	beq.n	80057fc <HAL_DMA_Start_IT+0x430>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a31      	ldr	r2, [pc, #196]	; (8005850 <HAL_DMA_Start_IT+0x484>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d036      	beq.n	80057fc <HAL_DMA_Start_IT+0x430>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a30      	ldr	r2, [pc, #192]	; (8005854 <HAL_DMA_Start_IT+0x488>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d031      	beq.n	80057fc <HAL_DMA_Start_IT+0x430>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a2e      	ldr	r2, [pc, #184]	; (8005858 <HAL_DMA_Start_IT+0x48c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d02c      	beq.n	80057fc <HAL_DMA_Start_IT+0x430>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a2d      	ldr	r2, [pc, #180]	; (800585c <HAL_DMA_Start_IT+0x490>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d027      	beq.n	80057fc <HAL_DMA_Start_IT+0x430>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a2b      	ldr	r2, [pc, #172]	; (8005860 <HAL_DMA_Start_IT+0x494>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d022      	beq.n	80057fc <HAL_DMA_Start_IT+0x430>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a2a      	ldr	r2, [pc, #168]	; (8005864 <HAL_DMA_Start_IT+0x498>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d01d      	beq.n	80057fc <HAL_DMA_Start_IT+0x430>
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a28      	ldr	r2, [pc, #160]	; (8005868 <HAL_DMA_Start_IT+0x49c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d018      	beq.n	80057fc <HAL_DMA_Start_IT+0x430>
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a27      	ldr	r2, [pc, #156]	; (800586c <HAL_DMA_Start_IT+0x4a0>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d013      	beq.n	80057fc <HAL_DMA_Start_IT+0x430>
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a25      	ldr	r2, [pc, #148]	; (8005870 <HAL_DMA_Start_IT+0x4a4>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d00e      	beq.n	80057fc <HAL_DMA_Start_IT+0x430>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a24      	ldr	r2, [pc, #144]	; (8005874 <HAL_DMA_Start_IT+0x4a8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d009      	beq.n	80057fc <HAL_DMA_Start_IT+0x430>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	4a22      	ldr	r2, [pc, #136]	; (8005878 <HAL_DMA_Start_IT+0x4ac>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d004      	beq.n	80057fc <HAL_DMA_Start_IT+0x430>
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a21      	ldr	r2, [pc, #132]	; (800587c <HAL_DMA_Start_IT+0x4b0>)
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d108      	bne.n	800580e <HAL_DMA_Start_IT+0x442>
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681a      	ldr	r2, [r3, #0]
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f042 0201 	orr.w	r2, r2, #1
 800580a:	601a      	str	r2, [r3, #0]
 800580c:	e012      	b.n	8005834 <HAL_DMA_Start_IT+0x468>
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	681a      	ldr	r2, [r3, #0]
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f042 0201 	orr.w	r2, r2, #1
 800581c:	601a      	str	r2, [r3, #0]
 800581e:	e009      	b.n	8005834 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005826:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8005830:	2301      	movs	r3, #1
 8005832:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005834:	7dfb      	ldrb	r3, [r7, #23]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	40020010 	.word	0x40020010
 8005844:	40020028 	.word	0x40020028
 8005848:	40020040 	.word	0x40020040
 800584c:	40020058 	.word	0x40020058
 8005850:	40020070 	.word	0x40020070
 8005854:	40020088 	.word	0x40020088
 8005858:	400200a0 	.word	0x400200a0
 800585c:	400200b8 	.word	0x400200b8
 8005860:	40020410 	.word	0x40020410
 8005864:	40020428 	.word	0x40020428
 8005868:	40020440 	.word	0x40020440
 800586c:	40020458 	.word	0x40020458
 8005870:	40020470 	.word	0x40020470
 8005874:	40020488 	.word	0x40020488
 8005878:	400204a0 	.word	0x400204a0
 800587c:	400204b8 	.word	0x400204b8
 8005880:	58025408 	.word	0x58025408
 8005884:	5802541c 	.word	0x5802541c
 8005888:	58025430 	.word	0x58025430
 800588c:	58025444 	.word	0x58025444
 8005890:	58025458 	.word	0x58025458
 8005894:	5802546c 	.word	0x5802546c
 8005898:	58025480 	.word	0x58025480
 800589c:	58025494 	.word	0x58025494

080058a0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b086      	sub	sp, #24
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80058a8:	f7fe ff02 	bl	80046b0 <HAL_GetTick>
 80058ac:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e2dc      	b.n	8005e72 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	2b02      	cmp	r3, #2
 80058c2:	d008      	beq.n	80058d6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2280      	movs	r2, #128	; 0x80
 80058c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e2cd      	b.n	8005e72 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4a76      	ldr	r2, [pc, #472]	; (8005ab4 <HAL_DMA_Abort+0x214>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d04a      	beq.n	8005976 <HAL_DMA_Abort+0xd6>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	4a74      	ldr	r2, [pc, #464]	; (8005ab8 <HAL_DMA_Abort+0x218>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d045      	beq.n	8005976 <HAL_DMA_Abort+0xd6>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	4a73      	ldr	r2, [pc, #460]	; (8005abc <HAL_DMA_Abort+0x21c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d040      	beq.n	8005976 <HAL_DMA_Abort+0xd6>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a71      	ldr	r2, [pc, #452]	; (8005ac0 <HAL_DMA_Abort+0x220>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d03b      	beq.n	8005976 <HAL_DMA_Abort+0xd6>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a70      	ldr	r2, [pc, #448]	; (8005ac4 <HAL_DMA_Abort+0x224>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d036      	beq.n	8005976 <HAL_DMA_Abort+0xd6>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	4a6e      	ldr	r2, [pc, #440]	; (8005ac8 <HAL_DMA_Abort+0x228>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d031      	beq.n	8005976 <HAL_DMA_Abort+0xd6>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	4a6d      	ldr	r2, [pc, #436]	; (8005acc <HAL_DMA_Abort+0x22c>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d02c      	beq.n	8005976 <HAL_DMA_Abort+0xd6>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a6b      	ldr	r2, [pc, #428]	; (8005ad0 <HAL_DMA_Abort+0x230>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d027      	beq.n	8005976 <HAL_DMA_Abort+0xd6>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a6a      	ldr	r2, [pc, #424]	; (8005ad4 <HAL_DMA_Abort+0x234>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d022      	beq.n	8005976 <HAL_DMA_Abort+0xd6>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a68      	ldr	r2, [pc, #416]	; (8005ad8 <HAL_DMA_Abort+0x238>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d01d      	beq.n	8005976 <HAL_DMA_Abort+0xd6>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a67      	ldr	r2, [pc, #412]	; (8005adc <HAL_DMA_Abort+0x23c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d018      	beq.n	8005976 <HAL_DMA_Abort+0xd6>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a65      	ldr	r2, [pc, #404]	; (8005ae0 <HAL_DMA_Abort+0x240>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d013      	beq.n	8005976 <HAL_DMA_Abort+0xd6>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a64      	ldr	r2, [pc, #400]	; (8005ae4 <HAL_DMA_Abort+0x244>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d00e      	beq.n	8005976 <HAL_DMA_Abort+0xd6>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a62      	ldr	r2, [pc, #392]	; (8005ae8 <HAL_DMA_Abort+0x248>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d009      	beq.n	8005976 <HAL_DMA_Abort+0xd6>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a61      	ldr	r2, [pc, #388]	; (8005aec <HAL_DMA_Abort+0x24c>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d004      	beq.n	8005976 <HAL_DMA_Abort+0xd6>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a5f      	ldr	r2, [pc, #380]	; (8005af0 <HAL_DMA_Abort+0x250>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d101      	bne.n	800597a <HAL_DMA_Abort+0xda>
 8005976:	2301      	movs	r3, #1
 8005978:	e000      	b.n	800597c <HAL_DMA_Abort+0xdc>
 800597a:	2300      	movs	r3, #0
 800597c:	2b00      	cmp	r3, #0
 800597e:	d013      	beq.n	80059a8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	681a      	ldr	r2, [r3, #0]
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f022 021e 	bic.w	r2, r2, #30
 800598e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	695a      	ldr	r2, [r3, #20]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800599e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	617b      	str	r3, [r7, #20]
 80059a6:	e00a      	b.n	80059be <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f022 020e 	bic.w	r2, r2, #14
 80059b6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a3c      	ldr	r2, [pc, #240]	; (8005ab4 <HAL_DMA_Abort+0x214>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d072      	beq.n	8005aae <HAL_DMA_Abort+0x20e>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a3a      	ldr	r2, [pc, #232]	; (8005ab8 <HAL_DMA_Abort+0x218>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d06d      	beq.n	8005aae <HAL_DMA_Abort+0x20e>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a39      	ldr	r2, [pc, #228]	; (8005abc <HAL_DMA_Abort+0x21c>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d068      	beq.n	8005aae <HAL_DMA_Abort+0x20e>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a37      	ldr	r2, [pc, #220]	; (8005ac0 <HAL_DMA_Abort+0x220>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d063      	beq.n	8005aae <HAL_DMA_Abort+0x20e>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a36      	ldr	r2, [pc, #216]	; (8005ac4 <HAL_DMA_Abort+0x224>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d05e      	beq.n	8005aae <HAL_DMA_Abort+0x20e>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a34      	ldr	r2, [pc, #208]	; (8005ac8 <HAL_DMA_Abort+0x228>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d059      	beq.n	8005aae <HAL_DMA_Abort+0x20e>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	4a33      	ldr	r2, [pc, #204]	; (8005acc <HAL_DMA_Abort+0x22c>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d054      	beq.n	8005aae <HAL_DMA_Abort+0x20e>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	4a31      	ldr	r2, [pc, #196]	; (8005ad0 <HAL_DMA_Abort+0x230>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d04f      	beq.n	8005aae <HAL_DMA_Abort+0x20e>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a30      	ldr	r2, [pc, #192]	; (8005ad4 <HAL_DMA_Abort+0x234>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d04a      	beq.n	8005aae <HAL_DMA_Abort+0x20e>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	4a2e      	ldr	r2, [pc, #184]	; (8005ad8 <HAL_DMA_Abort+0x238>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d045      	beq.n	8005aae <HAL_DMA_Abort+0x20e>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4a2d      	ldr	r2, [pc, #180]	; (8005adc <HAL_DMA_Abort+0x23c>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d040      	beq.n	8005aae <HAL_DMA_Abort+0x20e>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a2b      	ldr	r2, [pc, #172]	; (8005ae0 <HAL_DMA_Abort+0x240>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d03b      	beq.n	8005aae <HAL_DMA_Abort+0x20e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a2a      	ldr	r2, [pc, #168]	; (8005ae4 <HAL_DMA_Abort+0x244>)
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d036      	beq.n	8005aae <HAL_DMA_Abort+0x20e>
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4a28      	ldr	r2, [pc, #160]	; (8005ae8 <HAL_DMA_Abort+0x248>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d031      	beq.n	8005aae <HAL_DMA_Abort+0x20e>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a27      	ldr	r2, [pc, #156]	; (8005aec <HAL_DMA_Abort+0x24c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d02c      	beq.n	8005aae <HAL_DMA_Abort+0x20e>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	4a25      	ldr	r2, [pc, #148]	; (8005af0 <HAL_DMA_Abort+0x250>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d027      	beq.n	8005aae <HAL_DMA_Abort+0x20e>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a24      	ldr	r2, [pc, #144]	; (8005af4 <HAL_DMA_Abort+0x254>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d022      	beq.n	8005aae <HAL_DMA_Abort+0x20e>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a22      	ldr	r2, [pc, #136]	; (8005af8 <HAL_DMA_Abort+0x258>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d01d      	beq.n	8005aae <HAL_DMA_Abort+0x20e>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a21      	ldr	r2, [pc, #132]	; (8005afc <HAL_DMA_Abort+0x25c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d018      	beq.n	8005aae <HAL_DMA_Abort+0x20e>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a1f      	ldr	r2, [pc, #124]	; (8005b00 <HAL_DMA_Abort+0x260>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d013      	beq.n	8005aae <HAL_DMA_Abort+0x20e>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a1e      	ldr	r2, [pc, #120]	; (8005b04 <HAL_DMA_Abort+0x264>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d00e      	beq.n	8005aae <HAL_DMA_Abort+0x20e>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a1c      	ldr	r2, [pc, #112]	; (8005b08 <HAL_DMA_Abort+0x268>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d009      	beq.n	8005aae <HAL_DMA_Abort+0x20e>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a1b      	ldr	r2, [pc, #108]	; (8005b0c <HAL_DMA_Abort+0x26c>)
 8005aa0:	4293      	cmp	r3, r2
 8005aa2:	d004      	beq.n	8005aae <HAL_DMA_Abort+0x20e>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a19      	ldr	r2, [pc, #100]	; (8005b10 <HAL_DMA_Abort+0x270>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d132      	bne.n	8005b14 <HAL_DMA_Abort+0x274>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e031      	b.n	8005b16 <HAL_DMA_Abort+0x276>
 8005ab2:	bf00      	nop
 8005ab4:	40020010 	.word	0x40020010
 8005ab8:	40020028 	.word	0x40020028
 8005abc:	40020040 	.word	0x40020040
 8005ac0:	40020058 	.word	0x40020058
 8005ac4:	40020070 	.word	0x40020070
 8005ac8:	40020088 	.word	0x40020088
 8005acc:	400200a0 	.word	0x400200a0
 8005ad0:	400200b8 	.word	0x400200b8
 8005ad4:	40020410 	.word	0x40020410
 8005ad8:	40020428 	.word	0x40020428
 8005adc:	40020440 	.word	0x40020440
 8005ae0:	40020458 	.word	0x40020458
 8005ae4:	40020470 	.word	0x40020470
 8005ae8:	40020488 	.word	0x40020488
 8005aec:	400204a0 	.word	0x400204a0
 8005af0:	400204b8 	.word	0x400204b8
 8005af4:	58025408 	.word	0x58025408
 8005af8:	5802541c 	.word	0x5802541c
 8005afc:	58025430 	.word	0x58025430
 8005b00:	58025444 	.word	0x58025444
 8005b04:	58025458 	.word	0x58025458
 8005b08:	5802546c 	.word	0x5802546c
 8005b0c:	58025480 	.word	0x58025480
 8005b10:	58025494 	.word	0x58025494
 8005b14:	2300      	movs	r3, #0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d007      	beq.n	8005b2a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b1e:	681a      	ldr	r2, [r3, #0]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005b24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b28:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a6d      	ldr	r2, [pc, #436]	; (8005ce4 <HAL_DMA_Abort+0x444>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d04a      	beq.n	8005bca <HAL_DMA_Abort+0x32a>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	4a6b      	ldr	r2, [pc, #428]	; (8005ce8 <HAL_DMA_Abort+0x448>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d045      	beq.n	8005bca <HAL_DMA_Abort+0x32a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a6a      	ldr	r2, [pc, #424]	; (8005cec <HAL_DMA_Abort+0x44c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d040      	beq.n	8005bca <HAL_DMA_Abort+0x32a>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4a68      	ldr	r2, [pc, #416]	; (8005cf0 <HAL_DMA_Abort+0x450>)
 8005b4e:	4293      	cmp	r3, r2
 8005b50:	d03b      	beq.n	8005bca <HAL_DMA_Abort+0x32a>
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	4a67      	ldr	r2, [pc, #412]	; (8005cf4 <HAL_DMA_Abort+0x454>)
 8005b58:	4293      	cmp	r3, r2
 8005b5a:	d036      	beq.n	8005bca <HAL_DMA_Abort+0x32a>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	4a65      	ldr	r2, [pc, #404]	; (8005cf8 <HAL_DMA_Abort+0x458>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d031      	beq.n	8005bca <HAL_DMA_Abort+0x32a>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a64      	ldr	r2, [pc, #400]	; (8005cfc <HAL_DMA_Abort+0x45c>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d02c      	beq.n	8005bca <HAL_DMA_Abort+0x32a>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4a62      	ldr	r2, [pc, #392]	; (8005d00 <HAL_DMA_Abort+0x460>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d027      	beq.n	8005bca <HAL_DMA_Abort+0x32a>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a61      	ldr	r2, [pc, #388]	; (8005d04 <HAL_DMA_Abort+0x464>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d022      	beq.n	8005bca <HAL_DMA_Abort+0x32a>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4a5f      	ldr	r2, [pc, #380]	; (8005d08 <HAL_DMA_Abort+0x468>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d01d      	beq.n	8005bca <HAL_DMA_Abort+0x32a>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a5e      	ldr	r2, [pc, #376]	; (8005d0c <HAL_DMA_Abort+0x46c>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d018      	beq.n	8005bca <HAL_DMA_Abort+0x32a>
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a5c      	ldr	r2, [pc, #368]	; (8005d10 <HAL_DMA_Abort+0x470>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d013      	beq.n	8005bca <HAL_DMA_Abort+0x32a>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4a5b      	ldr	r2, [pc, #364]	; (8005d14 <HAL_DMA_Abort+0x474>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d00e      	beq.n	8005bca <HAL_DMA_Abort+0x32a>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	4a59      	ldr	r2, [pc, #356]	; (8005d18 <HAL_DMA_Abort+0x478>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d009      	beq.n	8005bca <HAL_DMA_Abort+0x32a>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a58      	ldr	r2, [pc, #352]	; (8005d1c <HAL_DMA_Abort+0x47c>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d004      	beq.n	8005bca <HAL_DMA_Abort+0x32a>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a56      	ldr	r2, [pc, #344]	; (8005d20 <HAL_DMA_Abort+0x480>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d108      	bne.n	8005bdc <HAL_DMA_Abort+0x33c>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f022 0201 	bic.w	r2, r2, #1
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	e007      	b.n	8005bec <HAL_DMA_Abort+0x34c>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f022 0201 	bic.w	r2, r2, #1
 8005bea:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005bec:	e013      	b.n	8005c16 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005bee:	f7fe fd5f 	bl	80046b0 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b05      	cmp	r3, #5
 8005bfa:	d90c      	bls.n	8005c16 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2220      	movs	r2, #32
 8005c00:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2203      	movs	r2, #3
 8005c06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e12d      	b.n	8005e72 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1e5      	bne.n	8005bee <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a2f      	ldr	r2, [pc, #188]	; (8005ce4 <HAL_DMA_Abort+0x444>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d04a      	beq.n	8005cc2 <HAL_DMA_Abort+0x422>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a2d      	ldr	r2, [pc, #180]	; (8005ce8 <HAL_DMA_Abort+0x448>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d045      	beq.n	8005cc2 <HAL_DMA_Abort+0x422>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	4a2c      	ldr	r2, [pc, #176]	; (8005cec <HAL_DMA_Abort+0x44c>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d040      	beq.n	8005cc2 <HAL_DMA_Abort+0x422>
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	4a2a      	ldr	r2, [pc, #168]	; (8005cf0 <HAL_DMA_Abort+0x450>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d03b      	beq.n	8005cc2 <HAL_DMA_Abort+0x422>
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a29      	ldr	r2, [pc, #164]	; (8005cf4 <HAL_DMA_Abort+0x454>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d036      	beq.n	8005cc2 <HAL_DMA_Abort+0x422>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a27      	ldr	r2, [pc, #156]	; (8005cf8 <HAL_DMA_Abort+0x458>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d031      	beq.n	8005cc2 <HAL_DMA_Abort+0x422>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a26      	ldr	r2, [pc, #152]	; (8005cfc <HAL_DMA_Abort+0x45c>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d02c      	beq.n	8005cc2 <HAL_DMA_Abort+0x422>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a24      	ldr	r2, [pc, #144]	; (8005d00 <HAL_DMA_Abort+0x460>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d027      	beq.n	8005cc2 <HAL_DMA_Abort+0x422>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a23      	ldr	r2, [pc, #140]	; (8005d04 <HAL_DMA_Abort+0x464>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d022      	beq.n	8005cc2 <HAL_DMA_Abort+0x422>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a21      	ldr	r2, [pc, #132]	; (8005d08 <HAL_DMA_Abort+0x468>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d01d      	beq.n	8005cc2 <HAL_DMA_Abort+0x422>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a20      	ldr	r2, [pc, #128]	; (8005d0c <HAL_DMA_Abort+0x46c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d018      	beq.n	8005cc2 <HAL_DMA_Abort+0x422>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1e      	ldr	r2, [pc, #120]	; (8005d10 <HAL_DMA_Abort+0x470>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d013      	beq.n	8005cc2 <HAL_DMA_Abort+0x422>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a1d      	ldr	r2, [pc, #116]	; (8005d14 <HAL_DMA_Abort+0x474>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00e      	beq.n	8005cc2 <HAL_DMA_Abort+0x422>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a1b      	ldr	r2, [pc, #108]	; (8005d18 <HAL_DMA_Abort+0x478>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d009      	beq.n	8005cc2 <HAL_DMA_Abort+0x422>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a1a      	ldr	r2, [pc, #104]	; (8005d1c <HAL_DMA_Abort+0x47c>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d004      	beq.n	8005cc2 <HAL_DMA_Abort+0x422>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a18      	ldr	r2, [pc, #96]	; (8005d20 <HAL_DMA_Abort+0x480>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d101      	bne.n	8005cc6 <HAL_DMA_Abort+0x426>
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e000      	b.n	8005cc8 <HAL_DMA_Abort+0x428>
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d02b      	beq.n	8005d24 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cd0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd6:	f003 031f 	and.w	r3, r3, #31
 8005cda:	223f      	movs	r2, #63	; 0x3f
 8005cdc:	409a      	lsls	r2, r3
 8005cde:	68bb      	ldr	r3, [r7, #8]
 8005ce0:	609a      	str	r2, [r3, #8]
 8005ce2:	e02a      	b.n	8005d3a <HAL_DMA_Abort+0x49a>
 8005ce4:	40020010 	.word	0x40020010
 8005ce8:	40020028 	.word	0x40020028
 8005cec:	40020040 	.word	0x40020040
 8005cf0:	40020058 	.word	0x40020058
 8005cf4:	40020070 	.word	0x40020070
 8005cf8:	40020088 	.word	0x40020088
 8005cfc:	400200a0 	.word	0x400200a0
 8005d00:	400200b8 	.word	0x400200b8
 8005d04:	40020410 	.word	0x40020410
 8005d08:	40020428 	.word	0x40020428
 8005d0c:	40020440 	.word	0x40020440
 8005d10:	40020458 	.word	0x40020458
 8005d14:	40020470 	.word	0x40020470
 8005d18:	40020488 	.word	0x40020488
 8005d1c:	400204a0 	.word	0x400204a0
 8005d20:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d28:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d2e:	f003 031f 	and.w	r3, r3, #31
 8005d32:	2201      	movs	r2, #1
 8005d34:	409a      	lsls	r2, r3
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a4f      	ldr	r2, [pc, #316]	; (8005e7c <HAL_DMA_Abort+0x5dc>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d072      	beq.n	8005e2a <HAL_DMA_Abort+0x58a>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a4d      	ldr	r2, [pc, #308]	; (8005e80 <HAL_DMA_Abort+0x5e0>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d06d      	beq.n	8005e2a <HAL_DMA_Abort+0x58a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a4c      	ldr	r2, [pc, #304]	; (8005e84 <HAL_DMA_Abort+0x5e4>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d068      	beq.n	8005e2a <HAL_DMA_Abort+0x58a>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a4a      	ldr	r2, [pc, #296]	; (8005e88 <HAL_DMA_Abort+0x5e8>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d063      	beq.n	8005e2a <HAL_DMA_Abort+0x58a>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a49      	ldr	r2, [pc, #292]	; (8005e8c <HAL_DMA_Abort+0x5ec>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d05e      	beq.n	8005e2a <HAL_DMA_Abort+0x58a>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a47      	ldr	r2, [pc, #284]	; (8005e90 <HAL_DMA_Abort+0x5f0>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d059      	beq.n	8005e2a <HAL_DMA_Abort+0x58a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a46      	ldr	r2, [pc, #280]	; (8005e94 <HAL_DMA_Abort+0x5f4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d054      	beq.n	8005e2a <HAL_DMA_Abort+0x58a>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a44      	ldr	r2, [pc, #272]	; (8005e98 <HAL_DMA_Abort+0x5f8>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d04f      	beq.n	8005e2a <HAL_DMA_Abort+0x58a>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a43      	ldr	r2, [pc, #268]	; (8005e9c <HAL_DMA_Abort+0x5fc>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d04a      	beq.n	8005e2a <HAL_DMA_Abort+0x58a>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a41      	ldr	r2, [pc, #260]	; (8005ea0 <HAL_DMA_Abort+0x600>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d045      	beq.n	8005e2a <HAL_DMA_Abort+0x58a>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4a40      	ldr	r2, [pc, #256]	; (8005ea4 <HAL_DMA_Abort+0x604>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d040      	beq.n	8005e2a <HAL_DMA_Abort+0x58a>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a3e      	ldr	r2, [pc, #248]	; (8005ea8 <HAL_DMA_Abort+0x608>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d03b      	beq.n	8005e2a <HAL_DMA_Abort+0x58a>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	4a3d      	ldr	r2, [pc, #244]	; (8005eac <HAL_DMA_Abort+0x60c>)
 8005db8:	4293      	cmp	r3, r2
 8005dba:	d036      	beq.n	8005e2a <HAL_DMA_Abort+0x58a>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a3b      	ldr	r2, [pc, #236]	; (8005eb0 <HAL_DMA_Abort+0x610>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d031      	beq.n	8005e2a <HAL_DMA_Abort+0x58a>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a3a      	ldr	r2, [pc, #232]	; (8005eb4 <HAL_DMA_Abort+0x614>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d02c      	beq.n	8005e2a <HAL_DMA_Abort+0x58a>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a38      	ldr	r2, [pc, #224]	; (8005eb8 <HAL_DMA_Abort+0x618>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d027      	beq.n	8005e2a <HAL_DMA_Abort+0x58a>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a37      	ldr	r2, [pc, #220]	; (8005ebc <HAL_DMA_Abort+0x61c>)
 8005de0:	4293      	cmp	r3, r2
 8005de2:	d022      	beq.n	8005e2a <HAL_DMA_Abort+0x58a>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a35      	ldr	r2, [pc, #212]	; (8005ec0 <HAL_DMA_Abort+0x620>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d01d      	beq.n	8005e2a <HAL_DMA_Abort+0x58a>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	4a34      	ldr	r2, [pc, #208]	; (8005ec4 <HAL_DMA_Abort+0x624>)
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d018      	beq.n	8005e2a <HAL_DMA_Abort+0x58a>
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a32      	ldr	r2, [pc, #200]	; (8005ec8 <HAL_DMA_Abort+0x628>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d013      	beq.n	8005e2a <HAL_DMA_Abort+0x58a>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a31      	ldr	r2, [pc, #196]	; (8005ecc <HAL_DMA_Abort+0x62c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d00e      	beq.n	8005e2a <HAL_DMA_Abort+0x58a>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	4a2f      	ldr	r2, [pc, #188]	; (8005ed0 <HAL_DMA_Abort+0x630>)
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d009      	beq.n	8005e2a <HAL_DMA_Abort+0x58a>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	4a2e      	ldr	r2, [pc, #184]	; (8005ed4 <HAL_DMA_Abort+0x634>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d004      	beq.n	8005e2a <HAL_DMA_Abort+0x58a>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a2c      	ldr	r2, [pc, #176]	; (8005ed8 <HAL_DMA_Abort+0x638>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d101      	bne.n	8005e2e <HAL_DMA_Abort+0x58e>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e000      	b.n	8005e30 <HAL_DMA_Abort+0x590>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d015      	beq.n	8005e60 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005e3c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00c      	beq.n	8005e60 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005e50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e54:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005e5e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8005e70:	2300      	movs	r3, #0
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3718      	adds	r7, #24
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}
 8005e7a:	bf00      	nop
 8005e7c:	40020010 	.word	0x40020010
 8005e80:	40020028 	.word	0x40020028
 8005e84:	40020040 	.word	0x40020040
 8005e88:	40020058 	.word	0x40020058
 8005e8c:	40020070 	.word	0x40020070
 8005e90:	40020088 	.word	0x40020088
 8005e94:	400200a0 	.word	0x400200a0
 8005e98:	400200b8 	.word	0x400200b8
 8005e9c:	40020410 	.word	0x40020410
 8005ea0:	40020428 	.word	0x40020428
 8005ea4:	40020440 	.word	0x40020440
 8005ea8:	40020458 	.word	0x40020458
 8005eac:	40020470 	.word	0x40020470
 8005eb0:	40020488 	.word	0x40020488
 8005eb4:	400204a0 	.word	0x400204a0
 8005eb8:	400204b8 	.word	0x400204b8
 8005ebc:	58025408 	.word	0x58025408
 8005ec0:	5802541c 	.word	0x5802541c
 8005ec4:	58025430 	.word	0x58025430
 8005ec8:	58025444 	.word	0x58025444
 8005ecc:	58025458 	.word	0x58025458
 8005ed0:	5802546c 	.word	0x5802546c
 8005ed4:	58025480 	.word	0x58025480
 8005ed8:	58025494 	.word	0x58025494

08005edc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b084      	sub	sp, #16
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e205      	b.n	80062fa <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d004      	beq.n	8005f04 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2280      	movs	r2, #128	; 0x80
 8005efe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f00:	2301      	movs	r3, #1
 8005f02:	e1fa      	b.n	80062fa <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a8c      	ldr	r2, [pc, #560]	; (800613c <HAL_DMA_Abort_IT+0x260>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d04a      	beq.n	8005fa4 <HAL_DMA_Abort_IT+0xc8>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a8b      	ldr	r2, [pc, #556]	; (8006140 <HAL_DMA_Abort_IT+0x264>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d045      	beq.n	8005fa4 <HAL_DMA_Abort_IT+0xc8>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a89      	ldr	r2, [pc, #548]	; (8006144 <HAL_DMA_Abort_IT+0x268>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d040      	beq.n	8005fa4 <HAL_DMA_Abort_IT+0xc8>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a88      	ldr	r2, [pc, #544]	; (8006148 <HAL_DMA_Abort_IT+0x26c>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d03b      	beq.n	8005fa4 <HAL_DMA_Abort_IT+0xc8>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a86      	ldr	r2, [pc, #536]	; (800614c <HAL_DMA_Abort_IT+0x270>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d036      	beq.n	8005fa4 <HAL_DMA_Abort_IT+0xc8>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a85      	ldr	r2, [pc, #532]	; (8006150 <HAL_DMA_Abort_IT+0x274>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d031      	beq.n	8005fa4 <HAL_DMA_Abort_IT+0xc8>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a83      	ldr	r2, [pc, #524]	; (8006154 <HAL_DMA_Abort_IT+0x278>)
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d02c      	beq.n	8005fa4 <HAL_DMA_Abort_IT+0xc8>
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	4a82      	ldr	r2, [pc, #520]	; (8006158 <HAL_DMA_Abort_IT+0x27c>)
 8005f50:	4293      	cmp	r3, r2
 8005f52:	d027      	beq.n	8005fa4 <HAL_DMA_Abort_IT+0xc8>
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a80      	ldr	r2, [pc, #512]	; (800615c <HAL_DMA_Abort_IT+0x280>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d022      	beq.n	8005fa4 <HAL_DMA_Abort_IT+0xc8>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4a7f      	ldr	r2, [pc, #508]	; (8006160 <HAL_DMA_Abort_IT+0x284>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d01d      	beq.n	8005fa4 <HAL_DMA_Abort_IT+0xc8>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a7d      	ldr	r2, [pc, #500]	; (8006164 <HAL_DMA_Abort_IT+0x288>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d018      	beq.n	8005fa4 <HAL_DMA_Abort_IT+0xc8>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a7c      	ldr	r2, [pc, #496]	; (8006168 <HAL_DMA_Abort_IT+0x28c>)
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d013      	beq.n	8005fa4 <HAL_DMA_Abort_IT+0xc8>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a7a      	ldr	r2, [pc, #488]	; (800616c <HAL_DMA_Abort_IT+0x290>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d00e      	beq.n	8005fa4 <HAL_DMA_Abort_IT+0xc8>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4a79      	ldr	r2, [pc, #484]	; (8006170 <HAL_DMA_Abort_IT+0x294>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	d009      	beq.n	8005fa4 <HAL_DMA_Abort_IT+0xc8>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	4a77      	ldr	r2, [pc, #476]	; (8006174 <HAL_DMA_Abort_IT+0x298>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d004      	beq.n	8005fa4 <HAL_DMA_Abort_IT+0xc8>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a76      	ldr	r2, [pc, #472]	; (8006178 <HAL_DMA_Abort_IT+0x29c>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d101      	bne.n	8005fa8 <HAL_DMA_Abort_IT+0xcc>
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e000      	b.n	8005faa <HAL_DMA_Abort_IT+0xce>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d065      	beq.n	800607a <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2204      	movs	r2, #4
 8005fb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	4a60      	ldr	r2, [pc, #384]	; (800613c <HAL_DMA_Abort_IT+0x260>)
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d04a      	beq.n	8006056 <HAL_DMA_Abort_IT+0x17a>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a5e      	ldr	r2, [pc, #376]	; (8006140 <HAL_DMA_Abort_IT+0x264>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d045      	beq.n	8006056 <HAL_DMA_Abort_IT+0x17a>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4a5d      	ldr	r2, [pc, #372]	; (8006144 <HAL_DMA_Abort_IT+0x268>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d040      	beq.n	8006056 <HAL_DMA_Abort_IT+0x17a>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a5b      	ldr	r2, [pc, #364]	; (8006148 <HAL_DMA_Abort_IT+0x26c>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d03b      	beq.n	8006056 <HAL_DMA_Abort_IT+0x17a>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a5a      	ldr	r2, [pc, #360]	; (800614c <HAL_DMA_Abort_IT+0x270>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d036      	beq.n	8006056 <HAL_DMA_Abort_IT+0x17a>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a58      	ldr	r2, [pc, #352]	; (8006150 <HAL_DMA_Abort_IT+0x274>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d031      	beq.n	8006056 <HAL_DMA_Abort_IT+0x17a>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a57      	ldr	r2, [pc, #348]	; (8006154 <HAL_DMA_Abort_IT+0x278>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d02c      	beq.n	8006056 <HAL_DMA_Abort_IT+0x17a>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a55      	ldr	r2, [pc, #340]	; (8006158 <HAL_DMA_Abort_IT+0x27c>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d027      	beq.n	8006056 <HAL_DMA_Abort_IT+0x17a>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a54      	ldr	r2, [pc, #336]	; (800615c <HAL_DMA_Abort_IT+0x280>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d022      	beq.n	8006056 <HAL_DMA_Abort_IT+0x17a>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	4a52      	ldr	r2, [pc, #328]	; (8006160 <HAL_DMA_Abort_IT+0x284>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d01d      	beq.n	8006056 <HAL_DMA_Abort_IT+0x17a>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	4a51      	ldr	r2, [pc, #324]	; (8006164 <HAL_DMA_Abort_IT+0x288>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d018      	beq.n	8006056 <HAL_DMA_Abort_IT+0x17a>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a4f      	ldr	r2, [pc, #316]	; (8006168 <HAL_DMA_Abort_IT+0x28c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d013      	beq.n	8006056 <HAL_DMA_Abort_IT+0x17a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a4e      	ldr	r2, [pc, #312]	; (800616c <HAL_DMA_Abort_IT+0x290>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d00e      	beq.n	8006056 <HAL_DMA_Abort_IT+0x17a>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a4c      	ldr	r2, [pc, #304]	; (8006170 <HAL_DMA_Abort_IT+0x294>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d009      	beq.n	8006056 <HAL_DMA_Abort_IT+0x17a>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a4b      	ldr	r2, [pc, #300]	; (8006174 <HAL_DMA_Abort_IT+0x298>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d004      	beq.n	8006056 <HAL_DMA_Abort_IT+0x17a>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a49      	ldr	r2, [pc, #292]	; (8006178 <HAL_DMA_Abort_IT+0x29c>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d108      	bne.n	8006068 <HAL_DMA_Abort_IT+0x18c>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f022 0201 	bic.w	r2, r2, #1
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	e147      	b.n	80062f8 <HAL_DMA_Abort_IT+0x41c>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681a      	ldr	r2, [r3, #0]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0201 	bic.w	r2, r2, #1
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	e13e      	b.n	80062f8 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 020e 	bic.w	r2, r2, #14
 8006088:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a2b      	ldr	r2, [pc, #172]	; (800613c <HAL_DMA_Abort_IT+0x260>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d04a      	beq.n	800612a <HAL_DMA_Abort_IT+0x24e>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a29      	ldr	r2, [pc, #164]	; (8006140 <HAL_DMA_Abort_IT+0x264>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d045      	beq.n	800612a <HAL_DMA_Abort_IT+0x24e>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a28      	ldr	r2, [pc, #160]	; (8006144 <HAL_DMA_Abort_IT+0x268>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d040      	beq.n	800612a <HAL_DMA_Abort_IT+0x24e>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a26      	ldr	r2, [pc, #152]	; (8006148 <HAL_DMA_Abort_IT+0x26c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d03b      	beq.n	800612a <HAL_DMA_Abort_IT+0x24e>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a25      	ldr	r2, [pc, #148]	; (800614c <HAL_DMA_Abort_IT+0x270>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d036      	beq.n	800612a <HAL_DMA_Abort_IT+0x24e>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a23      	ldr	r2, [pc, #140]	; (8006150 <HAL_DMA_Abort_IT+0x274>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d031      	beq.n	800612a <HAL_DMA_Abort_IT+0x24e>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a22      	ldr	r2, [pc, #136]	; (8006154 <HAL_DMA_Abort_IT+0x278>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d02c      	beq.n	800612a <HAL_DMA_Abort_IT+0x24e>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a20      	ldr	r2, [pc, #128]	; (8006158 <HAL_DMA_Abort_IT+0x27c>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d027      	beq.n	800612a <HAL_DMA_Abort_IT+0x24e>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a1f      	ldr	r2, [pc, #124]	; (800615c <HAL_DMA_Abort_IT+0x280>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d022      	beq.n	800612a <HAL_DMA_Abort_IT+0x24e>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a1d      	ldr	r2, [pc, #116]	; (8006160 <HAL_DMA_Abort_IT+0x284>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d01d      	beq.n	800612a <HAL_DMA_Abort_IT+0x24e>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a1c      	ldr	r2, [pc, #112]	; (8006164 <HAL_DMA_Abort_IT+0x288>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d018      	beq.n	800612a <HAL_DMA_Abort_IT+0x24e>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a1a      	ldr	r2, [pc, #104]	; (8006168 <HAL_DMA_Abort_IT+0x28c>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d013      	beq.n	800612a <HAL_DMA_Abort_IT+0x24e>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a19      	ldr	r2, [pc, #100]	; (800616c <HAL_DMA_Abort_IT+0x290>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d00e      	beq.n	800612a <HAL_DMA_Abort_IT+0x24e>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a17      	ldr	r2, [pc, #92]	; (8006170 <HAL_DMA_Abort_IT+0x294>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d009      	beq.n	800612a <HAL_DMA_Abort_IT+0x24e>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a16      	ldr	r2, [pc, #88]	; (8006174 <HAL_DMA_Abort_IT+0x298>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d004      	beq.n	800612a <HAL_DMA_Abort_IT+0x24e>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a14      	ldr	r2, [pc, #80]	; (8006178 <HAL_DMA_Abort_IT+0x29c>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d128      	bne.n	800617c <HAL_DMA_Abort_IT+0x2a0>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	681a      	ldr	r2, [r3, #0]
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f022 0201 	bic.w	r2, r2, #1
 8006138:	601a      	str	r2, [r3, #0]
 800613a:	e027      	b.n	800618c <HAL_DMA_Abort_IT+0x2b0>
 800613c:	40020010 	.word	0x40020010
 8006140:	40020028 	.word	0x40020028
 8006144:	40020040 	.word	0x40020040
 8006148:	40020058 	.word	0x40020058
 800614c:	40020070 	.word	0x40020070
 8006150:	40020088 	.word	0x40020088
 8006154:	400200a0 	.word	0x400200a0
 8006158:	400200b8 	.word	0x400200b8
 800615c:	40020410 	.word	0x40020410
 8006160:	40020428 	.word	0x40020428
 8006164:	40020440 	.word	0x40020440
 8006168:	40020458 	.word	0x40020458
 800616c:	40020470 	.word	0x40020470
 8006170:	40020488 	.word	0x40020488
 8006174:	400204a0 	.word	0x400204a0
 8006178:	400204b8 	.word	0x400204b8
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f022 0201 	bic.w	r2, r2, #1
 800618a:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a5c      	ldr	r2, [pc, #368]	; (8006304 <HAL_DMA_Abort_IT+0x428>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d072      	beq.n	800627c <HAL_DMA_Abort_IT+0x3a0>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a5b      	ldr	r2, [pc, #364]	; (8006308 <HAL_DMA_Abort_IT+0x42c>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d06d      	beq.n	800627c <HAL_DMA_Abort_IT+0x3a0>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a59      	ldr	r2, [pc, #356]	; (800630c <HAL_DMA_Abort_IT+0x430>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d068      	beq.n	800627c <HAL_DMA_Abort_IT+0x3a0>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a58      	ldr	r2, [pc, #352]	; (8006310 <HAL_DMA_Abort_IT+0x434>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d063      	beq.n	800627c <HAL_DMA_Abort_IT+0x3a0>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a56      	ldr	r2, [pc, #344]	; (8006314 <HAL_DMA_Abort_IT+0x438>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d05e      	beq.n	800627c <HAL_DMA_Abort_IT+0x3a0>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a55      	ldr	r2, [pc, #340]	; (8006318 <HAL_DMA_Abort_IT+0x43c>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d059      	beq.n	800627c <HAL_DMA_Abort_IT+0x3a0>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a53      	ldr	r2, [pc, #332]	; (800631c <HAL_DMA_Abort_IT+0x440>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d054      	beq.n	800627c <HAL_DMA_Abort_IT+0x3a0>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a52      	ldr	r2, [pc, #328]	; (8006320 <HAL_DMA_Abort_IT+0x444>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d04f      	beq.n	800627c <HAL_DMA_Abort_IT+0x3a0>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a50      	ldr	r2, [pc, #320]	; (8006324 <HAL_DMA_Abort_IT+0x448>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d04a      	beq.n	800627c <HAL_DMA_Abort_IT+0x3a0>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a4f      	ldr	r2, [pc, #316]	; (8006328 <HAL_DMA_Abort_IT+0x44c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d045      	beq.n	800627c <HAL_DMA_Abort_IT+0x3a0>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a4d      	ldr	r2, [pc, #308]	; (800632c <HAL_DMA_Abort_IT+0x450>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d040      	beq.n	800627c <HAL_DMA_Abort_IT+0x3a0>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a4c      	ldr	r2, [pc, #304]	; (8006330 <HAL_DMA_Abort_IT+0x454>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d03b      	beq.n	800627c <HAL_DMA_Abort_IT+0x3a0>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a4a      	ldr	r2, [pc, #296]	; (8006334 <HAL_DMA_Abort_IT+0x458>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d036      	beq.n	800627c <HAL_DMA_Abort_IT+0x3a0>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a49      	ldr	r2, [pc, #292]	; (8006338 <HAL_DMA_Abort_IT+0x45c>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d031      	beq.n	800627c <HAL_DMA_Abort_IT+0x3a0>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a47      	ldr	r2, [pc, #284]	; (800633c <HAL_DMA_Abort_IT+0x460>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d02c      	beq.n	800627c <HAL_DMA_Abort_IT+0x3a0>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a46      	ldr	r2, [pc, #280]	; (8006340 <HAL_DMA_Abort_IT+0x464>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d027      	beq.n	800627c <HAL_DMA_Abort_IT+0x3a0>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a44      	ldr	r2, [pc, #272]	; (8006344 <HAL_DMA_Abort_IT+0x468>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d022      	beq.n	800627c <HAL_DMA_Abort_IT+0x3a0>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a43      	ldr	r2, [pc, #268]	; (8006348 <HAL_DMA_Abort_IT+0x46c>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d01d      	beq.n	800627c <HAL_DMA_Abort_IT+0x3a0>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a41      	ldr	r2, [pc, #260]	; (800634c <HAL_DMA_Abort_IT+0x470>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d018      	beq.n	800627c <HAL_DMA_Abort_IT+0x3a0>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a40      	ldr	r2, [pc, #256]	; (8006350 <HAL_DMA_Abort_IT+0x474>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d013      	beq.n	800627c <HAL_DMA_Abort_IT+0x3a0>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a3e      	ldr	r2, [pc, #248]	; (8006354 <HAL_DMA_Abort_IT+0x478>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d00e      	beq.n	800627c <HAL_DMA_Abort_IT+0x3a0>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a3d      	ldr	r2, [pc, #244]	; (8006358 <HAL_DMA_Abort_IT+0x47c>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d009      	beq.n	800627c <HAL_DMA_Abort_IT+0x3a0>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a3b      	ldr	r2, [pc, #236]	; (800635c <HAL_DMA_Abort_IT+0x480>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d004      	beq.n	800627c <HAL_DMA_Abort_IT+0x3a0>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a3a      	ldr	r2, [pc, #232]	; (8006360 <HAL_DMA_Abort_IT+0x484>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d101      	bne.n	8006280 <HAL_DMA_Abort_IT+0x3a4>
 800627c:	2301      	movs	r3, #1
 800627e:	e000      	b.n	8006282 <HAL_DMA_Abort_IT+0x3a6>
 8006280:	2300      	movs	r3, #0
 8006282:	2b00      	cmp	r3, #0
 8006284:	d028      	beq.n	80062d8 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006290:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006294:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800629a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062a0:	f003 031f 	and.w	r3, r3, #31
 80062a4:	2201      	movs	r2, #1
 80062a6:	409a      	lsls	r2, r3
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80062b4:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d00c      	beq.n	80062d8 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80062cc:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80062d6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d003      	beq.n	80062f8 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80062f8:	2300      	movs	r3, #0
}
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	40020010 	.word	0x40020010
 8006308:	40020028 	.word	0x40020028
 800630c:	40020040 	.word	0x40020040
 8006310:	40020058 	.word	0x40020058
 8006314:	40020070 	.word	0x40020070
 8006318:	40020088 	.word	0x40020088
 800631c:	400200a0 	.word	0x400200a0
 8006320:	400200b8 	.word	0x400200b8
 8006324:	40020410 	.word	0x40020410
 8006328:	40020428 	.word	0x40020428
 800632c:	40020440 	.word	0x40020440
 8006330:	40020458 	.word	0x40020458
 8006334:	40020470 	.word	0x40020470
 8006338:	40020488 	.word	0x40020488
 800633c:	400204a0 	.word	0x400204a0
 8006340:	400204b8 	.word	0x400204b8
 8006344:	58025408 	.word	0x58025408
 8006348:	5802541c 	.word	0x5802541c
 800634c:	58025430 	.word	0x58025430
 8006350:	58025444 	.word	0x58025444
 8006354:	58025458 	.word	0x58025458
 8006358:	5802546c 	.word	0x5802546c
 800635c:	58025480 	.word	0x58025480
 8006360:	58025494 	.word	0x58025494

08006364 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b08a      	sub	sp, #40	; 0x28
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800636c:	2300      	movs	r3, #0
 800636e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006370:	4b67      	ldr	r3, [pc, #412]	; (8006510 <HAL_DMA_IRQHandler+0x1ac>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a67      	ldr	r2, [pc, #412]	; (8006514 <HAL_DMA_IRQHandler+0x1b0>)
 8006376:	fba2 2303 	umull	r2, r3, r2, r3
 800637a:	0a9b      	lsrs	r3, r3, #10
 800637c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006382:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006388:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800638a:	6a3b      	ldr	r3, [r7, #32]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a5f      	ldr	r2, [pc, #380]	; (8006518 <HAL_DMA_IRQHandler+0x1b4>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d04a      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	4a5d      	ldr	r2, [pc, #372]	; (800651c <HAL_DMA_IRQHandler+0x1b8>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	d045      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a5c      	ldr	r2, [pc, #368]	; (8006520 <HAL_DMA_IRQHandler+0x1bc>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d040      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4a5a      	ldr	r2, [pc, #360]	; (8006524 <HAL_DMA_IRQHandler+0x1c0>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d03b      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a59      	ldr	r2, [pc, #356]	; (8006528 <HAL_DMA_IRQHandler+0x1c4>)
 80063c4:	4293      	cmp	r3, r2
 80063c6:	d036      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	4a57      	ldr	r2, [pc, #348]	; (800652c <HAL_DMA_IRQHandler+0x1c8>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d031      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	4a56      	ldr	r2, [pc, #344]	; (8006530 <HAL_DMA_IRQHandler+0x1cc>)
 80063d8:	4293      	cmp	r3, r2
 80063da:	d02c      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	4a54      	ldr	r2, [pc, #336]	; (8006534 <HAL_DMA_IRQHandler+0x1d0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d027      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	4a53      	ldr	r2, [pc, #332]	; (8006538 <HAL_DMA_IRQHandler+0x1d4>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d022      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4a51      	ldr	r2, [pc, #324]	; (800653c <HAL_DMA_IRQHandler+0x1d8>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d01d      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a50      	ldr	r2, [pc, #320]	; (8006540 <HAL_DMA_IRQHandler+0x1dc>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d018      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	4a4e      	ldr	r2, [pc, #312]	; (8006544 <HAL_DMA_IRQHandler+0x1e0>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d013      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4a4d      	ldr	r2, [pc, #308]	; (8006548 <HAL_DMA_IRQHandler+0x1e4>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d00e      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4a4b      	ldr	r2, [pc, #300]	; (800654c <HAL_DMA_IRQHandler+0x1e8>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d009      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	4a4a      	ldr	r2, [pc, #296]	; (8006550 <HAL_DMA_IRQHandler+0x1ec>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d004      	beq.n	8006436 <HAL_DMA_IRQHandler+0xd2>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	4a48      	ldr	r2, [pc, #288]	; (8006554 <HAL_DMA_IRQHandler+0x1f0>)
 8006432:	4293      	cmp	r3, r2
 8006434:	d101      	bne.n	800643a <HAL_DMA_IRQHandler+0xd6>
 8006436:	2301      	movs	r3, #1
 8006438:	e000      	b.n	800643c <HAL_DMA_IRQHandler+0xd8>
 800643a:	2300      	movs	r3, #0
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 842b 	beq.w	8006c98 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006446:	f003 031f 	and.w	r3, r3, #31
 800644a:	2208      	movs	r2, #8
 800644c:	409a      	lsls	r2, r3
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	4013      	ands	r3, r2
 8006452:	2b00      	cmp	r3, #0
 8006454:	f000 80a2 	beq.w	800659c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a2e      	ldr	r2, [pc, #184]	; (8006518 <HAL_DMA_IRQHandler+0x1b4>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d04a      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a2d      	ldr	r2, [pc, #180]	; (800651c <HAL_DMA_IRQHandler+0x1b8>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d045      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a2b      	ldr	r2, [pc, #172]	; (8006520 <HAL_DMA_IRQHandler+0x1bc>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d040      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a2a      	ldr	r2, [pc, #168]	; (8006524 <HAL_DMA_IRQHandler+0x1c0>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d03b      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a28      	ldr	r2, [pc, #160]	; (8006528 <HAL_DMA_IRQHandler+0x1c4>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d036      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a27      	ldr	r2, [pc, #156]	; (800652c <HAL_DMA_IRQHandler+0x1c8>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d031      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a25      	ldr	r2, [pc, #148]	; (8006530 <HAL_DMA_IRQHandler+0x1cc>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d02c      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a24      	ldr	r2, [pc, #144]	; (8006534 <HAL_DMA_IRQHandler+0x1d0>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d027      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a22      	ldr	r2, [pc, #136]	; (8006538 <HAL_DMA_IRQHandler+0x1d4>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d022      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a21      	ldr	r2, [pc, #132]	; (800653c <HAL_DMA_IRQHandler+0x1d8>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d01d      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a1f      	ldr	r2, [pc, #124]	; (8006540 <HAL_DMA_IRQHandler+0x1dc>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d018      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a1e      	ldr	r2, [pc, #120]	; (8006544 <HAL_DMA_IRQHandler+0x1e0>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d013      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a1c      	ldr	r2, [pc, #112]	; (8006548 <HAL_DMA_IRQHandler+0x1e4>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d00e      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a1b      	ldr	r2, [pc, #108]	; (800654c <HAL_DMA_IRQHandler+0x1e8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d009      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a19      	ldr	r2, [pc, #100]	; (8006550 <HAL_DMA_IRQHandler+0x1ec>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d004      	beq.n	80064f8 <HAL_DMA_IRQHandler+0x194>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a18      	ldr	r2, [pc, #96]	; (8006554 <HAL_DMA_IRQHandler+0x1f0>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d12f      	bne.n	8006558 <HAL_DMA_IRQHandler+0x1f4>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0304 	and.w	r3, r3, #4
 8006502:	2b00      	cmp	r3, #0
 8006504:	bf14      	ite	ne
 8006506:	2301      	movne	r3, #1
 8006508:	2300      	moveq	r3, #0
 800650a:	b2db      	uxtb	r3, r3
 800650c:	e02e      	b.n	800656c <HAL_DMA_IRQHandler+0x208>
 800650e:	bf00      	nop
 8006510:	24000018 	.word	0x24000018
 8006514:	1b4e81b5 	.word	0x1b4e81b5
 8006518:	40020010 	.word	0x40020010
 800651c:	40020028 	.word	0x40020028
 8006520:	40020040 	.word	0x40020040
 8006524:	40020058 	.word	0x40020058
 8006528:	40020070 	.word	0x40020070
 800652c:	40020088 	.word	0x40020088
 8006530:	400200a0 	.word	0x400200a0
 8006534:	400200b8 	.word	0x400200b8
 8006538:	40020410 	.word	0x40020410
 800653c:	40020428 	.word	0x40020428
 8006540:	40020440 	.word	0x40020440
 8006544:	40020458 	.word	0x40020458
 8006548:	40020470 	.word	0x40020470
 800654c:	40020488 	.word	0x40020488
 8006550:	400204a0 	.word	0x400204a0
 8006554:	400204b8 	.word	0x400204b8
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f003 0308 	and.w	r3, r3, #8
 8006562:	2b00      	cmp	r3, #0
 8006564:	bf14      	ite	ne
 8006566:	2301      	movne	r3, #1
 8006568:	2300      	moveq	r3, #0
 800656a:	b2db      	uxtb	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	d015      	beq.n	800659c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0204 	bic.w	r2, r2, #4
 800657e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006584:	f003 031f 	and.w	r3, r3, #31
 8006588:	2208      	movs	r2, #8
 800658a:	409a      	lsls	r2, r3
 800658c:	6a3b      	ldr	r3, [r7, #32]
 800658e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006594:	f043 0201 	orr.w	r2, r3, #1
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065a0:	f003 031f 	and.w	r3, r3, #31
 80065a4:	69ba      	ldr	r2, [r7, #24]
 80065a6:	fa22 f303 	lsr.w	r3, r2, r3
 80065aa:	f003 0301 	and.w	r3, r3, #1
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d06e      	beq.n	8006690 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a69      	ldr	r2, [pc, #420]	; (800675c <HAL_DMA_IRQHandler+0x3f8>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d04a      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	4a67      	ldr	r2, [pc, #412]	; (8006760 <HAL_DMA_IRQHandler+0x3fc>)
 80065c2:	4293      	cmp	r3, r2
 80065c4:	d045      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a66      	ldr	r2, [pc, #408]	; (8006764 <HAL_DMA_IRQHandler+0x400>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d040      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4a64      	ldr	r2, [pc, #400]	; (8006768 <HAL_DMA_IRQHandler+0x404>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d03b      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4a63      	ldr	r2, [pc, #396]	; (800676c <HAL_DMA_IRQHandler+0x408>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d036      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4a61      	ldr	r2, [pc, #388]	; (8006770 <HAL_DMA_IRQHandler+0x40c>)
 80065ea:	4293      	cmp	r3, r2
 80065ec:	d031      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4a60      	ldr	r2, [pc, #384]	; (8006774 <HAL_DMA_IRQHandler+0x410>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d02c      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4a5e      	ldr	r2, [pc, #376]	; (8006778 <HAL_DMA_IRQHandler+0x414>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d027      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4a5d      	ldr	r2, [pc, #372]	; (800677c <HAL_DMA_IRQHandler+0x418>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d022      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a5b      	ldr	r2, [pc, #364]	; (8006780 <HAL_DMA_IRQHandler+0x41c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d01d      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a5a      	ldr	r2, [pc, #360]	; (8006784 <HAL_DMA_IRQHandler+0x420>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d018      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a58      	ldr	r2, [pc, #352]	; (8006788 <HAL_DMA_IRQHandler+0x424>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d013      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a57      	ldr	r2, [pc, #348]	; (800678c <HAL_DMA_IRQHandler+0x428>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d00e      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a55      	ldr	r2, [pc, #340]	; (8006790 <HAL_DMA_IRQHandler+0x42c>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d009      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a54      	ldr	r2, [pc, #336]	; (8006794 <HAL_DMA_IRQHandler+0x430>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d004      	beq.n	8006652 <HAL_DMA_IRQHandler+0x2ee>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a52      	ldr	r2, [pc, #328]	; (8006798 <HAL_DMA_IRQHandler+0x434>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d10a      	bne.n	8006668 <HAL_DMA_IRQHandler+0x304>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	695b      	ldr	r3, [r3, #20]
 8006658:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800665c:	2b00      	cmp	r3, #0
 800665e:	bf14      	ite	ne
 8006660:	2301      	movne	r3, #1
 8006662:	2300      	moveq	r3, #0
 8006664:	b2db      	uxtb	r3, r3
 8006666:	e003      	b.n	8006670 <HAL_DMA_IRQHandler+0x30c>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	2300      	movs	r3, #0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00d      	beq.n	8006690 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006678:	f003 031f 	and.w	r3, r3, #31
 800667c:	2201      	movs	r2, #1
 800667e:	409a      	lsls	r2, r3
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006688:	f043 0202 	orr.w	r2, r3, #2
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006694:	f003 031f 	and.w	r3, r3, #31
 8006698:	2204      	movs	r2, #4
 800669a:	409a      	lsls	r2, r3
 800669c:	69bb      	ldr	r3, [r7, #24]
 800669e:	4013      	ands	r3, r2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 808f 	beq.w	80067c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4a2c      	ldr	r2, [pc, #176]	; (800675c <HAL_DMA_IRQHandler+0x3f8>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d04a      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a2a      	ldr	r2, [pc, #168]	; (8006760 <HAL_DMA_IRQHandler+0x3fc>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d045      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a29      	ldr	r2, [pc, #164]	; (8006764 <HAL_DMA_IRQHandler+0x400>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d040      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4a27      	ldr	r2, [pc, #156]	; (8006768 <HAL_DMA_IRQHandler+0x404>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d03b      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a26      	ldr	r2, [pc, #152]	; (800676c <HAL_DMA_IRQHandler+0x408>)
 80066d4:	4293      	cmp	r3, r2
 80066d6:	d036      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	4a24      	ldr	r2, [pc, #144]	; (8006770 <HAL_DMA_IRQHandler+0x40c>)
 80066de:	4293      	cmp	r3, r2
 80066e0:	d031      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	4a23      	ldr	r2, [pc, #140]	; (8006774 <HAL_DMA_IRQHandler+0x410>)
 80066e8:	4293      	cmp	r3, r2
 80066ea:	d02c      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a21      	ldr	r2, [pc, #132]	; (8006778 <HAL_DMA_IRQHandler+0x414>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d027      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a20      	ldr	r2, [pc, #128]	; (800677c <HAL_DMA_IRQHandler+0x418>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d022      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4a1e      	ldr	r2, [pc, #120]	; (8006780 <HAL_DMA_IRQHandler+0x41c>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d01d      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4a1d      	ldr	r2, [pc, #116]	; (8006784 <HAL_DMA_IRQHandler+0x420>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d018      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a1b      	ldr	r2, [pc, #108]	; (8006788 <HAL_DMA_IRQHandler+0x424>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d013      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a1a      	ldr	r2, [pc, #104]	; (800678c <HAL_DMA_IRQHandler+0x428>)
 8006724:	4293      	cmp	r3, r2
 8006726:	d00e      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a18      	ldr	r2, [pc, #96]	; (8006790 <HAL_DMA_IRQHandler+0x42c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d009      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	4a17      	ldr	r2, [pc, #92]	; (8006794 <HAL_DMA_IRQHandler+0x430>)
 8006738:	4293      	cmp	r3, r2
 800673a:	d004      	beq.n	8006746 <HAL_DMA_IRQHandler+0x3e2>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a15      	ldr	r2, [pc, #84]	; (8006798 <HAL_DMA_IRQHandler+0x434>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d12a      	bne.n	800679c <HAL_DMA_IRQHandler+0x438>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0302 	and.w	r3, r3, #2
 8006750:	2b00      	cmp	r3, #0
 8006752:	bf14      	ite	ne
 8006754:	2301      	movne	r3, #1
 8006756:	2300      	moveq	r3, #0
 8006758:	b2db      	uxtb	r3, r3
 800675a:	e023      	b.n	80067a4 <HAL_DMA_IRQHandler+0x440>
 800675c:	40020010 	.word	0x40020010
 8006760:	40020028 	.word	0x40020028
 8006764:	40020040 	.word	0x40020040
 8006768:	40020058 	.word	0x40020058
 800676c:	40020070 	.word	0x40020070
 8006770:	40020088 	.word	0x40020088
 8006774:	400200a0 	.word	0x400200a0
 8006778:	400200b8 	.word	0x400200b8
 800677c:	40020410 	.word	0x40020410
 8006780:	40020428 	.word	0x40020428
 8006784:	40020440 	.word	0x40020440
 8006788:	40020458 	.word	0x40020458
 800678c:	40020470 	.word	0x40020470
 8006790:	40020488 	.word	0x40020488
 8006794:	400204a0 	.word	0x400204a0
 8006798:	400204b8 	.word	0x400204b8
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2300      	movs	r3, #0
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00d      	beq.n	80067c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067ac:	f003 031f 	and.w	r3, r3, #31
 80067b0:	2204      	movs	r2, #4
 80067b2:	409a      	lsls	r2, r3
 80067b4:	6a3b      	ldr	r3, [r7, #32]
 80067b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067bc:	f043 0204 	orr.w	r2, r3, #4
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067c8:	f003 031f 	and.w	r3, r3, #31
 80067cc:	2210      	movs	r2, #16
 80067ce:	409a      	lsls	r2, r3
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	4013      	ands	r3, r2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	f000 80a6 	beq.w	8006926 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a85      	ldr	r2, [pc, #532]	; (80069f4 <HAL_DMA_IRQHandler+0x690>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d04a      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4a83      	ldr	r2, [pc, #524]	; (80069f8 <HAL_DMA_IRQHandler+0x694>)
 80067ea:	4293      	cmp	r3, r2
 80067ec:	d045      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4a82      	ldr	r2, [pc, #520]	; (80069fc <HAL_DMA_IRQHandler+0x698>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d040      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4a80      	ldr	r2, [pc, #512]	; (8006a00 <HAL_DMA_IRQHandler+0x69c>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d03b      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4a7f      	ldr	r2, [pc, #508]	; (8006a04 <HAL_DMA_IRQHandler+0x6a0>)
 8006808:	4293      	cmp	r3, r2
 800680a:	d036      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	4a7d      	ldr	r2, [pc, #500]	; (8006a08 <HAL_DMA_IRQHandler+0x6a4>)
 8006812:	4293      	cmp	r3, r2
 8006814:	d031      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a7c      	ldr	r2, [pc, #496]	; (8006a0c <HAL_DMA_IRQHandler+0x6a8>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d02c      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	4a7a      	ldr	r2, [pc, #488]	; (8006a10 <HAL_DMA_IRQHandler+0x6ac>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d027      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a79      	ldr	r2, [pc, #484]	; (8006a14 <HAL_DMA_IRQHandler+0x6b0>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d022      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a77      	ldr	r2, [pc, #476]	; (8006a18 <HAL_DMA_IRQHandler+0x6b4>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d01d      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a76      	ldr	r2, [pc, #472]	; (8006a1c <HAL_DMA_IRQHandler+0x6b8>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d018      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a74      	ldr	r2, [pc, #464]	; (8006a20 <HAL_DMA_IRQHandler+0x6bc>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d013      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a73      	ldr	r2, [pc, #460]	; (8006a24 <HAL_DMA_IRQHandler+0x6c0>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d00e      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a71      	ldr	r2, [pc, #452]	; (8006a28 <HAL_DMA_IRQHandler+0x6c4>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d009      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a70      	ldr	r2, [pc, #448]	; (8006a2c <HAL_DMA_IRQHandler+0x6c8>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d004      	beq.n	800687a <HAL_DMA_IRQHandler+0x516>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a6e      	ldr	r2, [pc, #440]	; (8006a30 <HAL_DMA_IRQHandler+0x6cc>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d10a      	bne.n	8006890 <HAL_DMA_IRQHandler+0x52c>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0308 	and.w	r3, r3, #8
 8006884:	2b00      	cmp	r3, #0
 8006886:	bf14      	ite	ne
 8006888:	2301      	movne	r3, #1
 800688a:	2300      	moveq	r3, #0
 800688c:	b2db      	uxtb	r3, r3
 800688e:	e009      	b.n	80068a4 <HAL_DMA_IRQHandler+0x540>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f003 0304 	and.w	r3, r3, #4
 800689a:	2b00      	cmp	r3, #0
 800689c:	bf14      	ite	ne
 800689e:	2301      	movne	r3, #1
 80068a0:	2300      	moveq	r3, #0
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d03e      	beq.n	8006926 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ac:	f003 031f 	and.w	r3, r3, #31
 80068b0:	2210      	movs	r2, #16
 80068b2:	409a      	lsls	r2, r3
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d018      	beq.n	80068f8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d108      	bne.n	80068e6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d024      	beq.n	8006926 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	4798      	blx	r3
 80068e4:	e01f      	b.n	8006926 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d01b      	beq.n	8006926 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	4798      	blx	r3
 80068f6:	e016      	b.n	8006926 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006902:	2b00      	cmp	r3, #0
 8006904:	d107      	bne.n	8006916 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f022 0208 	bic.w	r2, r2, #8
 8006914:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800692a:	f003 031f 	and.w	r3, r3, #31
 800692e:	2220      	movs	r2, #32
 8006930:	409a      	lsls	r2, r3
 8006932:	69bb      	ldr	r3, [r7, #24]
 8006934:	4013      	ands	r3, r2
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 8110 	beq.w	8006b5c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a2c      	ldr	r2, [pc, #176]	; (80069f4 <HAL_DMA_IRQHandler+0x690>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d04a      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a2b      	ldr	r2, [pc, #172]	; (80069f8 <HAL_DMA_IRQHandler+0x694>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d045      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a29      	ldr	r2, [pc, #164]	; (80069fc <HAL_DMA_IRQHandler+0x698>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d040      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a28      	ldr	r2, [pc, #160]	; (8006a00 <HAL_DMA_IRQHandler+0x69c>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d03b      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a26      	ldr	r2, [pc, #152]	; (8006a04 <HAL_DMA_IRQHandler+0x6a0>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d036      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a25      	ldr	r2, [pc, #148]	; (8006a08 <HAL_DMA_IRQHandler+0x6a4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d031      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a23      	ldr	r2, [pc, #140]	; (8006a0c <HAL_DMA_IRQHandler+0x6a8>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d02c      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a22      	ldr	r2, [pc, #136]	; (8006a10 <HAL_DMA_IRQHandler+0x6ac>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d027      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a20      	ldr	r2, [pc, #128]	; (8006a14 <HAL_DMA_IRQHandler+0x6b0>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d022      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a1f      	ldr	r2, [pc, #124]	; (8006a18 <HAL_DMA_IRQHandler+0x6b4>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d01d      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a1d      	ldr	r2, [pc, #116]	; (8006a1c <HAL_DMA_IRQHandler+0x6b8>)
 80069a6:	4293      	cmp	r3, r2
 80069a8:	d018      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4a1c      	ldr	r2, [pc, #112]	; (8006a20 <HAL_DMA_IRQHandler+0x6bc>)
 80069b0:	4293      	cmp	r3, r2
 80069b2:	d013      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a1a      	ldr	r2, [pc, #104]	; (8006a24 <HAL_DMA_IRQHandler+0x6c0>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d00e      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a19      	ldr	r2, [pc, #100]	; (8006a28 <HAL_DMA_IRQHandler+0x6c4>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d009      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a17      	ldr	r2, [pc, #92]	; (8006a2c <HAL_DMA_IRQHandler+0x6c8>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d004      	beq.n	80069dc <HAL_DMA_IRQHandler+0x678>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a16      	ldr	r2, [pc, #88]	; (8006a30 <HAL_DMA_IRQHandler+0x6cc>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d12b      	bne.n	8006a34 <HAL_DMA_IRQHandler+0x6d0>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	f003 0310 	and.w	r3, r3, #16
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	bf14      	ite	ne
 80069ea:	2301      	movne	r3, #1
 80069ec:	2300      	moveq	r3, #0
 80069ee:	b2db      	uxtb	r3, r3
 80069f0:	e02a      	b.n	8006a48 <HAL_DMA_IRQHandler+0x6e4>
 80069f2:	bf00      	nop
 80069f4:	40020010 	.word	0x40020010
 80069f8:	40020028 	.word	0x40020028
 80069fc:	40020040 	.word	0x40020040
 8006a00:	40020058 	.word	0x40020058
 8006a04:	40020070 	.word	0x40020070
 8006a08:	40020088 	.word	0x40020088
 8006a0c:	400200a0 	.word	0x400200a0
 8006a10:	400200b8 	.word	0x400200b8
 8006a14:	40020410 	.word	0x40020410
 8006a18:	40020428 	.word	0x40020428
 8006a1c:	40020440 	.word	0x40020440
 8006a20:	40020458 	.word	0x40020458
 8006a24:	40020470 	.word	0x40020470
 8006a28:	40020488 	.word	0x40020488
 8006a2c:	400204a0 	.word	0x400204a0
 8006a30:	400204b8 	.word	0x400204b8
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f003 0302 	and.w	r3, r3, #2
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	bf14      	ite	ne
 8006a42:	2301      	movne	r3, #1
 8006a44:	2300      	moveq	r3, #0
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	f000 8087 	beq.w	8006b5c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a52:	f003 031f 	and.w	r3, r3, #31
 8006a56:	2220      	movs	r2, #32
 8006a58:	409a      	lsls	r2, r3
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b04      	cmp	r3, #4
 8006a68:	d139      	bne.n	8006ade <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 0216 	bic.w	r2, r2, #22
 8006a78:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	695a      	ldr	r2, [r3, #20]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006a88:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d103      	bne.n	8006a9a <HAL_DMA_IRQHandler+0x736>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d007      	beq.n	8006aaa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 0208 	bic.w	r2, r2, #8
 8006aa8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aae:	f003 031f 	and.w	r3, r3, #31
 8006ab2:	223f      	movs	r2, #63	; 0x3f
 8006ab4:	409a      	lsls	r2, r3
 8006ab6:	6a3b      	ldr	r3, [r7, #32]
 8006ab8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	f000 834a 	beq.w	8007168 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad8:	6878      	ldr	r0, [r7, #4]
 8006ada:	4798      	blx	r3
          }
          return;
 8006adc:	e344      	b.n	8007168 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d018      	beq.n	8006b1e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d108      	bne.n	8006b0c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d02c      	beq.n	8006b5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	4798      	blx	r3
 8006b0a:	e027      	b.n	8006b5c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d023      	beq.n	8006b5c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	4798      	blx	r3
 8006b1c:	e01e      	b.n	8006b5c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d10f      	bne.n	8006b4c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f022 0210 	bic.w	r2, r2, #16
 8006b3a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d003      	beq.n	8006b5c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	f000 8306 	beq.w	8007172 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	f000 8088 	beq.w	8006c84 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2204      	movs	r2, #4
 8006b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a7a      	ldr	r2, [pc, #488]	; (8006d6c <HAL_DMA_IRQHandler+0xa08>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d04a      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a79      	ldr	r2, [pc, #484]	; (8006d70 <HAL_DMA_IRQHandler+0xa0c>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d045      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a77      	ldr	r2, [pc, #476]	; (8006d74 <HAL_DMA_IRQHandler+0xa10>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d040      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a76      	ldr	r2, [pc, #472]	; (8006d78 <HAL_DMA_IRQHandler+0xa14>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d03b      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a74      	ldr	r2, [pc, #464]	; (8006d7c <HAL_DMA_IRQHandler+0xa18>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d036      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	4a73      	ldr	r2, [pc, #460]	; (8006d80 <HAL_DMA_IRQHandler+0xa1c>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d031      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	4a71      	ldr	r2, [pc, #452]	; (8006d84 <HAL_DMA_IRQHandler+0xa20>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d02c      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	4a70      	ldr	r2, [pc, #448]	; (8006d88 <HAL_DMA_IRQHandler+0xa24>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d027      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	4a6e      	ldr	r2, [pc, #440]	; (8006d8c <HAL_DMA_IRQHandler+0xa28>)
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d022      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	4a6d      	ldr	r2, [pc, #436]	; (8006d90 <HAL_DMA_IRQHandler+0xa2c>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d01d      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a6b      	ldr	r2, [pc, #428]	; (8006d94 <HAL_DMA_IRQHandler+0xa30>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d018      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	4a6a      	ldr	r2, [pc, #424]	; (8006d98 <HAL_DMA_IRQHandler+0xa34>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d013      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a68      	ldr	r2, [pc, #416]	; (8006d9c <HAL_DMA_IRQHandler+0xa38>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d00e      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a67      	ldr	r2, [pc, #412]	; (8006da0 <HAL_DMA_IRQHandler+0xa3c>)
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d009      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a65      	ldr	r2, [pc, #404]	; (8006da4 <HAL_DMA_IRQHandler+0xa40>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d004      	beq.n	8006c1c <HAL_DMA_IRQHandler+0x8b8>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4a64      	ldr	r2, [pc, #400]	; (8006da8 <HAL_DMA_IRQHandler+0xa44>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d108      	bne.n	8006c2e <HAL_DMA_IRQHandler+0x8ca>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 0201 	bic.w	r2, r2, #1
 8006c2a:	601a      	str	r2, [r3, #0]
 8006c2c:	e007      	b.n	8006c3e <HAL_DMA_IRQHandler+0x8da>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f022 0201 	bic.w	r2, r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	3301      	adds	r3, #1
 8006c42:	60fb      	str	r3, [r7, #12]
 8006c44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c46:	429a      	cmp	r2, r3
 8006c48:	d307      	bcc.n	8006c5a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d1f2      	bne.n	8006c3e <HAL_DMA_IRQHandler+0x8da>
 8006c58:	e000      	b.n	8006c5c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006c5a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0301 	and.w	r3, r3, #1
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d004      	beq.n	8006c74 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2203      	movs	r2, #3
 8006c6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8006c72:	e003      	b.n	8006c7c <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2201      	movs	r2, #1
 8006c78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	f000 8272 	beq.w	8007172 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	4798      	blx	r3
 8006c96:	e26c      	b.n	8007172 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a43      	ldr	r2, [pc, #268]	; (8006dac <HAL_DMA_IRQHandler+0xa48>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d022      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x984>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	4a42      	ldr	r2, [pc, #264]	; (8006db0 <HAL_DMA_IRQHandler+0xa4c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d01d      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x984>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4a40      	ldr	r2, [pc, #256]	; (8006db4 <HAL_DMA_IRQHandler+0xa50>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d018      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x984>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	4a3f      	ldr	r2, [pc, #252]	; (8006db8 <HAL_DMA_IRQHandler+0xa54>)
 8006cbc:	4293      	cmp	r3, r2
 8006cbe:	d013      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x984>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	4a3d      	ldr	r2, [pc, #244]	; (8006dbc <HAL_DMA_IRQHandler+0xa58>)
 8006cc6:	4293      	cmp	r3, r2
 8006cc8:	d00e      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x984>
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	4a3c      	ldr	r2, [pc, #240]	; (8006dc0 <HAL_DMA_IRQHandler+0xa5c>)
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	d009      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x984>
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	4a3a      	ldr	r2, [pc, #232]	; (8006dc4 <HAL_DMA_IRQHandler+0xa60>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d004      	beq.n	8006ce8 <HAL_DMA_IRQHandler+0x984>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	4a39      	ldr	r2, [pc, #228]	; (8006dc8 <HAL_DMA_IRQHandler+0xa64>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d101      	bne.n	8006cec <HAL_DMA_IRQHandler+0x988>
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e000      	b.n	8006cee <HAL_DMA_IRQHandler+0x98a>
 8006cec:	2300      	movs	r3, #0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	f000 823f 	beq.w	8007172 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d00:	f003 031f 	and.w	r3, r3, #31
 8006d04:	2204      	movs	r2, #4
 8006d06:	409a      	lsls	r2, r3
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	f000 80cd 	beq.w	8006eac <HAL_DMA_IRQHandler+0xb48>
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	f000 80c7 	beq.w	8006eac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d22:	f003 031f 	and.w	r3, r3, #31
 8006d26:	2204      	movs	r2, #4
 8006d28:	409a      	lsls	r2, r3
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d049      	beq.n	8006dcc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d109      	bne.n	8006d56 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	f000 8210 	beq.w	800716c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d54:	e20a      	b.n	800716c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	f000 8206 	beq.w	800716c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006d68:	e200      	b.n	800716c <HAL_DMA_IRQHandler+0xe08>
 8006d6a:	bf00      	nop
 8006d6c:	40020010 	.word	0x40020010
 8006d70:	40020028 	.word	0x40020028
 8006d74:	40020040 	.word	0x40020040
 8006d78:	40020058 	.word	0x40020058
 8006d7c:	40020070 	.word	0x40020070
 8006d80:	40020088 	.word	0x40020088
 8006d84:	400200a0 	.word	0x400200a0
 8006d88:	400200b8 	.word	0x400200b8
 8006d8c:	40020410 	.word	0x40020410
 8006d90:	40020428 	.word	0x40020428
 8006d94:	40020440 	.word	0x40020440
 8006d98:	40020458 	.word	0x40020458
 8006d9c:	40020470 	.word	0x40020470
 8006da0:	40020488 	.word	0x40020488
 8006da4:	400204a0 	.word	0x400204a0
 8006da8:	400204b8 	.word	0x400204b8
 8006dac:	58025408 	.word	0x58025408
 8006db0:	5802541c 	.word	0x5802541c
 8006db4:	58025430 	.word	0x58025430
 8006db8:	58025444 	.word	0x58025444
 8006dbc:	58025458 	.word	0x58025458
 8006dc0:	5802546c 	.word	0x5802546c
 8006dc4:	58025480 	.word	0x58025480
 8006dc8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	f003 0320 	and.w	r3, r3, #32
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d160      	bne.n	8006e98 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a8c      	ldr	r2, [pc, #560]	; (800700c <HAL_DMA_IRQHandler+0xca8>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d04a      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a8a      	ldr	r2, [pc, #552]	; (8007010 <HAL_DMA_IRQHandler+0xcac>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d045      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a89      	ldr	r2, [pc, #548]	; (8007014 <HAL_DMA_IRQHandler+0xcb0>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d040      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a87      	ldr	r2, [pc, #540]	; (8007018 <HAL_DMA_IRQHandler+0xcb4>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d03b      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a86      	ldr	r2, [pc, #536]	; (800701c <HAL_DMA_IRQHandler+0xcb8>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d036      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a84      	ldr	r2, [pc, #528]	; (8007020 <HAL_DMA_IRQHandler+0xcbc>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d031      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a83      	ldr	r2, [pc, #524]	; (8007024 <HAL_DMA_IRQHandler+0xcc0>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d02c      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a81      	ldr	r2, [pc, #516]	; (8007028 <HAL_DMA_IRQHandler+0xcc4>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d027      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a80      	ldr	r2, [pc, #512]	; (800702c <HAL_DMA_IRQHandler+0xcc8>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d022      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a7e      	ldr	r2, [pc, #504]	; (8007030 <HAL_DMA_IRQHandler+0xccc>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d01d      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a7d      	ldr	r2, [pc, #500]	; (8007034 <HAL_DMA_IRQHandler+0xcd0>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d018      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a7b      	ldr	r2, [pc, #492]	; (8007038 <HAL_DMA_IRQHandler+0xcd4>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d013      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a7a      	ldr	r2, [pc, #488]	; (800703c <HAL_DMA_IRQHandler+0xcd8>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d00e      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a78      	ldr	r2, [pc, #480]	; (8007040 <HAL_DMA_IRQHandler+0xcdc>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d009      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a77      	ldr	r2, [pc, #476]	; (8007044 <HAL_DMA_IRQHandler+0xce0>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d004      	beq.n	8006e76 <HAL_DMA_IRQHandler+0xb12>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a75      	ldr	r2, [pc, #468]	; (8007048 <HAL_DMA_IRQHandler+0xce4>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d108      	bne.n	8006e88 <HAL_DMA_IRQHandler+0xb24>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	681a      	ldr	r2, [r3, #0]
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f022 0208 	bic.w	r2, r2, #8
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	e007      	b.n	8006e98 <HAL_DMA_IRQHandler+0xb34>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	681a      	ldr	r2, [r3, #0]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f022 0204 	bic.w	r2, r2, #4
 8006e96:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 8165 	beq.w	800716c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006eaa:	e15f      	b.n	800716c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eb0:	f003 031f 	and.w	r3, r3, #31
 8006eb4:	2202      	movs	r2, #2
 8006eb6:	409a      	lsls	r2, r3
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	4013      	ands	r3, r2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 80c5 	beq.w	800704c <HAL_DMA_IRQHandler+0xce8>
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	f003 0302 	and.w	r3, r3, #2
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	f000 80bf 	beq.w	800704c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ed2:	f003 031f 	and.w	r3, r3, #31
 8006ed6:	2202      	movs	r2, #2
 8006ed8:	409a      	lsls	r2, r3
 8006eda:	69fb      	ldr	r3, [r7, #28]
 8006edc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d018      	beq.n	8006f1a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d109      	bne.n	8006f06 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	f000 813a 	beq.w	8007170 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f04:	e134      	b.n	8007170 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	f000 8130 	beq.w	8007170 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f14:	6878      	ldr	r0, [r7, #4]
 8006f16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006f18:	e12a      	b.n	8007170 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	f003 0320 	and.w	r3, r3, #32
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d168      	bne.n	8006ff6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a38      	ldr	r2, [pc, #224]	; (800700c <HAL_DMA_IRQHandler+0xca8>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d04a      	beq.n	8006fc4 <HAL_DMA_IRQHandler+0xc60>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a37      	ldr	r2, [pc, #220]	; (8007010 <HAL_DMA_IRQHandler+0xcac>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d045      	beq.n	8006fc4 <HAL_DMA_IRQHandler+0xc60>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a35      	ldr	r2, [pc, #212]	; (8007014 <HAL_DMA_IRQHandler+0xcb0>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d040      	beq.n	8006fc4 <HAL_DMA_IRQHandler+0xc60>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a34      	ldr	r2, [pc, #208]	; (8007018 <HAL_DMA_IRQHandler+0xcb4>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d03b      	beq.n	8006fc4 <HAL_DMA_IRQHandler+0xc60>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a32      	ldr	r2, [pc, #200]	; (800701c <HAL_DMA_IRQHandler+0xcb8>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d036      	beq.n	8006fc4 <HAL_DMA_IRQHandler+0xc60>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a31      	ldr	r2, [pc, #196]	; (8007020 <HAL_DMA_IRQHandler+0xcbc>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d031      	beq.n	8006fc4 <HAL_DMA_IRQHandler+0xc60>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a2f      	ldr	r2, [pc, #188]	; (8007024 <HAL_DMA_IRQHandler+0xcc0>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d02c      	beq.n	8006fc4 <HAL_DMA_IRQHandler+0xc60>
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a2e      	ldr	r2, [pc, #184]	; (8007028 <HAL_DMA_IRQHandler+0xcc4>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d027      	beq.n	8006fc4 <HAL_DMA_IRQHandler+0xc60>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	4a2c      	ldr	r2, [pc, #176]	; (800702c <HAL_DMA_IRQHandler+0xcc8>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d022      	beq.n	8006fc4 <HAL_DMA_IRQHandler+0xc60>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a2b      	ldr	r2, [pc, #172]	; (8007030 <HAL_DMA_IRQHandler+0xccc>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d01d      	beq.n	8006fc4 <HAL_DMA_IRQHandler+0xc60>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a29      	ldr	r2, [pc, #164]	; (8007034 <HAL_DMA_IRQHandler+0xcd0>)
 8006f8e:	4293      	cmp	r3, r2
 8006f90:	d018      	beq.n	8006fc4 <HAL_DMA_IRQHandler+0xc60>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a28      	ldr	r2, [pc, #160]	; (8007038 <HAL_DMA_IRQHandler+0xcd4>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d013      	beq.n	8006fc4 <HAL_DMA_IRQHandler+0xc60>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a26      	ldr	r2, [pc, #152]	; (800703c <HAL_DMA_IRQHandler+0xcd8>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d00e      	beq.n	8006fc4 <HAL_DMA_IRQHandler+0xc60>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a25      	ldr	r2, [pc, #148]	; (8007040 <HAL_DMA_IRQHandler+0xcdc>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d009      	beq.n	8006fc4 <HAL_DMA_IRQHandler+0xc60>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a23      	ldr	r2, [pc, #140]	; (8007044 <HAL_DMA_IRQHandler+0xce0>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d004      	beq.n	8006fc4 <HAL_DMA_IRQHandler+0xc60>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a22      	ldr	r2, [pc, #136]	; (8007048 <HAL_DMA_IRQHandler+0xce4>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d108      	bne.n	8006fd6 <HAL_DMA_IRQHandler+0xc72>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f022 0214 	bic.w	r2, r2, #20
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	e007      	b.n	8006fe6 <HAL_DMA_IRQHandler+0xc82>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f022 020a 	bic.w	r2, r2, #10
 8006fe4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2201      	movs	r2, #1
 8006fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f000 80b8 	beq.w	8007170 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007008:	e0b2      	b.n	8007170 <HAL_DMA_IRQHandler+0xe0c>
 800700a:	bf00      	nop
 800700c:	40020010 	.word	0x40020010
 8007010:	40020028 	.word	0x40020028
 8007014:	40020040 	.word	0x40020040
 8007018:	40020058 	.word	0x40020058
 800701c:	40020070 	.word	0x40020070
 8007020:	40020088 	.word	0x40020088
 8007024:	400200a0 	.word	0x400200a0
 8007028:	400200b8 	.word	0x400200b8
 800702c:	40020410 	.word	0x40020410
 8007030:	40020428 	.word	0x40020428
 8007034:	40020440 	.word	0x40020440
 8007038:	40020458 	.word	0x40020458
 800703c:	40020470 	.word	0x40020470
 8007040:	40020488 	.word	0x40020488
 8007044:	400204a0 	.word	0x400204a0
 8007048:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007050:	f003 031f 	and.w	r3, r3, #31
 8007054:	2208      	movs	r2, #8
 8007056:	409a      	lsls	r2, r3
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	4013      	ands	r3, r2
 800705c:	2b00      	cmp	r3, #0
 800705e:	f000 8088 	beq.w	8007172 <HAL_DMA_IRQHandler+0xe0e>
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	f003 0308 	and.w	r3, r3, #8
 8007068:	2b00      	cmp	r3, #0
 800706a:	f000 8082 	beq.w	8007172 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a41      	ldr	r2, [pc, #260]	; (8007178 <HAL_DMA_IRQHandler+0xe14>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d04a      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a3f      	ldr	r2, [pc, #252]	; (800717c <HAL_DMA_IRQHandler+0xe18>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d045      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a3e      	ldr	r2, [pc, #248]	; (8007180 <HAL_DMA_IRQHandler+0xe1c>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d040      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a3c      	ldr	r2, [pc, #240]	; (8007184 <HAL_DMA_IRQHandler+0xe20>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d03b      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a3b      	ldr	r2, [pc, #236]	; (8007188 <HAL_DMA_IRQHandler+0xe24>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d036      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a39      	ldr	r2, [pc, #228]	; (800718c <HAL_DMA_IRQHandler+0xe28>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d031      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a38      	ldr	r2, [pc, #224]	; (8007190 <HAL_DMA_IRQHandler+0xe2c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d02c      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a36      	ldr	r2, [pc, #216]	; (8007194 <HAL_DMA_IRQHandler+0xe30>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d027      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a35      	ldr	r2, [pc, #212]	; (8007198 <HAL_DMA_IRQHandler+0xe34>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d022      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a33      	ldr	r2, [pc, #204]	; (800719c <HAL_DMA_IRQHandler+0xe38>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d01d      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a32      	ldr	r2, [pc, #200]	; (80071a0 <HAL_DMA_IRQHandler+0xe3c>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d018      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a30      	ldr	r2, [pc, #192]	; (80071a4 <HAL_DMA_IRQHandler+0xe40>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d013      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	4a2f      	ldr	r2, [pc, #188]	; (80071a8 <HAL_DMA_IRQHandler+0xe44>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d00e      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	4a2d      	ldr	r2, [pc, #180]	; (80071ac <HAL_DMA_IRQHandler+0xe48>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d009      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4a2c      	ldr	r2, [pc, #176]	; (80071b0 <HAL_DMA_IRQHandler+0xe4c>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d004      	beq.n	800710e <HAL_DMA_IRQHandler+0xdaa>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	4a2a      	ldr	r2, [pc, #168]	; (80071b4 <HAL_DMA_IRQHandler+0xe50>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d108      	bne.n	8007120 <HAL_DMA_IRQHandler+0xdbc>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f022 021c 	bic.w	r2, r2, #28
 800711c:	601a      	str	r2, [r3, #0]
 800711e:	e007      	b.n	8007130 <HAL_DMA_IRQHandler+0xdcc>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f022 020e 	bic.w	r2, r2, #14
 800712e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007134:	f003 031f 	and.w	r3, r3, #31
 8007138:	2201      	movs	r2, #1
 800713a:	409a      	lsls	r2, r3
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	2201      	movs	r2, #1
 800714a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800715a:	2b00      	cmp	r3, #0
 800715c:	d009      	beq.n	8007172 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	4798      	blx	r3
 8007166:	e004      	b.n	8007172 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8007168:	bf00      	nop
 800716a:	e002      	b.n	8007172 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800716c:	bf00      	nop
 800716e:	e000      	b.n	8007172 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007170:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8007172:	3728      	adds	r7, #40	; 0x28
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}
 8007178:	40020010 	.word	0x40020010
 800717c:	40020028 	.word	0x40020028
 8007180:	40020040 	.word	0x40020040
 8007184:	40020058 	.word	0x40020058
 8007188:	40020070 	.word	0x40020070
 800718c:	40020088 	.word	0x40020088
 8007190:	400200a0 	.word	0x400200a0
 8007194:	400200b8 	.word	0x400200b8
 8007198:	40020410 	.word	0x40020410
 800719c:	40020428 	.word	0x40020428
 80071a0:	40020440 	.word	0x40020440
 80071a4:	40020458 	.word	0x40020458
 80071a8:	40020470 	.word	0x40020470
 80071ac:	40020488 	.word	0x40020488
 80071b0:	400204a0 	.word	0x400204a0
 80071b4:	400204b8 	.word	0x400204b8

080071b8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
 80071c4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071ca:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071d0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a84      	ldr	r2, [pc, #528]	; (80073e8 <DMA_SetConfig+0x230>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d072      	beq.n	80072c2 <DMA_SetConfig+0x10a>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a82      	ldr	r2, [pc, #520]	; (80073ec <DMA_SetConfig+0x234>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d06d      	beq.n	80072c2 <DMA_SetConfig+0x10a>
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a81      	ldr	r2, [pc, #516]	; (80073f0 <DMA_SetConfig+0x238>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d068      	beq.n	80072c2 <DMA_SetConfig+0x10a>
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a7f      	ldr	r2, [pc, #508]	; (80073f4 <DMA_SetConfig+0x23c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d063      	beq.n	80072c2 <DMA_SetConfig+0x10a>
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a7e      	ldr	r2, [pc, #504]	; (80073f8 <DMA_SetConfig+0x240>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d05e      	beq.n	80072c2 <DMA_SetConfig+0x10a>
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a7c      	ldr	r2, [pc, #496]	; (80073fc <DMA_SetConfig+0x244>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d059      	beq.n	80072c2 <DMA_SetConfig+0x10a>
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a7b      	ldr	r2, [pc, #492]	; (8007400 <DMA_SetConfig+0x248>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d054      	beq.n	80072c2 <DMA_SetConfig+0x10a>
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	4a79      	ldr	r2, [pc, #484]	; (8007404 <DMA_SetConfig+0x24c>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d04f      	beq.n	80072c2 <DMA_SetConfig+0x10a>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a78      	ldr	r2, [pc, #480]	; (8007408 <DMA_SetConfig+0x250>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d04a      	beq.n	80072c2 <DMA_SetConfig+0x10a>
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a76      	ldr	r2, [pc, #472]	; (800740c <DMA_SetConfig+0x254>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d045      	beq.n	80072c2 <DMA_SetConfig+0x10a>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a75      	ldr	r2, [pc, #468]	; (8007410 <DMA_SetConfig+0x258>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d040      	beq.n	80072c2 <DMA_SetConfig+0x10a>
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a73      	ldr	r2, [pc, #460]	; (8007414 <DMA_SetConfig+0x25c>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d03b      	beq.n	80072c2 <DMA_SetConfig+0x10a>
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a72      	ldr	r2, [pc, #456]	; (8007418 <DMA_SetConfig+0x260>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d036      	beq.n	80072c2 <DMA_SetConfig+0x10a>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a70      	ldr	r2, [pc, #448]	; (800741c <DMA_SetConfig+0x264>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d031      	beq.n	80072c2 <DMA_SetConfig+0x10a>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a6f      	ldr	r2, [pc, #444]	; (8007420 <DMA_SetConfig+0x268>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d02c      	beq.n	80072c2 <DMA_SetConfig+0x10a>
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a6d      	ldr	r2, [pc, #436]	; (8007424 <DMA_SetConfig+0x26c>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d027      	beq.n	80072c2 <DMA_SetConfig+0x10a>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	4a6c      	ldr	r2, [pc, #432]	; (8007428 <DMA_SetConfig+0x270>)
 8007278:	4293      	cmp	r3, r2
 800727a:	d022      	beq.n	80072c2 <DMA_SetConfig+0x10a>
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a6a      	ldr	r2, [pc, #424]	; (800742c <DMA_SetConfig+0x274>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d01d      	beq.n	80072c2 <DMA_SetConfig+0x10a>
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a69      	ldr	r2, [pc, #420]	; (8007430 <DMA_SetConfig+0x278>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d018      	beq.n	80072c2 <DMA_SetConfig+0x10a>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a67      	ldr	r2, [pc, #412]	; (8007434 <DMA_SetConfig+0x27c>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d013      	beq.n	80072c2 <DMA_SetConfig+0x10a>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a66      	ldr	r2, [pc, #408]	; (8007438 <DMA_SetConfig+0x280>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d00e      	beq.n	80072c2 <DMA_SetConfig+0x10a>
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a64      	ldr	r2, [pc, #400]	; (800743c <DMA_SetConfig+0x284>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d009      	beq.n	80072c2 <DMA_SetConfig+0x10a>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a63      	ldr	r2, [pc, #396]	; (8007440 <DMA_SetConfig+0x288>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d004      	beq.n	80072c2 <DMA_SetConfig+0x10a>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a61      	ldr	r2, [pc, #388]	; (8007444 <DMA_SetConfig+0x28c>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d101      	bne.n	80072c6 <DMA_SetConfig+0x10e>
 80072c2:	2301      	movs	r3, #1
 80072c4:	e000      	b.n	80072c8 <DMA_SetConfig+0x110>
 80072c6:	2300      	movs	r3, #0
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00d      	beq.n	80072e8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072d0:	68fa      	ldr	r2, [r7, #12]
 80072d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80072d4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d004      	beq.n	80072e8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80072e6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	4a3e      	ldr	r2, [pc, #248]	; (80073e8 <DMA_SetConfig+0x230>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d04a      	beq.n	8007388 <DMA_SetConfig+0x1d0>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a3d      	ldr	r2, [pc, #244]	; (80073ec <DMA_SetConfig+0x234>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d045      	beq.n	8007388 <DMA_SetConfig+0x1d0>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a3b      	ldr	r2, [pc, #236]	; (80073f0 <DMA_SetConfig+0x238>)
 8007302:	4293      	cmp	r3, r2
 8007304:	d040      	beq.n	8007388 <DMA_SetConfig+0x1d0>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a3a      	ldr	r2, [pc, #232]	; (80073f4 <DMA_SetConfig+0x23c>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d03b      	beq.n	8007388 <DMA_SetConfig+0x1d0>
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	4a38      	ldr	r2, [pc, #224]	; (80073f8 <DMA_SetConfig+0x240>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d036      	beq.n	8007388 <DMA_SetConfig+0x1d0>
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	4a37      	ldr	r2, [pc, #220]	; (80073fc <DMA_SetConfig+0x244>)
 8007320:	4293      	cmp	r3, r2
 8007322:	d031      	beq.n	8007388 <DMA_SetConfig+0x1d0>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	4a35      	ldr	r2, [pc, #212]	; (8007400 <DMA_SetConfig+0x248>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d02c      	beq.n	8007388 <DMA_SetConfig+0x1d0>
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	4a34      	ldr	r2, [pc, #208]	; (8007404 <DMA_SetConfig+0x24c>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d027      	beq.n	8007388 <DMA_SetConfig+0x1d0>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a32      	ldr	r2, [pc, #200]	; (8007408 <DMA_SetConfig+0x250>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d022      	beq.n	8007388 <DMA_SetConfig+0x1d0>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a31      	ldr	r2, [pc, #196]	; (800740c <DMA_SetConfig+0x254>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d01d      	beq.n	8007388 <DMA_SetConfig+0x1d0>
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a2f      	ldr	r2, [pc, #188]	; (8007410 <DMA_SetConfig+0x258>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d018      	beq.n	8007388 <DMA_SetConfig+0x1d0>
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a2e      	ldr	r2, [pc, #184]	; (8007414 <DMA_SetConfig+0x25c>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d013      	beq.n	8007388 <DMA_SetConfig+0x1d0>
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a2c      	ldr	r2, [pc, #176]	; (8007418 <DMA_SetConfig+0x260>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d00e      	beq.n	8007388 <DMA_SetConfig+0x1d0>
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a2b      	ldr	r2, [pc, #172]	; (800741c <DMA_SetConfig+0x264>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d009      	beq.n	8007388 <DMA_SetConfig+0x1d0>
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a29      	ldr	r2, [pc, #164]	; (8007420 <DMA_SetConfig+0x268>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d004      	beq.n	8007388 <DMA_SetConfig+0x1d0>
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a28      	ldr	r2, [pc, #160]	; (8007424 <DMA_SetConfig+0x26c>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d101      	bne.n	800738c <DMA_SetConfig+0x1d4>
 8007388:	2301      	movs	r3, #1
 800738a:	e000      	b.n	800738e <DMA_SetConfig+0x1d6>
 800738c:	2300      	movs	r3, #0
 800738e:	2b00      	cmp	r3, #0
 8007390:	d05a      	beq.n	8007448 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007396:	f003 031f 	and.w	r3, r3, #31
 800739a:	223f      	movs	r2, #63	; 0x3f
 800739c:	409a      	lsls	r2, r3
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80073b0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	2b40      	cmp	r3, #64	; 0x40
 80073c0:	d108      	bne.n	80073d4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68ba      	ldr	r2, [r7, #8]
 80073d0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80073d2:	e087      	b.n	80074e4 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	68ba      	ldr	r2, [r7, #8]
 80073da:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	687a      	ldr	r2, [r7, #4]
 80073e2:	60da      	str	r2, [r3, #12]
}
 80073e4:	e07e      	b.n	80074e4 <DMA_SetConfig+0x32c>
 80073e6:	bf00      	nop
 80073e8:	40020010 	.word	0x40020010
 80073ec:	40020028 	.word	0x40020028
 80073f0:	40020040 	.word	0x40020040
 80073f4:	40020058 	.word	0x40020058
 80073f8:	40020070 	.word	0x40020070
 80073fc:	40020088 	.word	0x40020088
 8007400:	400200a0 	.word	0x400200a0
 8007404:	400200b8 	.word	0x400200b8
 8007408:	40020410 	.word	0x40020410
 800740c:	40020428 	.word	0x40020428
 8007410:	40020440 	.word	0x40020440
 8007414:	40020458 	.word	0x40020458
 8007418:	40020470 	.word	0x40020470
 800741c:	40020488 	.word	0x40020488
 8007420:	400204a0 	.word	0x400204a0
 8007424:	400204b8 	.word	0x400204b8
 8007428:	58025408 	.word	0x58025408
 800742c:	5802541c 	.word	0x5802541c
 8007430:	58025430 	.word	0x58025430
 8007434:	58025444 	.word	0x58025444
 8007438:	58025458 	.word	0x58025458
 800743c:	5802546c 	.word	0x5802546c
 8007440:	58025480 	.word	0x58025480
 8007444:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	4a28      	ldr	r2, [pc, #160]	; (80074f0 <DMA_SetConfig+0x338>)
 800744e:	4293      	cmp	r3, r2
 8007450:	d022      	beq.n	8007498 <DMA_SetConfig+0x2e0>
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	4a27      	ldr	r2, [pc, #156]	; (80074f4 <DMA_SetConfig+0x33c>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d01d      	beq.n	8007498 <DMA_SetConfig+0x2e0>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	4a25      	ldr	r2, [pc, #148]	; (80074f8 <DMA_SetConfig+0x340>)
 8007462:	4293      	cmp	r3, r2
 8007464:	d018      	beq.n	8007498 <DMA_SetConfig+0x2e0>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4a24      	ldr	r2, [pc, #144]	; (80074fc <DMA_SetConfig+0x344>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d013      	beq.n	8007498 <DMA_SetConfig+0x2e0>
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a22      	ldr	r2, [pc, #136]	; (8007500 <DMA_SetConfig+0x348>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d00e      	beq.n	8007498 <DMA_SetConfig+0x2e0>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a21      	ldr	r2, [pc, #132]	; (8007504 <DMA_SetConfig+0x34c>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d009      	beq.n	8007498 <DMA_SetConfig+0x2e0>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a1f      	ldr	r2, [pc, #124]	; (8007508 <DMA_SetConfig+0x350>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d004      	beq.n	8007498 <DMA_SetConfig+0x2e0>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a1e      	ldr	r2, [pc, #120]	; (800750c <DMA_SetConfig+0x354>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d101      	bne.n	800749c <DMA_SetConfig+0x2e4>
 8007498:	2301      	movs	r3, #1
 800749a:	e000      	b.n	800749e <DMA_SetConfig+0x2e6>
 800749c:	2300      	movs	r3, #0
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d020      	beq.n	80074e4 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80074a6:	f003 031f 	and.w	r3, r3, #31
 80074aa:	2201      	movs	r2, #1
 80074ac:	409a      	lsls	r2, r3
 80074ae:	693b      	ldr	r3, [r7, #16]
 80074b0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	2b40      	cmp	r3, #64	; 0x40
 80074c0:	d108      	bne.n	80074d4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	68ba      	ldr	r2, [r7, #8]
 80074d0:	60da      	str	r2, [r3, #12]
}
 80074d2:	e007      	b.n	80074e4 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68ba      	ldr	r2, [r7, #8]
 80074da:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	60da      	str	r2, [r3, #12]
}
 80074e4:	bf00      	nop
 80074e6:	371c      	adds	r7, #28
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr
 80074f0:	58025408 	.word	0x58025408
 80074f4:	5802541c 	.word	0x5802541c
 80074f8:	58025430 	.word	0x58025430
 80074fc:	58025444 	.word	0x58025444
 8007500:	58025458 	.word	0x58025458
 8007504:	5802546c 	.word	0x5802546c
 8007508:	58025480 	.word	0x58025480
 800750c:	58025494 	.word	0x58025494

08007510 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a42      	ldr	r2, [pc, #264]	; (8007628 <DMA_CalcBaseAndBitshift+0x118>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d04a      	beq.n	80075b8 <DMA_CalcBaseAndBitshift+0xa8>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a41      	ldr	r2, [pc, #260]	; (800762c <DMA_CalcBaseAndBitshift+0x11c>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d045      	beq.n	80075b8 <DMA_CalcBaseAndBitshift+0xa8>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a3f      	ldr	r2, [pc, #252]	; (8007630 <DMA_CalcBaseAndBitshift+0x120>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d040      	beq.n	80075b8 <DMA_CalcBaseAndBitshift+0xa8>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	4a3e      	ldr	r2, [pc, #248]	; (8007634 <DMA_CalcBaseAndBitshift+0x124>)
 800753c:	4293      	cmp	r3, r2
 800753e:	d03b      	beq.n	80075b8 <DMA_CalcBaseAndBitshift+0xa8>
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	4a3c      	ldr	r2, [pc, #240]	; (8007638 <DMA_CalcBaseAndBitshift+0x128>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d036      	beq.n	80075b8 <DMA_CalcBaseAndBitshift+0xa8>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	4a3b      	ldr	r2, [pc, #236]	; (800763c <DMA_CalcBaseAndBitshift+0x12c>)
 8007550:	4293      	cmp	r3, r2
 8007552:	d031      	beq.n	80075b8 <DMA_CalcBaseAndBitshift+0xa8>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a39      	ldr	r2, [pc, #228]	; (8007640 <DMA_CalcBaseAndBitshift+0x130>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d02c      	beq.n	80075b8 <DMA_CalcBaseAndBitshift+0xa8>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	4a38      	ldr	r2, [pc, #224]	; (8007644 <DMA_CalcBaseAndBitshift+0x134>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d027      	beq.n	80075b8 <DMA_CalcBaseAndBitshift+0xa8>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a36      	ldr	r2, [pc, #216]	; (8007648 <DMA_CalcBaseAndBitshift+0x138>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d022      	beq.n	80075b8 <DMA_CalcBaseAndBitshift+0xa8>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a35      	ldr	r2, [pc, #212]	; (800764c <DMA_CalcBaseAndBitshift+0x13c>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d01d      	beq.n	80075b8 <DMA_CalcBaseAndBitshift+0xa8>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a33      	ldr	r2, [pc, #204]	; (8007650 <DMA_CalcBaseAndBitshift+0x140>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d018      	beq.n	80075b8 <DMA_CalcBaseAndBitshift+0xa8>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a32      	ldr	r2, [pc, #200]	; (8007654 <DMA_CalcBaseAndBitshift+0x144>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d013      	beq.n	80075b8 <DMA_CalcBaseAndBitshift+0xa8>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a30      	ldr	r2, [pc, #192]	; (8007658 <DMA_CalcBaseAndBitshift+0x148>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d00e      	beq.n	80075b8 <DMA_CalcBaseAndBitshift+0xa8>
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a2f      	ldr	r2, [pc, #188]	; (800765c <DMA_CalcBaseAndBitshift+0x14c>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d009      	beq.n	80075b8 <DMA_CalcBaseAndBitshift+0xa8>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	4a2d      	ldr	r2, [pc, #180]	; (8007660 <DMA_CalcBaseAndBitshift+0x150>)
 80075aa:	4293      	cmp	r3, r2
 80075ac:	d004      	beq.n	80075b8 <DMA_CalcBaseAndBitshift+0xa8>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a2c      	ldr	r2, [pc, #176]	; (8007664 <DMA_CalcBaseAndBitshift+0x154>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d101      	bne.n	80075bc <DMA_CalcBaseAndBitshift+0xac>
 80075b8:	2301      	movs	r3, #1
 80075ba:	e000      	b.n	80075be <DMA_CalcBaseAndBitshift+0xae>
 80075bc:	2300      	movs	r3, #0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d024      	beq.n	800760c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	b2db      	uxtb	r3, r3
 80075c8:	3b10      	subs	r3, #16
 80075ca:	4a27      	ldr	r2, [pc, #156]	; (8007668 <DMA_CalcBaseAndBitshift+0x158>)
 80075cc:	fba2 2303 	umull	r2, r3, r2, r3
 80075d0:	091b      	lsrs	r3, r3, #4
 80075d2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f003 0307 	and.w	r3, r3, #7
 80075da:	4a24      	ldr	r2, [pc, #144]	; (800766c <DMA_CalcBaseAndBitshift+0x15c>)
 80075dc:	5cd3      	ldrb	r3, [r2, r3]
 80075de:	461a      	mov	r2, r3
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2b03      	cmp	r3, #3
 80075e8:	d908      	bls.n	80075fc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	461a      	mov	r2, r3
 80075f0:	4b1f      	ldr	r3, [pc, #124]	; (8007670 <DMA_CalcBaseAndBitshift+0x160>)
 80075f2:	4013      	ands	r3, r2
 80075f4:	1d1a      	adds	r2, r3, #4
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	659a      	str	r2, [r3, #88]	; 0x58
 80075fa:	e00d      	b.n	8007618 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	461a      	mov	r2, r3
 8007602:	4b1b      	ldr	r3, [pc, #108]	; (8007670 <DMA_CalcBaseAndBitshift+0x160>)
 8007604:	4013      	ands	r3, r2
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	6593      	str	r3, [r2, #88]	; 0x58
 800760a:	e005      	b.n	8007618 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800761c:	4618      	mov	r0, r3
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr
 8007628:	40020010 	.word	0x40020010
 800762c:	40020028 	.word	0x40020028
 8007630:	40020040 	.word	0x40020040
 8007634:	40020058 	.word	0x40020058
 8007638:	40020070 	.word	0x40020070
 800763c:	40020088 	.word	0x40020088
 8007640:	400200a0 	.word	0x400200a0
 8007644:	400200b8 	.word	0x400200b8
 8007648:	40020410 	.word	0x40020410
 800764c:	40020428 	.word	0x40020428
 8007650:	40020440 	.word	0x40020440
 8007654:	40020458 	.word	0x40020458
 8007658:	40020470 	.word	0x40020470
 800765c:	40020488 	.word	0x40020488
 8007660:	400204a0 	.word	0x400204a0
 8007664:	400204b8 	.word	0x400204b8
 8007668:	aaaaaaab 	.word	0xaaaaaaab
 800766c:	08010f98 	.word	0x08010f98
 8007670:	fffffc00 	.word	0xfffffc00

08007674 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007674:	b480      	push	{r7}
 8007676:	b085      	sub	sp, #20
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800767c:	2300      	movs	r3, #0
 800767e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	699b      	ldr	r3, [r3, #24]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d120      	bne.n	80076ca <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800768c:	2b03      	cmp	r3, #3
 800768e:	d858      	bhi.n	8007742 <DMA_CheckFifoParam+0xce>
 8007690:	a201      	add	r2, pc, #4	; (adr r2, 8007698 <DMA_CheckFifoParam+0x24>)
 8007692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007696:	bf00      	nop
 8007698:	080076a9 	.word	0x080076a9
 800769c:	080076bb 	.word	0x080076bb
 80076a0:	080076a9 	.word	0x080076a9
 80076a4:	08007743 	.word	0x08007743
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d048      	beq.n	8007746 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80076b4:	2301      	movs	r3, #1
 80076b6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076b8:	e045      	b.n	8007746 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80076c2:	d142      	bne.n	800774a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80076c8:	e03f      	b.n	800774a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	699b      	ldr	r3, [r3, #24]
 80076ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80076d2:	d123      	bne.n	800771c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d8:	2b03      	cmp	r3, #3
 80076da:	d838      	bhi.n	800774e <DMA_CheckFifoParam+0xda>
 80076dc:	a201      	add	r2, pc, #4	; (adr r2, 80076e4 <DMA_CheckFifoParam+0x70>)
 80076de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e2:	bf00      	nop
 80076e4:	080076f5 	.word	0x080076f5
 80076e8:	080076fb 	.word	0x080076fb
 80076ec:	080076f5 	.word	0x080076f5
 80076f0:	0800770d 	.word	0x0800770d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80076f4:	2301      	movs	r3, #1
 80076f6:	73fb      	strb	r3, [r7, #15]
        break;
 80076f8:	e030      	b.n	800775c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007702:	2b00      	cmp	r3, #0
 8007704:	d025      	beq.n	8007752 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800770a:	e022      	b.n	8007752 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007710:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007714:	d11f      	bne.n	8007756 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800771a:	e01c      	b.n	8007756 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007720:	2b02      	cmp	r3, #2
 8007722:	d902      	bls.n	800772a <DMA_CheckFifoParam+0xb6>
 8007724:	2b03      	cmp	r3, #3
 8007726:	d003      	beq.n	8007730 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8007728:	e018      	b.n	800775c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800772a:	2301      	movs	r3, #1
 800772c:	73fb      	strb	r3, [r7, #15]
        break;
 800772e:	e015      	b.n	800775c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00e      	beq.n	800775a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800773c:	2301      	movs	r3, #1
 800773e:	73fb      	strb	r3, [r7, #15]
    break;
 8007740:	e00b      	b.n	800775a <DMA_CheckFifoParam+0xe6>
        break;
 8007742:	bf00      	nop
 8007744:	e00a      	b.n	800775c <DMA_CheckFifoParam+0xe8>
        break;
 8007746:	bf00      	nop
 8007748:	e008      	b.n	800775c <DMA_CheckFifoParam+0xe8>
        break;
 800774a:	bf00      	nop
 800774c:	e006      	b.n	800775c <DMA_CheckFifoParam+0xe8>
        break;
 800774e:	bf00      	nop
 8007750:	e004      	b.n	800775c <DMA_CheckFifoParam+0xe8>
        break;
 8007752:	bf00      	nop
 8007754:	e002      	b.n	800775c <DMA_CheckFifoParam+0xe8>
        break;
 8007756:	bf00      	nop
 8007758:	e000      	b.n	800775c <DMA_CheckFifoParam+0xe8>
    break;
 800775a:	bf00      	nop
    }
  }

  return status;
 800775c:	7bfb      	ldrb	r3, [r7, #15]
}
 800775e:	4618      	mov	r0, r3
 8007760:	3714      	adds	r7, #20
 8007762:	46bd      	mov	sp, r7
 8007764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop

0800776c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a38      	ldr	r2, [pc, #224]	; (8007860 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d022      	beq.n	80077ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a36      	ldr	r2, [pc, #216]	; (8007864 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d01d      	beq.n	80077ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a35      	ldr	r2, [pc, #212]	; (8007868 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d018      	beq.n	80077ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a33      	ldr	r2, [pc, #204]	; (800786c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d013      	beq.n	80077ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a32      	ldr	r2, [pc, #200]	; (8007870 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d00e      	beq.n	80077ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a30      	ldr	r2, [pc, #192]	; (8007874 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d009      	beq.n	80077ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	4a2f      	ldr	r2, [pc, #188]	; (8007878 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d004      	beq.n	80077ca <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4a2d      	ldr	r2, [pc, #180]	; (800787c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80077c6:	4293      	cmp	r3, r2
 80077c8:	d101      	bne.n	80077ce <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80077ca:	2301      	movs	r3, #1
 80077cc:	e000      	b.n	80077d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80077ce:	2300      	movs	r3, #0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d01a      	beq.n	800780a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	3b08      	subs	r3, #8
 80077dc:	4a28      	ldr	r2, [pc, #160]	; (8007880 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80077de:	fba2 2303 	umull	r2, r3, r2, r3
 80077e2:	091b      	lsrs	r3, r3, #4
 80077e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80077e6:	68fa      	ldr	r2, [r7, #12]
 80077e8:	4b26      	ldr	r3, [pc, #152]	; (8007884 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80077ea:	4413      	add	r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	461a      	mov	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	4a24      	ldr	r2, [pc, #144]	; (8007888 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80077f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f003 031f 	and.w	r3, r3, #31
 8007800:	2201      	movs	r2, #1
 8007802:	409a      	lsls	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8007808:	e024      	b.n	8007854 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	b2db      	uxtb	r3, r3
 8007810:	3b10      	subs	r3, #16
 8007812:	4a1e      	ldr	r2, [pc, #120]	; (800788c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8007814:	fba2 2303 	umull	r2, r3, r2, r3
 8007818:	091b      	lsrs	r3, r3, #4
 800781a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	4a1c      	ldr	r2, [pc, #112]	; (8007890 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d806      	bhi.n	8007832 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	4a1b      	ldr	r2, [pc, #108]	; (8007894 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8007828:	4293      	cmp	r3, r2
 800782a:	d902      	bls.n	8007832 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	3308      	adds	r3, #8
 8007830:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8007832:	68fa      	ldr	r2, [r7, #12]
 8007834:	4b18      	ldr	r3, [pc, #96]	; (8007898 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8007836:	4413      	add	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	461a      	mov	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	4a16      	ldr	r2, [pc, #88]	; (800789c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8007844:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	f003 031f 	and.w	r3, r3, #31
 800784c:	2201      	movs	r2, #1
 800784e:	409a      	lsls	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007854:	bf00      	nop
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr
 8007860:	58025408 	.word	0x58025408
 8007864:	5802541c 	.word	0x5802541c
 8007868:	58025430 	.word	0x58025430
 800786c:	58025444 	.word	0x58025444
 8007870:	58025458 	.word	0x58025458
 8007874:	5802546c 	.word	0x5802546c
 8007878:	58025480 	.word	0x58025480
 800787c:	58025494 	.word	0x58025494
 8007880:	cccccccd 	.word	0xcccccccd
 8007884:	16009600 	.word	0x16009600
 8007888:	58025880 	.word	0x58025880
 800788c:	aaaaaaab 	.word	0xaaaaaaab
 8007890:	400204b8 	.word	0x400204b8
 8007894:	4002040f 	.word	0x4002040f
 8007898:	10008200 	.word	0x10008200
 800789c:	40020880 	.word	0x40020880

080078a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b085      	sub	sp, #20
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	685b      	ldr	r3, [r3, #4]
 80078ac:	b2db      	uxtb	r3, r3
 80078ae:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d04a      	beq.n	800794c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	2b08      	cmp	r3, #8
 80078ba:	d847      	bhi.n	800794c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a25      	ldr	r2, [pc, #148]	; (8007958 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80078c2:	4293      	cmp	r3, r2
 80078c4:	d022      	beq.n	800790c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a24      	ldr	r2, [pc, #144]	; (800795c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d01d      	beq.n	800790c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a22      	ldr	r2, [pc, #136]	; (8007960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d018      	beq.n	800790c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a21      	ldr	r2, [pc, #132]	; (8007964 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d013      	beq.n	800790c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a1f      	ldr	r2, [pc, #124]	; (8007968 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d00e      	beq.n	800790c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a1e      	ldr	r2, [pc, #120]	; (800796c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d009      	beq.n	800790c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a1c      	ldr	r2, [pc, #112]	; (8007970 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d004      	beq.n	800790c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a1b      	ldr	r2, [pc, #108]	; (8007974 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8007908:	4293      	cmp	r3, r2
 800790a:	d101      	bne.n	8007910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800790c:	2301      	movs	r3, #1
 800790e:	e000      	b.n	8007912 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8007910:	2300      	movs	r3, #0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d00a      	beq.n	800792c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8007916:	68fa      	ldr	r2, [r7, #12]
 8007918:	4b17      	ldr	r3, [pc, #92]	; (8007978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800791a:	4413      	add	r3, r2
 800791c:	009b      	lsls	r3, r3, #2
 800791e:	461a      	mov	r2, r3
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a15      	ldr	r2, [pc, #84]	; (800797c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8007928:	671a      	str	r2, [r3, #112]	; 0x70
 800792a:	e009      	b.n	8007940 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	4b14      	ldr	r3, [pc, #80]	; (8007980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8007930:	4413      	add	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	461a      	mov	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	4a11      	ldr	r2, [pc, #68]	; (8007984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800793e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	3b01      	subs	r3, #1
 8007944:	2201      	movs	r2, #1
 8007946:	409a      	lsls	r2, r3
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800794c:	bf00      	nop
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr
 8007958:	58025408 	.word	0x58025408
 800795c:	5802541c 	.word	0x5802541c
 8007960:	58025430 	.word	0x58025430
 8007964:	58025444 	.word	0x58025444
 8007968:	58025458 	.word	0x58025458
 800796c:	5802546c 	.word	0x5802546c
 8007970:	58025480 	.word	0x58025480
 8007974:	58025494 	.word	0x58025494
 8007978:	1600963f 	.word	0x1600963f
 800797c:	58025940 	.word	0x58025940
 8007980:	1000823f 	.word	0x1000823f
 8007984:	40020940 	.word	0x40020940

08007988 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007988:	b480      	push	{r7}
 800798a:	b089      	sub	sp, #36	; 0x24
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
 8007990:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007992:	2300      	movs	r3, #0
 8007994:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007996:	4b89      	ldr	r3, [pc, #548]	; (8007bbc <HAL_GPIO_Init+0x234>)
 8007998:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800799a:	e194      	b.n	8007cc6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	681a      	ldr	r2, [r3, #0]
 80079a0:	2101      	movs	r1, #1
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	fa01 f303 	lsl.w	r3, r1, r3
 80079a8:	4013      	ands	r3, r2
 80079aa:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f000 8186 	beq.w	8007cc0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	685b      	ldr	r3, [r3, #4]
 80079b8:	f003 0303 	and.w	r3, r3, #3
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d005      	beq.n	80079cc <HAL_GPIO_Init+0x44>
 80079c0:	683b      	ldr	r3, [r7, #0]
 80079c2:	685b      	ldr	r3, [r3, #4]
 80079c4:	f003 0303 	and.w	r3, r3, #3
 80079c8:	2b02      	cmp	r3, #2
 80079ca:	d130      	bne.n	8007a2e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	005b      	lsls	r3, r3, #1
 80079d6:	2203      	movs	r2, #3
 80079d8:	fa02 f303 	lsl.w	r3, r2, r3
 80079dc:	43db      	mvns	r3, r3
 80079de:	69ba      	ldr	r2, [r7, #24]
 80079e0:	4013      	ands	r3, r2
 80079e2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	68da      	ldr	r2, [r3, #12]
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	005b      	lsls	r3, r3, #1
 80079ec:	fa02 f303 	lsl.w	r3, r2, r3
 80079f0:	69ba      	ldr	r2, [r7, #24]
 80079f2:	4313      	orrs	r3, r2
 80079f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	69ba      	ldr	r2, [r7, #24]
 80079fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a02:	2201      	movs	r2, #1
 8007a04:	69fb      	ldr	r3, [r7, #28]
 8007a06:	fa02 f303 	lsl.w	r3, r2, r3
 8007a0a:	43db      	mvns	r3, r3
 8007a0c:	69ba      	ldr	r2, [r7, #24]
 8007a0e:	4013      	ands	r3, r2
 8007a10:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	091b      	lsrs	r3, r3, #4
 8007a18:	f003 0201 	and.w	r2, r3, #1
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a22:	69ba      	ldr	r2, [r7, #24]
 8007a24:	4313      	orrs	r3, r2
 8007a26:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	69ba      	ldr	r2, [r7, #24]
 8007a2c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	685b      	ldr	r3, [r3, #4]
 8007a32:	f003 0303 	and.w	r3, r3, #3
 8007a36:	2b03      	cmp	r3, #3
 8007a38:	d017      	beq.n	8007a6a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a40:	69fb      	ldr	r3, [r7, #28]
 8007a42:	005b      	lsls	r3, r3, #1
 8007a44:	2203      	movs	r2, #3
 8007a46:	fa02 f303 	lsl.w	r3, r2, r3
 8007a4a:	43db      	mvns	r3, r3
 8007a4c:	69ba      	ldr	r2, [r7, #24]
 8007a4e:	4013      	ands	r3, r2
 8007a50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	689a      	ldr	r2, [r3, #8]
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	005b      	lsls	r3, r3, #1
 8007a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a5e:	69ba      	ldr	r2, [r7, #24]
 8007a60:	4313      	orrs	r3, r2
 8007a62:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	69ba      	ldr	r2, [r7, #24]
 8007a68:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	f003 0303 	and.w	r3, r3, #3
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d123      	bne.n	8007abe <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007a76:	69fb      	ldr	r3, [r7, #28]
 8007a78:	08da      	lsrs	r2, r3, #3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	3208      	adds	r2, #8
 8007a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a84:	69fb      	ldr	r3, [r7, #28]
 8007a86:	f003 0307 	and.w	r3, r3, #7
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	220f      	movs	r2, #15
 8007a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007a92:	43db      	mvns	r3, r3
 8007a94:	69ba      	ldr	r2, [r7, #24]
 8007a96:	4013      	ands	r3, r2
 8007a98:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	691a      	ldr	r2, [r3, #16]
 8007a9e:	69fb      	ldr	r3, [r7, #28]
 8007aa0:	f003 0307 	and.w	r3, r3, #7
 8007aa4:	009b      	lsls	r3, r3, #2
 8007aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8007aaa:	69ba      	ldr	r2, [r7, #24]
 8007aac:	4313      	orrs	r3, r2
 8007aae:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	08da      	lsrs	r2, r3, #3
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	3208      	adds	r2, #8
 8007ab8:	69b9      	ldr	r1, [r7, #24]
 8007aba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	005b      	lsls	r3, r3, #1
 8007ac8:	2203      	movs	r2, #3
 8007aca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ace:	43db      	mvns	r3, r3
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	f003 0203 	and.w	r2, r3, #3
 8007ade:	69fb      	ldr	r3, [r7, #28]
 8007ae0:	005b      	lsls	r3, r3, #1
 8007ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae6:	69ba      	ldr	r2, [r7, #24]
 8007ae8:	4313      	orrs	r3, r2
 8007aea:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	69ba      	ldr	r2, [r7, #24]
 8007af0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	f000 80e0 	beq.w	8007cc0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b00:	4b2f      	ldr	r3, [pc, #188]	; (8007bc0 <HAL_GPIO_Init+0x238>)
 8007b02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b06:	4a2e      	ldr	r2, [pc, #184]	; (8007bc0 <HAL_GPIO_Init+0x238>)
 8007b08:	f043 0302 	orr.w	r3, r3, #2
 8007b0c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007b10:	4b2b      	ldr	r3, [pc, #172]	; (8007bc0 <HAL_GPIO_Init+0x238>)
 8007b12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b16:	f003 0302 	and.w	r3, r3, #2
 8007b1a:	60fb      	str	r3, [r7, #12]
 8007b1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007b1e:	4a29      	ldr	r2, [pc, #164]	; (8007bc4 <HAL_GPIO_Init+0x23c>)
 8007b20:	69fb      	ldr	r3, [r7, #28]
 8007b22:	089b      	lsrs	r3, r3, #2
 8007b24:	3302      	adds	r3, #2
 8007b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	f003 0303 	and.w	r3, r3, #3
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	220f      	movs	r2, #15
 8007b36:	fa02 f303 	lsl.w	r3, r2, r3
 8007b3a:	43db      	mvns	r3, r3
 8007b3c:	69ba      	ldr	r2, [r7, #24]
 8007b3e:	4013      	ands	r3, r2
 8007b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	4a20      	ldr	r2, [pc, #128]	; (8007bc8 <HAL_GPIO_Init+0x240>)
 8007b46:	4293      	cmp	r3, r2
 8007b48:	d052      	beq.n	8007bf0 <HAL_GPIO_Init+0x268>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4a1f      	ldr	r2, [pc, #124]	; (8007bcc <HAL_GPIO_Init+0x244>)
 8007b4e:	4293      	cmp	r3, r2
 8007b50:	d031      	beq.n	8007bb6 <HAL_GPIO_Init+0x22e>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	4a1e      	ldr	r2, [pc, #120]	; (8007bd0 <HAL_GPIO_Init+0x248>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d02b      	beq.n	8007bb2 <HAL_GPIO_Init+0x22a>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	4a1d      	ldr	r2, [pc, #116]	; (8007bd4 <HAL_GPIO_Init+0x24c>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d025      	beq.n	8007bae <HAL_GPIO_Init+0x226>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a1c      	ldr	r2, [pc, #112]	; (8007bd8 <HAL_GPIO_Init+0x250>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d01f      	beq.n	8007baa <HAL_GPIO_Init+0x222>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	4a1b      	ldr	r2, [pc, #108]	; (8007bdc <HAL_GPIO_Init+0x254>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d019      	beq.n	8007ba6 <HAL_GPIO_Init+0x21e>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	4a1a      	ldr	r2, [pc, #104]	; (8007be0 <HAL_GPIO_Init+0x258>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d013      	beq.n	8007ba2 <HAL_GPIO_Init+0x21a>
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	4a19      	ldr	r2, [pc, #100]	; (8007be4 <HAL_GPIO_Init+0x25c>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d00d      	beq.n	8007b9e <HAL_GPIO_Init+0x216>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	4a18      	ldr	r2, [pc, #96]	; (8007be8 <HAL_GPIO_Init+0x260>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d007      	beq.n	8007b9a <HAL_GPIO_Init+0x212>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	4a17      	ldr	r2, [pc, #92]	; (8007bec <HAL_GPIO_Init+0x264>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d101      	bne.n	8007b96 <HAL_GPIO_Init+0x20e>
 8007b92:	2309      	movs	r3, #9
 8007b94:	e02d      	b.n	8007bf2 <HAL_GPIO_Init+0x26a>
 8007b96:	230a      	movs	r3, #10
 8007b98:	e02b      	b.n	8007bf2 <HAL_GPIO_Init+0x26a>
 8007b9a:	2308      	movs	r3, #8
 8007b9c:	e029      	b.n	8007bf2 <HAL_GPIO_Init+0x26a>
 8007b9e:	2307      	movs	r3, #7
 8007ba0:	e027      	b.n	8007bf2 <HAL_GPIO_Init+0x26a>
 8007ba2:	2306      	movs	r3, #6
 8007ba4:	e025      	b.n	8007bf2 <HAL_GPIO_Init+0x26a>
 8007ba6:	2305      	movs	r3, #5
 8007ba8:	e023      	b.n	8007bf2 <HAL_GPIO_Init+0x26a>
 8007baa:	2304      	movs	r3, #4
 8007bac:	e021      	b.n	8007bf2 <HAL_GPIO_Init+0x26a>
 8007bae:	2303      	movs	r3, #3
 8007bb0:	e01f      	b.n	8007bf2 <HAL_GPIO_Init+0x26a>
 8007bb2:	2302      	movs	r3, #2
 8007bb4:	e01d      	b.n	8007bf2 <HAL_GPIO_Init+0x26a>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e01b      	b.n	8007bf2 <HAL_GPIO_Init+0x26a>
 8007bba:	bf00      	nop
 8007bbc:	58000080 	.word	0x58000080
 8007bc0:	58024400 	.word	0x58024400
 8007bc4:	58000400 	.word	0x58000400
 8007bc8:	58020000 	.word	0x58020000
 8007bcc:	58020400 	.word	0x58020400
 8007bd0:	58020800 	.word	0x58020800
 8007bd4:	58020c00 	.word	0x58020c00
 8007bd8:	58021000 	.word	0x58021000
 8007bdc:	58021400 	.word	0x58021400
 8007be0:	58021800 	.word	0x58021800
 8007be4:	58021c00 	.word	0x58021c00
 8007be8:	58022000 	.word	0x58022000
 8007bec:	58022400 	.word	0x58022400
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	69fa      	ldr	r2, [r7, #28]
 8007bf4:	f002 0203 	and.w	r2, r2, #3
 8007bf8:	0092      	lsls	r2, r2, #2
 8007bfa:	4093      	lsls	r3, r2
 8007bfc:	69ba      	ldr	r2, [r7, #24]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c02:	4938      	ldr	r1, [pc, #224]	; (8007ce4 <HAL_GPIO_Init+0x35c>)
 8007c04:	69fb      	ldr	r3, [r7, #28]
 8007c06:	089b      	lsrs	r3, r3, #2
 8007c08:	3302      	adds	r3, #2
 8007c0a:	69ba      	ldr	r2, [r7, #24]
 8007c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	43db      	mvns	r3, r3
 8007c1c:	69ba      	ldr	r2, [r7, #24]
 8007c1e:	4013      	ands	r3, r2
 8007c20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d003      	beq.n	8007c36 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007c2e:	69ba      	ldr	r2, [r7, #24]
 8007c30:	693b      	ldr	r3, [r7, #16]
 8007c32:	4313      	orrs	r3, r2
 8007c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007c36:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c3a:	69bb      	ldr	r3, [r7, #24]
 8007c3c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	43db      	mvns	r3, r3
 8007c4a:	69ba      	ldr	r2, [r7, #24]
 8007c4c:	4013      	ands	r3, r2
 8007c4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	685b      	ldr	r3, [r3, #4]
 8007c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d003      	beq.n	8007c64 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007c5c:	69ba      	ldr	r2, [r7, #24]
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	4313      	orrs	r3, r2
 8007c62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007c64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007c68:	69bb      	ldr	r3, [r7, #24]
 8007c6a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	43db      	mvns	r3, r3
 8007c76:	69ba      	ldr	r2, [r7, #24]
 8007c78:	4013      	ands	r3, r2
 8007c7a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d003      	beq.n	8007c90 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007c88:	69ba      	ldr	r2, [r7, #24]
 8007c8a:	693b      	ldr	r3, [r7, #16]
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	69ba      	ldr	r2, [r7, #24]
 8007c94:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	43db      	mvns	r3, r3
 8007ca0:	69ba      	ldr	r2, [r7, #24]
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d003      	beq.n	8007cba <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007cb2:	69ba      	ldr	r2, [r7, #24]
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	69ba      	ldr	r2, [r7, #24]
 8007cbe:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007cc0:	69fb      	ldr	r3, [r7, #28]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	69fb      	ldr	r3, [r7, #28]
 8007ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f47f ae63 	bne.w	800799c <HAL_GPIO_Init+0x14>
  }
}
 8007cd6:	bf00      	nop
 8007cd8:	bf00      	nop
 8007cda:	3724      	adds	r7, #36	; 0x24
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	58000400 	.word	0x58000400

08007ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	807b      	strh	r3, [r7, #2]
 8007cf4:	4613      	mov	r3, r2
 8007cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007cf8:	787b      	ldrb	r3, [r7, #1]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d003      	beq.n	8007d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007cfe:	887a      	ldrh	r2, [r7, #2]
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007d04:	e003      	b.n	8007d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007d06:	887b      	ldrh	r3, [r7, #2]
 8007d08:	041a      	lsls	r2, r3, #16
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	619a      	str	r2, [r3, #24]
}
 8007d0e:	bf00      	nop
 8007d10:	370c      	adds	r7, #12
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b082      	sub	sp, #8
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	4603      	mov	r3, r0
 8007d22:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007d24:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007d28:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007d2c:	88fb      	ldrh	r3, [r7, #6]
 8007d2e:	4013      	ands	r3, r2
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d008      	beq.n	8007d46 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007d34:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007d38:	88fb      	ldrh	r3, [r7, #6]
 8007d3a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007d3e:	88fb      	ldrh	r3, [r7, #6]
 8007d40:	4618      	mov	r0, r3
 8007d42:	f7fa fe71 	bl	8002a28 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007d46:	bf00      	nop
 8007d48:	3708      	adds	r7, #8
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
	...

08007d50 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b084      	sub	sp, #16
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8007d58:	4b19      	ldr	r3, [pc, #100]	; (8007dc0 <HAL_PWREx_ConfigSupply+0x70>)
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	f003 0304 	and.w	r3, r3, #4
 8007d60:	2b04      	cmp	r3, #4
 8007d62:	d00a      	beq.n	8007d7a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8007d64:	4b16      	ldr	r3, [pc, #88]	; (8007dc0 <HAL_PWREx_ConfigSupply+0x70>)
 8007d66:	68db      	ldr	r3, [r3, #12]
 8007d68:	f003 0307 	and.w	r3, r3, #7
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d001      	beq.n	8007d76 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
 8007d74:	e01f      	b.n	8007db6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8007d76:	2300      	movs	r3, #0
 8007d78:	e01d      	b.n	8007db6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8007d7a:	4b11      	ldr	r3, [pc, #68]	; (8007dc0 <HAL_PWREx_ConfigSupply+0x70>)
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	f023 0207 	bic.w	r2, r3, #7
 8007d82:	490f      	ldr	r1, [pc, #60]	; (8007dc0 <HAL_PWREx_ConfigSupply+0x70>)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8007d8a:	f7fc fc91 	bl	80046b0 <HAL_GetTick>
 8007d8e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007d90:	e009      	b.n	8007da6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007d92:	f7fc fc8d 	bl	80046b0 <HAL_GetTick>
 8007d96:	4602      	mov	r2, r0
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	1ad3      	subs	r3, r2, r3
 8007d9c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007da0:	d901      	bls.n	8007da6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007da2:	2301      	movs	r3, #1
 8007da4:	e007      	b.n	8007db6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007da6:	4b06      	ldr	r3, [pc, #24]	; (8007dc0 <HAL_PWREx_ConfigSupply+0x70>)
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007db2:	d1ee      	bne.n	8007d92 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007db4:	2300      	movs	r3, #0
}
 8007db6:	4618      	mov	r0, r3
 8007db8:	3710      	adds	r7, #16
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	58024800 	.word	0x58024800

08007dc4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b08c      	sub	sp, #48	; 0x30
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d102      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	f000 bc1c 	b.w	8008610 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f003 0301 	and.w	r3, r3, #1
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	f000 8087 	beq.w	8007ef4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007de6:	4b9e      	ldr	r3, [pc, #632]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007df0:	4b9b      	ldr	r3, [pc, #620]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df8:	2b10      	cmp	r3, #16
 8007dfa:	d007      	beq.n	8007e0c <HAL_RCC_OscConfig+0x48>
 8007dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dfe:	2b18      	cmp	r3, #24
 8007e00:	d110      	bne.n	8007e24 <HAL_RCC_OscConfig+0x60>
 8007e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e04:	f003 0303 	and.w	r3, r3, #3
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d10b      	bne.n	8007e24 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007e0c:	4b94      	ldr	r3, [pc, #592]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d06c      	beq.n	8007ef2 <HAL_RCC_OscConfig+0x12e>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	685b      	ldr	r3, [r3, #4]
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d168      	bne.n	8007ef2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007e20:	2301      	movs	r3, #1
 8007e22:	e3f5      	b.n	8008610 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	685b      	ldr	r3, [r3, #4]
 8007e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e2c:	d106      	bne.n	8007e3c <HAL_RCC_OscConfig+0x78>
 8007e2e:	4b8c      	ldr	r3, [pc, #560]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	4a8b      	ldr	r2, [pc, #556]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e38:	6013      	str	r3, [r2, #0]
 8007e3a:	e02e      	b.n	8007e9a <HAL_RCC_OscConfig+0xd6>
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	685b      	ldr	r3, [r3, #4]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d10c      	bne.n	8007e5e <HAL_RCC_OscConfig+0x9a>
 8007e44:	4b86      	ldr	r3, [pc, #536]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a85      	ldr	r2, [pc, #532]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007e4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e4e:	6013      	str	r3, [r2, #0]
 8007e50:	4b83      	ldr	r3, [pc, #524]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4a82      	ldr	r2, [pc, #520]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e5a:	6013      	str	r3, [r2, #0]
 8007e5c:	e01d      	b.n	8007e9a <HAL_RCC_OscConfig+0xd6>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007e66:	d10c      	bne.n	8007e82 <HAL_RCC_OscConfig+0xbe>
 8007e68:	4b7d      	ldr	r3, [pc, #500]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a7c      	ldr	r2, [pc, #496]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007e6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007e72:	6013      	str	r3, [r2, #0]
 8007e74:	4b7a      	ldr	r3, [pc, #488]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	4a79      	ldr	r2, [pc, #484]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007e7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007e7e:	6013      	str	r3, [r2, #0]
 8007e80:	e00b      	b.n	8007e9a <HAL_RCC_OscConfig+0xd6>
 8007e82:	4b77      	ldr	r3, [pc, #476]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	4a76      	ldr	r2, [pc, #472]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007e88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e8c:	6013      	str	r3, [r2, #0]
 8007e8e:	4b74      	ldr	r3, [pc, #464]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4a73      	ldr	r2, [pc, #460]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007e94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007e98:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d013      	beq.n	8007eca <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ea2:	f7fc fc05 	bl	80046b0 <HAL_GetTick>
 8007ea6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ea8:	e008      	b.n	8007ebc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007eaa:	f7fc fc01 	bl	80046b0 <HAL_GetTick>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	2b64      	cmp	r3, #100	; 0x64
 8007eb6:	d901      	bls.n	8007ebc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e3a9      	b.n	8008610 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007ebc:	4b68      	ldr	r3, [pc, #416]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d0f0      	beq.n	8007eaa <HAL_RCC_OscConfig+0xe6>
 8007ec8:	e014      	b.n	8007ef4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007eca:	f7fc fbf1 	bl	80046b0 <HAL_GetTick>
 8007ece:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ed0:	e008      	b.n	8007ee4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ed2:	f7fc fbed 	bl	80046b0 <HAL_GetTick>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	1ad3      	subs	r3, r2, r3
 8007edc:	2b64      	cmp	r3, #100	; 0x64
 8007ede:	d901      	bls.n	8007ee4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8007ee0:	2303      	movs	r3, #3
 8007ee2:	e395      	b.n	8008610 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007ee4:	4b5e      	ldr	r3, [pc, #376]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d1f0      	bne.n	8007ed2 <HAL_RCC_OscConfig+0x10e>
 8007ef0:	e000      	b.n	8007ef4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ef2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f003 0302 	and.w	r3, r3, #2
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	f000 80ca 	beq.w	8008096 <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007f02:	4b57      	ldr	r3, [pc, #348]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007f04:	691b      	ldr	r3, [r3, #16]
 8007f06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f0a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007f0c:	4b54      	ldr	r3, [pc, #336]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f10:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007f12:	6a3b      	ldr	r3, [r7, #32]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d007      	beq.n	8007f28 <HAL_RCC_OscConfig+0x164>
 8007f18:	6a3b      	ldr	r3, [r7, #32]
 8007f1a:	2b18      	cmp	r3, #24
 8007f1c:	d156      	bne.n	8007fcc <HAL_RCC_OscConfig+0x208>
 8007f1e:	69fb      	ldr	r3, [r7, #28]
 8007f20:	f003 0303 	and.w	r3, r3, #3
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d151      	bne.n	8007fcc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f28:	4b4d      	ldr	r3, [pc, #308]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	f003 0304 	and.w	r3, r3, #4
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d005      	beq.n	8007f40 <HAL_RCC_OscConfig+0x17c>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	68db      	ldr	r3, [r3, #12]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d101      	bne.n	8007f40 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e367      	b.n	8008610 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007f40:	4b47      	ldr	r3, [pc, #284]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f023 0219 	bic.w	r2, r3, #25
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	68db      	ldr	r3, [r3, #12]
 8007f4c:	4944      	ldr	r1, [pc, #272]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007f52:	f7fc fbad 	bl	80046b0 <HAL_GetTick>
 8007f56:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f58:	e008      	b.n	8007f6c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007f5a:	f7fc fba9 	bl	80046b0 <HAL_GetTick>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	2b02      	cmp	r3, #2
 8007f66:	d901      	bls.n	8007f6c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8007f68:	2303      	movs	r3, #3
 8007f6a:	e351      	b.n	8008610 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007f6c:	4b3c      	ldr	r3, [pc, #240]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f003 0304 	and.w	r3, r3, #4
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d0f0      	beq.n	8007f5a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f78:	f7fc fba6 	bl	80046c8 <HAL_GetREVID>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	f241 0203 	movw	r2, #4099	; 0x1003
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d817      	bhi.n	8007fb6 <HAL_RCC_OscConfig+0x1f2>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	691b      	ldr	r3, [r3, #16]
 8007f8a:	2b40      	cmp	r3, #64	; 0x40
 8007f8c:	d108      	bne.n	8007fa0 <HAL_RCC_OscConfig+0x1dc>
 8007f8e:	4b34      	ldr	r3, [pc, #208]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007f96:	4a32      	ldr	r2, [pc, #200]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007f98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007f9c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007f9e:	e07a      	b.n	8008096 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fa0:	4b2f      	ldr	r3, [pc, #188]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	691b      	ldr	r3, [r3, #16]
 8007fac:	031b      	lsls	r3, r3, #12
 8007fae:	492c      	ldr	r1, [pc, #176]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fb4:	e06f      	b.n	8008096 <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007fb6:	4b2a      	ldr	r3, [pc, #168]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	061b      	lsls	r3, r3, #24
 8007fc4:	4926      	ldr	r1, [pc, #152]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007fca:	e064      	b.n	8008096 <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	68db      	ldr	r3, [r3, #12]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d047      	beq.n	8008064 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007fd4:	4b22      	ldr	r3, [pc, #136]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f023 0219 	bic.w	r2, r3, #25
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	68db      	ldr	r3, [r3, #12]
 8007fe0:	491f      	ldr	r1, [pc, #124]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fe6:	f7fc fb63 	bl	80046b0 <HAL_GetTick>
 8007fea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007fec:	e008      	b.n	8008000 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007fee:	f7fc fb5f 	bl	80046b0 <HAL_GetTick>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff6:	1ad3      	subs	r3, r2, r3
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d901      	bls.n	8008000 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	e307      	b.n	8008610 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008000:	4b17      	ldr	r3, [pc, #92]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0304 	and.w	r3, r3, #4
 8008008:	2b00      	cmp	r3, #0
 800800a:	d0f0      	beq.n	8007fee <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800800c:	f7fc fb5c 	bl	80046c8 <HAL_GetREVID>
 8008010:	4603      	mov	r3, r0
 8008012:	f241 0203 	movw	r2, #4099	; 0x1003
 8008016:	4293      	cmp	r3, r2
 8008018:	d817      	bhi.n	800804a <HAL_RCC_OscConfig+0x286>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	2b40      	cmp	r3, #64	; 0x40
 8008020:	d108      	bne.n	8008034 <HAL_RCC_OscConfig+0x270>
 8008022:	4b0f      	ldr	r3, [pc, #60]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800802a:	4a0d      	ldr	r2, [pc, #52]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 800802c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008030:	6053      	str	r3, [r2, #4]
 8008032:	e030      	b.n	8008096 <HAL_RCC_OscConfig+0x2d2>
 8008034:	4b0a      	ldr	r3, [pc, #40]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	031b      	lsls	r3, r3, #12
 8008042:	4907      	ldr	r1, [pc, #28]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 8008044:	4313      	orrs	r3, r2
 8008046:	604b      	str	r3, [r1, #4]
 8008048:	e025      	b.n	8008096 <HAL_RCC_OscConfig+0x2d2>
 800804a:	4b05      	ldr	r3, [pc, #20]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 800804c:	685b      	ldr	r3, [r3, #4]
 800804e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	061b      	lsls	r3, r3, #24
 8008058:	4901      	ldr	r1, [pc, #4]	; (8008060 <HAL_RCC_OscConfig+0x29c>)
 800805a:	4313      	orrs	r3, r2
 800805c:	604b      	str	r3, [r1, #4]
 800805e:	e01a      	b.n	8008096 <HAL_RCC_OscConfig+0x2d2>
 8008060:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008064:	4b9e      	ldr	r3, [pc, #632]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a9d      	ldr	r2, [pc, #628]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 800806a:	f023 0301 	bic.w	r3, r3, #1
 800806e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008070:	f7fc fb1e 	bl	80046b0 <HAL_GetTick>
 8008074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008076:	e008      	b.n	800808a <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008078:	f7fc fb1a 	bl	80046b0 <HAL_GetTick>
 800807c:	4602      	mov	r2, r0
 800807e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	2b02      	cmp	r3, #2
 8008084:	d901      	bls.n	800808a <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e2c2      	b.n	8008610 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800808a:	4b95      	ldr	r3, [pc, #596]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f003 0304 	and.w	r3, r3, #4
 8008092:	2b00      	cmp	r3, #0
 8008094:	d1f0      	bne.n	8008078 <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	f003 0310 	and.w	r3, r3, #16
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f000 80a9 	beq.w	80081f6 <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080a4:	4b8e      	ldr	r3, [pc, #568]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 80080a6:	691b      	ldr	r3, [r3, #16]
 80080a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80080ac:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80080ae:	4b8c      	ldr	r3, [pc, #560]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 80080b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080b2:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80080b4:	69bb      	ldr	r3, [r7, #24]
 80080b6:	2b08      	cmp	r3, #8
 80080b8:	d007      	beq.n	80080ca <HAL_RCC_OscConfig+0x306>
 80080ba:	69bb      	ldr	r3, [r7, #24]
 80080bc:	2b18      	cmp	r3, #24
 80080be:	d13a      	bne.n	8008136 <HAL_RCC_OscConfig+0x372>
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	f003 0303 	and.w	r3, r3, #3
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d135      	bne.n	8008136 <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80080ca:	4b85      	ldr	r3, [pc, #532]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d005      	beq.n	80080e2 <HAL_RCC_OscConfig+0x31e>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	69db      	ldr	r3, [r3, #28]
 80080da:	2b80      	cmp	r3, #128	; 0x80
 80080dc:	d001      	beq.n	80080e2 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e296      	b.n	8008610 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80080e2:	f7fc faf1 	bl	80046c8 <HAL_GetREVID>
 80080e6:	4603      	mov	r3, r0
 80080e8:	f241 0203 	movw	r2, #4099	; 0x1003
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d817      	bhi.n	8008120 <HAL_RCC_OscConfig+0x35c>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6a1b      	ldr	r3, [r3, #32]
 80080f4:	2b20      	cmp	r3, #32
 80080f6:	d108      	bne.n	800810a <HAL_RCC_OscConfig+0x346>
 80080f8:	4b79      	ldr	r3, [pc, #484]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 80080fa:	685b      	ldr	r3, [r3, #4]
 80080fc:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008100:	4a77      	ldr	r2, [pc, #476]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 8008102:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008106:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008108:	e075      	b.n	80081f6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800810a:	4b75      	ldr	r3, [pc, #468]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	069b      	lsls	r3, r3, #26
 8008118:	4971      	ldr	r1, [pc, #452]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 800811a:	4313      	orrs	r3, r2
 800811c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800811e:	e06a      	b.n	80081f6 <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008120:	4b6f      	ldr	r3, [pc, #444]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 8008122:	68db      	ldr	r3, [r3, #12]
 8008124:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	6a1b      	ldr	r3, [r3, #32]
 800812c:	061b      	lsls	r3, r3, #24
 800812e:	496c      	ldr	r1, [pc, #432]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 8008130:	4313      	orrs	r3, r2
 8008132:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008134:	e05f      	b.n	80081f6 <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	69db      	ldr	r3, [r3, #28]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d042      	beq.n	80081c4 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800813e:	4b68      	ldr	r3, [pc, #416]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a67      	ldr	r2, [pc, #412]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 8008144:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800814a:	f7fc fab1 	bl	80046b0 <HAL_GetTick>
 800814e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008150:	e008      	b.n	8008164 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8008152:	f7fc faad 	bl	80046b0 <HAL_GetTick>
 8008156:	4602      	mov	r2, r0
 8008158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800815a:	1ad3      	subs	r3, r2, r3
 800815c:	2b02      	cmp	r3, #2
 800815e:	d901      	bls.n	8008164 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8008160:	2303      	movs	r3, #3
 8008162:	e255      	b.n	8008610 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008164:	4b5e      	ldr	r3, [pc, #376]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800816c:	2b00      	cmp	r3, #0
 800816e:	d0f0      	beq.n	8008152 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008170:	f7fc faaa 	bl	80046c8 <HAL_GetREVID>
 8008174:	4603      	mov	r3, r0
 8008176:	f241 0203 	movw	r2, #4099	; 0x1003
 800817a:	4293      	cmp	r3, r2
 800817c:	d817      	bhi.n	80081ae <HAL_RCC_OscConfig+0x3ea>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a1b      	ldr	r3, [r3, #32]
 8008182:	2b20      	cmp	r3, #32
 8008184:	d108      	bne.n	8008198 <HAL_RCC_OscConfig+0x3d4>
 8008186:	4b56      	ldr	r3, [pc, #344]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 8008188:	685b      	ldr	r3, [r3, #4]
 800818a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800818e:	4a54      	ldr	r2, [pc, #336]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 8008190:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008194:	6053      	str	r3, [r2, #4]
 8008196:	e02e      	b.n	80081f6 <HAL_RCC_OscConfig+0x432>
 8008198:	4b51      	ldr	r3, [pc, #324]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	6a1b      	ldr	r3, [r3, #32]
 80081a4:	069b      	lsls	r3, r3, #26
 80081a6:	494e      	ldr	r1, [pc, #312]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 80081a8:	4313      	orrs	r3, r2
 80081aa:	604b      	str	r3, [r1, #4]
 80081ac:	e023      	b.n	80081f6 <HAL_RCC_OscConfig+0x432>
 80081ae:	4b4c      	ldr	r3, [pc, #304]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 80081b0:	68db      	ldr	r3, [r3, #12]
 80081b2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	061b      	lsls	r3, r3, #24
 80081bc:	4948      	ldr	r1, [pc, #288]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	60cb      	str	r3, [r1, #12]
 80081c2:	e018      	b.n	80081f6 <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80081c4:	4b46      	ldr	r3, [pc, #280]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a45      	ldr	r2, [pc, #276]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 80081ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081d0:	f7fc fa6e 	bl	80046b0 <HAL_GetTick>
 80081d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80081d6:	e008      	b.n	80081ea <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80081d8:	f7fc fa6a 	bl	80046b0 <HAL_GetTick>
 80081dc:	4602      	mov	r2, r0
 80081de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e0:	1ad3      	subs	r3, r2, r3
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d901      	bls.n	80081ea <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 80081e6:	2303      	movs	r3, #3
 80081e8:	e212      	b.n	8008610 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80081ea:	4b3d      	ldr	r3, [pc, #244]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d1f0      	bne.n	80081d8 <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f003 0308 	and.w	r3, r3, #8
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d036      	beq.n	8008270 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d019      	beq.n	800823e <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800820a:	4b35      	ldr	r3, [pc, #212]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 800820c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800820e:	4a34      	ldr	r2, [pc, #208]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 8008210:	f043 0301 	orr.w	r3, r3, #1
 8008214:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008216:	f7fc fa4b 	bl	80046b0 <HAL_GetTick>
 800821a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800821c:	e008      	b.n	8008230 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800821e:	f7fc fa47 	bl	80046b0 <HAL_GetTick>
 8008222:	4602      	mov	r2, r0
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	1ad3      	subs	r3, r2, r3
 8008228:	2b02      	cmp	r3, #2
 800822a:	d901      	bls.n	8008230 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 800822c:	2303      	movs	r3, #3
 800822e:	e1ef      	b.n	8008610 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008230:	4b2b      	ldr	r3, [pc, #172]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 8008232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008234:	f003 0302 	and.w	r3, r3, #2
 8008238:	2b00      	cmp	r3, #0
 800823a:	d0f0      	beq.n	800821e <HAL_RCC_OscConfig+0x45a>
 800823c:	e018      	b.n	8008270 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800823e:	4b28      	ldr	r3, [pc, #160]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 8008240:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008242:	4a27      	ldr	r2, [pc, #156]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 8008244:	f023 0301 	bic.w	r3, r3, #1
 8008248:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800824a:	f7fc fa31 	bl	80046b0 <HAL_GetTick>
 800824e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008250:	e008      	b.n	8008264 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008252:	f7fc fa2d 	bl	80046b0 <HAL_GetTick>
 8008256:	4602      	mov	r2, r0
 8008258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800825a:	1ad3      	subs	r3, r2, r3
 800825c:	2b02      	cmp	r3, #2
 800825e:	d901      	bls.n	8008264 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8008260:	2303      	movs	r3, #3
 8008262:	e1d5      	b.n	8008610 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008264:	4b1e      	ldr	r3, [pc, #120]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 8008266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008268:	f003 0302 	and.w	r3, r3, #2
 800826c:	2b00      	cmp	r3, #0
 800826e:	d1f0      	bne.n	8008252 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f003 0320 	and.w	r3, r3, #32
 8008278:	2b00      	cmp	r3, #0
 800827a:	d039      	beq.n	80082f0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	699b      	ldr	r3, [r3, #24]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d019      	beq.n	80082b8 <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008284:	4b16      	ldr	r3, [pc, #88]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a15      	ldr	r2, [pc, #84]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 800828a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800828e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008290:	f7fc fa0e 	bl	80046b0 <HAL_GetTick>
 8008294:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008296:	e008      	b.n	80082aa <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8008298:	f7fc fa0a 	bl	80046b0 <HAL_GetTick>
 800829c:	4602      	mov	r2, r0
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	2b02      	cmp	r3, #2
 80082a4:	d901      	bls.n	80082aa <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e1b2      	b.n	8008610 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80082aa:	4b0d      	ldr	r3, [pc, #52]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d0f0      	beq.n	8008298 <HAL_RCC_OscConfig+0x4d4>
 80082b6:	e01b      	b.n	80082f0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80082b8:	4b09      	ldr	r3, [pc, #36]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a08      	ldr	r2, [pc, #32]	; (80082e0 <HAL_RCC_OscConfig+0x51c>)
 80082be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082c2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80082c4:	f7fc f9f4 	bl	80046b0 <HAL_GetTick>
 80082c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80082ca:	e00b      	b.n	80082e4 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80082cc:	f7fc f9f0 	bl	80046b0 <HAL_GetTick>
 80082d0:	4602      	mov	r2, r0
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	1ad3      	subs	r3, r2, r3
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	d904      	bls.n	80082e4 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 80082da:	2303      	movs	r3, #3
 80082dc:	e198      	b.n	8008610 <HAL_RCC_OscConfig+0x84c>
 80082de:	bf00      	nop
 80082e0:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80082e4:	4ba3      	ldr	r3, [pc, #652]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1ed      	bne.n	80082cc <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f003 0304 	and.w	r3, r3, #4
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	f000 8081 	beq.w	8008400 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80082fe:	4b9e      	ldr	r3, [pc, #632]	; (8008578 <HAL_RCC_OscConfig+0x7b4>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a9d      	ldr	r2, [pc, #628]	; (8008578 <HAL_RCC_OscConfig+0x7b4>)
 8008304:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008308:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800830a:	f7fc f9d1 	bl	80046b0 <HAL_GetTick>
 800830e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008310:	e008      	b.n	8008324 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8008312:	f7fc f9cd 	bl	80046b0 <HAL_GetTick>
 8008316:	4602      	mov	r2, r0
 8008318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800831a:	1ad3      	subs	r3, r2, r3
 800831c:	2b64      	cmp	r3, #100	; 0x64
 800831e:	d901      	bls.n	8008324 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8008320:	2303      	movs	r3, #3
 8008322:	e175      	b.n	8008610 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008324:	4b94      	ldr	r3, [pc, #592]	; (8008578 <HAL_RCC_OscConfig+0x7b4>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800832c:	2b00      	cmp	r3, #0
 800832e:	d0f0      	beq.n	8008312 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	689b      	ldr	r3, [r3, #8]
 8008334:	2b01      	cmp	r3, #1
 8008336:	d106      	bne.n	8008346 <HAL_RCC_OscConfig+0x582>
 8008338:	4b8e      	ldr	r3, [pc, #568]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 800833a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800833c:	4a8d      	ldr	r2, [pc, #564]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 800833e:	f043 0301 	orr.w	r3, r3, #1
 8008342:	6713      	str	r3, [r2, #112]	; 0x70
 8008344:	e02d      	b.n	80083a2 <HAL_RCC_OscConfig+0x5de>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	689b      	ldr	r3, [r3, #8]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d10c      	bne.n	8008368 <HAL_RCC_OscConfig+0x5a4>
 800834e:	4b89      	ldr	r3, [pc, #548]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 8008350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008352:	4a88      	ldr	r2, [pc, #544]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 8008354:	f023 0301 	bic.w	r3, r3, #1
 8008358:	6713      	str	r3, [r2, #112]	; 0x70
 800835a:	4b86      	ldr	r3, [pc, #536]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 800835c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800835e:	4a85      	ldr	r2, [pc, #532]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 8008360:	f023 0304 	bic.w	r3, r3, #4
 8008364:	6713      	str	r3, [r2, #112]	; 0x70
 8008366:	e01c      	b.n	80083a2 <HAL_RCC_OscConfig+0x5de>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	689b      	ldr	r3, [r3, #8]
 800836c:	2b05      	cmp	r3, #5
 800836e:	d10c      	bne.n	800838a <HAL_RCC_OscConfig+0x5c6>
 8008370:	4b80      	ldr	r3, [pc, #512]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 8008372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008374:	4a7f      	ldr	r2, [pc, #508]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 8008376:	f043 0304 	orr.w	r3, r3, #4
 800837a:	6713      	str	r3, [r2, #112]	; 0x70
 800837c:	4b7d      	ldr	r3, [pc, #500]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 800837e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008380:	4a7c      	ldr	r2, [pc, #496]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 8008382:	f043 0301 	orr.w	r3, r3, #1
 8008386:	6713      	str	r3, [r2, #112]	; 0x70
 8008388:	e00b      	b.n	80083a2 <HAL_RCC_OscConfig+0x5de>
 800838a:	4b7a      	ldr	r3, [pc, #488]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 800838c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800838e:	4a79      	ldr	r2, [pc, #484]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 8008390:	f023 0301 	bic.w	r3, r3, #1
 8008394:	6713      	str	r3, [r2, #112]	; 0x70
 8008396:	4b77      	ldr	r3, [pc, #476]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 8008398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800839a:	4a76      	ldr	r2, [pc, #472]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 800839c:	f023 0304 	bic.w	r3, r3, #4
 80083a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d015      	beq.n	80083d6 <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083aa:	f7fc f981 	bl	80046b0 <HAL_GetTick>
 80083ae:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083b0:	e00a      	b.n	80083c8 <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083b2:	f7fc f97d 	bl	80046b0 <HAL_GetTick>
 80083b6:	4602      	mov	r2, r0
 80083b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d901      	bls.n	80083c8 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 80083c4:	2303      	movs	r3, #3
 80083c6:	e123      	b.n	8008610 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80083c8:	4b6a      	ldr	r3, [pc, #424]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 80083ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083cc:	f003 0302 	and.w	r3, r3, #2
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d0ee      	beq.n	80083b2 <HAL_RCC_OscConfig+0x5ee>
 80083d4:	e014      	b.n	8008400 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80083d6:	f7fc f96b 	bl	80046b0 <HAL_GetTick>
 80083da:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80083dc:	e00a      	b.n	80083f4 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80083de:	f7fc f967 	bl	80046b0 <HAL_GetTick>
 80083e2:	4602      	mov	r2, r0
 80083e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083e6:	1ad3      	subs	r3, r2, r3
 80083e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d901      	bls.n	80083f4 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 80083f0:	2303      	movs	r3, #3
 80083f2:	e10d      	b.n	8008610 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80083f4:	4b5f      	ldr	r3, [pc, #380]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 80083f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083f8:	f003 0302 	and.w	r3, r3, #2
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d1ee      	bne.n	80083de <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008404:	2b00      	cmp	r3, #0
 8008406:	f000 8102 	beq.w	800860e <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800840a:	4b5a      	ldr	r3, [pc, #360]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 800840c:	691b      	ldr	r3, [r3, #16]
 800840e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008412:	2b18      	cmp	r3, #24
 8008414:	f000 80bd 	beq.w	8008592 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800841c:	2b02      	cmp	r3, #2
 800841e:	f040 8095 	bne.w	800854c <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008422:	4b54      	ldr	r3, [pc, #336]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	4a53      	ldr	r2, [pc, #332]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 8008428:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800842c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800842e:	f7fc f93f 	bl	80046b0 <HAL_GetTick>
 8008432:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008434:	e008      	b.n	8008448 <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008436:	f7fc f93b 	bl	80046b0 <HAL_GetTick>
 800843a:	4602      	mov	r2, r0
 800843c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800843e:	1ad3      	subs	r3, r2, r3
 8008440:	2b02      	cmp	r3, #2
 8008442:	d901      	bls.n	8008448 <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8008444:	2303      	movs	r3, #3
 8008446:	e0e3      	b.n	8008610 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008448:	4b4a      	ldr	r3, [pc, #296]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008450:	2b00      	cmp	r3, #0
 8008452:	d1f0      	bne.n	8008436 <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008454:	4b47      	ldr	r3, [pc, #284]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 8008456:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008458:	4b48      	ldr	r3, [pc, #288]	; (800857c <HAL_RCC_OscConfig+0x7b8>)
 800845a:	4013      	ands	r3, r2
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008464:	0112      	lsls	r2, r2, #4
 8008466:	430a      	orrs	r2, r1
 8008468:	4942      	ldr	r1, [pc, #264]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 800846a:	4313      	orrs	r3, r2
 800846c:	628b      	str	r3, [r1, #40]	; 0x28
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008472:	3b01      	subs	r3, #1
 8008474:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800847c:	3b01      	subs	r3, #1
 800847e:	025b      	lsls	r3, r3, #9
 8008480:	b29b      	uxth	r3, r3
 8008482:	431a      	orrs	r2, r3
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008488:	3b01      	subs	r3, #1
 800848a:	041b      	lsls	r3, r3, #16
 800848c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008490:	431a      	orrs	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008496:	3b01      	subs	r3, #1
 8008498:	061b      	lsls	r3, r3, #24
 800849a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800849e:	4935      	ldr	r1, [pc, #212]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 80084a0:	4313      	orrs	r3, r2
 80084a2:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 80084a4:	4b33      	ldr	r3, [pc, #204]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 80084a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084a8:	4a32      	ldr	r2, [pc, #200]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 80084aa:	f023 0301 	bic.w	r3, r3, #1
 80084ae:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80084b0:	4b30      	ldr	r3, [pc, #192]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 80084b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80084b4:	4b32      	ldr	r3, [pc, #200]	; (8008580 <HAL_RCC_OscConfig+0x7bc>)
 80084b6:	4013      	ands	r3, r2
 80084b8:	687a      	ldr	r2, [r7, #4]
 80084ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80084bc:	00d2      	lsls	r2, r2, #3
 80084be:	492d      	ldr	r1, [pc, #180]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 80084c0:	4313      	orrs	r3, r2
 80084c2:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80084c4:	4b2b      	ldr	r3, [pc, #172]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 80084c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084c8:	f023 020c 	bic.w	r2, r3, #12
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d0:	4928      	ldr	r1, [pc, #160]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 80084d2:	4313      	orrs	r3, r2
 80084d4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80084d6:	4b27      	ldr	r3, [pc, #156]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 80084d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084da:	f023 0202 	bic.w	r2, r3, #2
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80084e2:	4924      	ldr	r1, [pc, #144]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 80084e4:	4313      	orrs	r3, r2
 80084e6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80084e8:	4b22      	ldr	r3, [pc, #136]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 80084ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ec:	4a21      	ldr	r2, [pc, #132]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 80084ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084f4:	4b1f      	ldr	r3, [pc, #124]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 80084f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f8:	4a1e      	ldr	r2, [pc, #120]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 80084fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008500:	4b1c      	ldr	r3, [pc, #112]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 8008502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008504:	4a1b      	ldr	r2, [pc, #108]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 8008506:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800850a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800850c:	4b19      	ldr	r3, [pc, #100]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 800850e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008510:	4a18      	ldr	r2, [pc, #96]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 8008512:	f043 0301 	orr.w	r3, r3, #1
 8008516:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008518:	4b16      	ldr	r3, [pc, #88]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a15      	ldr	r2, [pc, #84]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 800851e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008522:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008524:	f7fc f8c4 	bl	80046b0 <HAL_GetTick>
 8008528:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800852a:	e008      	b.n	800853e <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800852c:	f7fc f8c0 	bl	80046b0 <HAL_GetTick>
 8008530:	4602      	mov	r2, r0
 8008532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008534:	1ad3      	subs	r3, r2, r3
 8008536:	2b02      	cmp	r3, #2
 8008538:	d901      	bls.n	800853e <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800853a:	2303      	movs	r3, #3
 800853c:	e068      	b.n	8008610 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800853e:	4b0d      	ldr	r3, [pc, #52]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008546:	2b00      	cmp	r3, #0
 8008548:	d0f0      	beq.n	800852c <HAL_RCC_OscConfig+0x768>
 800854a:	e060      	b.n	800860e <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800854c:	4b09      	ldr	r3, [pc, #36]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4a08      	ldr	r2, [pc, #32]	; (8008574 <HAL_RCC_OscConfig+0x7b0>)
 8008552:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008558:	f7fc f8aa 	bl	80046b0 <HAL_GetTick>
 800855c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800855e:	e011      	b.n	8008584 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008560:	f7fc f8a6 	bl	80046b0 <HAL_GetTick>
 8008564:	4602      	mov	r2, r0
 8008566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008568:	1ad3      	subs	r3, r2, r3
 800856a:	2b02      	cmp	r3, #2
 800856c:	d90a      	bls.n	8008584 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 800856e:	2303      	movs	r3, #3
 8008570:	e04e      	b.n	8008610 <HAL_RCC_OscConfig+0x84c>
 8008572:	bf00      	nop
 8008574:	58024400 	.word	0x58024400
 8008578:	58024800 	.word	0x58024800
 800857c:	fffffc0c 	.word	0xfffffc0c
 8008580:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008584:	4b24      	ldr	r3, [pc, #144]	; (8008618 <HAL_RCC_OscConfig+0x854>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d1e7      	bne.n	8008560 <HAL_RCC_OscConfig+0x79c>
 8008590:	e03d      	b.n	800860e <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008592:	4b21      	ldr	r3, [pc, #132]	; (8008618 <HAL_RCC_OscConfig+0x854>)
 8008594:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008596:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008598:	4b1f      	ldr	r3, [pc, #124]	; (8008618 <HAL_RCC_OscConfig+0x854>)
 800859a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800859c:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d031      	beq.n	800860a <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	f003 0203 	and.w	r2, r3, #3
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d12a      	bne.n	800860a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	091b      	lsrs	r3, r3, #4
 80085b8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d122      	bne.n	800860a <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ce:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d11a      	bne.n	800860a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	0a5b      	lsrs	r3, r3, #9
 80085d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80085e0:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80085e2:	429a      	cmp	r2, r3
 80085e4:	d111      	bne.n	800860a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	0c1b      	lsrs	r3, r3, #16
 80085ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085f2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80085f4:	429a      	cmp	r2, r3
 80085f6:	d108      	bne.n	800860a <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	0e1b      	lsrs	r3, r3, #24
 80085fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008604:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008606:	429a      	cmp	r2, r3
 8008608:	d001      	beq.n	800860e <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e000      	b.n	8008610 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3730      	adds	r7, #48	; 0x30
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}
 8008618:	58024400 	.word	0x58024400

0800861c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b086      	sub	sp, #24
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d101      	bne.n	8008630 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	e19c      	b.n	800896a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008630:	4b8a      	ldr	r3, [pc, #552]	; (800885c <HAL_RCC_ClockConfig+0x240>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 030f 	and.w	r3, r3, #15
 8008638:	683a      	ldr	r2, [r7, #0]
 800863a:	429a      	cmp	r2, r3
 800863c:	d910      	bls.n	8008660 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800863e:	4b87      	ldr	r3, [pc, #540]	; (800885c <HAL_RCC_ClockConfig+0x240>)
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f023 020f 	bic.w	r2, r3, #15
 8008646:	4985      	ldr	r1, [pc, #532]	; (800885c <HAL_RCC_ClockConfig+0x240>)
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	4313      	orrs	r3, r2
 800864c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800864e:	4b83      	ldr	r3, [pc, #524]	; (800885c <HAL_RCC_ClockConfig+0x240>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f003 030f 	and.w	r3, r3, #15
 8008656:	683a      	ldr	r2, [r7, #0]
 8008658:	429a      	cmp	r2, r3
 800865a:	d001      	beq.n	8008660 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800865c:	2301      	movs	r3, #1
 800865e:	e184      	b.n	800896a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	f003 0304 	and.w	r3, r3, #4
 8008668:	2b00      	cmp	r3, #0
 800866a:	d010      	beq.n	800868e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	691a      	ldr	r2, [r3, #16]
 8008670:	4b7b      	ldr	r3, [pc, #492]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008678:	429a      	cmp	r2, r3
 800867a:	d908      	bls.n	800868e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800867c:	4b78      	ldr	r3, [pc, #480]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 800867e:	699b      	ldr	r3, [r3, #24]
 8008680:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	691b      	ldr	r3, [r3, #16]
 8008688:	4975      	ldr	r1, [pc, #468]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 800868a:	4313      	orrs	r3, r2
 800868c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f003 0308 	and.w	r3, r3, #8
 8008696:	2b00      	cmp	r3, #0
 8008698:	d010      	beq.n	80086bc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	695a      	ldr	r2, [r3, #20]
 800869e:	4b70      	ldr	r3, [pc, #448]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 80086a0:	69db      	ldr	r3, [r3, #28]
 80086a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d908      	bls.n	80086bc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80086aa:	4b6d      	ldr	r3, [pc, #436]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 80086ac:	69db      	ldr	r3, [r3, #28]
 80086ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	496a      	ldr	r1, [pc, #424]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 80086b8:	4313      	orrs	r3, r2
 80086ba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f003 0310 	and.w	r3, r3, #16
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d010      	beq.n	80086ea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	699a      	ldr	r2, [r3, #24]
 80086cc:	4b64      	ldr	r3, [pc, #400]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 80086ce:	69db      	ldr	r3, [r3, #28]
 80086d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80086d4:	429a      	cmp	r2, r3
 80086d6:	d908      	bls.n	80086ea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80086d8:	4b61      	ldr	r3, [pc, #388]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 80086da:	69db      	ldr	r3, [r3, #28]
 80086dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	699b      	ldr	r3, [r3, #24]
 80086e4:	495e      	ldr	r1, [pc, #376]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 0320 	and.w	r3, r3, #32
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d010      	beq.n	8008718 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	69da      	ldr	r2, [r3, #28]
 80086fa:	4b59      	ldr	r3, [pc, #356]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 80086fc:	6a1b      	ldr	r3, [r3, #32]
 80086fe:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008702:	429a      	cmp	r2, r3
 8008704:	d908      	bls.n	8008718 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8008706:	4b56      	ldr	r3, [pc, #344]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 8008708:	6a1b      	ldr	r3, [r3, #32]
 800870a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	69db      	ldr	r3, [r3, #28]
 8008712:	4953      	ldr	r1, [pc, #332]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 8008714:	4313      	orrs	r3, r2
 8008716:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f003 0302 	and.w	r3, r3, #2
 8008720:	2b00      	cmp	r3, #0
 8008722:	d010      	beq.n	8008746 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	68da      	ldr	r2, [r3, #12]
 8008728:	4b4d      	ldr	r3, [pc, #308]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 800872a:	699b      	ldr	r3, [r3, #24]
 800872c:	f003 030f 	and.w	r3, r3, #15
 8008730:	429a      	cmp	r2, r3
 8008732:	d908      	bls.n	8008746 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008734:	4b4a      	ldr	r3, [pc, #296]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 8008736:	699b      	ldr	r3, [r3, #24]
 8008738:	f023 020f 	bic.w	r2, r3, #15
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	68db      	ldr	r3, [r3, #12]
 8008740:	4947      	ldr	r1, [pc, #284]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 8008742:	4313      	orrs	r3, r2
 8008744:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f003 0301 	and.w	r3, r3, #1
 800874e:	2b00      	cmp	r3, #0
 8008750:	d055      	beq.n	80087fe <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008752:	4b43      	ldr	r3, [pc, #268]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 8008754:	699b      	ldr	r3, [r3, #24]
 8008756:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	689b      	ldr	r3, [r3, #8]
 800875e:	4940      	ldr	r1, [pc, #256]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 8008760:	4313      	orrs	r3, r2
 8008762:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	2b02      	cmp	r3, #2
 800876a:	d107      	bne.n	800877c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800876c:	4b3c      	ldr	r3, [pc, #240]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008774:	2b00      	cmp	r3, #0
 8008776:	d121      	bne.n	80087bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e0f6      	b.n	800896a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	685b      	ldr	r3, [r3, #4]
 8008780:	2b03      	cmp	r3, #3
 8008782:	d107      	bne.n	8008794 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008784:	4b36      	ldr	r3, [pc, #216]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d115      	bne.n	80087bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	e0ea      	b.n	800896a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	2b01      	cmp	r3, #1
 800879a:	d107      	bne.n	80087ac <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800879c:	4b30      	ldr	r3, [pc, #192]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d109      	bne.n	80087bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80087a8:	2301      	movs	r3, #1
 80087aa:	e0de      	b.n	800896a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80087ac:	4b2c      	ldr	r3, [pc, #176]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 0304 	and.w	r3, r3, #4
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d101      	bne.n	80087bc <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80087b8:	2301      	movs	r3, #1
 80087ba:	e0d6      	b.n	800896a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80087bc:	4b28      	ldr	r3, [pc, #160]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 80087be:	691b      	ldr	r3, [r3, #16]
 80087c0:	f023 0207 	bic.w	r2, r3, #7
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	4925      	ldr	r1, [pc, #148]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 80087ca:	4313      	orrs	r3, r2
 80087cc:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087ce:	f7fb ff6f 	bl	80046b0 <HAL_GetTick>
 80087d2:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087d4:	e00a      	b.n	80087ec <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80087d6:	f7fb ff6b 	bl	80046b0 <HAL_GetTick>
 80087da:	4602      	mov	r2, r0
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	1ad3      	subs	r3, r2, r3
 80087e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d901      	bls.n	80087ec <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80087e8:	2303      	movs	r3, #3
 80087ea:	e0be      	b.n	800896a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80087ec:	4b1c      	ldr	r3, [pc, #112]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 80087ee:	691b      	ldr	r3, [r3, #16]
 80087f0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	685b      	ldr	r3, [r3, #4]
 80087f8:	00db      	lsls	r3, r3, #3
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d1eb      	bne.n	80087d6 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f003 0302 	and.w	r3, r3, #2
 8008806:	2b00      	cmp	r3, #0
 8008808:	d010      	beq.n	800882c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	68da      	ldr	r2, [r3, #12]
 800880e:	4b14      	ldr	r3, [pc, #80]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 8008810:	699b      	ldr	r3, [r3, #24]
 8008812:	f003 030f 	and.w	r3, r3, #15
 8008816:	429a      	cmp	r2, r3
 8008818:	d208      	bcs.n	800882c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800881a:	4b11      	ldr	r3, [pc, #68]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 800881c:	699b      	ldr	r3, [r3, #24]
 800881e:	f023 020f 	bic.w	r2, r3, #15
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	68db      	ldr	r3, [r3, #12]
 8008826:	490e      	ldr	r1, [pc, #56]	; (8008860 <HAL_RCC_ClockConfig+0x244>)
 8008828:	4313      	orrs	r3, r2
 800882a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800882c:	4b0b      	ldr	r3, [pc, #44]	; (800885c <HAL_RCC_ClockConfig+0x240>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 030f 	and.w	r3, r3, #15
 8008834:	683a      	ldr	r2, [r7, #0]
 8008836:	429a      	cmp	r2, r3
 8008838:	d214      	bcs.n	8008864 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800883a:	4b08      	ldr	r3, [pc, #32]	; (800885c <HAL_RCC_ClockConfig+0x240>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f023 020f 	bic.w	r2, r3, #15
 8008842:	4906      	ldr	r1, [pc, #24]	; (800885c <HAL_RCC_ClockConfig+0x240>)
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	4313      	orrs	r3, r2
 8008848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800884a:	4b04      	ldr	r3, [pc, #16]	; (800885c <HAL_RCC_ClockConfig+0x240>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	f003 030f 	and.w	r3, r3, #15
 8008852:	683a      	ldr	r2, [r7, #0]
 8008854:	429a      	cmp	r2, r3
 8008856:	d005      	beq.n	8008864 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	e086      	b.n	800896a <HAL_RCC_ClockConfig+0x34e>
 800885c:	52002000 	.word	0x52002000
 8008860:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f003 0304 	and.w	r3, r3, #4
 800886c:	2b00      	cmp	r3, #0
 800886e:	d010      	beq.n	8008892 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	691a      	ldr	r2, [r3, #16]
 8008874:	4b3f      	ldr	r3, [pc, #252]	; (8008974 <HAL_RCC_ClockConfig+0x358>)
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800887c:	429a      	cmp	r2, r3
 800887e:	d208      	bcs.n	8008892 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008880:	4b3c      	ldr	r3, [pc, #240]	; (8008974 <HAL_RCC_ClockConfig+0x358>)
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	4939      	ldr	r1, [pc, #228]	; (8008974 <HAL_RCC_ClockConfig+0x358>)
 800888e:	4313      	orrs	r3, r2
 8008890:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 0308 	and.w	r3, r3, #8
 800889a:	2b00      	cmp	r3, #0
 800889c:	d010      	beq.n	80088c0 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	695a      	ldr	r2, [r3, #20]
 80088a2:	4b34      	ldr	r3, [pc, #208]	; (8008974 <HAL_RCC_ClockConfig+0x358>)
 80088a4:	69db      	ldr	r3, [r3, #28]
 80088a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80088aa:	429a      	cmp	r2, r3
 80088ac:	d208      	bcs.n	80088c0 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80088ae:	4b31      	ldr	r3, [pc, #196]	; (8008974 <HAL_RCC_ClockConfig+0x358>)
 80088b0:	69db      	ldr	r3, [r3, #28]
 80088b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	695b      	ldr	r3, [r3, #20]
 80088ba:	492e      	ldr	r1, [pc, #184]	; (8008974 <HAL_RCC_ClockConfig+0x358>)
 80088bc:	4313      	orrs	r3, r2
 80088be:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f003 0310 	and.w	r3, r3, #16
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d010      	beq.n	80088ee <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	699a      	ldr	r2, [r3, #24]
 80088d0:	4b28      	ldr	r3, [pc, #160]	; (8008974 <HAL_RCC_ClockConfig+0x358>)
 80088d2:	69db      	ldr	r3, [r3, #28]
 80088d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80088d8:	429a      	cmp	r2, r3
 80088da:	d208      	bcs.n	80088ee <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80088dc:	4b25      	ldr	r3, [pc, #148]	; (8008974 <HAL_RCC_ClockConfig+0x358>)
 80088de:	69db      	ldr	r3, [r3, #28]
 80088e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	699b      	ldr	r3, [r3, #24]
 80088e8:	4922      	ldr	r1, [pc, #136]	; (8008974 <HAL_RCC_ClockConfig+0x358>)
 80088ea:	4313      	orrs	r3, r2
 80088ec:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f003 0320 	and.w	r3, r3, #32
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d010      	beq.n	800891c <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	69da      	ldr	r2, [r3, #28]
 80088fe:	4b1d      	ldr	r3, [pc, #116]	; (8008974 <HAL_RCC_ClockConfig+0x358>)
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008906:	429a      	cmp	r2, r3
 8008908:	d208      	bcs.n	800891c <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800890a:	4b1a      	ldr	r3, [pc, #104]	; (8008974 <HAL_RCC_ClockConfig+0x358>)
 800890c:	6a1b      	ldr	r3, [r3, #32]
 800890e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	69db      	ldr	r3, [r3, #28]
 8008916:	4917      	ldr	r1, [pc, #92]	; (8008974 <HAL_RCC_ClockConfig+0x358>)
 8008918:	4313      	orrs	r3, r2
 800891a:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800891c:	f000 f834 	bl	8008988 <HAL_RCC_GetSysClockFreq>
 8008920:	4602      	mov	r2, r0
 8008922:	4b14      	ldr	r3, [pc, #80]	; (8008974 <HAL_RCC_ClockConfig+0x358>)
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	0a1b      	lsrs	r3, r3, #8
 8008928:	f003 030f 	and.w	r3, r3, #15
 800892c:	4912      	ldr	r1, [pc, #72]	; (8008978 <HAL_RCC_ClockConfig+0x35c>)
 800892e:	5ccb      	ldrb	r3, [r1, r3]
 8008930:	f003 031f 	and.w	r3, r3, #31
 8008934:	fa22 f303 	lsr.w	r3, r2, r3
 8008938:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800893a:	4b0e      	ldr	r3, [pc, #56]	; (8008974 <HAL_RCC_ClockConfig+0x358>)
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	f003 030f 	and.w	r3, r3, #15
 8008942:	4a0d      	ldr	r2, [pc, #52]	; (8008978 <HAL_RCC_ClockConfig+0x35c>)
 8008944:	5cd3      	ldrb	r3, [r2, r3]
 8008946:	f003 031f 	and.w	r3, r3, #31
 800894a:	693a      	ldr	r2, [r7, #16]
 800894c:	fa22 f303 	lsr.w	r3, r2, r3
 8008950:	4a0a      	ldr	r2, [pc, #40]	; (800897c <HAL_RCC_ClockConfig+0x360>)
 8008952:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008954:	4a0a      	ldr	r2, [pc, #40]	; (8008980 <HAL_RCC_ClockConfig+0x364>)
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800895a:	4b0a      	ldr	r3, [pc, #40]	; (8008984 <HAL_RCC_ClockConfig+0x368>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4618      	mov	r0, r3
 8008960:	f7fb fe5c 	bl	800461c <HAL_InitTick>
 8008964:	4603      	mov	r3, r0
 8008966:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008968:	7bfb      	ldrb	r3, [r7, #15]
}
 800896a:	4618      	mov	r0, r3
 800896c:	3718      	adds	r7, #24
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	58024400 	.word	0x58024400
 8008978:	08010f88 	.word	0x08010f88
 800897c:	2400001c 	.word	0x2400001c
 8008980:	24000018 	.word	0x24000018
 8008984:	24000020 	.word	0x24000020

08008988 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008988:	b480      	push	{r7}
 800898a:	b089      	sub	sp, #36	; 0x24
 800898c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800898e:	4bb3      	ldr	r3, [pc, #716]	; (8008c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008990:	691b      	ldr	r3, [r3, #16]
 8008992:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008996:	2b18      	cmp	r3, #24
 8008998:	f200 8155 	bhi.w	8008c46 <HAL_RCC_GetSysClockFreq+0x2be>
 800899c:	a201      	add	r2, pc, #4	; (adr r2, 80089a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800899e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a2:	bf00      	nop
 80089a4:	08008a09 	.word	0x08008a09
 80089a8:	08008c47 	.word	0x08008c47
 80089ac:	08008c47 	.word	0x08008c47
 80089b0:	08008c47 	.word	0x08008c47
 80089b4:	08008c47 	.word	0x08008c47
 80089b8:	08008c47 	.word	0x08008c47
 80089bc:	08008c47 	.word	0x08008c47
 80089c0:	08008c47 	.word	0x08008c47
 80089c4:	08008a2f 	.word	0x08008a2f
 80089c8:	08008c47 	.word	0x08008c47
 80089cc:	08008c47 	.word	0x08008c47
 80089d0:	08008c47 	.word	0x08008c47
 80089d4:	08008c47 	.word	0x08008c47
 80089d8:	08008c47 	.word	0x08008c47
 80089dc:	08008c47 	.word	0x08008c47
 80089e0:	08008c47 	.word	0x08008c47
 80089e4:	08008a35 	.word	0x08008a35
 80089e8:	08008c47 	.word	0x08008c47
 80089ec:	08008c47 	.word	0x08008c47
 80089f0:	08008c47 	.word	0x08008c47
 80089f4:	08008c47 	.word	0x08008c47
 80089f8:	08008c47 	.word	0x08008c47
 80089fc:	08008c47 	.word	0x08008c47
 8008a00:	08008c47 	.word	0x08008c47
 8008a04:	08008a3b 	.word	0x08008a3b
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a08:	4b94      	ldr	r3, [pc, #592]	; (8008c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f003 0320 	and.w	r3, r3, #32
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d009      	beq.n	8008a28 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a14:	4b91      	ldr	r3, [pc, #580]	; (8008c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	08db      	lsrs	r3, r3, #3
 8008a1a:	f003 0303 	and.w	r3, r3, #3
 8008a1e:	4a90      	ldr	r2, [pc, #576]	; (8008c60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a20:	fa22 f303 	lsr.w	r3, r2, r3
 8008a24:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8008a26:	e111      	b.n	8008c4c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008a28:	4b8d      	ldr	r3, [pc, #564]	; (8008c60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008a2a:	61bb      	str	r3, [r7, #24]
    break;
 8008a2c:	e10e      	b.n	8008c4c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008a2e:	4b8d      	ldr	r3, [pc, #564]	; (8008c64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008a30:	61bb      	str	r3, [r7, #24]
    break;
 8008a32:	e10b      	b.n	8008c4c <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8008a34:	4b8c      	ldr	r3, [pc, #560]	; (8008c68 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8008a36:	61bb      	str	r3, [r7, #24]
    break;
 8008a38:	e108      	b.n	8008c4c <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008a3a:	4b88      	ldr	r3, [pc, #544]	; (8008c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a3e:	f003 0303 	and.w	r3, r3, #3
 8008a42:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8008a44:	4b85      	ldr	r3, [pc, #532]	; (8008c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a48:	091b      	lsrs	r3, r3, #4
 8008a4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a4e:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008a50:	4b82      	ldr	r3, [pc, #520]	; (8008c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a54:	f003 0301 	and.w	r3, r3, #1
 8008a58:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008a5a:	4b80      	ldr	r3, [pc, #512]	; (8008c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a5e:	08db      	lsrs	r3, r3, #3
 8008a60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a64:	68fa      	ldr	r2, [r7, #12]
 8008a66:	fb02 f303 	mul.w	r3, r2, r3
 8008a6a:	ee07 3a90 	vmov	s15, r3
 8008a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a72:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	f000 80e1 	beq.w	8008c40 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	2b02      	cmp	r3, #2
 8008a82:	f000 8083 	beq.w	8008b8c <HAL_RCC_GetSysClockFreq+0x204>
 8008a86:	697b      	ldr	r3, [r7, #20]
 8008a88:	2b02      	cmp	r3, #2
 8008a8a:	f200 80a1 	bhi.w	8008bd0 <HAL_RCC_GetSysClockFreq+0x248>
 8008a8e:	697b      	ldr	r3, [r7, #20]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d003      	beq.n	8008a9c <HAL_RCC_GetSysClockFreq+0x114>
 8008a94:	697b      	ldr	r3, [r7, #20]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d056      	beq.n	8008b48 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008a9a:	e099      	b.n	8008bd0 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a9c:	4b6f      	ldr	r3, [pc, #444]	; (8008c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 0320 	and.w	r3, r3, #32
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d02d      	beq.n	8008b04 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008aa8:	4b6c      	ldr	r3, [pc, #432]	; (8008c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	08db      	lsrs	r3, r3, #3
 8008aae:	f003 0303 	and.w	r3, r3, #3
 8008ab2:	4a6b      	ldr	r2, [pc, #428]	; (8008c60 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8008ab8:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	ee07 3a90 	vmov	s15, r3
 8008ac0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	ee07 3a90 	vmov	s15, r3
 8008aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ad2:	4b62      	ldr	r3, [pc, #392]	; (8008c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ada:	ee07 3a90 	vmov	s15, r3
 8008ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ae2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ae6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008c6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008af2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008afe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8008b02:	e087      	b.n	8008c14 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	ee07 3a90 	vmov	s15, r3
 8008b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b0e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008c70 <HAL_RCC_GetSysClockFreq+0x2e8>
 8008b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b16:	4b51      	ldr	r3, [pc, #324]	; (8008c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b1e:	ee07 3a90 	vmov	s15, r3
 8008b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b26:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b2a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008c6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b46:	e065      	b.n	8008c14 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	ee07 3a90 	vmov	s15, r3
 8008b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b52:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008c74 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b5a:	4b40      	ldr	r3, [pc, #256]	; (8008c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b62:	ee07 3a90 	vmov	s15, r3
 8008b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b6e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008c6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b8a:	e043      	b.n	8008c14 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	ee07 3a90 	vmov	s15, r3
 8008b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b96:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008c78 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b9e:	4b2f      	ldr	r3, [pc, #188]	; (8008c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ba6:	ee07 3a90 	vmov	s15, r3
 8008baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bae:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bb2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008c6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008bbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bce:	e021      	b.n	8008c14 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	ee07 3a90 	vmov	s15, r3
 8008bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bda:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008c74 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008be2:	4b1e      	ldr	r3, [pc, #120]	; (8008c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008bea:	ee07 3a90 	vmov	s15, r3
 8008bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bf2:	ed97 6a02 	vldr	s12, [r7, #8]
 8008bf6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008c6c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c12:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8008c14:	4b11      	ldr	r3, [pc, #68]	; (8008c5c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c18:	0a5b      	lsrs	r3, r3, #9
 8008c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c1e:	3301      	adds	r3, #1
 8008c20:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	ee07 3a90 	vmov	s15, r3
 8008c28:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008c2c:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c38:	ee17 3a90 	vmov	r3, s15
 8008c3c:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008c3e:	e005      	b.n	8008c4c <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008c40:	2300      	movs	r3, #0
 8008c42:	61bb      	str	r3, [r7, #24]
    break;
 8008c44:	e002      	b.n	8008c4c <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8008c46:	4b07      	ldr	r3, [pc, #28]	; (8008c64 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008c48:	61bb      	str	r3, [r7, #24]
    break;
 8008c4a:	bf00      	nop
  }

  return sysclockfreq;
 8008c4c:	69bb      	ldr	r3, [r7, #24]
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	3724      	adds	r7, #36	; 0x24
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr
 8008c5a:	bf00      	nop
 8008c5c:	58024400 	.word	0x58024400
 8008c60:	03d09000 	.word	0x03d09000
 8008c64:	003d0900 	.word	0x003d0900
 8008c68:	02dc6c00 	.word	0x02dc6c00
 8008c6c:	46000000 	.word	0x46000000
 8008c70:	4c742400 	.word	0x4c742400
 8008c74:	4a742400 	.word	0x4a742400
 8008c78:	4c371b00 	.word	0x4c371b00

08008c7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b082      	sub	sp, #8
 8008c80:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008c82:	f7ff fe81 	bl	8008988 <HAL_RCC_GetSysClockFreq>
 8008c86:	4602      	mov	r2, r0
 8008c88:	4b10      	ldr	r3, [pc, #64]	; (8008ccc <HAL_RCC_GetHCLKFreq+0x50>)
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	0a1b      	lsrs	r3, r3, #8
 8008c8e:	f003 030f 	and.w	r3, r3, #15
 8008c92:	490f      	ldr	r1, [pc, #60]	; (8008cd0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008c94:	5ccb      	ldrb	r3, [r1, r3]
 8008c96:	f003 031f 	and.w	r3, r3, #31
 8008c9a:	fa22 f303 	lsr.w	r3, r2, r3
 8008c9e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008ca0:	4b0a      	ldr	r3, [pc, #40]	; (8008ccc <HAL_RCC_GetHCLKFreq+0x50>)
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	f003 030f 	and.w	r3, r3, #15
 8008ca8:	4a09      	ldr	r2, [pc, #36]	; (8008cd0 <HAL_RCC_GetHCLKFreq+0x54>)
 8008caa:	5cd3      	ldrb	r3, [r2, r3]
 8008cac:	f003 031f 	and.w	r3, r3, #31
 8008cb0:	687a      	ldr	r2, [r7, #4]
 8008cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8008cb6:	4a07      	ldr	r2, [pc, #28]	; (8008cd4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008cb8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008cba:	4a07      	ldr	r2, [pc, #28]	; (8008cd8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008cc0:	4b04      	ldr	r3, [pc, #16]	; (8008cd4 <HAL_RCC_GetHCLKFreq+0x58>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
}
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	3708      	adds	r7, #8
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	bd80      	pop	{r7, pc}
 8008ccc:	58024400 	.word	0x58024400
 8008cd0:	08010f88 	.word	0x08010f88
 8008cd4:	2400001c 	.word	0x2400001c
 8008cd8:	24000018 	.word	0x24000018

08008cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8008ce0:	f7ff ffcc 	bl	8008c7c <HAL_RCC_GetHCLKFreq>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	4b06      	ldr	r3, [pc, #24]	; (8008d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ce8:	69db      	ldr	r3, [r3, #28]
 8008cea:	091b      	lsrs	r3, r3, #4
 8008cec:	f003 0307 	and.w	r3, r3, #7
 8008cf0:	4904      	ldr	r1, [pc, #16]	; (8008d04 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008cf2:	5ccb      	ldrb	r3, [r1, r3]
 8008cf4:	f003 031f 	and.w	r3, r3, #31
 8008cf8:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	bd80      	pop	{r7, pc}
 8008d00:	58024400 	.word	0x58024400
 8008d04:	08010f88 	.word	0x08010f88

08008d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8008d0c:	f7ff ffb6 	bl	8008c7c <HAL_RCC_GetHCLKFreq>
 8008d10:	4602      	mov	r2, r0
 8008d12:	4b06      	ldr	r3, [pc, #24]	; (8008d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008d14:	69db      	ldr	r3, [r3, #28]
 8008d16:	0a1b      	lsrs	r3, r3, #8
 8008d18:	f003 0307 	and.w	r3, r3, #7
 8008d1c:	4904      	ldr	r1, [pc, #16]	; (8008d30 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008d1e:	5ccb      	ldrb	r3, [r1, r3]
 8008d20:	f003 031f 	and.w	r3, r3, #31
 8008d24:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	bd80      	pop	{r7, pc}
 8008d2c:	58024400 	.word	0x58024400
 8008d30:	08010f88 	.word	0x08010f88

08008d34 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b086      	sub	sp, #24
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008d40:	2300      	movs	r3, #0
 8008d42:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d03f      	beq.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d54:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d58:	d02a      	beq.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008d5a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008d5e:	d824      	bhi.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008d60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d64:	d018      	beq.n	8008d98 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8008d66:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008d6a:	d81e      	bhi.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d003      	beq.n	8008d78 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008d70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008d74:	d007      	beq.n	8008d86 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8008d76:	e018      	b.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d78:	4bab      	ldr	r3, [pc, #684]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7c:	4aaa      	ldr	r2, [pc, #680]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008d7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d82:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008d84:	e015      	b.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	3304      	adds	r3, #4
 8008d8a:	2102      	movs	r1, #2
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f001 f9cf 	bl	800a130 <RCCEx_PLL2_Config>
 8008d92:	4603      	mov	r3, r0
 8008d94:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008d96:	e00c      	b.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	3324      	adds	r3, #36	; 0x24
 8008d9c:	2102      	movs	r1, #2
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f001 fa78 	bl	800a294 <RCCEx_PLL3_Config>
 8008da4:	4603      	mov	r3, r0
 8008da6:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008da8:	e003      	b.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008daa:	2301      	movs	r3, #1
 8008dac:	75fb      	strb	r3, [r7, #23]
      break;
 8008dae:	e000      	b.n	8008db2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008db2:	7dfb      	ldrb	r3, [r7, #23]
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d109      	bne.n	8008dcc <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008db8:	4b9b      	ldr	r3, [pc, #620]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008dc4:	4998      	ldr	r1, [pc, #608]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	650b      	str	r3, [r1, #80]	; 0x50
 8008dca:	e001      	b.n	8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dcc:	7dfb      	ldrb	r3, [r7, #23]
 8008dce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d03d      	beq.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008de0:	2b04      	cmp	r3, #4
 8008de2:	d826      	bhi.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8008de4:	a201      	add	r2, pc, #4	; (adr r2, 8008dec <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8008de6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dea:	bf00      	nop
 8008dec:	08008e01 	.word	0x08008e01
 8008df0:	08008e0f 	.word	0x08008e0f
 8008df4:	08008e21 	.word	0x08008e21
 8008df8:	08008e39 	.word	0x08008e39
 8008dfc:	08008e39 	.word	0x08008e39
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e00:	4b89      	ldr	r3, [pc, #548]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e04:	4a88      	ldr	r2, [pc, #544]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e0c:	e015      	b.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	3304      	adds	r3, #4
 8008e12:	2100      	movs	r1, #0
 8008e14:	4618      	mov	r0, r3
 8008e16:	f001 f98b 	bl	800a130 <RCCEx_PLL2_Config>
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e1e:	e00c      	b.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	3324      	adds	r3, #36	; 0x24
 8008e24:	2100      	movs	r1, #0
 8008e26:	4618      	mov	r0, r3
 8008e28:	f001 fa34 	bl	800a294 <RCCEx_PLL3_Config>
 8008e2c:	4603      	mov	r3, r0
 8008e2e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008e30:	e003      	b.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	75fb      	strb	r3, [r7, #23]
      break;
 8008e36:	e000      	b.n	8008e3a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008e38:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008e3a:	7dfb      	ldrb	r3, [r7, #23]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d109      	bne.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008e40:	4b79      	ldr	r3, [pc, #484]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e44:	f023 0207 	bic.w	r2, r3, #7
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e4c:	4976      	ldr	r1, [pc, #472]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e4e:	4313      	orrs	r3, r2
 8008e50:	650b      	str	r3, [r1, #80]	; 0x50
 8008e52:	e001      	b.n	8008e58 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e54:	7dfb      	ldrb	r3, [r7, #23]
 8008e56:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d042      	beq.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e6c:	d02b      	beq.n	8008ec6 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e72:	d825      	bhi.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008e74:	2bc0      	cmp	r3, #192	; 0xc0
 8008e76:	d028      	beq.n	8008eca <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008e78:	2bc0      	cmp	r3, #192	; 0xc0
 8008e7a:	d821      	bhi.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008e7c:	2b80      	cmp	r3, #128	; 0x80
 8008e7e:	d016      	beq.n	8008eae <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008e80:	2b80      	cmp	r3, #128	; 0x80
 8008e82:	d81d      	bhi.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d002      	beq.n	8008e8e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008e88:	2b40      	cmp	r3, #64	; 0x40
 8008e8a:	d007      	beq.n	8008e9c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008e8c:	e018      	b.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e8e:	4b66      	ldr	r3, [pc, #408]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e92:	4a65      	ldr	r2, [pc, #404]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008e9a:	e017      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	3304      	adds	r3, #4
 8008ea0:	2100      	movs	r1, #0
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	f001 f944 	bl	800a130 <RCCEx_PLL2_Config>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008eac:	e00e      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	3324      	adds	r3, #36	; 0x24
 8008eb2:	2100      	movs	r1, #0
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f001 f9ed 	bl	800a294 <RCCEx_PLL3_Config>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008ebe:	e005      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ec4:	e002      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008ec6:	bf00      	nop
 8008ec8:	e000      	b.n	8008ecc <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8008eca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ecc:	7dfb      	ldrb	r3, [r7, #23]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d109      	bne.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008ed2:	4b55      	ldr	r3, [pc, #340]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ed6:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ede:	4952      	ldr	r1, [pc, #328]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	650b      	str	r3, [r1, #80]	; 0x50
 8008ee4:	e001      	b.n	8008eea <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ee6:	7dfb      	ldrb	r3, [r7, #23]
 8008ee8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d049      	beq.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008efc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f00:	d030      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8008f02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008f06:	d82a      	bhi.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008f08:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008f0c:	d02c      	beq.n	8008f68 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8008f0e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008f12:	d824      	bhi.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008f14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f18:	d018      	beq.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008f1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f1e:	d81e      	bhi.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d003      	beq.n	8008f2c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8008f24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f28:	d007      	beq.n	8008f3a <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008f2a:	e018      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f2c:	4b3e      	ldr	r3, [pc, #248]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f30:	4a3d      	ldr	r2, [pc, #244]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f36:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f38:	e017      	b.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	3304      	adds	r3, #4
 8008f3e:	2100      	movs	r1, #0
 8008f40:	4618      	mov	r0, r3
 8008f42:	f001 f8f5 	bl	800a130 <RCCEx_PLL2_Config>
 8008f46:	4603      	mov	r3, r0
 8008f48:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008f4a:	e00e      	b.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	3324      	adds	r3, #36	; 0x24
 8008f50:	2100      	movs	r1, #0
 8008f52:	4618      	mov	r0, r3
 8008f54:	f001 f99e 	bl	800a294 <RCCEx_PLL3_Config>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008f5c:	e005      	b.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	75fb      	strb	r3, [r7, #23]
      break;
 8008f62:	e002      	b.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008f64:	bf00      	nop
 8008f66:	e000      	b.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008f68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f6a:	7dfb      	ldrb	r3, [r7, #23]
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d10a      	bne.n	8008f86 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008f70:	4b2d      	ldr	r3, [pc, #180]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f74:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008f7e:	492a      	ldr	r1, [pc, #168]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008f80:	4313      	orrs	r3, r2
 8008f82:	658b      	str	r3, [r1, #88]	; 0x58
 8008f84:	e001      	b.n	8008f8a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f86:	7dfb      	ldrb	r3, [r7, #23]
 8008f88:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d04c      	beq.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008f9c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fa0:	d030      	beq.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8008fa2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fa6:	d82a      	bhi.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008fa8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008fac:	d02c      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8008fae:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008fb2:	d824      	bhi.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008fb4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fb8:	d018      	beq.n	8008fec <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8008fba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fbe:	d81e      	bhi.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d003      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x298>
 8008fc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008fc8:	d007      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8008fca:	e018      	b.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008fcc:	4b16      	ldr	r3, [pc, #88]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fd0:	4a15      	ldr	r2, [pc, #84]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8008fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008fd6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008fd8:	e017      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	3304      	adds	r3, #4
 8008fde:	2100      	movs	r1, #0
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f001 f8a5 	bl	800a130 <RCCEx_PLL2_Config>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008fea:	e00e      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	3324      	adds	r3, #36	; 0x24
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f001 f94e 	bl	800a294 <RCCEx_PLL3_Config>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008ffc:	e005      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008ffe:	2301      	movs	r3, #1
 8009000:	75fb      	strb	r3, [r7, #23]
      break;
 8009002:	e002      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8009004:	bf00      	nop
 8009006:	e000      	b.n	800900a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8009008:	bf00      	nop
    }

    if(ret == HAL_OK)
 800900a:	7dfb      	ldrb	r3, [r7, #23]
 800900c:	2b00      	cmp	r3, #0
 800900e:	d10d      	bne.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009010:	4b05      	ldr	r3, [pc, #20]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009014:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800901e:	4902      	ldr	r1, [pc, #8]	; (8009028 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8009020:	4313      	orrs	r3, r2
 8009022:	658b      	str	r3, [r1, #88]	; 0x58
 8009024:	e004      	b.n	8009030 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8009026:	bf00      	nop
 8009028:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800902c:	7dfb      	ldrb	r3, [r7, #23]
 800902e:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009038:	2b00      	cmp	r3, #0
 800903a:	d032      	beq.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009040:	2b30      	cmp	r3, #48	; 0x30
 8009042:	d01c      	beq.n	800907e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009044:	2b30      	cmp	r3, #48	; 0x30
 8009046:	d817      	bhi.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8009048:	2b20      	cmp	r3, #32
 800904a:	d00c      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x332>
 800904c:	2b20      	cmp	r3, #32
 800904e:	d813      	bhi.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8009050:	2b00      	cmp	r3, #0
 8009052:	d016      	beq.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8009054:	2b10      	cmp	r3, #16
 8009056:	d10f      	bne.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009058:	4baf      	ldr	r3, [pc, #700]	; (8009318 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800905a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905c:	4aae      	ldr	r2, [pc, #696]	; (8009318 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800905e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009062:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009064:	e00e      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	3304      	adds	r3, #4
 800906a:	2102      	movs	r1, #2
 800906c:	4618      	mov	r0, r3
 800906e:	f001 f85f 	bl	800a130 <RCCEx_PLL2_Config>
 8009072:	4603      	mov	r3, r0
 8009074:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8009076:	e005      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8009078:	2301      	movs	r3, #1
 800907a:	75fb      	strb	r3, [r7, #23]
      break;
 800907c:	e002      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800907e:	bf00      	nop
 8009080:	e000      	b.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8009082:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009084:	7dfb      	ldrb	r3, [r7, #23]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d109      	bne.n	800909e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800908a:	4ba3      	ldr	r3, [pc, #652]	; (8009318 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800908c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800908e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009096:	49a0      	ldr	r1, [pc, #640]	; (8009318 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009098:	4313      	orrs	r3, r2
 800909a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800909c:	e001      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800909e:	7dfb      	ldrb	r3, [r7, #23]
 80090a0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d047      	beq.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090b6:	d030      	beq.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 80090b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80090bc:	d82a      	bhi.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80090be:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090c2:	d02c      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 80090c4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80090c8:	d824      	bhi.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80090ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090ce:	d018      	beq.n	8009102 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 80090d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80090d4:	d81e      	bhi.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d003      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80090da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090de:	d007      	beq.n	80090f0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 80090e0:	e018      	b.n	8009114 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090e2:	4b8d      	ldr	r3, [pc, #564]	; (8009318 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80090e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090e6:	4a8c      	ldr	r2, [pc, #560]	; (8009318 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80090e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090ec:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80090ee:	e017      	b.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	3304      	adds	r3, #4
 80090f4:	2100      	movs	r1, #0
 80090f6:	4618      	mov	r0, r3
 80090f8:	f001 f81a 	bl	800a130 <RCCEx_PLL2_Config>
 80090fc:	4603      	mov	r3, r0
 80090fe:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009100:	e00e      	b.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	3324      	adds	r3, #36	; 0x24
 8009106:	2100      	movs	r1, #0
 8009108:	4618      	mov	r0, r3
 800910a:	f001 f8c3 	bl	800a294 <RCCEx_PLL3_Config>
 800910e:	4603      	mov	r3, r0
 8009110:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8009112:	e005      	b.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	75fb      	strb	r3, [r7, #23]
      break;
 8009118:	e002      	b.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800911a:	bf00      	nop
 800911c:	e000      	b.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 800911e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009120:	7dfb      	ldrb	r3, [r7, #23]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d109      	bne.n	800913a <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009126:	4b7c      	ldr	r3, [pc, #496]	; (8009318 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009128:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800912a:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009132:	4979      	ldr	r1, [pc, #484]	; (8009318 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009134:	4313      	orrs	r3, r2
 8009136:	650b      	str	r3, [r1, #80]	; 0x50
 8009138:	e001      	b.n	800913e <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800913a:	7dfb      	ldrb	r3, [r7, #23]
 800913c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009146:	2b00      	cmp	r3, #0
 8009148:	d049      	beq.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800914e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009152:	d02e      	beq.n	80091b2 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8009154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009158:	d828      	bhi.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x478>
 800915a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800915e:	d02a      	beq.n	80091b6 <HAL_RCCEx_PeriphCLKConfig+0x482>
 8009160:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009164:	d822      	bhi.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009166:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800916a:	d026      	beq.n	80091ba <HAL_RCCEx_PeriphCLKConfig+0x486>
 800916c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009170:	d81c      	bhi.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x478>
 8009172:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009176:	d010      	beq.n	800919a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8009178:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800917c:	d816      	bhi.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x478>
 800917e:	2b00      	cmp	r3, #0
 8009180:	d01d      	beq.n	80091be <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8009182:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009186:	d111      	bne.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	3304      	adds	r3, #4
 800918c:	2101      	movs	r1, #1
 800918e:	4618      	mov	r0, r3
 8009190:	f000 ffce 	bl	800a130 <RCCEx_PLL2_Config>
 8009194:	4603      	mov	r3, r0
 8009196:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8009198:	e012      	b.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	3324      	adds	r3, #36	; 0x24
 800919e:	2101      	movs	r1, #1
 80091a0:	4618      	mov	r0, r3
 80091a2:	f001 f877 	bl	800a294 <RCCEx_PLL3_Config>
 80091a6:	4603      	mov	r3, r0
 80091a8:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80091aa:	e009      	b.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	75fb      	strb	r3, [r7, #23]
      break;
 80091b0:	e006      	b.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80091b2:	bf00      	nop
 80091b4:	e004      	b.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80091b6:	bf00      	nop
 80091b8:	e002      	b.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80091ba:	bf00      	nop
 80091bc:	e000      	b.n	80091c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 80091be:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091c0:	7dfb      	ldrb	r3, [r7, #23]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d109      	bne.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80091c6:	4b54      	ldr	r3, [pc, #336]	; (8009318 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80091c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091ca:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80091d2:	4951      	ldr	r1, [pc, #324]	; (8009318 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80091d4:	4313      	orrs	r3, r2
 80091d6:	650b      	str	r3, [r1, #80]	; 0x50
 80091d8:	e001      	b.n	80091de <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091da:	7dfb      	ldrb	r3, [r7, #23]
 80091dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d04b      	beq.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80091f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091f4:	d02e      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x520>
 80091f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091fa:	d828      	bhi.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80091fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009200:	d02a      	beq.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8009202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009206:	d822      	bhi.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009208:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800920c:	d026      	beq.n	800925c <HAL_RCCEx_PeriphCLKConfig+0x528>
 800920e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009212:	d81c      	bhi.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009214:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009218:	d010      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x508>
 800921a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800921e:	d816      	bhi.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009220:	2b00      	cmp	r3, #0
 8009222:	d01d      	beq.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8009224:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009228:	d111      	bne.n	800924e <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	3304      	adds	r3, #4
 800922e:	2101      	movs	r1, #1
 8009230:	4618      	mov	r0, r3
 8009232:	f000 ff7d 	bl	800a130 <RCCEx_PLL2_Config>
 8009236:	4603      	mov	r3, r0
 8009238:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800923a:	e012      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	3324      	adds	r3, #36	; 0x24
 8009240:	2101      	movs	r1, #1
 8009242:	4618      	mov	r0, r3
 8009244:	f001 f826 	bl	800a294 <RCCEx_PLL3_Config>
 8009248:	4603      	mov	r3, r0
 800924a:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800924c:	e009      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	75fb      	strb	r3, [r7, #23]
      break;
 8009252:	e006      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009254:	bf00      	nop
 8009256:	e004      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009258:	bf00      	nop
 800925a:	e002      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 800925c:	bf00      	nop
 800925e:	e000      	b.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8009260:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009262:	7dfb      	ldrb	r3, [r7, #23]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d10a      	bne.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009268:	4b2b      	ldr	r3, [pc, #172]	; (8009318 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800926a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800926c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009276:	4928      	ldr	r1, [pc, #160]	; (8009318 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8009278:	4313      	orrs	r3, r2
 800927a:	658b      	str	r3, [r1, #88]	; 0x58
 800927c:	e001      	b.n	8009282 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800927e:	7dfb      	ldrb	r3, [r7, #23]
 8009280:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800928a:	2b00      	cmp	r3, #0
 800928c:	d02f      	beq.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009292:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009296:	d00e      	beq.n	80092b6 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8009298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800929c:	d814      	bhi.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x594>
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d015      	beq.n	80092ce <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80092a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092a6:	d10f      	bne.n	80092c8 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80092a8:	4b1b      	ldr	r3, [pc, #108]	; (8009318 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80092aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092ac:	4a1a      	ldr	r2, [pc, #104]	; (8009318 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80092ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80092b2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80092b4:	e00c      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	3304      	adds	r3, #4
 80092ba:	2101      	movs	r1, #1
 80092bc:	4618      	mov	r0, r3
 80092be:	f000 ff37 	bl	800a130 <RCCEx_PLL2_Config>
 80092c2:	4603      	mov	r3, r0
 80092c4:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80092c6:	e003      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	75fb      	strb	r3, [r7, #23]
      break;
 80092cc:	e000      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 80092ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80092d0:	7dfb      	ldrb	r3, [r7, #23]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d109      	bne.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80092d6:	4b10      	ldr	r3, [pc, #64]	; (8009318 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80092d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092e2:	490d      	ldr	r1, [pc, #52]	; (8009318 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80092e4:	4313      	orrs	r3, r2
 80092e6:	650b      	str	r3, [r1, #80]	; 0x50
 80092e8:	e001      	b.n	80092ee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092ea:	7dfb      	ldrb	r3, [r7, #23]
 80092ec:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d033      	beq.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80092fe:	2b03      	cmp	r3, #3
 8009300:	d81c      	bhi.n	800933c <HAL_RCCEx_PeriphCLKConfig+0x608>
 8009302:	a201      	add	r2, pc, #4	; (adr r2, 8009308 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8009304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009308:	08009343 	.word	0x08009343
 800930c:	0800931d 	.word	0x0800931d
 8009310:	0800932b 	.word	0x0800932b
 8009314:	08009343 	.word	0x08009343
 8009318:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800931c:	4bb8      	ldr	r3, [pc, #736]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800931e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009320:	4ab7      	ldr	r2, [pc, #732]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009322:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009326:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8009328:	e00c      	b.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	3304      	adds	r3, #4
 800932e:	2102      	movs	r1, #2
 8009330:	4618      	mov	r0, r3
 8009332:	f000 fefd 	bl	800a130 <RCCEx_PLL2_Config>
 8009336:	4603      	mov	r3, r0
 8009338:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800933a:	e003      	b.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800933c:	2301      	movs	r3, #1
 800933e:	75fb      	strb	r3, [r7, #23]
      break;
 8009340:	e000      	b.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8009342:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009344:	7dfb      	ldrb	r3, [r7, #23]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d109      	bne.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800934a:	4bad      	ldr	r3, [pc, #692]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800934c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800934e:	f023 0203 	bic.w	r2, r3, #3
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009356:	49aa      	ldr	r1, [pc, #680]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009358:	4313      	orrs	r3, r2
 800935a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800935c:	e001      	b.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800935e:	7dfb      	ldrb	r3, [r7, #23]
 8009360:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800936a:	2b00      	cmp	r3, #0
 800936c:	f000 8086 	beq.w	800947c <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009370:	4ba4      	ldr	r3, [pc, #656]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4aa3      	ldr	r2, [pc, #652]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8009376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800937a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800937c:	f7fb f998 	bl	80046b0 <HAL_GetTick>
 8009380:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009382:	e009      	b.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009384:	f7fb f994 	bl	80046b0 <HAL_GetTick>
 8009388:	4602      	mov	r2, r0
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	1ad3      	subs	r3, r2, r3
 800938e:	2b64      	cmp	r3, #100	; 0x64
 8009390:	d902      	bls.n	8009398 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8009392:	2303      	movs	r3, #3
 8009394:	75fb      	strb	r3, [r7, #23]
        break;
 8009396:	e005      	b.n	80093a4 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009398:	4b9a      	ldr	r3, [pc, #616]	; (8009604 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d0ef      	beq.n	8009384 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 80093a4:	7dfb      	ldrb	r3, [r7, #23]
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d166      	bne.n	8009478 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80093aa:	4b95      	ldr	r3, [pc, #596]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80093b4:	4053      	eors	r3, r2
 80093b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d013      	beq.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80093be:	4b90      	ldr	r3, [pc, #576]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80093c6:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80093c8:	4b8d      	ldr	r3, [pc, #564]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093cc:	4a8c      	ldr	r2, [pc, #560]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80093d2:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80093d4:	4b8a      	ldr	r3, [pc, #552]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80093d8:	4a89      	ldr	r2, [pc, #548]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80093de:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80093e0:	4a87      	ldr	r2, [pc, #540]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80093ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093f0:	d115      	bne.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093f2:	f7fb f95d 	bl	80046b0 <HAL_GetTick>
 80093f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80093f8:	e00b      	b.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80093fa:	f7fb f959 	bl	80046b0 <HAL_GetTick>
 80093fe:	4602      	mov	r2, r0
 8009400:	693b      	ldr	r3, [r7, #16]
 8009402:	1ad3      	subs	r3, r2, r3
 8009404:	f241 3288 	movw	r2, #5000	; 0x1388
 8009408:	4293      	cmp	r3, r2
 800940a:	d902      	bls.n	8009412 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800940c:	2303      	movs	r3, #3
 800940e:	75fb      	strb	r3, [r7, #23]
            break;
 8009410:	e005      	b.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009412:	4b7b      	ldr	r3, [pc, #492]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009416:	f003 0302 	and.w	r3, r3, #2
 800941a:	2b00      	cmp	r3, #0
 800941c:	d0ed      	beq.n	80093fa <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800941e:	7dfb      	ldrb	r3, [r7, #23]
 8009420:	2b00      	cmp	r3, #0
 8009422:	d126      	bne.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800942a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800942e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009432:	d10d      	bne.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8009434:	4b72      	ldr	r3, [pc, #456]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009436:	691b      	ldr	r3, [r3, #16]
 8009438:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009442:	0919      	lsrs	r1, r3, #4
 8009444:	4b70      	ldr	r3, [pc, #448]	; (8009608 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8009446:	400b      	ands	r3, r1
 8009448:	496d      	ldr	r1, [pc, #436]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800944a:	4313      	orrs	r3, r2
 800944c:	610b      	str	r3, [r1, #16]
 800944e:	e005      	b.n	800945c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8009450:	4b6b      	ldr	r3, [pc, #428]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009452:	691b      	ldr	r3, [r3, #16]
 8009454:	4a6a      	ldr	r2, [pc, #424]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009456:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800945a:	6113      	str	r3, [r2, #16]
 800945c:	4b68      	ldr	r3, [pc, #416]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800945e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009466:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800946a:	4965      	ldr	r1, [pc, #404]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800946c:	4313      	orrs	r3, r2
 800946e:	670b      	str	r3, [r1, #112]	; 0x70
 8009470:	e004      	b.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009472:	7dfb      	ldrb	r3, [r7, #23]
 8009474:	75bb      	strb	r3, [r7, #22]
 8009476:	e001      	b.n	800947c <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009478:	7dfb      	ldrb	r3, [r7, #23]
 800947a:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	f003 0301 	and.w	r3, r3, #1
 8009484:	2b00      	cmp	r3, #0
 8009486:	d07e      	beq.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800948c:	2b28      	cmp	r3, #40	; 0x28
 800948e:	d867      	bhi.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8009490:	a201      	add	r2, pc, #4	; (adr r2, 8009498 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8009492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009496:	bf00      	nop
 8009498:	08009567 	.word	0x08009567
 800949c:	08009561 	.word	0x08009561
 80094a0:	08009561 	.word	0x08009561
 80094a4:	08009561 	.word	0x08009561
 80094a8:	08009561 	.word	0x08009561
 80094ac:	08009561 	.word	0x08009561
 80094b0:	08009561 	.word	0x08009561
 80094b4:	08009561 	.word	0x08009561
 80094b8:	0800953d 	.word	0x0800953d
 80094bc:	08009561 	.word	0x08009561
 80094c0:	08009561 	.word	0x08009561
 80094c4:	08009561 	.word	0x08009561
 80094c8:	08009561 	.word	0x08009561
 80094cc:	08009561 	.word	0x08009561
 80094d0:	08009561 	.word	0x08009561
 80094d4:	08009561 	.word	0x08009561
 80094d8:	0800954f 	.word	0x0800954f
 80094dc:	08009561 	.word	0x08009561
 80094e0:	08009561 	.word	0x08009561
 80094e4:	08009561 	.word	0x08009561
 80094e8:	08009561 	.word	0x08009561
 80094ec:	08009561 	.word	0x08009561
 80094f0:	08009561 	.word	0x08009561
 80094f4:	08009561 	.word	0x08009561
 80094f8:	08009567 	.word	0x08009567
 80094fc:	08009561 	.word	0x08009561
 8009500:	08009561 	.word	0x08009561
 8009504:	08009561 	.word	0x08009561
 8009508:	08009561 	.word	0x08009561
 800950c:	08009561 	.word	0x08009561
 8009510:	08009561 	.word	0x08009561
 8009514:	08009561 	.word	0x08009561
 8009518:	08009567 	.word	0x08009567
 800951c:	08009561 	.word	0x08009561
 8009520:	08009561 	.word	0x08009561
 8009524:	08009561 	.word	0x08009561
 8009528:	08009561 	.word	0x08009561
 800952c:	08009561 	.word	0x08009561
 8009530:	08009561 	.word	0x08009561
 8009534:	08009561 	.word	0x08009561
 8009538:	08009567 	.word	0x08009567
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	3304      	adds	r3, #4
 8009540:	2101      	movs	r1, #1
 8009542:	4618      	mov	r0, r3
 8009544:	f000 fdf4 	bl	800a130 <RCCEx_PLL2_Config>
 8009548:	4603      	mov	r3, r0
 800954a:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800954c:	e00c      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	3324      	adds	r3, #36	; 0x24
 8009552:	2101      	movs	r1, #1
 8009554:	4618      	mov	r0, r3
 8009556:	f000 fe9d 	bl	800a294 <RCCEx_PLL3_Config>
 800955a:	4603      	mov	r3, r0
 800955c:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800955e:	e003      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009560:	2301      	movs	r3, #1
 8009562:	75fb      	strb	r3, [r7, #23]
      break;
 8009564:	e000      	b.n	8009568 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 8009566:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009568:	7dfb      	ldrb	r3, [r7, #23]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d109      	bne.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800956e:	4b24      	ldr	r3, [pc, #144]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8009570:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009572:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800957a:	4921      	ldr	r1, [pc, #132]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800957c:	4313      	orrs	r3, r2
 800957e:	654b      	str	r3, [r1, #84]	; 0x54
 8009580:	e001      	b.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009582:	7dfb      	ldrb	r3, [r7, #23]
 8009584:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 0302 	and.w	r3, r3, #2
 800958e:	2b00      	cmp	r3, #0
 8009590:	d03e      	beq.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009596:	2b05      	cmp	r3, #5
 8009598:	d820      	bhi.n	80095dc <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800959a:	a201      	add	r2, pc, #4	; (adr r2, 80095a0 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 800959c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095a0:	080095e3 	.word	0x080095e3
 80095a4:	080095b9 	.word	0x080095b9
 80095a8:	080095cb 	.word	0x080095cb
 80095ac:	080095e3 	.word	0x080095e3
 80095b0:	080095e3 	.word	0x080095e3
 80095b4:	080095e3 	.word	0x080095e3
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	3304      	adds	r3, #4
 80095bc:	2101      	movs	r1, #1
 80095be:	4618      	mov	r0, r3
 80095c0:	f000 fdb6 	bl	800a130 <RCCEx_PLL2_Config>
 80095c4:	4603      	mov	r3, r0
 80095c6:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80095c8:	e00c      	b.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	3324      	adds	r3, #36	; 0x24
 80095ce:	2101      	movs	r1, #1
 80095d0:	4618      	mov	r0, r3
 80095d2:	f000 fe5f 	bl	800a294 <RCCEx_PLL3_Config>
 80095d6:	4603      	mov	r3, r0
 80095d8:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80095da:	e003      	b.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80095dc:	2301      	movs	r3, #1
 80095de:	75fb      	strb	r3, [r7, #23]
      break;
 80095e0:	e000      	b.n	80095e4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80095e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80095e4:	7dfb      	ldrb	r3, [r7, #23]
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d110      	bne.n	800960c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80095ea:	4b05      	ldr	r3, [pc, #20]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80095ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095ee:	f023 0207 	bic.w	r2, r3, #7
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095f6:	4902      	ldr	r1, [pc, #8]	; (8009600 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80095f8:	4313      	orrs	r3, r2
 80095fa:	654b      	str	r3, [r1, #84]	; 0x54
 80095fc:	e008      	b.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80095fe:	bf00      	nop
 8009600:	58024400 	.word	0x58024400
 8009604:	58024800 	.word	0x58024800
 8009608:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 800960c:	7dfb      	ldrb	r3, [r7, #23]
 800960e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f003 0304 	and.w	r3, r3, #4
 8009618:	2b00      	cmp	r3, #0
 800961a:	d039      	beq.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009622:	2b05      	cmp	r3, #5
 8009624:	d820      	bhi.n	8009668 <HAL_RCCEx_PeriphCLKConfig+0x934>
 8009626:	a201      	add	r2, pc, #4	; (adr r2, 800962c <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 8009628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800962c:	0800966f 	.word	0x0800966f
 8009630:	08009645 	.word	0x08009645
 8009634:	08009657 	.word	0x08009657
 8009638:	0800966f 	.word	0x0800966f
 800963c:	0800966f 	.word	0x0800966f
 8009640:	0800966f 	.word	0x0800966f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	3304      	adds	r3, #4
 8009648:	2101      	movs	r1, #1
 800964a:	4618      	mov	r0, r3
 800964c:	f000 fd70 	bl	800a130 <RCCEx_PLL2_Config>
 8009650:	4603      	mov	r3, r0
 8009652:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009654:	e00c      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	3324      	adds	r3, #36	; 0x24
 800965a:	2101      	movs	r1, #1
 800965c:	4618      	mov	r0, r3
 800965e:	f000 fe19 	bl	800a294 <RCCEx_PLL3_Config>
 8009662:	4603      	mov	r3, r0
 8009664:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009666:	e003      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009668:	2301      	movs	r3, #1
 800966a:	75fb      	strb	r3, [r7, #23]
      break;
 800966c:	e000      	b.n	8009670 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 800966e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009670:	7dfb      	ldrb	r3, [r7, #23]
 8009672:	2b00      	cmp	r3, #0
 8009674:	d10a      	bne.n	800968c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009676:	4bb7      	ldr	r3, [pc, #732]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800967a:	f023 0207 	bic.w	r2, r3, #7
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009684:	49b3      	ldr	r1, [pc, #716]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009686:	4313      	orrs	r3, r2
 8009688:	658b      	str	r3, [r1, #88]	; 0x58
 800968a:	e001      	b.n	8009690 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800968c:	7dfb      	ldrb	r3, [r7, #23]
 800968e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f003 0320 	and.w	r3, r3, #32
 8009698:	2b00      	cmp	r3, #0
 800969a:	d04b      	beq.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096a6:	d02e      	beq.n	8009706 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 80096a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096ac:	d828      	bhi.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80096ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096b2:	d02a      	beq.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80096b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096b8:	d822      	bhi.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80096ba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096be:	d026      	beq.n	800970e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80096c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80096c4:	d81c      	bhi.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80096c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096ca:	d010      	beq.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80096cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096d0:	d816      	bhi.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d01d      	beq.n	8009712 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80096d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80096da:	d111      	bne.n	8009700 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	3304      	adds	r3, #4
 80096e0:	2100      	movs	r1, #0
 80096e2:	4618      	mov	r0, r3
 80096e4:	f000 fd24 	bl	800a130 <RCCEx_PLL2_Config>
 80096e8:	4603      	mov	r3, r0
 80096ea:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80096ec:	e012      	b.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	3324      	adds	r3, #36	; 0x24
 80096f2:	2102      	movs	r1, #2
 80096f4:	4618      	mov	r0, r3
 80096f6:	f000 fdcd 	bl	800a294 <RCCEx_PLL3_Config>
 80096fa:	4603      	mov	r3, r0
 80096fc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80096fe:	e009      	b.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009700:	2301      	movs	r3, #1
 8009702:	75fb      	strb	r3, [r7, #23]
      break;
 8009704:	e006      	b.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009706:	bf00      	nop
 8009708:	e004      	b.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800970a:	bf00      	nop
 800970c:	e002      	b.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800970e:	bf00      	nop
 8009710:	e000      	b.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8009712:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009714:	7dfb      	ldrb	r3, [r7, #23]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d10a      	bne.n	8009730 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800971a:	4b8e      	ldr	r3, [pc, #568]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800971c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800971e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009728:	498a      	ldr	r1, [pc, #552]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800972a:	4313      	orrs	r3, r2
 800972c:	654b      	str	r3, [r1, #84]	; 0x54
 800972e:	e001      	b.n	8009734 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009730:	7dfb      	ldrb	r3, [r7, #23]
 8009732:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800973c:	2b00      	cmp	r3, #0
 800973e:	d04b      	beq.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009746:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800974a:	d02e      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0xa76>
 800974c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009750:	d828      	bhi.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009756:	d02a      	beq.n	80097ae <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800975c:	d822      	bhi.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800975e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009762:	d026      	beq.n	80097b2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009764:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009768:	d81c      	bhi.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800976a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800976e:	d010      	beq.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8009770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009774:	d816      	bhi.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8009776:	2b00      	cmp	r3, #0
 8009778:	d01d      	beq.n	80097b6 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800977a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800977e:	d111      	bne.n	80097a4 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	3304      	adds	r3, #4
 8009784:	2100      	movs	r1, #0
 8009786:	4618      	mov	r0, r3
 8009788:	f000 fcd2 	bl	800a130 <RCCEx_PLL2_Config>
 800978c:	4603      	mov	r3, r0
 800978e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8009790:	e012      	b.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	3324      	adds	r3, #36	; 0x24
 8009796:	2102      	movs	r1, #2
 8009798:	4618      	mov	r0, r3
 800979a:	f000 fd7b 	bl	800a294 <RCCEx_PLL3_Config>
 800979e:	4603      	mov	r3, r0
 80097a0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80097a2:	e009      	b.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80097a4:	2301      	movs	r3, #1
 80097a6:	75fb      	strb	r3, [r7, #23]
      break;
 80097a8:	e006      	b.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80097aa:	bf00      	nop
 80097ac:	e004      	b.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80097ae:	bf00      	nop
 80097b0:	e002      	b.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80097b2:	bf00      	nop
 80097b4:	e000      	b.n	80097b8 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 80097b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80097b8:	7dfb      	ldrb	r3, [r7, #23]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d10a      	bne.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80097be:	4b65      	ldr	r3, [pc, #404]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80097c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097c2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80097cc:	4961      	ldr	r1, [pc, #388]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80097ce:	4313      	orrs	r3, r2
 80097d0:	658b      	str	r3, [r1, #88]	; 0x58
 80097d2:	e001      	b.n	80097d8 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097d4:	7dfb      	ldrb	r3, [r7, #23]
 80097d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d04b      	beq.n	800987c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097ea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80097ee:	d02e      	beq.n	800984e <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80097f0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80097f4:	d828      	bhi.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80097f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80097fa:	d02a      	beq.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80097fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009800:	d822      	bhi.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8009802:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009806:	d026      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8009808:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800980c:	d81c      	bhi.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800980e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009812:	d010      	beq.n	8009836 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 8009814:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009818:	d816      	bhi.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800981a:	2b00      	cmp	r3, #0
 800981c:	d01d      	beq.n	800985a <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800981e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009822:	d111      	bne.n	8009848 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	3304      	adds	r3, #4
 8009828:	2100      	movs	r1, #0
 800982a:	4618      	mov	r0, r3
 800982c:	f000 fc80 	bl	800a130 <RCCEx_PLL2_Config>
 8009830:	4603      	mov	r3, r0
 8009832:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009834:	e012      	b.n	800985c <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	3324      	adds	r3, #36	; 0x24
 800983a:	2102      	movs	r1, #2
 800983c:	4618      	mov	r0, r3
 800983e:	f000 fd29 	bl	800a294 <RCCEx_PLL3_Config>
 8009842:	4603      	mov	r3, r0
 8009844:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009846:	e009      	b.n	800985c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	75fb      	strb	r3, [r7, #23]
      break;
 800984c:	e006      	b.n	800985c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800984e:	bf00      	nop
 8009850:	e004      	b.n	800985c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009852:	bf00      	nop
 8009854:	e002      	b.n	800985c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8009856:	bf00      	nop
 8009858:	e000      	b.n	800985c <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800985a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800985c:	7dfb      	ldrb	r3, [r7, #23]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d10a      	bne.n	8009878 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009862:	4b3c      	ldr	r3, [pc, #240]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009870:	4938      	ldr	r1, [pc, #224]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8009872:	4313      	orrs	r3, r2
 8009874:	658b      	str	r3, [r1, #88]	; 0x58
 8009876:	e001      	b.n	800987c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009878:	7dfb      	ldrb	r3, [r7, #23]
 800987a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 0308 	and.w	r3, r3, #8
 8009884:	2b00      	cmp	r3, #0
 8009886:	d01a      	beq.n	80098be <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800988e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009892:	d10a      	bne.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	3324      	adds	r3, #36	; 0x24
 8009898:	2102      	movs	r1, #2
 800989a:	4618      	mov	r0, r3
 800989c:	f000 fcfa 	bl	800a294 <RCCEx_PLL3_Config>
 80098a0:	4603      	mov	r3, r0
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d001      	beq.n	80098aa <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 80098a6:	2301      	movs	r3, #1
 80098a8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80098aa:	4b2a      	ldr	r3, [pc, #168]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80098ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80098b8:	4926      	ldr	r1, [pc, #152]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80098ba:	4313      	orrs	r3, r2
 80098bc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	f003 0310 	and.w	r3, r3, #16
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d01a      	beq.n	8009900 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80098d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098d4:	d10a      	bne.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	3324      	adds	r3, #36	; 0x24
 80098da:	2102      	movs	r1, #2
 80098dc:	4618      	mov	r0, r3
 80098de:	f000 fcd9 	bl	800a294 <RCCEx_PLL3_Config>
 80098e2:	4603      	mov	r3, r0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d001      	beq.n	80098ec <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80098e8:	2301      	movs	r3, #1
 80098ea:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80098ec:	4b19      	ldr	r3, [pc, #100]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80098ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80098fa:	4916      	ldr	r1, [pc, #88]	; (8009954 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80098fc:	4313      	orrs	r3, r2
 80098fe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009908:	2b00      	cmp	r3, #0
 800990a:	d036      	beq.n	800997a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009912:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009916:	d01f      	beq.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8009918:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800991c:	d817      	bhi.n	800994e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 800991e:	2b00      	cmp	r3, #0
 8009920:	d003      	beq.n	800992a <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8009922:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009926:	d009      	beq.n	800993c <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8009928:	e011      	b.n	800994e <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	3304      	adds	r3, #4
 800992e:	2100      	movs	r1, #0
 8009930:	4618      	mov	r0, r3
 8009932:	f000 fbfd 	bl	800a130 <RCCEx_PLL2_Config>
 8009936:	4603      	mov	r3, r0
 8009938:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800993a:	e00e      	b.n	800995a <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	3324      	adds	r3, #36	; 0x24
 8009940:	2102      	movs	r1, #2
 8009942:	4618      	mov	r0, r3
 8009944:	f000 fca6 	bl	800a294 <RCCEx_PLL3_Config>
 8009948:	4603      	mov	r3, r0
 800994a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800994c:	e005      	b.n	800995a <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	75fb      	strb	r3, [r7, #23]
      break;
 8009952:	e002      	b.n	800995a <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8009954:	58024400 	.word	0x58024400
      break;
 8009958:	bf00      	nop
    }

    if(ret == HAL_OK)
 800995a:	7dfb      	ldrb	r3, [r7, #23]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d10a      	bne.n	8009976 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009960:	4b93      	ldr	r3, [pc, #588]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009964:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800996e:	4990      	ldr	r1, [pc, #576]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009970:	4313      	orrs	r3, r2
 8009972:	658b      	str	r3, [r1, #88]	; 0x58
 8009974:	e001      	b.n	800997a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009976:	7dfb      	ldrb	r3, [r7, #23]
 8009978:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009982:	2b00      	cmp	r3, #0
 8009984:	d033      	beq.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800998c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009990:	d01c      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8009992:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009996:	d816      	bhi.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8009998:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800999c:	d003      	beq.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 800999e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80099a2:	d007      	beq.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 80099a4:	e00f      	b.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099a6:	4b82      	ldr	r3, [pc, #520]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099aa:	4a81      	ldr	r2, [pc, #516]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80099b2:	e00c      	b.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	3324      	adds	r3, #36	; 0x24
 80099b8:	2101      	movs	r1, #1
 80099ba:	4618      	mov	r0, r3
 80099bc:	f000 fc6a 	bl	800a294 <RCCEx_PLL3_Config>
 80099c0:	4603      	mov	r3, r0
 80099c2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80099c4:	e003      	b.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80099c6:	2301      	movs	r3, #1
 80099c8:	75fb      	strb	r3, [r7, #23]
      break;
 80099ca:	e000      	b.n	80099ce <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80099cc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80099ce:	7dfb      	ldrb	r3, [r7, #23]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d10a      	bne.n	80099ea <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80099d4:	4b76      	ldr	r3, [pc, #472]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80099e2:	4973      	ldr	r1, [pc, #460]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80099e4:	4313      	orrs	r3, r2
 80099e6:	654b      	str	r3, [r1, #84]	; 0x54
 80099e8:	e001      	b.n	80099ee <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099ea:	7dfb      	ldrb	r3, [r7, #23]
 80099ec:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d029      	beq.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d003      	beq.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8009a02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a06:	d007      	beq.n	8009a18 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8009a08:	e00f      	b.n	8009a2a <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a0a:	4b69      	ldr	r3, [pc, #420]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a0e:	4a68      	ldr	r2, [pc, #416]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a14:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009a16:	e00b      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	3304      	adds	r3, #4
 8009a1c:	2102      	movs	r1, #2
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f000 fb86 	bl	800a130 <RCCEx_PLL2_Config>
 8009a24:	4603      	mov	r3, r0
 8009a26:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009a28:	e002      	b.n	8009a30 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8009a2a:	2301      	movs	r3, #1
 8009a2c:	75fb      	strb	r3, [r7, #23]
      break;
 8009a2e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009a30:	7dfb      	ldrb	r3, [r7, #23]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d109      	bne.n	8009a4a <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009a36:	4b5e      	ldr	r3, [pc, #376]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a3a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a42:	495b      	ldr	r1, [pc, #364]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009a44:	4313      	orrs	r3, r2
 8009a46:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009a48:	e001      	b.n	8009a4e <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a4a:	7dfb      	ldrb	r3, [r7, #23]
 8009a4c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d00a      	beq.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	3324      	adds	r3, #36	; 0x24
 8009a5e:	2102      	movs	r1, #2
 8009a60:	4618      	mov	r0, r3
 8009a62:	f000 fc17 	bl	800a294 <RCCEx_PLL3_Config>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d001      	beq.n	8009a70 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d030      	beq.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a80:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a84:	d017      	beq.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8009a86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a8a:	d811      	bhi.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009a8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a90:	d013      	beq.n	8009aba <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009a92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a96:	d80b      	bhi.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d010      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8009a9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009aa0:	d106      	bne.n	8009ab0 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009aa2:	4b43      	ldr	r3, [pc, #268]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aa6:	4a42      	ldr	r2, [pc, #264]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009aac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8009aae:	e007      	b.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	75fb      	strb	r3, [r7, #23]
      break;
 8009ab4:	e004      	b.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009ab6:	bf00      	nop
 8009ab8:	e002      	b.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009aba:	bf00      	nop
 8009abc:	e000      	b.n	8009ac0 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8009abe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009ac0:	7dfb      	ldrb	r3, [r7, #23]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d109      	bne.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009ac6:	4b3a      	ldr	r3, [pc, #232]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ad2:	4937      	ldr	r1, [pc, #220]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	654b      	str	r3, [r1, #84]	; 0x54
 8009ad8:	e001      	b.n	8009ade <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ada:	7dfb      	ldrb	r3, [r7, #23]
 8009adc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d008      	beq.n	8009afc <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009aea:	4b31      	ldr	r3, [pc, #196]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009aee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009af6:	492e      	ldr	r1, [pc, #184]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009af8:	4313      	orrs	r3, r2
 8009afa:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d009      	beq.n	8009b1c <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009b08:	4b29      	ldr	r3, [pc, #164]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b0a:	691b      	ldr	r3, [r3, #16]
 8009b0c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009b16:	4926      	ldr	r1, [pc, #152]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b18:	4313      	orrs	r3, r2
 8009b1a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d008      	beq.n	8009b3a <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009b28:	4b21      	ldr	r3, [pc, #132]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b2c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009b34:	491e      	ldr	r1, [pc, #120]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b36:	4313      	orrs	r3, r2
 8009b38:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d00d      	beq.n	8009b62 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009b46:	4b1a      	ldr	r3, [pc, #104]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b48:	691b      	ldr	r3, [r3, #16]
 8009b4a:	4a19      	ldr	r2, [pc, #100]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b4c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b50:	6113      	str	r3, [r2, #16]
 8009b52:	4b17      	ldr	r3, [pc, #92]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b54:	691a      	ldr	r2, [r3, #16]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009b5c:	4914      	ldr	r1, [pc, #80]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	da08      	bge.n	8009b7c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009b6a:	4b11      	ldr	r3, [pc, #68]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b76:	490e      	ldr	r1, [pc, #56]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d009      	beq.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009b88:	4b09      	ldr	r3, [pc, #36]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b96:	4906      	ldr	r1, [pc, #24]	; (8009bb0 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8009b98:	4313      	orrs	r3, r2
 8009b9a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8009b9c:	7dbb      	ldrb	r3, [r7, #22]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d101      	bne.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	e000      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8009ba6:	2301      	movs	r3, #1
}
 8009ba8:	4618      	mov	r0, r3
 8009baa:	3718      	adds	r7, #24
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	58024400 	.word	0x58024400

08009bb4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8009bb8:	f7ff f860 	bl	8008c7c <HAL_RCC_GetHCLKFreq>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	4b06      	ldr	r3, [pc, #24]	; (8009bd8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8009bc0:	6a1b      	ldr	r3, [r3, #32]
 8009bc2:	091b      	lsrs	r3, r3, #4
 8009bc4:	f003 0307 	and.w	r3, r3, #7
 8009bc8:	4904      	ldr	r1, [pc, #16]	; (8009bdc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8009bca:	5ccb      	ldrb	r3, [r1, r3]
 8009bcc:	f003 031f 	and.w	r3, r3, #31
 8009bd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	bd80      	pop	{r7, pc}
 8009bd8:	58024400 	.word	0x58024400
 8009bdc:	08010f88 	.word	0x08010f88

08009be0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8009be0:	b480      	push	{r7}
 8009be2:	b089      	sub	sp, #36	; 0x24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009be8:	4ba1      	ldr	r3, [pc, #644]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bec:	f003 0303 	and.w	r3, r3, #3
 8009bf0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8009bf2:	4b9f      	ldr	r3, [pc, #636]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bf6:	0b1b      	lsrs	r3, r3, #12
 8009bf8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009bfc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8009bfe:	4b9c      	ldr	r3, [pc, #624]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c02:	091b      	lsrs	r3, r3, #4
 8009c04:	f003 0301 	and.w	r3, r3, #1
 8009c08:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8009c0a:	4b99      	ldr	r3, [pc, #612]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c0e:	08db      	lsrs	r3, r3, #3
 8009c10:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009c14:	693a      	ldr	r2, [r7, #16]
 8009c16:	fb02 f303 	mul.w	r3, r2, r3
 8009c1a:	ee07 3a90 	vmov	s15, r3
 8009c1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c22:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	f000 8111 	beq.w	8009e50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009c2e:	69bb      	ldr	r3, [r7, #24]
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	f000 8083 	beq.w	8009d3c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8009c36:	69bb      	ldr	r3, [r7, #24]
 8009c38:	2b02      	cmp	r3, #2
 8009c3a:	f200 80a1 	bhi.w	8009d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d003      	beq.n	8009c4c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009c44:	69bb      	ldr	r3, [r7, #24]
 8009c46:	2b01      	cmp	r3, #1
 8009c48:	d056      	beq.n	8009cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8009c4a:	e099      	b.n	8009d80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009c4c:	4b88      	ldr	r3, [pc, #544]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f003 0320 	and.w	r3, r3, #32
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d02d      	beq.n	8009cb4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009c58:	4b85      	ldr	r3, [pc, #532]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	08db      	lsrs	r3, r3, #3
 8009c5e:	f003 0303 	and.w	r3, r3, #3
 8009c62:	4a84      	ldr	r2, [pc, #528]	; (8009e74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009c64:	fa22 f303 	lsr.w	r3, r2, r3
 8009c68:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	ee07 3a90 	vmov	s15, r3
 8009c70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c74:	697b      	ldr	r3, [r7, #20]
 8009c76:	ee07 3a90 	vmov	s15, r3
 8009c7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009c7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009c82:	4b7b      	ldr	r3, [pc, #492]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009c8a:	ee07 3a90 	vmov	s15, r3
 8009c8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009c92:	ed97 6a03 	vldr	s12, [r7, #12]
 8009c96:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009c9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009c9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ca2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009ca6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009caa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009cb2:	e087      	b.n	8009dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	ee07 3a90 	vmov	s15, r3
 8009cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009cbe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009e7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8009cc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009cc6:	4b6a      	ldr	r3, [pc, #424]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cce:	ee07 3a90 	vmov	s15, r3
 8009cd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009cd6:	ed97 6a03 	vldr	s12, [r7, #12]
 8009cda:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009cde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009ce2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009ce6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009cea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009cee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009cf2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009cf6:	e065      	b.n	8009dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	ee07 3a90 	vmov	s15, r3
 8009cfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d02:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d0a:	4b59      	ldr	r3, [pc, #356]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d12:	ee07 3a90 	vmov	s15, r3
 8009d16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d1e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d36:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d3a:	e043      	b.n	8009dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d3c:	697b      	ldr	r3, [r7, #20]
 8009d3e:	ee07 3a90 	vmov	s15, r3
 8009d42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d46:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009e84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8009d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d4e:	4b48      	ldr	r3, [pc, #288]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d56:	ee07 3a90 	vmov	s15, r3
 8009d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009d62:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009d6e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009d7a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009d7e:	e021      	b.n	8009dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	ee07 3a90 	vmov	s15, r3
 8009d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009d8a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009e80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009d92:	4b37      	ldr	r3, [pc, #220]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d9a:	ee07 3a90 	vmov	s15, r3
 8009d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009da6:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009e78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009db2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009dbe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009dc2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8009dc4:	4b2a      	ldr	r3, [pc, #168]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009dc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc8:	0a5b      	lsrs	r3, r3, #9
 8009dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dce:	ee07 3a90 	vmov	s15, r3
 8009dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009dd6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009dda:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009dde:	edd7 6a07 	vldr	s13, [r7, #28]
 8009de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009dea:	ee17 2a90 	vmov	r2, s15
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8009df2:	4b1f      	ldr	r3, [pc, #124]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df6:	0c1b      	lsrs	r3, r3, #16
 8009df8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009dfc:	ee07 3a90 	vmov	s15, r3
 8009e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e18:	ee17 2a90 	vmov	r2, s15
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009e20:	4b13      	ldr	r3, [pc, #76]	; (8009e70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e24:	0e1b      	lsrs	r3, r3, #24
 8009e26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e2a:	ee07 3a90 	vmov	s15, r3
 8009e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009e32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009e36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009e3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009e3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009e42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009e46:	ee17 2a90 	vmov	r2, s15
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009e4e:	e008      	b.n	8009e62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2200      	movs	r2, #0
 8009e5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2200      	movs	r2, #0
 8009e60:	609a      	str	r2, [r3, #8]
}
 8009e62:	bf00      	nop
 8009e64:	3724      	adds	r7, #36	; 0x24
 8009e66:	46bd      	mov	sp, r7
 8009e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6c:	4770      	bx	lr
 8009e6e:	bf00      	nop
 8009e70:	58024400 	.word	0x58024400
 8009e74:	03d09000 	.word	0x03d09000
 8009e78:	46000000 	.word	0x46000000
 8009e7c:	4c742400 	.word	0x4c742400
 8009e80:	4a742400 	.word	0x4a742400
 8009e84:	4c371b00 	.word	0x4c371b00

08009e88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b089      	sub	sp, #36	; 0x24
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009e90:	4ba1      	ldr	r3, [pc, #644]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e94:	f003 0303 	and.w	r3, r3, #3
 8009e98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8009e9a:	4b9f      	ldr	r3, [pc, #636]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e9e:	0d1b      	lsrs	r3, r3, #20
 8009ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ea4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8009ea6:	4b9c      	ldr	r3, [pc, #624]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eaa:	0a1b      	lsrs	r3, r3, #8
 8009eac:	f003 0301 	and.w	r3, r3, #1
 8009eb0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8009eb2:	4b99      	ldr	r3, [pc, #612]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009eb6:	08db      	lsrs	r3, r3, #3
 8009eb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009ebc:	693a      	ldr	r2, [r7, #16]
 8009ebe:	fb02 f303 	mul.w	r3, r2, r3
 8009ec2:	ee07 3a90 	vmov	s15, r3
 8009ec6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009eca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8009ece:	697b      	ldr	r3, [r7, #20]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	f000 8111 	beq.w	800a0f8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	2b02      	cmp	r3, #2
 8009eda:	f000 8083 	beq.w	8009fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8009ede:	69bb      	ldr	r3, [r7, #24]
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	f200 80a1 	bhi.w	800a028 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d003      	beq.n	8009ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8009eec:	69bb      	ldr	r3, [r7, #24]
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d056      	beq.n	8009fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8009ef2:	e099      	b.n	800a028 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009ef4:	4b88      	ldr	r3, [pc, #544]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f003 0320 	and.w	r3, r3, #32
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d02d      	beq.n	8009f5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8009f00:	4b85      	ldr	r3, [pc, #532]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	08db      	lsrs	r3, r3, #3
 8009f06:	f003 0303 	and.w	r3, r3, #3
 8009f0a:	4a84      	ldr	r2, [pc, #528]	; (800a11c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009f0c:	fa22 f303 	lsr.w	r3, r2, r3
 8009f10:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	ee07 3a90 	vmov	s15, r3
 8009f18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f1c:	697b      	ldr	r3, [r7, #20]
 8009f1e:	ee07 3a90 	vmov	s15, r3
 8009f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f2a:	4b7b      	ldr	r3, [pc, #492]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f32:	ee07 3a90 	vmov	s15, r3
 8009f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f3e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800a120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f56:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8009f5a:	e087      	b.n	800a06c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	ee07 3a90 	vmov	s15, r3
 8009f62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009f66:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800a124 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8009f6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009f6e:	4b6a      	ldr	r3, [pc, #424]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009f76:	ee07 3a90 	vmov	s15, r3
 8009f7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009f7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009f82:	eddf 5a67 	vldr	s11, [pc, #412]	; 800a120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009f86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009f8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009f8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009f92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009f96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009f9a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009f9e:	e065      	b.n	800a06c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009fa0:	697b      	ldr	r3, [r7, #20]
 8009fa2:	ee07 3a90 	vmov	s15, r3
 8009fa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009faa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800a128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009fae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009fb2:	4b59      	ldr	r3, [pc, #356]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009fba:	ee07 3a90 	vmov	s15, r3
 8009fbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009fc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8009fc6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800a120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009fca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009fce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009fd2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009fd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009fda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009fde:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009fe2:	e043      	b.n	800a06c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009fe4:	697b      	ldr	r3, [r7, #20]
 8009fe6:	ee07 3a90 	vmov	s15, r3
 8009fea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009fee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800a12c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8009ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009ff6:	4b48      	ldr	r3, [pc, #288]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009ffe:	ee07 3a90 	vmov	s15, r3
 800a002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a006:	ed97 6a03 	vldr	s12, [r7, #12]
 800a00a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800a120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a00e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a016:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a01a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a01e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a022:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a026:	e021      	b.n	800a06c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	ee07 3a90 	vmov	s15, r3
 800a02e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a032:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800a128 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800a036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a03a:	4b37      	ldr	r3, [pc, #220]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a03c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a042:	ee07 3a90 	vmov	s15, r3
 800a046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a04a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a04e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800a120 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800a052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a05a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a05e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a062:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a066:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800a06a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800a06c:	4b2a      	ldr	r3, [pc, #168]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a06e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a070:	0a5b      	lsrs	r3, r3, #9
 800a072:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a076:	ee07 3a90 	vmov	s15, r3
 800a07a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a07e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a082:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a086:	edd7 6a07 	vldr	s13, [r7, #28]
 800a08a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a08e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a092:	ee17 2a90 	vmov	r2, s15
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800a09a:	4b1f      	ldr	r3, [pc, #124]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a09c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a09e:	0c1b      	lsrs	r3, r3, #16
 800a0a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0a4:	ee07 3a90 	vmov	s15, r3
 800a0a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0b0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0b4:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0c0:	ee17 2a90 	vmov	r2, s15
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800a0c8:	4b13      	ldr	r3, [pc, #76]	; (800a118 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a0ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0cc:	0e1b      	lsrs	r3, r3, #24
 800a0ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0d2:	ee07 3a90 	vmov	s15, r3
 800a0d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a0da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800a0de:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a0e2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a0e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a0ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a0ee:	ee17 2a90 	vmov	r2, s15
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800a0f6:	e008      	b.n	800a10a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	609a      	str	r2, [r3, #8]
}
 800a10a:	bf00      	nop
 800a10c:	3724      	adds	r7, #36	; 0x24
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr
 800a116:	bf00      	nop
 800a118:	58024400 	.word	0x58024400
 800a11c:	03d09000 	.word	0x03d09000
 800a120:	46000000 	.word	0x46000000
 800a124:	4c742400 	.word	0x4c742400
 800a128:	4a742400 	.word	0x4a742400
 800a12c:	4c371b00 	.word	0x4c371b00

0800a130 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a13a:	2300      	movs	r3, #0
 800a13c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a13e:	4b53      	ldr	r3, [pc, #332]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a142:	f003 0303 	and.w	r3, r3, #3
 800a146:	2b03      	cmp	r3, #3
 800a148:	d101      	bne.n	800a14e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	e099      	b.n	800a282 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a14e:	4b4f      	ldr	r3, [pc, #316]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4a4e      	ldr	r2, [pc, #312]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a154:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a158:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a15a:	f7fa faa9 	bl	80046b0 <HAL_GetTick>
 800a15e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a160:	e008      	b.n	800a174 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a162:	f7fa faa5 	bl	80046b0 <HAL_GetTick>
 800a166:	4602      	mov	r2, r0
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	1ad3      	subs	r3, r2, r3
 800a16c:	2b02      	cmp	r3, #2
 800a16e:	d901      	bls.n	800a174 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a170:	2303      	movs	r3, #3
 800a172:	e086      	b.n	800a282 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a174:	4b45      	ldr	r3, [pc, #276]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d1f0      	bne.n	800a162 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a180:	4b42      	ldr	r3, [pc, #264]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a184:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	031b      	lsls	r3, r3, #12
 800a18e:	493f      	ldr	r1, [pc, #252]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a190:	4313      	orrs	r3, r2
 800a192:	628b      	str	r3, [r1, #40]	; 0x28
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	3b01      	subs	r3, #1
 800a19a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	689b      	ldr	r3, [r3, #8]
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	025b      	lsls	r3, r3, #9
 800a1a6:	b29b      	uxth	r3, r3
 800a1a8:	431a      	orrs	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	3b01      	subs	r3, #1
 800a1b0:	041b      	lsls	r3, r3, #16
 800a1b2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a1b6:	431a      	orrs	r2, r3
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	691b      	ldr	r3, [r3, #16]
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	061b      	lsls	r3, r3, #24
 800a1c0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a1c4:	4931      	ldr	r1, [pc, #196]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a1c6:	4313      	orrs	r3, r2
 800a1c8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a1ca:	4b30      	ldr	r3, [pc, #192]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	695b      	ldr	r3, [r3, #20]
 800a1d6:	492d      	ldr	r1, [pc, #180]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a1dc:	4b2b      	ldr	r3, [pc, #172]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a1de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1e0:	f023 0220 	bic.w	r2, r3, #32
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	699b      	ldr	r3, [r3, #24]
 800a1e8:	4928      	ldr	r1, [pc, #160]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a1ee:	4b27      	ldr	r3, [pc, #156]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a1f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1f2:	4a26      	ldr	r2, [pc, #152]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a1f4:	f023 0310 	bic.w	r3, r3, #16
 800a1f8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a1fa:	4b24      	ldr	r3, [pc, #144]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a1fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a1fe:	4b24      	ldr	r3, [pc, #144]	; (800a290 <RCCEx_PLL2_Config+0x160>)
 800a200:	4013      	ands	r3, r2
 800a202:	687a      	ldr	r2, [r7, #4]
 800a204:	69d2      	ldr	r2, [r2, #28]
 800a206:	00d2      	lsls	r2, r2, #3
 800a208:	4920      	ldr	r1, [pc, #128]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a20a:	4313      	orrs	r3, r2
 800a20c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a20e:	4b1f      	ldr	r3, [pc, #124]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a212:	4a1e      	ldr	r2, [pc, #120]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a214:	f043 0310 	orr.w	r3, r3, #16
 800a218:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d106      	bne.n	800a22e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a220:	4b1a      	ldr	r3, [pc, #104]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a224:	4a19      	ldr	r2, [pc, #100]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a226:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a22a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a22c:	e00f      	b.n	800a24e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d106      	bne.n	800a242 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a234:	4b15      	ldr	r3, [pc, #84]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a238:	4a14      	ldr	r2, [pc, #80]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a23a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a23e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a240:	e005      	b.n	800a24e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a242:	4b12      	ldr	r3, [pc, #72]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a244:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a246:	4a11      	ldr	r2, [pc, #68]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a248:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a24c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a24e:	4b0f      	ldr	r3, [pc, #60]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	4a0e      	ldr	r2, [pc, #56]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a254:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a258:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a25a:	f7fa fa29 	bl	80046b0 <HAL_GetTick>
 800a25e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a260:	e008      	b.n	800a274 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800a262:	f7fa fa25 	bl	80046b0 <HAL_GetTick>
 800a266:	4602      	mov	r2, r0
 800a268:	68bb      	ldr	r3, [r7, #8]
 800a26a:	1ad3      	subs	r3, r2, r3
 800a26c:	2b02      	cmp	r3, #2
 800a26e:	d901      	bls.n	800a274 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a270:	2303      	movs	r3, #3
 800a272:	e006      	b.n	800a282 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a274:	4b05      	ldr	r3, [pc, #20]	; (800a28c <RCCEx_PLL2_Config+0x15c>)
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d0f0      	beq.n	800a262 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800a280:	7bfb      	ldrb	r3, [r7, #15]
}
 800a282:	4618      	mov	r0, r3
 800a284:	3710      	adds	r7, #16
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}
 800a28a:	bf00      	nop
 800a28c:	58024400 	.word	0x58024400
 800a290:	ffff0007 	.word	0xffff0007

0800a294 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b084      	sub	sp, #16
 800a298:	af00      	add	r7, sp, #0
 800a29a:	6078      	str	r0, [r7, #4]
 800a29c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a2a2:	4b53      	ldr	r3, [pc, #332]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2a6:	f003 0303 	and.w	r3, r3, #3
 800a2aa:	2b03      	cmp	r3, #3
 800a2ac:	d101      	bne.n	800a2b2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	e099      	b.n	800a3e6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a2b2:	4b4f      	ldr	r3, [pc, #316]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a4e      	ldr	r2, [pc, #312]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a2b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a2be:	f7fa f9f7 	bl	80046b0 <HAL_GetTick>
 800a2c2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a2c4:	e008      	b.n	800a2d8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a2c6:	f7fa f9f3 	bl	80046b0 <HAL_GetTick>
 800a2ca:	4602      	mov	r2, r0
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	1ad3      	subs	r3, r2, r3
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d901      	bls.n	800a2d8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800a2d4:	2303      	movs	r3, #3
 800a2d6:	e086      	b.n	800a3e6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a2d8:	4b45      	ldr	r3, [pc, #276]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d1f0      	bne.n	800a2c6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a2e4:	4b42      	ldr	r3, [pc, #264]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a2e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2e8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	051b      	lsls	r3, r3, #20
 800a2f2:	493f      	ldr	r1, [pc, #252]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a2f4:	4313      	orrs	r3, r2
 800a2f6:	628b      	str	r3, [r1, #40]	; 0x28
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	3b01      	subs	r3, #1
 800a2fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	689b      	ldr	r3, [r3, #8]
 800a306:	3b01      	subs	r3, #1
 800a308:	025b      	lsls	r3, r3, #9
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	431a      	orrs	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	3b01      	subs	r3, #1
 800a314:	041b      	lsls	r3, r3, #16
 800a316:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a31a:	431a      	orrs	r2, r3
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	691b      	ldr	r3, [r3, #16]
 800a320:	3b01      	subs	r3, #1
 800a322:	061b      	lsls	r3, r3, #24
 800a324:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a328:	4931      	ldr	r1, [pc, #196]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a32a:	4313      	orrs	r3, r2
 800a32c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a32e:	4b30      	ldr	r3, [pc, #192]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a332:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	695b      	ldr	r3, [r3, #20]
 800a33a:	492d      	ldr	r1, [pc, #180]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a33c:	4313      	orrs	r3, r2
 800a33e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a340:	4b2b      	ldr	r3, [pc, #172]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a344:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	699b      	ldr	r3, [r3, #24]
 800a34c:	4928      	ldr	r1, [pc, #160]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a34e:	4313      	orrs	r3, r2
 800a350:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a352:	4b27      	ldr	r3, [pc, #156]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a356:	4a26      	ldr	r2, [pc, #152]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a358:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a35c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a35e:	4b24      	ldr	r3, [pc, #144]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a360:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a362:	4b24      	ldr	r3, [pc, #144]	; (800a3f4 <RCCEx_PLL3_Config+0x160>)
 800a364:	4013      	ands	r3, r2
 800a366:	687a      	ldr	r2, [r7, #4]
 800a368:	69d2      	ldr	r2, [r2, #28]
 800a36a:	00d2      	lsls	r2, r2, #3
 800a36c:	4920      	ldr	r1, [pc, #128]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a36e:	4313      	orrs	r3, r2
 800a370:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a372:	4b1f      	ldr	r3, [pc, #124]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a376:	4a1e      	ldr	r2, [pc, #120]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a37c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d106      	bne.n	800a392 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a384:	4b1a      	ldr	r3, [pc, #104]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a388:	4a19      	ldr	r2, [pc, #100]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a38a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a38e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a390:	e00f      	b.n	800a3b2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	2b01      	cmp	r3, #1
 800a396:	d106      	bne.n	800a3a6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a398:	4b15      	ldr	r3, [pc, #84]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a39c:	4a14      	ldr	r2, [pc, #80]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a39e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a3a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a3a4:	e005      	b.n	800a3b2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a3a6:	4b12      	ldr	r3, [pc, #72]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3aa:	4a11      	ldr	r2, [pc, #68]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a3ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a3b0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a3b2:	4b0f      	ldr	r3, [pc, #60]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a0e      	ldr	r2, [pc, #56]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a3b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a3be:	f7fa f977 	bl	80046b0 <HAL_GetTick>
 800a3c2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a3c4:	e008      	b.n	800a3d8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800a3c6:	f7fa f973 	bl	80046b0 <HAL_GetTick>
 800a3ca:	4602      	mov	r2, r0
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	1ad3      	subs	r3, r2, r3
 800a3d0:	2b02      	cmp	r3, #2
 800a3d2:	d901      	bls.n	800a3d8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	e006      	b.n	800a3e6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a3d8:	4b05      	ldr	r3, [pc, #20]	; (800a3f0 <RCCEx_PLL3_Config+0x15c>)
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d0f0      	beq.n	800a3c6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a3e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3e6:	4618      	mov	r0, r3
 800a3e8:	3710      	adds	r7, #16
 800a3ea:	46bd      	mov	sp, r7
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	58024400 	.word	0x58024400
 800a3f4:	ffff0007 	.word	0xffff0007

0800a3f8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a3f8:	b580      	push	{r7, lr}
 800a3fa:	b084      	sub	sp, #16
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2b00      	cmp	r3, #0
 800a404:	d101      	bne.n	800a40a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a406:	2301      	movs	r3, #1
 800a408:	e0f1      	b.n	800a5ee <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	2200      	movs	r2, #0
 800a40e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a78      	ldr	r2, [pc, #480]	; (800a5f8 <HAL_SPI_Init+0x200>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d00f      	beq.n	800a43a <HAL_SPI_Init+0x42>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a77      	ldr	r2, [pc, #476]	; (800a5fc <HAL_SPI_Init+0x204>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d00a      	beq.n	800a43a <HAL_SPI_Init+0x42>
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a75      	ldr	r2, [pc, #468]	; (800a600 <HAL_SPI_Init+0x208>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d005      	beq.n	800a43a <HAL_SPI_Init+0x42>
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	2b0f      	cmp	r3, #15
 800a434:	d901      	bls.n	800a43a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a436:	2301      	movs	r3, #1
 800a438:	e0d9      	b.n	800a5ee <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 f8e2 	bl	800a604 <SPI_GetPacketSize>
 800a440:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a6c      	ldr	r2, [pc, #432]	; (800a5f8 <HAL_SPI_Init+0x200>)
 800a448:	4293      	cmp	r3, r2
 800a44a:	d00c      	beq.n	800a466 <HAL_SPI_Init+0x6e>
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	4a6a      	ldr	r2, [pc, #424]	; (800a5fc <HAL_SPI_Init+0x204>)
 800a452:	4293      	cmp	r3, r2
 800a454:	d007      	beq.n	800a466 <HAL_SPI_Init+0x6e>
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	4a69      	ldr	r2, [pc, #420]	; (800a600 <HAL_SPI_Init+0x208>)
 800a45c:	4293      	cmp	r3, r2
 800a45e:	d002      	beq.n	800a466 <HAL_SPI_Init+0x6e>
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2b08      	cmp	r3, #8
 800a464:	d811      	bhi.n	800a48a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a46a:	4a63      	ldr	r2, [pc, #396]	; (800a5f8 <HAL_SPI_Init+0x200>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d009      	beq.n	800a484 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	4a61      	ldr	r2, [pc, #388]	; (800a5fc <HAL_SPI_Init+0x204>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d004      	beq.n	800a484 <HAL_SPI_Init+0x8c>
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	4a60      	ldr	r2, [pc, #384]	; (800a600 <HAL_SPI_Init+0x208>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d104      	bne.n	800a48e <HAL_SPI_Init+0x96>
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2b10      	cmp	r3, #16
 800a488:	d901      	bls.n	800a48e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a48a:	2301      	movs	r3, #1
 800a48c:	e0af      	b.n	800a5ee <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a494:	b2db      	uxtb	r3, r3
 800a496:	2b00      	cmp	r3, #0
 800a498:	d106      	bne.n	800a4a8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	2200      	movs	r2, #0
 800a49e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	f7f8 fc82 	bl	8002dac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2202      	movs	r2, #2
 800a4ac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	681a      	ldr	r2, [r3, #0]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	f022 0201 	bic.w	r2, r2, #1
 800a4be:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	689b      	ldr	r3, [r3, #8]
 800a4c6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a4ca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	699b      	ldr	r3, [r3, #24]
 800a4d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a4d4:	d119      	bne.n	800a50a <HAL_SPI_Init+0x112>
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a4de:	d103      	bne.n	800a4e8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d008      	beq.n	800a4fa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d10c      	bne.n	800a50a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a4f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a4f8:	d107      	bne.n	800a50a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	681a      	ldr	r2, [r3, #0]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a508:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	69da      	ldr	r2, [r3, #28]
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a512:	431a      	orrs	r2, r3
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	431a      	orrs	r2, r3
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a51c:	ea42 0103 	orr.w	r1, r2, r3
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	68da      	ldr	r2, [r3, #12]
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	430a      	orrs	r2, r1
 800a52a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a534:	431a      	orrs	r2, r3
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a53a:	431a      	orrs	r2, r3
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	699b      	ldr	r3, [r3, #24]
 800a540:	431a      	orrs	r2, r3
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	691b      	ldr	r3, [r3, #16]
 800a546:	431a      	orrs	r2, r3
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	695b      	ldr	r3, [r3, #20]
 800a54c:	431a      	orrs	r2, r3
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6a1b      	ldr	r3, [r3, #32]
 800a552:	431a      	orrs	r2, r3
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	431a      	orrs	r2, r3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a55e:	431a      	orrs	r2, r3
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	431a      	orrs	r2, r3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a56a:	ea42 0103 	orr.w	r1, r2, r3
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	430a      	orrs	r2, r1
 800a578:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	685b      	ldr	r3, [r3, #4]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d113      	bne.n	800a5aa <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a594:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a5a8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f022 0201 	bic.w	r2, r2, #1
 800a5b8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d00a      	beq.n	800a5dc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	430a      	orrs	r2, r1
 800a5da:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2200      	movs	r2, #0
 800a5e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a5ec:	2300      	movs	r3, #0
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3710      	adds	r7, #16
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	40013000 	.word	0x40013000
 800a5fc:	40003800 	.word	0x40003800
 800a600:	40003c00 	.word	0x40003c00

0800a604 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a604:	b480      	push	{r7}
 800a606:	b085      	sub	sp, #20
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a610:	095b      	lsrs	r3, r3, #5
 800a612:	3301      	adds	r3, #1
 800a614:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	68db      	ldr	r3, [r3, #12]
 800a61a:	3301      	adds	r3, #1
 800a61c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a61e:	68bb      	ldr	r3, [r7, #8]
 800a620:	3307      	adds	r3, #7
 800a622:	08db      	lsrs	r3, r3, #3
 800a624:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	68fa      	ldr	r2, [r7, #12]
 800a62a:	fb02 f303 	mul.w	r3, r2, r3
}
 800a62e:	4618      	mov	r0, r3
 800a630:	3714      	adds	r7, #20
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr

0800a63a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a63a:	b580      	push	{r7, lr}
 800a63c:	b082      	sub	sp, #8
 800a63e:	af00      	add	r7, sp, #0
 800a640:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2b00      	cmp	r3, #0
 800a646:	d101      	bne.n	800a64c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a648:	2301      	movs	r3, #1
 800a64a:	e049      	b.n	800a6e0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a652:	b2db      	uxtb	r3, r3
 800a654:	2b00      	cmp	r3, #0
 800a656:	d106      	bne.n	800a666 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f7f9 fa41 	bl	8003ae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2202      	movs	r2, #2
 800a66a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681a      	ldr	r2, [r3, #0]
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	3304      	adds	r3, #4
 800a676:	4619      	mov	r1, r3
 800a678:	4610      	mov	r0, r2
 800a67a:	f000 fd71 	bl	800b160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2201      	movs	r2, #1
 800a682:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2201      	movs	r2, #1
 800a68a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	2201      	movs	r2, #1
 800a692:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2201      	movs	r2, #1
 800a69a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2201      	movs	r2, #1
 800a6aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2201      	movs	r2, #1
 800a6c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2201      	movs	r2, #1
 800a6d2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2201      	movs	r2, #1
 800a6da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a6de:	2300      	movs	r3, #0
}
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	3708      	adds	r7, #8
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}

0800a6e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b085      	sub	sp, #20
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6f6:	b2db      	uxtb	r3, r3
 800a6f8:	2b01      	cmp	r3, #1
 800a6fa:	d001      	beq.n	800a700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	e054      	b.n	800a7aa <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2202      	movs	r2, #2
 800a704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68da      	ldr	r2, [r3, #12]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f042 0201 	orr.w	r2, r2, #1
 800a716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a26      	ldr	r2, [pc, #152]	; (800a7b8 <HAL_TIM_Base_Start_IT+0xd0>)
 800a71e:	4293      	cmp	r3, r2
 800a720:	d022      	beq.n	800a768 <HAL_TIM_Base_Start_IT+0x80>
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a72a:	d01d      	beq.n	800a768 <HAL_TIM_Base_Start_IT+0x80>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	4a22      	ldr	r2, [pc, #136]	; (800a7bc <HAL_TIM_Base_Start_IT+0xd4>)
 800a732:	4293      	cmp	r3, r2
 800a734:	d018      	beq.n	800a768 <HAL_TIM_Base_Start_IT+0x80>
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	4a21      	ldr	r2, [pc, #132]	; (800a7c0 <HAL_TIM_Base_Start_IT+0xd8>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d013      	beq.n	800a768 <HAL_TIM_Base_Start_IT+0x80>
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	4a1f      	ldr	r2, [pc, #124]	; (800a7c4 <HAL_TIM_Base_Start_IT+0xdc>)
 800a746:	4293      	cmp	r3, r2
 800a748:	d00e      	beq.n	800a768 <HAL_TIM_Base_Start_IT+0x80>
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	4a1e      	ldr	r2, [pc, #120]	; (800a7c8 <HAL_TIM_Base_Start_IT+0xe0>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d009      	beq.n	800a768 <HAL_TIM_Base_Start_IT+0x80>
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	4a1c      	ldr	r2, [pc, #112]	; (800a7cc <HAL_TIM_Base_Start_IT+0xe4>)
 800a75a:	4293      	cmp	r3, r2
 800a75c:	d004      	beq.n	800a768 <HAL_TIM_Base_Start_IT+0x80>
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	4a1b      	ldr	r2, [pc, #108]	; (800a7d0 <HAL_TIM_Base_Start_IT+0xe8>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d115      	bne.n	800a794 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	689a      	ldr	r2, [r3, #8]
 800a76e:	4b19      	ldr	r3, [pc, #100]	; (800a7d4 <HAL_TIM_Base_Start_IT+0xec>)
 800a770:	4013      	ands	r3, r2
 800a772:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2b06      	cmp	r3, #6
 800a778:	d015      	beq.n	800a7a6 <HAL_TIM_Base_Start_IT+0xbe>
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a780:	d011      	beq.n	800a7a6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f042 0201 	orr.w	r2, r2, #1
 800a790:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a792:	e008      	b.n	800a7a6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f042 0201 	orr.w	r2, r2, #1
 800a7a2:	601a      	str	r2, [r3, #0]
 800a7a4:	e000      	b.n	800a7a8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3714      	adds	r7, #20
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b4:	4770      	bx	lr
 800a7b6:	bf00      	nop
 800a7b8:	40010000 	.word	0x40010000
 800a7bc:	40000400 	.word	0x40000400
 800a7c0:	40000800 	.word	0x40000800
 800a7c4:	40000c00 	.word	0x40000c00
 800a7c8:	40010400 	.word	0x40010400
 800a7cc:	40001800 	.word	0x40001800
 800a7d0:	40014000 	.word	0x40014000
 800a7d4:	00010007 	.word	0x00010007

0800a7d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a7d8:	b580      	push	{r7, lr}
 800a7da:	b082      	sub	sp, #8
 800a7dc:	af00      	add	r7, sp, #0
 800a7de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d101      	bne.n	800a7ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e049      	b.n	800a87e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7f0:	b2db      	uxtb	r3, r3
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d106      	bne.n	800a804 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 f841 	bl	800a886 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	2202      	movs	r2, #2
 800a808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681a      	ldr	r2, [r3, #0]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	3304      	adds	r3, #4
 800a814:	4619      	mov	r1, r3
 800a816:	4610      	mov	r0, r2
 800a818:	f000 fca2 	bl	800b160 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	2201      	movs	r2, #1
 800a820:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2201      	movs	r2, #1
 800a830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	2201      	movs	r2, #1
 800a838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	2201      	movs	r2, #1
 800a840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2201      	movs	r2, #1
 800a848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2201      	movs	r2, #1
 800a850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2201      	movs	r2, #1
 800a858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2201      	movs	r2, #1
 800a860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	2201      	movs	r2, #1
 800a868:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2201      	movs	r2, #1
 800a870:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2201      	movs	r2, #1
 800a878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a87c:	2300      	movs	r3, #0
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3708      	adds	r7, #8
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}

0800a886 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a886:	b480      	push	{r7}
 800a888:	b083      	sub	sp, #12
 800a88a:	af00      	add	r7, sp, #0
 800a88c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a88e:	bf00      	nop
 800a890:	370c      	adds	r7, #12
 800a892:	46bd      	mov	sp, r7
 800a894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a898:	4770      	bx	lr
	...

0800a89c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d109      	bne.n	800a8c0 <HAL_TIM_PWM_Start+0x24>
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a8b2:	b2db      	uxtb	r3, r3
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	bf14      	ite	ne
 800a8b8:	2301      	movne	r3, #1
 800a8ba:	2300      	moveq	r3, #0
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	e03c      	b.n	800a93a <HAL_TIM_PWM_Start+0x9e>
 800a8c0:	683b      	ldr	r3, [r7, #0]
 800a8c2:	2b04      	cmp	r3, #4
 800a8c4:	d109      	bne.n	800a8da <HAL_TIM_PWM_Start+0x3e>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a8cc:	b2db      	uxtb	r3, r3
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	bf14      	ite	ne
 800a8d2:	2301      	movne	r3, #1
 800a8d4:	2300      	moveq	r3, #0
 800a8d6:	b2db      	uxtb	r3, r3
 800a8d8:	e02f      	b.n	800a93a <HAL_TIM_PWM_Start+0x9e>
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	2b08      	cmp	r3, #8
 800a8de:	d109      	bne.n	800a8f4 <HAL_TIM_PWM_Start+0x58>
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a8e6:	b2db      	uxtb	r3, r3
 800a8e8:	2b01      	cmp	r3, #1
 800a8ea:	bf14      	ite	ne
 800a8ec:	2301      	movne	r3, #1
 800a8ee:	2300      	moveq	r3, #0
 800a8f0:	b2db      	uxtb	r3, r3
 800a8f2:	e022      	b.n	800a93a <HAL_TIM_PWM_Start+0x9e>
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	2b0c      	cmp	r3, #12
 800a8f8:	d109      	bne.n	800a90e <HAL_TIM_PWM_Start+0x72>
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a900:	b2db      	uxtb	r3, r3
 800a902:	2b01      	cmp	r3, #1
 800a904:	bf14      	ite	ne
 800a906:	2301      	movne	r3, #1
 800a908:	2300      	moveq	r3, #0
 800a90a:	b2db      	uxtb	r3, r3
 800a90c:	e015      	b.n	800a93a <HAL_TIM_PWM_Start+0x9e>
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	2b10      	cmp	r3, #16
 800a912:	d109      	bne.n	800a928 <HAL_TIM_PWM_Start+0x8c>
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	bf14      	ite	ne
 800a920:	2301      	movne	r3, #1
 800a922:	2300      	moveq	r3, #0
 800a924:	b2db      	uxtb	r3, r3
 800a926:	e008      	b.n	800a93a <HAL_TIM_PWM_Start+0x9e>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a92e:	b2db      	uxtb	r3, r3
 800a930:	2b01      	cmp	r3, #1
 800a932:	bf14      	ite	ne
 800a934:	2301      	movne	r3, #1
 800a936:	2300      	moveq	r3, #0
 800a938:	b2db      	uxtb	r3, r3
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d001      	beq.n	800a942 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	e0a1      	b.n	800aa86 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d104      	bne.n	800a952 <HAL_TIM_PWM_Start+0xb6>
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2202      	movs	r2, #2
 800a94c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a950:	e023      	b.n	800a99a <HAL_TIM_PWM_Start+0xfe>
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	2b04      	cmp	r3, #4
 800a956:	d104      	bne.n	800a962 <HAL_TIM_PWM_Start+0xc6>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	2202      	movs	r2, #2
 800a95c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a960:	e01b      	b.n	800a99a <HAL_TIM_PWM_Start+0xfe>
 800a962:	683b      	ldr	r3, [r7, #0]
 800a964:	2b08      	cmp	r3, #8
 800a966:	d104      	bne.n	800a972 <HAL_TIM_PWM_Start+0xd6>
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2202      	movs	r2, #2
 800a96c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a970:	e013      	b.n	800a99a <HAL_TIM_PWM_Start+0xfe>
 800a972:	683b      	ldr	r3, [r7, #0]
 800a974:	2b0c      	cmp	r3, #12
 800a976:	d104      	bne.n	800a982 <HAL_TIM_PWM_Start+0xe6>
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	2202      	movs	r2, #2
 800a97c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a980:	e00b      	b.n	800a99a <HAL_TIM_PWM_Start+0xfe>
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	2b10      	cmp	r3, #16
 800a986:	d104      	bne.n	800a992 <HAL_TIM_PWM_Start+0xf6>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2202      	movs	r2, #2
 800a98c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a990:	e003      	b.n	800a99a <HAL_TIM_PWM_Start+0xfe>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2202      	movs	r2, #2
 800a996:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	6839      	ldr	r1, [r7, #0]
 800a9a2:	4618      	mov	r0, r3
 800a9a4:	f000 ffea 	bl	800b97c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a38      	ldr	r2, [pc, #224]	; (800aa90 <HAL_TIM_PWM_Start+0x1f4>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d013      	beq.n	800a9da <HAL_TIM_PWM_Start+0x13e>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a37      	ldr	r2, [pc, #220]	; (800aa94 <HAL_TIM_PWM_Start+0x1f8>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d00e      	beq.n	800a9da <HAL_TIM_PWM_Start+0x13e>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a35      	ldr	r2, [pc, #212]	; (800aa98 <HAL_TIM_PWM_Start+0x1fc>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d009      	beq.n	800a9da <HAL_TIM_PWM_Start+0x13e>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a34      	ldr	r2, [pc, #208]	; (800aa9c <HAL_TIM_PWM_Start+0x200>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d004      	beq.n	800a9da <HAL_TIM_PWM_Start+0x13e>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a32      	ldr	r2, [pc, #200]	; (800aaa0 <HAL_TIM_PWM_Start+0x204>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d101      	bne.n	800a9de <HAL_TIM_PWM_Start+0x142>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e000      	b.n	800a9e0 <HAL_TIM_PWM_Start+0x144>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d007      	beq.n	800a9f4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a9f2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	4a25      	ldr	r2, [pc, #148]	; (800aa90 <HAL_TIM_PWM_Start+0x1f4>)
 800a9fa:	4293      	cmp	r3, r2
 800a9fc:	d022      	beq.n	800aa44 <HAL_TIM_PWM_Start+0x1a8>
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa06:	d01d      	beq.n	800aa44 <HAL_TIM_PWM_Start+0x1a8>
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	4a25      	ldr	r2, [pc, #148]	; (800aaa4 <HAL_TIM_PWM_Start+0x208>)
 800aa0e:	4293      	cmp	r3, r2
 800aa10:	d018      	beq.n	800aa44 <HAL_TIM_PWM_Start+0x1a8>
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	4a24      	ldr	r2, [pc, #144]	; (800aaa8 <HAL_TIM_PWM_Start+0x20c>)
 800aa18:	4293      	cmp	r3, r2
 800aa1a:	d013      	beq.n	800aa44 <HAL_TIM_PWM_Start+0x1a8>
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a22      	ldr	r2, [pc, #136]	; (800aaac <HAL_TIM_PWM_Start+0x210>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d00e      	beq.n	800aa44 <HAL_TIM_PWM_Start+0x1a8>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	4a1a      	ldr	r2, [pc, #104]	; (800aa94 <HAL_TIM_PWM_Start+0x1f8>)
 800aa2c:	4293      	cmp	r3, r2
 800aa2e:	d009      	beq.n	800aa44 <HAL_TIM_PWM_Start+0x1a8>
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a1e      	ldr	r2, [pc, #120]	; (800aab0 <HAL_TIM_PWM_Start+0x214>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d004      	beq.n	800aa44 <HAL_TIM_PWM_Start+0x1a8>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	4a16      	ldr	r2, [pc, #88]	; (800aa98 <HAL_TIM_PWM_Start+0x1fc>)
 800aa40:	4293      	cmp	r3, r2
 800aa42:	d115      	bne.n	800aa70 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	689a      	ldr	r2, [r3, #8]
 800aa4a:	4b1a      	ldr	r3, [pc, #104]	; (800aab4 <HAL_TIM_PWM_Start+0x218>)
 800aa4c:	4013      	ands	r3, r2
 800aa4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	2b06      	cmp	r3, #6
 800aa54:	d015      	beq.n	800aa82 <HAL_TIM_PWM_Start+0x1e6>
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa5c:	d011      	beq.n	800aa82 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	681b      	ldr	r3, [r3, #0]
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	f042 0201 	orr.w	r2, r2, #1
 800aa6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa6e:	e008      	b.n	800aa82 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f042 0201 	orr.w	r2, r2, #1
 800aa7e:	601a      	str	r2, [r3, #0]
 800aa80:	e000      	b.n	800aa84 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa84:	2300      	movs	r3, #0
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3710      	adds	r7, #16
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	40010000 	.word	0x40010000
 800aa94:	40010400 	.word	0x40010400
 800aa98:	40014000 	.word	0x40014000
 800aa9c:	40014400 	.word	0x40014400
 800aaa0:	40014800 	.word	0x40014800
 800aaa4:	40000400 	.word	0x40000400
 800aaa8:	40000800 	.word	0x40000800
 800aaac:	40000c00 	.word	0x40000c00
 800aab0:	40001800 	.word	0x40001800
 800aab4:	00010007 	.word	0x00010007

0800aab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	f003 0302 	and.w	r3, r3, #2
 800aaca:	2b02      	cmp	r3, #2
 800aacc:	d122      	bne.n	800ab14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	68db      	ldr	r3, [r3, #12]
 800aad4:	f003 0302 	and.w	r3, r3, #2
 800aad8:	2b02      	cmp	r3, #2
 800aada:	d11b      	bne.n	800ab14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f06f 0202 	mvn.w	r2, #2
 800aae4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2201      	movs	r2, #1
 800aaea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	699b      	ldr	r3, [r3, #24]
 800aaf2:	f003 0303 	and.w	r3, r3, #3
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d003      	beq.n	800ab02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f000 fb12 	bl	800b124 <HAL_TIM_IC_CaptureCallback>
 800ab00:	e005      	b.n	800ab0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab02:	6878      	ldr	r0, [r7, #4]
 800ab04:	f000 fb04 	bl	800b110 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab08:	6878      	ldr	r0, [r7, #4]
 800ab0a:	f000 fb15 	bl	800b138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	2200      	movs	r2, #0
 800ab12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	681b      	ldr	r3, [r3, #0]
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	f003 0304 	and.w	r3, r3, #4
 800ab1e:	2b04      	cmp	r3, #4
 800ab20:	d122      	bne.n	800ab68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	f003 0304 	and.w	r3, r3, #4
 800ab2c:	2b04      	cmp	r3, #4
 800ab2e:	d11b      	bne.n	800ab68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f06f 0204 	mvn.w	r2, #4
 800ab38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	2202      	movs	r2, #2
 800ab3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	699b      	ldr	r3, [r3, #24]
 800ab46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d003      	beq.n	800ab56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab4e:	6878      	ldr	r0, [r7, #4]
 800ab50:	f000 fae8 	bl	800b124 <HAL_TIM_IC_CaptureCallback>
 800ab54:	e005      	b.n	800ab62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f000 fada 	bl	800b110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab5c:	6878      	ldr	r0, [r7, #4]
 800ab5e:	f000 faeb 	bl	800b138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2200      	movs	r2, #0
 800ab66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	691b      	ldr	r3, [r3, #16]
 800ab6e:	f003 0308 	and.w	r3, r3, #8
 800ab72:	2b08      	cmp	r3, #8
 800ab74:	d122      	bne.n	800abbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	68db      	ldr	r3, [r3, #12]
 800ab7c:	f003 0308 	and.w	r3, r3, #8
 800ab80:	2b08      	cmp	r3, #8
 800ab82:	d11b      	bne.n	800abbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f06f 0208 	mvn.w	r2, #8
 800ab8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2204      	movs	r2, #4
 800ab92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	69db      	ldr	r3, [r3, #28]
 800ab9a:	f003 0303 	and.w	r3, r3, #3
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d003      	beq.n	800abaa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 fabe 	bl	800b124 <HAL_TIM_IC_CaptureCallback>
 800aba8:	e005      	b.n	800abb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 fab0 	bl	800b110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 fac1 	bl	800b138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2200      	movs	r2, #0
 800abba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	691b      	ldr	r3, [r3, #16]
 800abc2:	f003 0310 	and.w	r3, r3, #16
 800abc6:	2b10      	cmp	r3, #16
 800abc8:	d122      	bne.n	800ac10 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	f003 0310 	and.w	r3, r3, #16
 800abd4:	2b10      	cmp	r3, #16
 800abd6:	d11b      	bne.n	800ac10 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f06f 0210 	mvn.w	r2, #16
 800abe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2208      	movs	r2, #8
 800abe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	69db      	ldr	r3, [r3, #28]
 800abee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d003      	beq.n	800abfe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 fa94 	bl	800b124 <HAL_TIM_IC_CaptureCallback>
 800abfc:	e005      	b.n	800ac0a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abfe:	6878      	ldr	r0, [r7, #4]
 800ac00:	f000 fa86 	bl	800b110 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f000 fa97 	bl	800b138 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	2200      	movs	r2, #0
 800ac0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	691b      	ldr	r3, [r3, #16]
 800ac16:	f003 0301 	and.w	r3, r3, #1
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d10e      	bne.n	800ac3c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	68db      	ldr	r3, [r3, #12]
 800ac24:	f003 0301 	and.w	r3, r3, #1
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	d107      	bne.n	800ac3c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f06f 0201 	mvn.w	r2, #1
 800ac34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac36:	6878      	ldr	r0, [r7, #4]
 800ac38:	f7f7 fa4a 	bl	80020d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	691b      	ldr	r3, [r3, #16]
 800ac42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac46:	2b80      	cmp	r3, #128	; 0x80
 800ac48:	d10e      	bne.n	800ac68 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac54:	2b80      	cmp	r3, #128	; 0x80
 800ac56:	d107      	bne.n	800ac68 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ac60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ac62:	6878      	ldr	r0, [r7, #4]
 800ac64:	f000 ffc6 	bl	800bbf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	691b      	ldr	r3, [r3, #16]
 800ac6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac76:	d10e      	bne.n	800ac96 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	68db      	ldr	r3, [r3, #12]
 800ac7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac82:	2b80      	cmp	r3, #128	; 0x80
 800ac84:	d107      	bne.n	800ac96 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ac8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ac90:	6878      	ldr	r0, [r7, #4]
 800ac92:	f000 ffb9 	bl	800bc08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	691b      	ldr	r3, [r3, #16]
 800ac9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aca0:	2b40      	cmp	r3, #64	; 0x40
 800aca2:	d10e      	bne.n	800acc2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acae:	2b40      	cmp	r3, #64	; 0x40
 800acb0:	d107      	bne.n	800acc2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800acba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 fa45 	bl	800b14c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	691b      	ldr	r3, [r3, #16]
 800acc8:	f003 0320 	and.w	r3, r3, #32
 800accc:	2b20      	cmp	r3, #32
 800acce:	d10e      	bne.n	800acee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	68db      	ldr	r3, [r3, #12]
 800acd6:	f003 0320 	and.w	r3, r3, #32
 800acda:	2b20      	cmp	r3, #32
 800acdc:	d107      	bne.n	800acee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	f06f 0220 	mvn.w	r2, #32
 800ace6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 ff79 	bl	800bbe0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800acee:	bf00      	nop
 800acf0:	3708      	adds	r7, #8
 800acf2:	46bd      	mov	sp, r7
 800acf4:	bd80      	pop	{r7, pc}
	...

0800acf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800acf8:	b580      	push	{r7, lr}
 800acfa:	b086      	sub	sp, #24
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	60f8      	str	r0, [r7, #12]
 800ad00:	60b9      	str	r1, [r7, #8]
 800ad02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ad04:	2300      	movs	r3, #0
 800ad06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d101      	bne.n	800ad16 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800ad12:	2302      	movs	r3, #2
 800ad14:	e0ff      	b.n	800af16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2201      	movs	r2, #1
 800ad1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2b14      	cmp	r3, #20
 800ad22:	f200 80f0 	bhi.w	800af06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800ad26:	a201      	add	r2, pc, #4	; (adr r2, 800ad2c <HAL_TIM_PWM_ConfigChannel+0x34>)
 800ad28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad2c:	0800ad81 	.word	0x0800ad81
 800ad30:	0800af07 	.word	0x0800af07
 800ad34:	0800af07 	.word	0x0800af07
 800ad38:	0800af07 	.word	0x0800af07
 800ad3c:	0800adc1 	.word	0x0800adc1
 800ad40:	0800af07 	.word	0x0800af07
 800ad44:	0800af07 	.word	0x0800af07
 800ad48:	0800af07 	.word	0x0800af07
 800ad4c:	0800ae03 	.word	0x0800ae03
 800ad50:	0800af07 	.word	0x0800af07
 800ad54:	0800af07 	.word	0x0800af07
 800ad58:	0800af07 	.word	0x0800af07
 800ad5c:	0800ae43 	.word	0x0800ae43
 800ad60:	0800af07 	.word	0x0800af07
 800ad64:	0800af07 	.word	0x0800af07
 800ad68:	0800af07 	.word	0x0800af07
 800ad6c:	0800ae85 	.word	0x0800ae85
 800ad70:	0800af07 	.word	0x0800af07
 800ad74:	0800af07 	.word	0x0800af07
 800ad78:	0800af07 	.word	0x0800af07
 800ad7c:	0800aec5 	.word	0x0800aec5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	68b9      	ldr	r1, [r7, #8]
 800ad86:	4618      	mov	r0, r3
 800ad88:	f000 fa84 	bl	800b294 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	699a      	ldr	r2, [r3, #24]
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	f042 0208 	orr.w	r2, r2, #8
 800ad9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	699a      	ldr	r2, [r3, #24]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	f022 0204 	bic.w	r2, r2, #4
 800adaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	6999      	ldr	r1, [r3, #24]
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	691a      	ldr	r2, [r3, #16]
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	430a      	orrs	r2, r1
 800adbc:	619a      	str	r2, [r3, #24]
      break;
 800adbe:	e0a5      	b.n	800af0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800adc0:	68fb      	ldr	r3, [r7, #12]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	68b9      	ldr	r1, [r7, #8]
 800adc6:	4618      	mov	r0, r3
 800adc8:	f000 faf4 	bl	800b3b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	699a      	ldr	r2, [r3, #24]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800adda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	699a      	ldr	r2, [r3, #24]
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800adea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	681b      	ldr	r3, [r3, #0]
 800adf0:	6999      	ldr	r1, [r3, #24]
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	691b      	ldr	r3, [r3, #16]
 800adf6:	021a      	lsls	r2, r3, #8
 800adf8:	68fb      	ldr	r3, [r7, #12]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	430a      	orrs	r2, r1
 800adfe:	619a      	str	r2, [r3, #24]
      break;
 800ae00:	e084      	b.n	800af0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	68b9      	ldr	r1, [r7, #8]
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f000 fb5d 	bl	800b4c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	69da      	ldr	r2, [r3, #28]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	f042 0208 	orr.w	r2, r2, #8
 800ae1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	69da      	ldr	r2, [r3, #28]
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	f022 0204 	bic.w	r2, r2, #4
 800ae2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	69d9      	ldr	r1, [r3, #28]
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	691a      	ldr	r2, [r3, #16]
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	430a      	orrs	r2, r1
 800ae3e:	61da      	str	r2, [r3, #28]
      break;
 800ae40:	e064      	b.n	800af0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	68b9      	ldr	r1, [r7, #8]
 800ae48:	4618      	mov	r0, r3
 800ae4a:	f000 fbc5 	bl	800b5d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	69da      	ldr	r2, [r3, #28]
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ae5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	69da      	ldr	r2, [r3, #28]
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	69d9      	ldr	r1, [r3, #28]
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	691b      	ldr	r3, [r3, #16]
 800ae78:	021a      	lsls	r2, r3, #8
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	430a      	orrs	r2, r1
 800ae80:	61da      	str	r2, [r3, #28]
      break;
 800ae82:	e043      	b.n	800af0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	68b9      	ldr	r1, [r7, #8]
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f000 fc0e 	bl	800b6ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f042 0208 	orr.w	r2, r2, #8
 800ae9e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f022 0204 	bic.w	r2, r2, #4
 800aeae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aeb6:	68bb      	ldr	r3, [r7, #8]
 800aeb8:	691a      	ldr	r2, [r3, #16]
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	430a      	orrs	r2, r1
 800aec0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aec2:	e023      	b.n	800af0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	68b9      	ldr	r1, [r7, #8]
 800aeca:	4618      	mov	r0, r3
 800aecc:	f000 fc52 	bl	800b774 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aede:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aeee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aef6:	68bb      	ldr	r3, [r7, #8]
 800aef8:	691b      	ldr	r3, [r3, #16]
 800aefa:	021a      	lsls	r2, r3, #8
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	430a      	orrs	r2, r1
 800af02:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800af04:	e002      	b.n	800af0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800af06:	2301      	movs	r3, #1
 800af08:	75fb      	strb	r3, [r7, #23]
      break;
 800af0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2200      	movs	r2, #0
 800af10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800af14:	7dfb      	ldrb	r3, [r7, #23]
}
 800af16:	4618      	mov	r0, r3
 800af18:	3718      	adds	r7, #24
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}
 800af1e:	bf00      	nop

0800af20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b084      	sub	sp, #16
 800af24:	af00      	add	r7, sp, #0
 800af26:	6078      	str	r0, [r7, #4]
 800af28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800af2a:	2300      	movs	r3, #0
 800af2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af34:	2b01      	cmp	r3, #1
 800af36:	d101      	bne.n	800af3c <HAL_TIM_ConfigClockSource+0x1c>
 800af38:	2302      	movs	r3, #2
 800af3a:	e0dc      	b.n	800b0f6 <HAL_TIM_ConfigClockSource+0x1d6>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	2201      	movs	r2, #1
 800af40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	2202      	movs	r2, #2
 800af48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	689b      	ldr	r3, [r3, #8]
 800af52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800af54:	68ba      	ldr	r2, [r7, #8]
 800af56:	4b6a      	ldr	r3, [pc, #424]	; (800b100 <HAL_TIM_ConfigClockSource+0x1e0>)
 800af58:	4013      	ands	r3, r2
 800af5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800af62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	68ba      	ldr	r2, [r7, #8]
 800af6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800af6c:	683b      	ldr	r3, [r7, #0]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	4a64      	ldr	r2, [pc, #400]	; (800b104 <HAL_TIM_ConfigClockSource+0x1e4>)
 800af72:	4293      	cmp	r3, r2
 800af74:	f000 80a9 	beq.w	800b0ca <HAL_TIM_ConfigClockSource+0x1aa>
 800af78:	4a62      	ldr	r2, [pc, #392]	; (800b104 <HAL_TIM_ConfigClockSource+0x1e4>)
 800af7a:	4293      	cmp	r3, r2
 800af7c:	f200 80ae 	bhi.w	800b0dc <HAL_TIM_ConfigClockSource+0x1bc>
 800af80:	4a61      	ldr	r2, [pc, #388]	; (800b108 <HAL_TIM_ConfigClockSource+0x1e8>)
 800af82:	4293      	cmp	r3, r2
 800af84:	f000 80a1 	beq.w	800b0ca <HAL_TIM_ConfigClockSource+0x1aa>
 800af88:	4a5f      	ldr	r2, [pc, #380]	; (800b108 <HAL_TIM_ConfigClockSource+0x1e8>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	f200 80a6 	bhi.w	800b0dc <HAL_TIM_ConfigClockSource+0x1bc>
 800af90:	4a5e      	ldr	r2, [pc, #376]	; (800b10c <HAL_TIM_ConfigClockSource+0x1ec>)
 800af92:	4293      	cmp	r3, r2
 800af94:	f000 8099 	beq.w	800b0ca <HAL_TIM_ConfigClockSource+0x1aa>
 800af98:	4a5c      	ldr	r2, [pc, #368]	; (800b10c <HAL_TIM_ConfigClockSource+0x1ec>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	f200 809e 	bhi.w	800b0dc <HAL_TIM_ConfigClockSource+0x1bc>
 800afa0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800afa4:	f000 8091 	beq.w	800b0ca <HAL_TIM_ConfigClockSource+0x1aa>
 800afa8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800afac:	f200 8096 	bhi.w	800b0dc <HAL_TIM_ConfigClockSource+0x1bc>
 800afb0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afb4:	f000 8089 	beq.w	800b0ca <HAL_TIM_ConfigClockSource+0x1aa>
 800afb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afbc:	f200 808e 	bhi.w	800b0dc <HAL_TIM_ConfigClockSource+0x1bc>
 800afc0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afc4:	d03e      	beq.n	800b044 <HAL_TIM_ConfigClockSource+0x124>
 800afc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800afca:	f200 8087 	bhi.w	800b0dc <HAL_TIM_ConfigClockSource+0x1bc>
 800afce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afd2:	f000 8086 	beq.w	800b0e2 <HAL_TIM_ConfigClockSource+0x1c2>
 800afd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800afda:	d87f      	bhi.n	800b0dc <HAL_TIM_ConfigClockSource+0x1bc>
 800afdc:	2b70      	cmp	r3, #112	; 0x70
 800afde:	d01a      	beq.n	800b016 <HAL_TIM_ConfigClockSource+0xf6>
 800afe0:	2b70      	cmp	r3, #112	; 0x70
 800afe2:	d87b      	bhi.n	800b0dc <HAL_TIM_ConfigClockSource+0x1bc>
 800afe4:	2b60      	cmp	r3, #96	; 0x60
 800afe6:	d050      	beq.n	800b08a <HAL_TIM_ConfigClockSource+0x16a>
 800afe8:	2b60      	cmp	r3, #96	; 0x60
 800afea:	d877      	bhi.n	800b0dc <HAL_TIM_ConfigClockSource+0x1bc>
 800afec:	2b50      	cmp	r3, #80	; 0x50
 800afee:	d03c      	beq.n	800b06a <HAL_TIM_ConfigClockSource+0x14a>
 800aff0:	2b50      	cmp	r3, #80	; 0x50
 800aff2:	d873      	bhi.n	800b0dc <HAL_TIM_ConfigClockSource+0x1bc>
 800aff4:	2b40      	cmp	r3, #64	; 0x40
 800aff6:	d058      	beq.n	800b0aa <HAL_TIM_ConfigClockSource+0x18a>
 800aff8:	2b40      	cmp	r3, #64	; 0x40
 800affa:	d86f      	bhi.n	800b0dc <HAL_TIM_ConfigClockSource+0x1bc>
 800affc:	2b30      	cmp	r3, #48	; 0x30
 800affe:	d064      	beq.n	800b0ca <HAL_TIM_ConfigClockSource+0x1aa>
 800b000:	2b30      	cmp	r3, #48	; 0x30
 800b002:	d86b      	bhi.n	800b0dc <HAL_TIM_ConfigClockSource+0x1bc>
 800b004:	2b20      	cmp	r3, #32
 800b006:	d060      	beq.n	800b0ca <HAL_TIM_ConfigClockSource+0x1aa>
 800b008:	2b20      	cmp	r3, #32
 800b00a:	d867      	bhi.n	800b0dc <HAL_TIM_ConfigClockSource+0x1bc>
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d05c      	beq.n	800b0ca <HAL_TIM_ConfigClockSource+0x1aa>
 800b010:	2b10      	cmp	r3, #16
 800b012:	d05a      	beq.n	800b0ca <HAL_TIM_ConfigClockSource+0x1aa>
 800b014:	e062      	b.n	800b0dc <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	6818      	ldr	r0, [r3, #0]
 800b01a:	683b      	ldr	r3, [r7, #0]
 800b01c:	6899      	ldr	r1, [r3, #8]
 800b01e:	683b      	ldr	r3, [r7, #0]
 800b020:	685a      	ldr	r2, [r3, #4]
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	68db      	ldr	r3, [r3, #12]
 800b026:	f000 fc89 	bl	800b93c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	689b      	ldr	r3, [r3, #8]
 800b030:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b038:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	68ba      	ldr	r2, [r7, #8]
 800b040:	609a      	str	r2, [r3, #8]
      break;
 800b042:	e04f      	b.n	800b0e4 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	6818      	ldr	r0, [r3, #0]
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	6899      	ldr	r1, [r3, #8]
 800b04c:	683b      	ldr	r3, [r7, #0]
 800b04e:	685a      	ldr	r2, [r3, #4]
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	f000 fc72 	bl	800b93c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	689a      	ldr	r2, [r3, #8]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b066:	609a      	str	r2, [r3, #8]
      break;
 800b068:	e03c      	b.n	800b0e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6818      	ldr	r0, [r3, #0]
 800b06e:	683b      	ldr	r3, [r7, #0]
 800b070:	6859      	ldr	r1, [r3, #4]
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	68db      	ldr	r3, [r3, #12]
 800b076:	461a      	mov	r2, r3
 800b078:	f000 fbe2 	bl	800b840 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2150      	movs	r1, #80	; 0x50
 800b082:	4618      	mov	r0, r3
 800b084:	f000 fc3c 	bl	800b900 <TIM_ITRx_SetConfig>
      break;
 800b088:	e02c      	b.n	800b0e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6818      	ldr	r0, [r3, #0]
 800b08e:	683b      	ldr	r3, [r7, #0]
 800b090:	6859      	ldr	r1, [r3, #4]
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	68db      	ldr	r3, [r3, #12]
 800b096:	461a      	mov	r2, r3
 800b098:	f000 fc01 	bl	800b89e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2160      	movs	r1, #96	; 0x60
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	f000 fc2c 	bl	800b900 <TIM_ITRx_SetConfig>
      break;
 800b0a8:	e01c      	b.n	800b0e4 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	6818      	ldr	r0, [r3, #0]
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	6859      	ldr	r1, [r3, #4]
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	68db      	ldr	r3, [r3, #12]
 800b0b6:	461a      	mov	r2, r3
 800b0b8:	f000 fbc2 	bl	800b840 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	2140      	movs	r1, #64	; 0x40
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	f000 fc1c 	bl	800b900 <TIM_ITRx_SetConfig>
      break;
 800b0c8:	e00c      	b.n	800b0e4 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681a      	ldr	r2, [r3, #0]
 800b0ce:	683b      	ldr	r3, [r7, #0]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	4619      	mov	r1, r3
 800b0d4:	4610      	mov	r0, r2
 800b0d6:	f000 fc13 	bl	800b900 <TIM_ITRx_SetConfig>
      break;
 800b0da:	e003      	b.n	800b0e4 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800b0dc:	2301      	movs	r3, #1
 800b0de:	73fb      	strb	r3, [r7, #15]
      break;
 800b0e0:	e000      	b.n	800b0e4 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800b0e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b0f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	ffceff88 	.word	0xffceff88
 800b104:	00100040 	.word	0x00100040
 800b108:	00100030 	.word	0x00100030
 800b10c:	00100020 	.word	0x00100020

0800b110 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b110:	b480      	push	{r7}
 800b112:	b083      	sub	sp, #12
 800b114:	af00      	add	r7, sp, #0
 800b116:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b118:	bf00      	nop
 800b11a:	370c      	adds	r7, #12
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b124:	b480      	push	{r7}
 800b126:	b083      	sub	sp, #12
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b12c:	bf00      	nop
 800b12e:	370c      	adds	r7, #12
 800b130:	46bd      	mov	sp, r7
 800b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b136:	4770      	bx	lr

0800b138 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b138:	b480      	push	{r7}
 800b13a:	b083      	sub	sp, #12
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b140:	bf00      	nop
 800b142:	370c      	adds	r7, #12
 800b144:	46bd      	mov	sp, r7
 800b146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14a:	4770      	bx	lr

0800b14c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b14c:	b480      	push	{r7}
 800b14e:	b083      	sub	sp, #12
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b154:	bf00      	nop
 800b156:	370c      	adds	r7, #12
 800b158:	46bd      	mov	sp, r7
 800b15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15e:	4770      	bx	lr

0800b160 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800b160:	b480      	push	{r7}
 800b162:	b085      	sub	sp, #20
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	4a40      	ldr	r2, [pc, #256]	; (800b274 <TIM_Base_SetConfig+0x114>)
 800b174:	4293      	cmp	r3, r2
 800b176:	d013      	beq.n	800b1a0 <TIM_Base_SetConfig+0x40>
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b17e:	d00f      	beq.n	800b1a0 <TIM_Base_SetConfig+0x40>
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	4a3d      	ldr	r2, [pc, #244]	; (800b278 <TIM_Base_SetConfig+0x118>)
 800b184:	4293      	cmp	r3, r2
 800b186:	d00b      	beq.n	800b1a0 <TIM_Base_SetConfig+0x40>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	4a3c      	ldr	r2, [pc, #240]	; (800b27c <TIM_Base_SetConfig+0x11c>)
 800b18c:	4293      	cmp	r3, r2
 800b18e:	d007      	beq.n	800b1a0 <TIM_Base_SetConfig+0x40>
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	4a3b      	ldr	r2, [pc, #236]	; (800b280 <TIM_Base_SetConfig+0x120>)
 800b194:	4293      	cmp	r3, r2
 800b196:	d003      	beq.n	800b1a0 <TIM_Base_SetConfig+0x40>
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	4a3a      	ldr	r2, [pc, #232]	; (800b284 <TIM_Base_SetConfig+0x124>)
 800b19c:	4293      	cmp	r3, r2
 800b19e:	d108      	bne.n	800b1b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b1a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	4313      	orrs	r3, r2
 800b1b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	4a2f      	ldr	r2, [pc, #188]	; (800b274 <TIM_Base_SetConfig+0x114>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d01f      	beq.n	800b1fa <TIM_Base_SetConfig+0x9a>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1c0:	d01b      	beq.n	800b1fa <TIM_Base_SetConfig+0x9a>
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	4a2c      	ldr	r2, [pc, #176]	; (800b278 <TIM_Base_SetConfig+0x118>)
 800b1c6:	4293      	cmp	r3, r2
 800b1c8:	d017      	beq.n	800b1fa <TIM_Base_SetConfig+0x9a>
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	4a2b      	ldr	r2, [pc, #172]	; (800b27c <TIM_Base_SetConfig+0x11c>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d013      	beq.n	800b1fa <TIM_Base_SetConfig+0x9a>
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	4a2a      	ldr	r2, [pc, #168]	; (800b280 <TIM_Base_SetConfig+0x120>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d00f      	beq.n	800b1fa <TIM_Base_SetConfig+0x9a>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	4a29      	ldr	r2, [pc, #164]	; (800b284 <TIM_Base_SetConfig+0x124>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d00b      	beq.n	800b1fa <TIM_Base_SetConfig+0x9a>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	4a28      	ldr	r2, [pc, #160]	; (800b288 <TIM_Base_SetConfig+0x128>)
 800b1e6:	4293      	cmp	r3, r2
 800b1e8:	d007      	beq.n	800b1fa <TIM_Base_SetConfig+0x9a>
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	4a27      	ldr	r2, [pc, #156]	; (800b28c <TIM_Base_SetConfig+0x12c>)
 800b1ee:	4293      	cmp	r3, r2
 800b1f0:	d003      	beq.n	800b1fa <TIM_Base_SetConfig+0x9a>
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	4a26      	ldr	r2, [pc, #152]	; (800b290 <TIM_Base_SetConfig+0x130>)
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d108      	bne.n	800b20c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	68db      	ldr	r3, [r3, #12]
 800b206:	68fa      	ldr	r2, [r7, #12]
 800b208:	4313      	orrs	r3, r2
 800b20a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b212:	683b      	ldr	r3, [r7, #0]
 800b214:	695b      	ldr	r3, [r3, #20]
 800b216:	4313      	orrs	r3, r2
 800b218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	68fa      	ldr	r2, [r7, #12]
 800b21e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	689a      	ldr	r2, [r3, #8]
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	4a10      	ldr	r2, [pc, #64]	; (800b274 <TIM_Base_SetConfig+0x114>)
 800b234:	4293      	cmp	r3, r2
 800b236:	d00f      	beq.n	800b258 <TIM_Base_SetConfig+0xf8>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	4a12      	ldr	r2, [pc, #72]	; (800b284 <TIM_Base_SetConfig+0x124>)
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d00b      	beq.n	800b258 <TIM_Base_SetConfig+0xf8>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	4a11      	ldr	r2, [pc, #68]	; (800b288 <TIM_Base_SetConfig+0x128>)
 800b244:	4293      	cmp	r3, r2
 800b246:	d007      	beq.n	800b258 <TIM_Base_SetConfig+0xf8>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4a10      	ldr	r2, [pc, #64]	; (800b28c <TIM_Base_SetConfig+0x12c>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	d003      	beq.n	800b258 <TIM_Base_SetConfig+0xf8>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	4a0f      	ldr	r2, [pc, #60]	; (800b290 <TIM_Base_SetConfig+0x130>)
 800b254:	4293      	cmp	r3, r2
 800b256:	d103      	bne.n	800b260 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	691a      	ldr	r2, [r3, #16]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	2201      	movs	r2, #1
 800b264:	615a      	str	r2, [r3, #20]
}
 800b266:	bf00      	nop
 800b268:	3714      	adds	r7, #20
 800b26a:	46bd      	mov	sp, r7
 800b26c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b270:	4770      	bx	lr
 800b272:	bf00      	nop
 800b274:	40010000 	.word	0x40010000
 800b278:	40000400 	.word	0x40000400
 800b27c:	40000800 	.word	0x40000800
 800b280:	40000c00 	.word	0x40000c00
 800b284:	40010400 	.word	0x40010400
 800b288:	40014000 	.word	0x40014000
 800b28c:	40014400 	.word	0x40014400
 800b290:	40014800 	.word	0x40014800

0800b294 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b294:	b480      	push	{r7}
 800b296:	b087      	sub	sp, #28
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6a1b      	ldr	r3, [r3, #32]
 800b2a2:	f023 0201 	bic.w	r2, r3, #1
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a1b      	ldr	r3, [r3, #32]
 800b2ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	685b      	ldr	r3, [r3, #4]
 800b2b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	699b      	ldr	r3, [r3, #24]
 800b2ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b2bc:	68fa      	ldr	r2, [r7, #12]
 800b2be:	4b37      	ldr	r3, [pc, #220]	; (800b39c <TIM_OC1_SetConfig+0x108>)
 800b2c0:	4013      	ands	r3, r2
 800b2c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	f023 0303 	bic.w	r3, r3, #3
 800b2ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	68fa      	ldr	r2, [r7, #12]
 800b2d2:	4313      	orrs	r3, r2
 800b2d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b2d6:	697b      	ldr	r3, [r7, #20]
 800b2d8:	f023 0302 	bic.w	r3, r3, #2
 800b2dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b2de:	683b      	ldr	r3, [r7, #0]
 800b2e0:	689b      	ldr	r3, [r3, #8]
 800b2e2:	697a      	ldr	r2, [r7, #20]
 800b2e4:	4313      	orrs	r3, r2
 800b2e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	4a2d      	ldr	r2, [pc, #180]	; (800b3a0 <TIM_OC1_SetConfig+0x10c>)
 800b2ec:	4293      	cmp	r3, r2
 800b2ee:	d00f      	beq.n	800b310 <TIM_OC1_SetConfig+0x7c>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	4a2c      	ldr	r2, [pc, #176]	; (800b3a4 <TIM_OC1_SetConfig+0x110>)
 800b2f4:	4293      	cmp	r3, r2
 800b2f6:	d00b      	beq.n	800b310 <TIM_OC1_SetConfig+0x7c>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	4a2b      	ldr	r2, [pc, #172]	; (800b3a8 <TIM_OC1_SetConfig+0x114>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d007      	beq.n	800b310 <TIM_OC1_SetConfig+0x7c>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	4a2a      	ldr	r2, [pc, #168]	; (800b3ac <TIM_OC1_SetConfig+0x118>)
 800b304:	4293      	cmp	r3, r2
 800b306:	d003      	beq.n	800b310 <TIM_OC1_SetConfig+0x7c>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	4a29      	ldr	r2, [pc, #164]	; (800b3b0 <TIM_OC1_SetConfig+0x11c>)
 800b30c:	4293      	cmp	r3, r2
 800b30e:	d10c      	bne.n	800b32a <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	f023 0308 	bic.w	r3, r3, #8
 800b316:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b318:	683b      	ldr	r3, [r7, #0]
 800b31a:	68db      	ldr	r3, [r3, #12]
 800b31c:	697a      	ldr	r2, [r7, #20]
 800b31e:	4313      	orrs	r3, r2
 800b320:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	f023 0304 	bic.w	r3, r3, #4
 800b328:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	4a1c      	ldr	r2, [pc, #112]	; (800b3a0 <TIM_OC1_SetConfig+0x10c>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d00f      	beq.n	800b352 <TIM_OC1_SetConfig+0xbe>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	4a1b      	ldr	r2, [pc, #108]	; (800b3a4 <TIM_OC1_SetConfig+0x110>)
 800b336:	4293      	cmp	r3, r2
 800b338:	d00b      	beq.n	800b352 <TIM_OC1_SetConfig+0xbe>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	4a1a      	ldr	r2, [pc, #104]	; (800b3a8 <TIM_OC1_SetConfig+0x114>)
 800b33e:	4293      	cmp	r3, r2
 800b340:	d007      	beq.n	800b352 <TIM_OC1_SetConfig+0xbe>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	4a19      	ldr	r2, [pc, #100]	; (800b3ac <TIM_OC1_SetConfig+0x118>)
 800b346:	4293      	cmp	r3, r2
 800b348:	d003      	beq.n	800b352 <TIM_OC1_SetConfig+0xbe>
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	4a18      	ldr	r2, [pc, #96]	; (800b3b0 <TIM_OC1_SetConfig+0x11c>)
 800b34e:	4293      	cmp	r3, r2
 800b350:	d111      	bne.n	800b376 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b358:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b360:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	695b      	ldr	r3, [r3, #20]
 800b366:	693a      	ldr	r2, [r7, #16]
 800b368:	4313      	orrs	r3, r2
 800b36a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b36c:	683b      	ldr	r3, [r7, #0]
 800b36e:	699b      	ldr	r3, [r3, #24]
 800b370:	693a      	ldr	r2, [r7, #16]
 800b372:	4313      	orrs	r3, r2
 800b374:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	693a      	ldr	r2, [r7, #16]
 800b37a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	685a      	ldr	r2, [r3, #4]
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	697a      	ldr	r2, [r7, #20]
 800b38e:	621a      	str	r2, [r3, #32]
}
 800b390:	bf00      	nop
 800b392:	371c      	adds	r7, #28
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr
 800b39c:	fffeff8f 	.word	0xfffeff8f
 800b3a0:	40010000 	.word	0x40010000
 800b3a4:	40010400 	.word	0x40010400
 800b3a8:	40014000 	.word	0x40014000
 800b3ac:	40014400 	.word	0x40014400
 800b3b0:	40014800 	.word	0x40014800

0800b3b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b3b4:	b480      	push	{r7}
 800b3b6:	b087      	sub	sp, #28
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
 800b3bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6a1b      	ldr	r3, [r3, #32]
 800b3c2:	f023 0210 	bic.w	r2, r3, #16
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	6a1b      	ldr	r3, [r3, #32]
 800b3ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	685b      	ldr	r3, [r3, #4]
 800b3d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	699b      	ldr	r3, [r3, #24]
 800b3da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b3dc:	68fa      	ldr	r2, [r7, #12]
 800b3de:	4b34      	ldr	r3, [pc, #208]	; (800b4b0 <TIM_OC2_SetConfig+0xfc>)
 800b3e0:	4013      	ands	r3, r2
 800b3e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b3ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b3ec:	683b      	ldr	r3, [r7, #0]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	021b      	lsls	r3, r3, #8
 800b3f2:	68fa      	ldr	r2, [r7, #12]
 800b3f4:	4313      	orrs	r3, r2
 800b3f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b3f8:	697b      	ldr	r3, [r7, #20]
 800b3fa:	f023 0320 	bic.w	r3, r3, #32
 800b3fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b400:	683b      	ldr	r3, [r7, #0]
 800b402:	689b      	ldr	r3, [r3, #8]
 800b404:	011b      	lsls	r3, r3, #4
 800b406:	697a      	ldr	r2, [r7, #20]
 800b408:	4313      	orrs	r3, r2
 800b40a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	4a29      	ldr	r2, [pc, #164]	; (800b4b4 <TIM_OC2_SetConfig+0x100>)
 800b410:	4293      	cmp	r3, r2
 800b412:	d003      	beq.n	800b41c <TIM_OC2_SetConfig+0x68>
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	4a28      	ldr	r2, [pc, #160]	; (800b4b8 <TIM_OC2_SetConfig+0x104>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d10d      	bne.n	800b438 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b41c:	697b      	ldr	r3, [r7, #20]
 800b41e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b422:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	68db      	ldr	r3, [r3, #12]
 800b428:	011b      	lsls	r3, r3, #4
 800b42a:	697a      	ldr	r2, [r7, #20]
 800b42c:	4313      	orrs	r3, r2
 800b42e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b430:	697b      	ldr	r3, [r7, #20]
 800b432:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b436:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	4a1e      	ldr	r2, [pc, #120]	; (800b4b4 <TIM_OC2_SetConfig+0x100>)
 800b43c:	4293      	cmp	r3, r2
 800b43e:	d00f      	beq.n	800b460 <TIM_OC2_SetConfig+0xac>
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	4a1d      	ldr	r2, [pc, #116]	; (800b4b8 <TIM_OC2_SetConfig+0x104>)
 800b444:	4293      	cmp	r3, r2
 800b446:	d00b      	beq.n	800b460 <TIM_OC2_SetConfig+0xac>
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	4a1c      	ldr	r2, [pc, #112]	; (800b4bc <TIM_OC2_SetConfig+0x108>)
 800b44c:	4293      	cmp	r3, r2
 800b44e:	d007      	beq.n	800b460 <TIM_OC2_SetConfig+0xac>
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	4a1b      	ldr	r2, [pc, #108]	; (800b4c0 <TIM_OC2_SetConfig+0x10c>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d003      	beq.n	800b460 <TIM_OC2_SetConfig+0xac>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	4a1a      	ldr	r2, [pc, #104]	; (800b4c4 <TIM_OC2_SetConfig+0x110>)
 800b45c:	4293      	cmp	r3, r2
 800b45e:	d113      	bne.n	800b488 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b466:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b46e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	695b      	ldr	r3, [r3, #20]
 800b474:	009b      	lsls	r3, r3, #2
 800b476:	693a      	ldr	r2, [r7, #16]
 800b478:	4313      	orrs	r3, r2
 800b47a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	699b      	ldr	r3, [r3, #24]
 800b480:	009b      	lsls	r3, r3, #2
 800b482:	693a      	ldr	r2, [r7, #16]
 800b484:	4313      	orrs	r3, r2
 800b486:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	693a      	ldr	r2, [r7, #16]
 800b48c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	68fa      	ldr	r2, [r7, #12]
 800b492:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b494:	683b      	ldr	r3, [r7, #0]
 800b496:	685a      	ldr	r2, [r3, #4]
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	697a      	ldr	r2, [r7, #20]
 800b4a0:	621a      	str	r2, [r3, #32]
}
 800b4a2:	bf00      	nop
 800b4a4:	371c      	adds	r7, #28
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	feff8fff 	.word	0xfeff8fff
 800b4b4:	40010000 	.word	0x40010000
 800b4b8:	40010400 	.word	0x40010400
 800b4bc:	40014000 	.word	0x40014000
 800b4c0:	40014400 	.word	0x40014400
 800b4c4:	40014800 	.word	0x40014800

0800b4c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b087      	sub	sp, #28
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	6a1b      	ldr	r3, [r3, #32]
 800b4d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	6a1b      	ldr	r3, [r3, #32]
 800b4e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	69db      	ldr	r3, [r3, #28]
 800b4ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b4f0:	68fa      	ldr	r2, [r7, #12]
 800b4f2:	4b33      	ldr	r3, [pc, #204]	; (800b5c0 <TIM_OC3_SetConfig+0xf8>)
 800b4f4:	4013      	ands	r3, r2
 800b4f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f023 0303 	bic.w	r3, r3, #3
 800b4fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	68fa      	ldr	r2, [r7, #12]
 800b506:	4313      	orrs	r3, r2
 800b508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b510:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	021b      	lsls	r3, r3, #8
 800b518:	697a      	ldr	r2, [r7, #20]
 800b51a:	4313      	orrs	r3, r2
 800b51c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	4a28      	ldr	r2, [pc, #160]	; (800b5c4 <TIM_OC3_SetConfig+0xfc>)
 800b522:	4293      	cmp	r3, r2
 800b524:	d003      	beq.n	800b52e <TIM_OC3_SetConfig+0x66>
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	4a27      	ldr	r2, [pc, #156]	; (800b5c8 <TIM_OC3_SetConfig+0x100>)
 800b52a:	4293      	cmp	r3, r2
 800b52c:	d10d      	bne.n	800b54a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b534:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	68db      	ldr	r3, [r3, #12]
 800b53a:	021b      	lsls	r3, r3, #8
 800b53c:	697a      	ldr	r2, [r7, #20]
 800b53e:	4313      	orrs	r3, r2
 800b540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	4a1d      	ldr	r2, [pc, #116]	; (800b5c4 <TIM_OC3_SetConfig+0xfc>)
 800b54e:	4293      	cmp	r3, r2
 800b550:	d00f      	beq.n	800b572 <TIM_OC3_SetConfig+0xaa>
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	4a1c      	ldr	r2, [pc, #112]	; (800b5c8 <TIM_OC3_SetConfig+0x100>)
 800b556:	4293      	cmp	r3, r2
 800b558:	d00b      	beq.n	800b572 <TIM_OC3_SetConfig+0xaa>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	4a1b      	ldr	r2, [pc, #108]	; (800b5cc <TIM_OC3_SetConfig+0x104>)
 800b55e:	4293      	cmp	r3, r2
 800b560:	d007      	beq.n	800b572 <TIM_OC3_SetConfig+0xaa>
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	4a1a      	ldr	r2, [pc, #104]	; (800b5d0 <TIM_OC3_SetConfig+0x108>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d003      	beq.n	800b572 <TIM_OC3_SetConfig+0xaa>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	4a19      	ldr	r2, [pc, #100]	; (800b5d4 <TIM_OC3_SetConfig+0x10c>)
 800b56e:	4293      	cmp	r3, r2
 800b570:	d113      	bne.n	800b59a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b572:	693b      	ldr	r3, [r7, #16]
 800b574:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b57a:	693b      	ldr	r3, [r7, #16]
 800b57c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	695b      	ldr	r3, [r3, #20]
 800b586:	011b      	lsls	r3, r3, #4
 800b588:	693a      	ldr	r2, [r7, #16]
 800b58a:	4313      	orrs	r3, r2
 800b58c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	699b      	ldr	r3, [r3, #24]
 800b592:	011b      	lsls	r3, r3, #4
 800b594:	693a      	ldr	r2, [r7, #16]
 800b596:	4313      	orrs	r3, r2
 800b598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	693a      	ldr	r2, [r7, #16]
 800b59e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	68fa      	ldr	r2, [r7, #12]
 800b5a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	685a      	ldr	r2, [r3, #4]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	697a      	ldr	r2, [r7, #20]
 800b5b2:	621a      	str	r2, [r3, #32]
}
 800b5b4:	bf00      	nop
 800b5b6:	371c      	adds	r7, #28
 800b5b8:	46bd      	mov	sp, r7
 800b5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5be:	4770      	bx	lr
 800b5c0:	fffeff8f 	.word	0xfffeff8f
 800b5c4:	40010000 	.word	0x40010000
 800b5c8:	40010400 	.word	0x40010400
 800b5cc:	40014000 	.word	0x40014000
 800b5d0:	40014400 	.word	0x40014400
 800b5d4:	40014800 	.word	0x40014800

0800b5d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b087      	sub	sp, #28
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6a1b      	ldr	r3, [r3, #32]
 800b5e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6a1b      	ldr	r3, [r3, #32]
 800b5f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	69db      	ldr	r3, [r3, #28]
 800b5fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b600:	68fa      	ldr	r2, [r7, #12]
 800b602:	4b24      	ldr	r3, [pc, #144]	; (800b694 <TIM_OC4_SetConfig+0xbc>)
 800b604:	4013      	ands	r3, r2
 800b606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b60e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b610:	683b      	ldr	r3, [r7, #0]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	021b      	lsls	r3, r3, #8
 800b616:	68fa      	ldr	r2, [r7, #12]
 800b618:	4313      	orrs	r3, r2
 800b61a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b622:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b624:	683b      	ldr	r3, [r7, #0]
 800b626:	689b      	ldr	r3, [r3, #8]
 800b628:	031b      	lsls	r3, r3, #12
 800b62a:	693a      	ldr	r2, [r7, #16]
 800b62c:	4313      	orrs	r3, r2
 800b62e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	4a19      	ldr	r2, [pc, #100]	; (800b698 <TIM_OC4_SetConfig+0xc0>)
 800b634:	4293      	cmp	r3, r2
 800b636:	d00f      	beq.n	800b658 <TIM_OC4_SetConfig+0x80>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	4a18      	ldr	r2, [pc, #96]	; (800b69c <TIM_OC4_SetConfig+0xc4>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d00b      	beq.n	800b658 <TIM_OC4_SetConfig+0x80>
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	4a17      	ldr	r2, [pc, #92]	; (800b6a0 <TIM_OC4_SetConfig+0xc8>)
 800b644:	4293      	cmp	r3, r2
 800b646:	d007      	beq.n	800b658 <TIM_OC4_SetConfig+0x80>
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	4a16      	ldr	r2, [pc, #88]	; (800b6a4 <TIM_OC4_SetConfig+0xcc>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d003      	beq.n	800b658 <TIM_OC4_SetConfig+0x80>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	4a15      	ldr	r2, [pc, #84]	; (800b6a8 <TIM_OC4_SetConfig+0xd0>)
 800b654:	4293      	cmp	r3, r2
 800b656:	d109      	bne.n	800b66c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b658:	697b      	ldr	r3, [r7, #20]
 800b65a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b65e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	695b      	ldr	r3, [r3, #20]
 800b664:	019b      	lsls	r3, r3, #6
 800b666:	697a      	ldr	r2, [r7, #20]
 800b668:	4313      	orrs	r3, r2
 800b66a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	697a      	ldr	r2, [r7, #20]
 800b670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	68fa      	ldr	r2, [r7, #12]
 800b676:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	685a      	ldr	r2, [r3, #4]
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	693a      	ldr	r2, [r7, #16]
 800b684:	621a      	str	r2, [r3, #32]
}
 800b686:	bf00      	nop
 800b688:	371c      	adds	r7, #28
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr
 800b692:	bf00      	nop
 800b694:	feff8fff 	.word	0xfeff8fff
 800b698:	40010000 	.word	0x40010000
 800b69c:	40010400 	.word	0x40010400
 800b6a0:	40014000 	.word	0x40014000
 800b6a4:	40014400 	.word	0x40014400
 800b6a8:	40014800 	.word	0x40014800

0800b6ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b6ac:	b480      	push	{r7}
 800b6ae:	b087      	sub	sp, #28
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	6a1b      	ldr	r3, [r3, #32]
 800b6ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6a1b      	ldr	r3, [r3, #32]
 800b6c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b6d4:	68fa      	ldr	r2, [r7, #12]
 800b6d6:	4b21      	ldr	r3, [pc, #132]	; (800b75c <TIM_OC5_SetConfig+0xb0>)
 800b6d8:	4013      	ands	r3, r2
 800b6da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	68fa      	ldr	r2, [r7, #12]
 800b6e2:	4313      	orrs	r3, r2
 800b6e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b6e6:	693b      	ldr	r3, [r7, #16]
 800b6e8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b6ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b6ee:	683b      	ldr	r3, [r7, #0]
 800b6f0:	689b      	ldr	r3, [r3, #8]
 800b6f2:	041b      	lsls	r3, r3, #16
 800b6f4:	693a      	ldr	r2, [r7, #16]
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	4a18      	ldr	r2, [pc, #96]	; (800b760 <TIM_OC5_SetConfig+0xb4>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d00f      	beq.n	800b722 <TIM_OC5_SetConfig+0x76>
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	4a17      	ldr	r2, [pc, #92]	; (800b764 <TIM_OC5_SetConfig+0xb8>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d00b      	beq.n	800b722 <TIM_OC5_SetConfig+0x76>
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	4a16      	ldr	r2, [pc, #88]	; (800b768 <TIM_OC5_SetConfig+0xbc>)
 800b70e:	4293      	cmp	r3, r2
 800b710:	d007      	beq.n	800b722 <TIM_OC5_SetConfig+0x76>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	4a15      	ldr	r2, [pc, #84]	; (800b76c <TIM_OC5_SetConfig+0xc0>)
 800b716:	4293      	cmp	r3, r2
 800b718:	d003      	beq.n	800b722 <TIM_OC5_SetConfig+0x76>
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	4a14      	ldr	r2, [pc, #80]	; (800b770 <TIM_OC5_SetConfig+0xc4>)
 800b71e:	4293      	cmp	r3, r2
 800b720:	d109      	bne.n	800b736 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b728:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b72a:	683b      	ldr	r3, [r7, #0]
 800b72c:	695b      	ldr	r3, [r3, #20]
 800b72e:	021b      	lsls	r3, r3, #8
 800b730:	697a      	ldr	r2, [r7, #20]
 800b732:	4313      	orrs	r3, r2
 800b734:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	697a      	ldr	r2, [r7, #20]
 800b73a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	68fa      	ldr	r2, [r7, #12]
 800b740:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	685a      	ldr	r2, [r3, #4]
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	693a      	ldr	r2, [r7, #16]
 800b74e:	621a      	str	r2, [r3, #32]
}
 800b750:	bf00      	nop
 800b752:	371c      	adds	r7, #28
 800b754:	46bd      	mov	sp, r7
 800b756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75a:	4770      	bx	lr
 800b75c:	fffeff8f 	.word	0xfffeff8f
 800b760:	40010000 	.word	0x40010000
 800b764:	40010400 	.word	0x40010400
 800b768:	40014000 	.word	0x40014000
 800b76c:	40014400 	.word	0x40014400
 800b770:	40014800 	.word	0x40014800

0800b774 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b774:	b480      	push	{r7}
 800b776:	b087      	sub	sp, #28
 800b778:	af00      	add	r7, sp, #0
 800b77a:	6078      	str	r0, [r7, #4]
 800b77c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6a1b      	ldr	r3, [r3, #32]
 800b782:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6a1b      	ldr	r3, [r3, #32]
 800b78e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	685b      	ldr	r3, [r3, #4]
 800b794:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b79a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b79c:	68fa      	ldr	r2, [r7, #12]
 800b79e:	4b22      	ldr	r3, [pc, #136]	; (800b828 <TIM_OC6_SetConfig+0xb4>)
 800b7a0:	4013      	ands	r3, r2
 800b7a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7a4:	683b      	ldr	r3, [r7, #0]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	021b      	lsls	r3, r3, #8
 800b7aa:	68fa      	ldr	r2, [r7, #12]
 800b7ac:	4313      	orrs	r3, r2
 800b7ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b7b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	689b      	ldr	r3, [r3, #8]
 800b7bc:	051b      	lsls	r3, r3, #20
 800b7be:	693a      	ldr	r2, [r7, #16]
 800b7c0:	4313      	orrs	r3, r2
 800b7c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	4a19      	ldr	r2, [pc, #100]	; (800b82c <TIM_OC6_SetConfig+0xb8>)
 800b7c8:	4293      	cmp	r3, r2
 800b7ca:	d00f      	beq.n	800b7ec <TIM_OC6_SetConfig+0x78>
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	4a18      	ldr	r2, [pc, #96]	; (800b830 <TIM_OC6_SetConfig+0xbc>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d00b      	beq.n	800b7ec <TIM_OC6_SetConfig+0x78>
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	4a17      	ldr	r2, [pc, #92]	; (800b834 <TIM_OC6_SetConfig+0xc0>)
 800b7d8:	4293      	cmp	r3, r2
 800b7da:	d007      	beq.n	800b7ec <TIM_OC6_SetConfig+0x78>
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	4a16      	ldr	r2, [pc, #88]	; (800b838 <TIM_OC6_SetConfig+0xc4>)
 800b7e0:	4293      	cmp	r3, r2
 800b7e2:	d003      	beq.n	800b7ec <TIM_OC6_SetConfig+0x78>
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	4a15      	ldr	r2, [pc, #84]	; (800b83c <TIM_OC6_SetConfig+0xc8>)
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	d109      	bne.n	800b800 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b7f2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	695b      	ldr	r3, [r3, #20]
 800b7f8:	029b      	lsls	r3, r3, #10
 800b7fa:	697a      	ldr	r2, [r7, #20]
 800b7fc:	4313      	orrs	r3, r2
 800b7fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	697a      	ldr	r2, [r7, #20]
 800b804:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	68fa      	ldr	r2, [r7, #12]
 800b80a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b80c:	683b      	ldr	r3, [r7, #0]
 800b80e:	685a      	ldr	r2, [r3, #4]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	693a      	ldr	r2, [r7, #16]
 800b818:	621a      	str	r2, [r3, #32]
}
 800b81a:	bf00      	nop
 800b81c:	371c      	adds	r7, #28
 800b81e:	46bd      	mov	sp, r7
 800b820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b824:	4770      	bx	lr
 800b826:	bf00      	nop
 800b828:	feff8fff 	.word	0xfeff8fff
 800b82c:	40010000 	.word	0x40010000
 800b830:	40010400 	.word	0x40010400
 800b834:	40014000 	.word	0x40014000
 800b838:	40014400 	.word	0x40014400
 800b83c:	40014800 	.word	0x40014800

0800b840 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b840:	b480      	push	{r7}
 800b842:	b087      	sub	sp, #28
 800b844:	af00      	add	r7, sp, #0
 800b846:	60f8      	str	r0, [r7, #12]
 800b848:	60b9      	str	r1, [r7, #8]
 800b84a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	6a1b      	ldr	r3, [r3, #32]
 800b850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	6a1b      	ldr	r3, [r3, #32]
 800b856:	f023 0201 	bic.w	r2, r3, #1
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	699b      	ldr	r3, [r3, #24]
 800b862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b864:	693b      	ldr	r3, [r7, #16]
 800b866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b86a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	011b      	lsls	r3, r3, #4
 800b870:	693a      	ldr	r2, [r7, #16]
 800b872:	4313      	orrs	r3, r2
 800b874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	f023 030a 	bic.w	r3, r3, #10
 800b87c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b87e:	697a      	ldr	r2, [r7, #20]
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	4313      	orrs	r3, r2
 800b884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	693a      	ldr	r2, [r7, #16]
 800b88a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	697a      	ldr	r2, [r7, #20]
 800b890:	621a      	str	r2, [r3, #32]
}
 800b892:	bf00      	nop
 800b894:	371c      	adds	r7, #28
 800b896:	46bd      	mov	sp, r7
 800b898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89c:	4770      	bx	lr

0800b89e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b89e:	b480      	push	{r7}
 800b8a0:	b087      	sub	sp, #28
 800b8a2:	af00      	add	r7, sp, #0
 800b8a4:	60f8      	str	r0, [r7, #12]
 800b8a6:	60b9      	str	r1, [r7, #8]
 800b8a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	6a1b      	ldr	r3, [r3, #32]
 800b8ae:	f023 0210 	bic.w	r2, r3, #16
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	699b      	ldr	r3, [r3, #24]
 800b8ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	6a1b      	ldr	r3, [r3, #32]
 800b8c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b8c2:	697b      	ldr	r3, [r7, #20]
 800b8c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b8c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	031b      	lsls	r3, r3, #12
 800b8ce:	697a      	ldr	r2, [r7, #20]
 800b8d0:	4313      	orrs	r3, r2
 800b8d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b8d4:	693b      	ldr	r3, [r7, #16]
 800b8d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b8da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	011b      	lsls	r3, r3, #4
 800b8e0:	693a      	ldr	r2, [r7, #16]
 800b8e2:	4313      	orrs	r3, r2
 800b8e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	697a      	ldr	r2, [r7, #20]
 800b8ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	693a      	ldr	r2, [r7, #16]
 800b8f0:	621a      	str	r2, [r3, #32]
}
 800b8f2:	bf00      	nop
 800b8f4:	371c      	adds	r7, #28
 800b8f6:	46bd      	mov	sp, r7
 800b8f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8fc:	4770      	bx	lr
	...

0800b900 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b900:	b480      	push	{r7}
 800b902:	b085      	sub	sp, #20
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	689b      	ldr	r3, [r3, #8]
 800b90e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	4b09      	ldr	r3, [pc, #36]	; (800b938 <TIM_ITRx_SetConfig+0x38>)
 800b914:	4013      	ands	r3, r2
 800b916:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b918:	683a      	ldr	r2, [r7, #0]
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	4313      	orrs	r3, r2
 800b91e:	f043 0307 	orr.w	r3, r3, #7
 800b922:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	68fa      	ldr	r2, [r7, #12]
 800b928:	609a      	str	r2, [r3, #8]
}
 800b92a:	bf00      	nop
 800b92c:	3714      	adds	r7, #20
 800b92e:	46bd      	mov	sp, r7
 800b930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b934:	4770      	bx	lr
 800b936:	bf00      	nop
 800b938:	ffcfff8f 	.word	0xffcfff8f

0800b93c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b93c:	b480      	push	{r7}
 800b93e:	b087      	sub	sp, #28
 800b940:	af00      	add	r7, sp, #0
 800b942:	60f8      	str	r0, [r7, #12]
 800b944:	60b9      	str	r1, [r7, #8]
 800b946:	607a      	str	r2, [r7, #4]
 800b948:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	689b      	ldr	r3, [r3, #8]
 800b94e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b950:	697b      	ldr	r3, [r7, #20]
 800b952:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b956:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	021a      	lsls	r2, r3, #8
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	431a      	orrs	r2, r3
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	4313      	orrs	r3, r2
 800b964:	697a      	ldr	r2, [r7, #20]
 800b966:	4313      	orrs	r3, r2
 800b968:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	697a      	ldr	r2, [r7, #20]
 800b96e:	609a      	str	r2, [r3, #8]
}
 800b970:	bf00      	nop
 800b972:	371c      	adds	r7, #28
 800b974:	46bd      	mov	sp, r7
 800b976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b97a:	4770      	bx	lr

0800b97c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b087      	sub	sp, #28
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b988:	68bb      	ldr	r3, [r7, #8]
 800b98a:	f003 031f 	and.w	r3, r3, #31
 800b98e:	2201      	movs	r2, #1
 800b990:	fa02 f303 	lsl.w	r3, r2, r3
 800b994:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	6a1a      	ldr	r2, [r3, #32]
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	43db      	mvns	r3, r3
 800b99e:	401a      	ands	r2, r3
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	6a1a      	ldr	r2, [r3, #32]
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	f003 031f 	and.w	r3, r3, #31
 800b9ae:	6879      	ldr	r1, [r7, #4]
 800b9b0:	fa01 f303 	lsl.w	r3, r1, r3
 800b9b4:	431a      	orrs	r2, r3
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	621a      	str	r2, [r3, #32]
}
 800b9ba:	bf00      	nop
 800b9bc:	371c      	adds	r7, #28
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9c4:	4770      	bx	lr
	...

0800b9c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b9c8:	b480      	push	{r7}
 800b9ca:	b085      	sub	sp, #20
 800b9cc:	af00      	add	r7, sp, #0
 800b9ce:	6078      	str	r0, [r7, #4]
 800b9d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	d101      	bne.n	800b9e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b9dc:	2302      	movs	r3, #2
 800b9de:	e06d      	b.n	800babc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2202      	movs	r2, #2
 800b9ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	689b      	ldr	r3, [r3, #8]
 800b9fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	4a30      	ldr	r2, [pc, #192]	; (800bac8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ba06:	4293      	cmp	r3, r2
 800ba08:	d004      	beq.n	800ba14 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4a2f      	ldr	r2, [pc, #188]	; (800bacc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ba10:	4293      	cmp	r3, r2
 800ba12:	d108      	bne.n	800ba26 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800ba1a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800ba1c:	683b      	ldr	r3, [r7, #0]
 800ba1e:	685b      	ldr	r3, [r3, #4]
 800ba20:	68fa      	ldr	r2, [r7, #12]
 800ba22:	4313      	orrs	r3, r2
 800ba24:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba26:	68fb      	ldr	r3, [r7, #12]
 800ba28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ba2c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba2e:	683b      	ldr	r3, [r7, #0]
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	68fa      	ldr	r2, [r7, #12]
 800ba34:	4313      	orrs	r3, r2
 800ba36:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	68fa      	ldr	r2, [r7, #12]
 800ba3e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	4a20      	ldr	r2, [pc, #128]	; (800bac8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ba46:	4293      	cmp	r3, r2
 800ba48:	d022      	beq.n	800ba90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba52:	d01d      	beq.n	800ba90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a1d      	ldr	r2, [pc, #116]	; (800bad0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d018      	beq.n	800ba90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4a1c      	ldr	r2, [pc, #112]	; (800bad4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d013      	beq.n	800ba90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	4a1a      	ldr	r2, [pc, #104]	; (800bad8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ba6e:	4293      	cmp	r3, r2
 800ba70:	d00e      	beq.n	800ba90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	681b      	ldr	r3, [r3, #0]
 800ba76:	4a15      	ldr	r2, [pc, #84]	; (800bacc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ba78:	4293      	cmp	r3, r2
 800ba7a:	d009      	beq.n	800ba90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	4a16      	ldr	r2, [pc, #88]	; (800badc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ba82:	4293      	cmp	r3, r2
 800ba84:	d004      	beq.n	800ba90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a15      	ldr	r2, [pc, #84]	; (800bae0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	d10c      	bne.n	800baaa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ba96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	689b      	ldr	r3, [r3, #8]
 800ba9c:	68ba      	ldr	r2, [r7, #8]
 800ba9e:	4313      	orrs	r3, r2
 800baa0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	68ba      	ldr	r2, [r7, #8]
 800baa8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2201      	movs	r2, #1
 800baae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	2200      	movs	r2, #0
 800bab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800baba:	2300      	movs	r3, #0
}
 800babc:	4618      	mov	r0, r3
 800babe:	3714      	adds	r7, #20
 800bac0:	46bd      	mov	sp, r7
 800bac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac6:	4770      	bx	lr
 800bac8:	40010000 	.word	0x40010000
 800bacc:	40010400 	.word	0x40010400
 800bad0:	40000400 	.word	0x40000400
 800bad4:	40000800 	.word	0x40000800
 800bad8:	40000c00 	.word	0x40000c00
 800badc:	40001800 	.word	0x40001800
 800bae0:	40014000 	.word	0x40014000

0800bae4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b085      	sub	sp, #20
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800baee:	2300      	movs	r3, #0
 800baf0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800baf8:	2b01      	cmp	r3, #1
 800bafa:	d101      	bne.n	800bb00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800bafc:	2302      	movs	r3, #2
 800bafe:	e065      	b.n	800bbcc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2201      	movs	r2, #1
 800bb04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800bb0e:	683b      	ldr	r3, [r7, #0]
 800bb10:	68db      	ldr	r3, [r3, #12]
 800bb12:	4313      	orrs	r3, r2
 800bb14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb1c:	683b      	ldr	r3, [r7, #0]
 800bb1e:	689b      	ldr	r3, [r3, #8]
 800bb20:	4313      	orrs	r3, r2
 800bb22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	4313      	orrs	r3, r2
 800bb30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800bb38:	683b      	ldr	r3, [r7, #0]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4313      	orrs	r3, r2
 800bb3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800bb46:	683b      	ldr	r3, [r7, #0]
 800bb48:	691b      	ldr	r3, [r3, #16]
 800bb4a:	4313      	orrs	r3, r2
 800bb4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	695b      	ldr	r3, [r3, #20]
 800bb58:	4313      	orrs	r3, r2
 800bb5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb66:	4313      	orrs	r3, r2
 800bb68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	699b      	ldr	r3, [r3, #24]
 800bb74:	041b      	lsls	r3, r3, #16
 800bb76:	4313      	orrs	r3, r2
 800bb78:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	4a16      	ldr	r2, [pc, #88]	; (800bbd8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800bb80:	4293      	cmp	r3, r2
 800bb82:	d004      	beq.n	800bb8e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	4a14      	ldr	r2, [pc, #80]	; (800bbdc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800bb8a:	4293      	cmp	r3, r2
 800bb8c:	d115      	bne.n	800bbba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bb98:	051b      	lsls	r3, r3, #20
 800bb9a:	4313      	orrs	r3, r2
 800bb9c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bba4:	683b      	ldr	r3, [r7, #0]
 800bba6:	69db      	ldr	r3, [r3, #28]
 800bba8:	4313      	orrs	r3, r2
 800bbaa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	6a1b      	ldr	r3, [r3, #32]
 800bbb6:	4313      	orrs	r3, r2
 800bbb8:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	68fa      	ldr	r2, [r7, #12]
 800bbc0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bbca:	2300      	movs	r3, #0
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3714      	adds	r7, #20
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd6:	4770      	bx	lr
 800bbd8:	40010000 	.word	0x40010000
 800bbdc:	40010400 	.word	0x40010400

0800bbe0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bbe0:	b480      	push	{r7}
 800bbe2:	b083      	sub	sp, #12
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bbe8:	bf00      	nop
 800bbea:	370c      	adds	r7, #12
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr

0800bbf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bbf4:	b480      	push	{r7}
 800bbf6:	b083      	sub	sp, #12
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bbfc:	bf00      	nop
 800bbfe:	370c      	adds	r7, #12
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr

0800bc08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b083      	sub	sp, #12
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bc10:	bf00      	nop
 800bc12:	370c      	adds	r7, #12
 800bc14:	46bd      	mov	sp, r7
 800bc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1a:	4770      	bx	lr

0800bc1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b082      	sub	sp, #8
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d101      	bne.n	800bc2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc2a:	2301      	movs	r3, #1
 800bc2c:	e042      	b.n	800bcb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d106      	bne.n	800bc46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f7f8 fa4f 	bl	80040e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2224      	movs	r2, #36	; 0x24
 800bc4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	681a      	ldr	r2, [r3, #0]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f022 0201 	bic.w	r2, r2, #1
 800bc5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 fdee 	bl	800c840 <UART_SetConfig>
 800bc64:	4603      	mov	r3, r0
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d101      	bne.n	800bc6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	e022      	b.n	800bcb4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d002      	beq.n	800bc7c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f001 fb42 	bl	800d300 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	681b      	ldr	r3, [r3, #0]
 800bc80:	685a      	ldr	r2, [r3, #4]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bc8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	689a      	ldr	r2, [r3, #8]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bc9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	681a      	ldr	r2, [r3, #0]
 800bca2:	687b      	ldr	r3, [r7, #4]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	f042 0201 	orr.w	r2, r2, #1
 800bcaa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bcac:	6878      	ldr	r0, [r7, #4]
 800bcae:	f001 fbc9 	bl	800d444 <UART_CheckIdleState>
 800bcb2:	4603      	mov	r3, r0
}
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	3708      	adds	r7, #8
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b08a      	sub	sp, #40	; 0x28
 800bcc0:	af02      	add	r7, sp, #8
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	603b      	str	r3, [r7, #0]
 800bcc8:	4613      	mov	r3, r2
 800bcca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bcd2:	2b20      	cmp	r3, #32
 800bcd4:	f040 8083 	bne.w	800bdde <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d002      	beq.n	800bce4 <HAL_UART_Transmit+0x28>
 800bcde:	88fb      	ldrh	r3, [r7, #6]
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d101      	bne.n	800bce8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800bce4:	2301      	movs	r3, #1
 800bce6:	e07b      	b.n	800bde0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bcee:	2b01      	cmp	r3, #1
 800bcf0:	d101      	bne.n	800bcf6 <HAL_UART_Transmit+0x3a>
 800bcf2:	2302      	movs	r3, #2
 800bcf4:	e074      	b.n	800bde0 <HAL_UART_Transmit+0x124>
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2201      	movs	r2, #1
 800bcfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2200      	movs	r2, #0
 800bd02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2221      	movs	r2, #33	; 0x21
 800bd0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800bd0e:	f7f8 fccf 	bl	80046b0 <HAL_GetTick>
 800bd12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	88fa      	ldrh	r2, [r7, #6]
 800bd18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	88fa      	ldrh	r2, [r7, #6]
 800bd20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	689b      	ldr	r3, [r3, #8]
 800bd28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd2c:	d108      	bne.n	800bd40 <HAL_UART_Transmit+0x84>
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	691b      	ldr	r3, [r3, #16]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d104      	bne.n	800bd40 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800bd36:	2300      	movs	r3, #0
 800bd38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800bd3a:	68bb      	ldr	r3, [r7, #8]
 800bd3c:	61bb      	str	r3, [r7, #24]
 800bd3e:	e003      	b.n	800bd48 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bd44:	2300      	movs	r3, #0
 800bd46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2200      	movs	r2, #0
 800bd4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800bd50:	e02c      	b.n	800bdac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	9300      	str	r3, [sp, #0]
 800bd56:	697b      	ldr	r3, [r7, #20]
 800bd58:	2200      	movs	r2, #0
 800bd5a:	2180      	movs	r1, #128	; 0x80
 800bd5c:	68f8      	ldr	r0, [r7, #12]
 800bd5e:	f001 fbbc 	bl	800d4da <UART_WaitOnFlagUntilTimeout>
 800bd62:	4603      	mov	r3, r0
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d001      	beq.n	800bd6c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800bd68:	2303      	movs	r3, #3
 800bd6a:	e039      	b.n	800bde0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	d10b      	bne.n	800bd8a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800bd72:	69bb      	ldr	r3, [r7, #24]
 800bd74:	881b      	ldrh	r3, [r3, #0]
 800bd76:	461a      	mov	r2, r3
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800bd80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800bd82:	69bb      	ldr	r3, [r7, #24]
 800bd84:	3302      	adds	r3, #2
 800bd86:	61bb      	str	r3, [r7, #24]
 800bd88:	e007      	b.n	800bd9a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800bd8a:	69fb      	ldr	r3, [r7, #28]
 800bd8c:	781a      	ldrb	r2, [r3, #0]
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800bd94:	69fb      	ldr	r3, [r7, #28]
 800bd96:	3301      	adds	r3, #1
 800bd98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	3b01      	subs	r3, #1
 800bda4:	b29a      	uxth	r2, r3
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800bdb2:	b29b      	uxth	r3, r3
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d1cc      	bne.n	800bd52 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	9300      	str	r3, [sp, #0]
 800bdbc:	697b      	ldr	r3, [r7, #20]
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	2140      	movs	r1, #64	; 0x40
 800bdc2:	68f8      	ldr	r0, [r7, #12]
 800bdc4:	f001 fb89 	bl	800d4da <UART_WaitOnFlagUntilTimeout>
 800bdc8:	4603      	mov	r3, r0
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d001      	beq.n	800bdd2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800bdce:	2303      	movs	r3, #3
 800bdd0:	e006      	b.n	800bde0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	2220      	movs	r2, #32
 800bdd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800bdda:	2300      	movs	r3, #0
 800bddc:	e000      	b.n	800bde0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800bdde:	2302      	movs	r3, #2
  }
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3720      	adds	r7, #32
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b08a      	sub	sp, #40	; 0x28
 800bdec:	af02      	add	r7, sp, #8
 800bdee:	60f8      	str	r0, [r7, #12]
 800bdf0:	60b9      	str	r1, [r7, #8]
 800bdf2:	603b      	str	r3, [r7, #0]
 800bdf4:	4613      	mov	r3, r2
 800bdf6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bdf8:	68fb      	ldr	r3, [r7, #12]
 800bdfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdfe:	2b20      	cmp	r3, #32
 800be00:	f040 80c0 	bne.w	800bf84 <HAL_UART_Receive+0x19c>
  {
    if ((pData == NULL) || (Size == 0U))
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d002      	beq.n	800be10 <HAL_UART_Receive+0x28>
 800be0a:	88fb      	ldrh	r3, [r7, #6]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d101      	bne.n	800be14 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800be10:	2301      	movs	r3, #1
 800be12:	e0b8      	b.n	800bf86 <HAL_UART_Receive+0x19e>
    }

    __HAL_LOCK(huart);
 800be14:	68fb      	ldr	r3, [r7, #12]
 800be16:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800be1a:	2b01      	cmp	r3, #1
 800be1c:	d101      	bne.n	800be22 <HAL_UART_Receive+0x3a>
 800be1e:	2302      	movs	r3, #2
 800be20:	e0b1      	b.n	800bf86 <HAL_UART_Receive+0x19e>
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2201      	movs	r2, #1
 800be26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	2222      	movs	r2, #34	; 0x22
 800be36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be3a:	68fb      	ldr	r3, [r7, #12]
 800be3c:	2200      	movs	r2, #0
 800be3e:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800be40:	f7f8 fc36 	bl	80046b0 <HAL_GetTick>
 800be44:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	88fa      	ldrh	r2, [r7, #6]
 800be4a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	88fa      	ldrh	r2, [r7, #6]
 800be52:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	689b      	ldr	r3, [r3, #8]
 800be5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be5e:	d10e      	bne.n	800be7e <HAL_UART_Receive+0x96>
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	691b      	ldr	r3, [r3, #16]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d105      	bne.n	800be74 <HAL_UART_Receive+0x8c>
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800be6e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be72:	e02d      	b.n	800bed0 <HAL_UART_Receive+0xe8>
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	22ff      	movs	r2, #255	; 0xff
 800be78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be7c:	e028      	b.n	800bed0 <HAL_UART_Receive+0xe8>
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	2b00      	cmp	r3, #0
 800be84:	d10d      	bne.n	800bea2 <HAL_UART_Receive+0xba>
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	691b      	ldr	r3, [r3, #16]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d104      	bne.n	800be98 <HAL_UART_Receive+0xb0>
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	22ff      	movs	r2, #255	; 0xff
 800be92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800be96:	e01b      	b.n	800bed0 <HAL_UART_Receive+0xe8>
 800be98:	68fb      	ldr	r3, [r7, #12]
 800be9a:	227f      	movs	r2, #127	; 0x7f
 800be9c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bea0:	e016      	b.n	800bed0 <HAL_UART_Receive+0xe8>
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	689b      	ldr	r3, [r3, #8]
 800bea6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800beaa:	d10d      	bne.n	800bec8 <HAL_UART_Receive+0xe0>
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	691b      	ldr	r3, [r3, #16]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d104      	bne.n	800bebe <HAL_UART_Receive+0xd6>
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	227f      	movs	r2, #127	; 0x7f
 800beb8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bebc:	e008      	b.n	800bed0 <HAL_UART_Receive+0xe8>
 800bebe:	68fb      	ldr	r3, [r7, #12]
 800bec0:	223f      	movs	r2, #63	; 0x3f
 800bec2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800bec6:	e003      	b.n	800bed0 <HAL_UART_Receive+0xe8>
 800bec8:	68fb      	ldr	r3, [r7, #12]
 800beca:	2200      	movs	r2, #0
 800becc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800bed6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	689b      	ldr	r3, [r3, #8]
 800bedc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bee0:	d108      	bne.n	800bef4 <HAL_UART_Receive+0x10c>
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	691b      	ldr	r3, [r3, #16]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d104      	bne.n	800bef4 <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 800beea:	2300      	movs	r3, #0
 800beec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800beee:	68bb      	ldr	r3, [r7, #8]
 800bef0:	61bb      	str	r3, [r7, #24]
 800bef2:	e003      	b.n	800befc <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800bef8:	2300      	movs	r3, #0
 800befa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	2200      	movs	r2, #0
 800bf00:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800bf04:	e032      	b.n	800bf6c <HAL_UART_Receive+0x184>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800bf06:	683b      	ldr	r3, [r7, #0]
 800bf08:	9300      	str	r3, [sp, #0]
 800bf0a:	697b      	ldr	r3, [r7, #20]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	2120      	movs	r1, #32
 800bf10:	68f8      	ldr	r0, [r7, #12]
 800bf12:	f001 fae2 	bl	800d4da <UART_WaitOnFlagUntilTimeout>
 800bf16:	4603      	mov	r3, r0
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	d001      	beq.n	800bf20 <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 800bf1c:	2303      	movs	r3, #3
 800bf1e:	e032      	b.n	800bf86 <HAL_UART_Receive+0x19e>
      }
      if (pdata8bits == NULL)
 800bf20:	69fb      	ldr	r3, [r7, #28]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d10c      	bne.n	800bf40 <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	8a7b      	ldrh	r3, [r7, #18]
 800bf30:	4013      	ands	r3, r2
 800bf32:	b29a      	uxth	r2, r3
 800bf34:	69bb      	ldr	r3, [r7, #24]
 800bf36:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800bf38:	69bb      	ldr	r3, [r7, #24]
 800bf3a:	3302      	adds	r3, #2
 800bf3c:	61bb      	str	r3, [r7, #24]
 800bf3e:	e00c      	b.n	800bf5a <HAL_UART_Receive+0x172>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf46:	b2da      	uxtb	r2, r3
 800bf48:	8a7b      	ldrh	r3, [r7, #18]
 800bf4a:	b2db      	uxtb	r3, r3
 800bf4c:	4013      	ands	r3, r2
 800bf4e:	b2da      	uxtb	r2, r3
 800bf50:	69fb      	ldr	r3, [r7, #28]
 800bf52:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800bf54:	69fb      	ldr	r3, [r7, #28]
 800bf56:	3301      	adds	r3, #1
 800bf58:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800bf5a:	68fb      	ldr	r3, [r7, #12]
 800bf5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf60:	b29b      	uxth	r3, r3
 800bf62:	3b01      	subs	r3, #1
 800bf64:	b29a      	uxth	r2, r3
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d1c6      	bne.n	800bf06 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	2220      	movs	r2, #32
 800bf7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800bf80:	2300      	movs	r3, #0
 800bf82:	e000      	b.n	800bf86 <HAL_UART_Receive+0x19e>
  }
  else
  {
    return HAL_BUSY;
 800bf84:	2302      	movs	r3, #2
  }
}
 800bf86:	4618      	mov	r0, r3
 800bf88:	3720      	adds	r7, #32
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	bd80      	pop	{r7, pc}
	...

0800bf90 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b08a      	sub	sp, #40	; 0x28
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	60f8      	str	r0, [r7, #12]
 800bf98:	60b9      	str	r1, [r7, #8]
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bfa4:	2b20      	cmp	r3, #32
 800bfa6:	d17a      	bne.n	800c09e <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bfa8:	68bb      	ldr	r3, [r7, #8]
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d002      	beq.n	800bfb4 <HAL_UART_Transmit_DMA+0x24>
 800bfae:	88fb      	ldrh	r3, [r7, #6]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d101      	bne.n	800bfb8 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	e073      	b.n	800c0a0 <HAL_UART_Transmit_DMA+0x110>
    }

    __HAL_LOCK(huart);
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800bfbe:	2b01      	cmp	r3, #1
 800bfc0:	d101      	bne.n	800bfc6 <HAL_UART_Transmit_DMA+0x36>
 800bfc2:	2302      	movs	r3, #2
 800bfc4:	e06c      	b.n	800c0a0 <HAL_UART_Transmit_DMA+0x110>
 800bfc6:	68fb      	ldr	r3, [r7, #12]
 800bfc8:	2201      	movs	r2, #1
 800bfca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->pTxBuffPtr  = pData;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	68ba      	ldr	r2, [r7, #8]
 800bfd2:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	88fa      	ldrh	r2, [r7, #6]
 800bfd8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	88fa      	ldrh	r2, [r7, #6]
 800bfe0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	2221      	movs	r2, #33	; 0x21
 800bff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmatx != NULL)
 800bff4:	68fb      	ldr	r3, [r7, #12]
 800bff6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d02c      	beq.n	800c056 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c000:	4a29      	ldr	r2, [pc, #164]	; (800c0a8 <HAL_UART_Transmit_DMA+0x118>)
 800c002:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c008:	4a28      	ldr	r2, [pc, #160]	; (800c0ac <HAL_UART_Transmit_DMA+0x11c>)
 800c00a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c010:	4a27      	ldr	r2, [pc, #156]	; (800c0b0 <HAL_UART_Transmit_DMA+0x120>)
 800c012:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c018:	2200      	movs	r2, #0
 800c01a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c024:	4619      	mov	r1, r3
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	3328      	adds	r3, #40	; 0x28
 800c02c:	461a      	mov	r2, r3
 800c02e:	88fb      	ldrh	r3, [r7, #6]
 800c030:	f7f9 f9cc 	bl	80053cc <HAL_DMA_Start_IT>
 800c034:	4603      	mov	r3, r0
 800c036:	2b00      	cmp	r3, #0
 800c038:	d00d      	beq.n	800c056 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	2210      	movs	r2, #16
 800c03e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2200      	movs	r2, #0
 800c046:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	2220      	movs	r2, #32
 800c04e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        return HAL_ERROR;
 800c052:	2301      	movs	r3, #1
 800c054:	e024      	b.n	800c0a0 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c056:	68fb      	ldr	r3, [r7, #12]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2240      	movs	r2, #64	; 0x40
 800c05c:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	2200      	movs	r2, #0
 800c062:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	3308      	adds	r3, #8
 800c06c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c06e:	697b      	ldr	r3, [r7, #20]
 800c070:	e853 3f00 	ldrex	r3, [r3]
 800c074:	613b      	str	r3, [r7, #16]
   return(result);
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c07c:	627b      	str	r3, [r7, #36]	; 0x24
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	3308      	adds	r3, #8
 800c084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c086:	623a      	str	r2, [r7, #32]
 800c088:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c08a:	69f9      	ldr	r1, [r7, #28]
 800c08c:	6a3a      	ldr	r2, [r7, #32]
 800c08e:	e841 2300 	strex	r3, r2, [r1]
 800c092:	61bb      	str	r3, [r7, #24]
   return(result);
 800c094:	69bb      	ldr	r3, [r7, #24]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d1e5      	bne.n	800c066 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 800c09a:	2300      	movs	r3, #0
 800c09c:	e000      	b.n	800c0a0 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800c09e:	2302      	movs	r3, #2
  }
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3728      	adds	r7, #40	; 0x28
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}
 800c0a8:	0800d90d 	.word	0x0800d90d
 800c0ac:	0800d9a3 	.word	0x0800d9a3
 800c0b0:	0800db19 	.word	0x0800db19

0800c0b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b0ba      	sub	sp, #232	; 0xe8
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	69db      	ldr	r3, [r3, #28]
 800c0c2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	689b      	ldr	r3, [r3, #8]
 800c0d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c0da:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c0de:	f640 030f 	movw	r3, #2063	; 0x80f
 800c0e2:	4013      	ands	r3, r2
 800c0e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c0e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d11b      	bne.n	800c128 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c0f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0f4:	f003 0320 	and.w	r3, r3, #32
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d015      	beq.n	800c128 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c0fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c100:	f003 0320 	and.w	r3, r3, #32
 800c104:	2b00      	cmp	r3, #0
 800c106:	d105      	bne.n	800c114 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c108:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c10c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c110:	2b00      	cmp	r3, #0
 800c112:	d009      	beq.n	800c128 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c118:	2b00      	cmp	r3, #0
 800c11a:	f000 835a 	beq.w	800c7d2 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	4798      	blx	r3
      }
      return;
 800c126:	e354      	b.n	800c7d2 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c128:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	f000 811f 	beq.w	800c370 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800c132:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c136:	4b8b      	ldr	r3, [pc, #556]	; (800c364 <HAL_UART_IRQHandler+0x2b0>)
 800c138:	4013      	ands	r3, r2
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d106      	bne.n	800c14c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800c13e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c142:	4b89      	ldr	r3, [pc, #548]	; (800c368 <HAL_UART_IRQHandler+0x2b4>)
 800c144:	4013      	ands	r3, r2
 800c146:	2b00      	cmp	r3, #0
 800c148:	f000 8112 	beq.w	800c370 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c14c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c150:	f003 0301 	and.w	r3, r3, #1
 800c154:	2b00      	cmp	r3, #0
 800c156:	d011      	beq.n	800c17c <HAL_UART_IRQHandler+0xc8>
 800c158:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c15c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c160:	2b00      	cmp	r3, #0
 800c162:	d00b      	beq.n	800c17c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	2201      	movs	r2, #1
 800c16a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c172:	f043 0201 	orr.w	r2, r3, #1
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c17c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c180:	f003 0302 	and.w	r3, r3, #2
 800c184:	2b00      	cmp	r3, #0
 800c186:	d011      	beq.n	800c1ac <HAL_UART_IRQHandler+0xf8>
 800c188:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c18c:	f003 0301 	and.w	r3, r3, #1
 800c190:	2b00      	cmp	r3, #0
 800c192:	d00b      	beq.n	800c1ac <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	2202      	movs	r2, #2
 800c19a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1a2:	f043 0204 	orr.w	r2, r3, #4
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c1ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1b0:	f003 0304 	and.w	r3, r3, #4
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d011      	beq.n	800c1dc <HAL_UART_IRQHandler+0x128>
 800c1b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1bc:	f003 0301 	and.w	r3, r3, #1
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d00b      	beq.n	800c1dc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	2204      	movs	r2, #4
 800c1ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c1d2:	f043 0202 	orr.w	r2, r3, #2
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c1dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1e0:	f003 0308 	and.w	r3, r3, #8
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d017      	beq.n	800c218 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c1e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1ec:	f003 0320 	and.w	r3, r3, #32
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d105      	bne.n	800c200 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800c1f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800c1f8:	4b5a      	ldr	r3, [pc, #360]	; (800c364 <HAL_UART_IRQHandler+0x2b0>)
 800c1fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d00b      	beq.n	800c218 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	2208      	movs	r2, #8
 800c206:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c20e:	f043 0208 	orr.w	r2, r3, #8
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c21c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c220:	2b00      	cmp	r3, #0
 800c222:	d012      	beq.n	800c24a <HAL_UART_IRQHandler+0x196>
 800c224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c228:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	d00c      	beq.n	800c24a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c238:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c240:	f043 0220 	orr.w	r2, r3, #32
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c250:	2b00      	cmp	r3, #0
 800c252:	f000 82c0 	beq.w	800c7d6 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800c256:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c25a:	f003 0320 	and.w	r3, r3, #32
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d013      	beq.n	800c28a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800c262:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c266:	f003 0320 	and.w	r3, r3, #32
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d105      	bne.n	800c27a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800c26e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c276:	2b00      	cmp	r3, #0
 800c278:	d007      	beq.n	800c28a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d003      	beq.n	800c28a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c290:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	689b      	ldr	r3, [r3, #8]
 800c29a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c29e:	2b40      	cmp	r3, #64	; 0x40
 800c2a0:	d005      	beq.n	800c2ae <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c2a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c2a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d04f      	beq.n	800c34e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c2ae:	6878      	ldr	r0, [r7, #4]
 800c2b0:	f001 fac6 	bl	800d840 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	689b      	ldr	r3, [r3, #8]
 800c2ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2be:	2b40      	cmp	r3, #64	; 0x40
 800c2c0:	d141      	bne.n	800c346 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	3308      	adds	r3, #8
 800c2c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c2d0:	e853 3f00 	ldrex	r3, [r3]
 800c2d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c2d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c2dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	3308      	adds	r3, #8
 800c2ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c2ee:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c2f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c2fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c2fe:	e841 2300 	strex	r3, r2, [r1]
 800c302:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c306:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d1d9      	bne.n	800c2c2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c312:	2b00      	cmp	r3, #0
 800c314:	d013      	beq.n	800c33e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c31a:	4a14      	ldr	r2, [pc, #80]	; (800c36c <HAL_UART_IRQHandler+0x2b8>)
 800c31c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c322:	4618      	mov	r0, r3
 800c324:	f7f9 fdda 	bl	8005edc <HAL_DMA_Abort_IT>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d017      	beq.n	800c35e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c334:	687a      	ldr	r2, [r7, #4]
 800c336:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800c338:	4610      	mov	r0, r2
 800c33a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c33c:	e00f      	b.n	800c35e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c33e:	6878      	ldr	r0, [r7, #4]
 800c340:	f000 fa74 	bl	800c82c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c344:	e00b      	b.n	800c35e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c346:	6878      	ldr	r0, [r7, #4]
 800c348:	f000 fa70 	bl	800c82c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c34c:	e007      	b.n	800c35e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c34e:	6878      	ldr	r0, [r7, #4]
 800c350:	f000 fa6c 	bl	800c82c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2200      	movs	r2, #0
 800c358:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800c35c:	e23b      	b.n	800c7d6 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c35e:	bf00      	nop
    return;
 800c360:	e239      	b.n	800c7d6 <HAL_UART_IRQHandler+0x722>
 800c362:	bf00      	nop
 800c364:	10000001 	.word	0x10000001
 800c368:	04000120 	.word	0x04000120
 800c36c:	0800db99 	.word	0x0800db99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c374:	2b01      	cmp	r3, #1
 800c376:	f040 81ce 	bne.w	800c716 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c37a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c37e:	f003 0310 	and.w	r3, r3, #16
 800c382:	2b00      	cmp	r3, #0
 800c384:	f000 81c7 	beq.w	800c716 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c38c:	f003 0310 	and.w	r3, r3, #16
 800c390:	2b00      	cmp	r3, #0
 800c392:	f000 81c0 	beq.w	800c716 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	2210      	movs	r2, #16
 800c39c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	689b      	ldr	r3, [r3, #8]
 800c3a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3a8:	2b40      	cmp	r3, #64	; 0x40
 800c3aa:	f040 813b 	bne.w	800c624 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	4a8b      	ldr	r2, [pc, #556]	; (800c5e4 <HAL_UART_IRQHandler+0x530>)
 800c3b6:	4293      	cmp	r3, r2
 800c3b8:	d059      	beq.n	800c46e <HAL_UART_IRQHandler+0x3ba>
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	4a89      	ldr	r2, [pc, #548]	; (800c5e8 <HAL_UART_IRQHandler+0x534>)
 800c3c2:	4293      	cmp	r3, r2
 800c3c4:	d053      	beq.n	800c46e <HAL_UART_IRQHandler+0x3ba>
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4a87      	ldr	r2, [pc, #540]	; (800c5ec <HAL_UART_IRQHandler+0x538>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	d04d      	beq.n	800c46e <HAL_UART_IRQHandler+0x3ba>
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	4a85      	ldr	r2, [pc, #532]	; (800c5f0 <HAL_UART_IRQHandler+0x53c>)
 800c3da:	4293      	cmp	r3, r2
 800c3dc:	d047      	beq.n	800c46e <HAL_UART_IRQHandler+0x3ba>
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	4a83      	ldr	r2, [pc, #524]	; (800c5f4 <HAL_UART_IRQHandler+0x540>)
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	d041      	beq.n	800c46e <HAL_UART_IRQHandler+0x3ba>
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	4a81      	ldr	r2, [pc, #516]	; (800c5f8 <HAL_UART_IRQHandler+0x544>)
 800c3f2:	4293      	cmp	r3, r2
 800c3f4:	d03b      	beq.n	800c46e <HAL_UART_IRQHandler+0x3ba>
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	4a7f      	ldr	r2, [pc, #508]	; (800c5fc <HAL_UART_IRQHandler+0x548>)
 800c3fe:	4293      	cmp	r3, r2
 800c400:	d035      	beq.n	800c46e <HAL_UART_IRQHandler+0x3ba>
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	4a7d      	ldr	r2, [pc, #500]	; (800c600 <HAL_UART_IRQHandler+0x54c>)
 800c40a:	4293      	cmp	r3, r2
 800c40c:	d02f      	beq.n	800c46e <HAL_UART_IRQHandler+0x3ba>
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	4a7b      	ldr	r2, [pc, #492]	; (800c604 <HAL_UART_IRQHandler+0x550>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d029      	beq.n	800c46e <HAL_UART_IRQHandler+0x3ba>
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	4a79      	ldr	r2, [pc, #484]	; (800c608 <HAL_UART_IRQHandler+0x554>)
 800c422:	4293      	cmp	r3, r2
 800c424:	d023      	beq.n	800c46e <HAL_UART_IRQHandler+0x3ba>
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	4a77      	ldr	r2, [pc, #476]	; (800c60c <HAL_UART_IRQHandler+0x558>)
 800c42e:	4293      	cmp	r3, r2
 800c430:	d01d      	beq.n	800c46e <HAL_UART_IRQHandler+0x3ba>
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	4a75      	ldr	r2, [pc, #468]	; (800c610 <HAL_UART_IRQHandler+0x55c>)
 800c43a:	4293      	cmp	r3, r2
 800c43c:	d017      	beq.n	800c46e <HAL_UART_IRQHandler+0x3ba>
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c442:	681b      	ldr	r3, [r3, #0]
 800c444:	4a73      	ldr	r2, [pc, #460]	; (800c614 <HAL_UART_IRQHandler+0x560>)
 800c446:	4293      	cmp	r3, r2
 800c448:	d011      	beq.n	800c46e <HAL_UART_IRQHandler+0x3ba>
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	4a71      	ldr	r2, [pc, #452]	; (800c618 <HAL_UART_IRQHandler+0x564>)
 800c452:	4293      	cmp	r3, r2
 800c454:	d00b      	beq.n	800c46e <HAL_UART_IRQHandler+0x3ba>
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a6f      	ldr	r2, [pc, #444]	; (800c61c <HAL_UART_IRQHandler+0x568>)
 800c45e:	4293      	cmp	r3, r2
 800c460:	d005      	beq.n	800c46e <HAL_UART_IRQHandler+0x3ba>
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	4a6d      	ldr	r2, [pc, #436]	; (800c620 <HAL_UART_IRQHandler+0x56c>)
 800c46a:	4293      	cmp	r3, r2
 800c46c:	d105      	bne.n	800c47a <HAL_UART_IRQHandler+0x3c6>
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	685b      	ldr	r3, [r3, #4]
 800c476:	b29b      	uxth	r3, r3
 800c478:	e004      	b.n	800c484 <HAL_UART_IRQHandler+0x3d0>
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	b29b      	uxth	r3, r3
 800c484:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c488:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	f000 81a4 	beq.w	800c7da <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c498:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c49c:	429a      	cmp	r2, r3
 800c49e:	f080 819c 	bcs.w	800c7da <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c4a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4b0:	69db      	ldr	r3, [r3, #28]
 800c4b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4b6:	f000 8086 	beq.w	800c5c6 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c4c6:	e853 3f00 	ldrex	r3, [r3]
 800c4ca:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c4ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c4d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4d6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	461a      	mov	r2, r3
 800c4e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c4e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c4e8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ec:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c4f0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c4f4:	e841 2300 	strex	r3, r2, [r1]
 800c4f8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c4fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c500:	2b00      	cmp	r3, #0
 800c502:	d1da      	bne.n	800c4ba <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	3308      	adds	r3, #8
 800c50a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c50c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c50e:	e853 3f00 	ldrex	r3, [r3]
 800c512:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c514:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c516:	f023 0301 	bic.w	r3, r3, #1
 800c51a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	3308      	adds	r3, #8
 800c524:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c528:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c52c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c52e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c530:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c534:	e841 2300 	strex	r3, r2, [r1]
 800c538:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c53a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d1e1      	bne.n	800c504 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	3308      	adds	r3, #8
 800c546:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c548:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c54a:	e853 3f00 	ldrex	r3, [r3]
 800c54e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c552:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c556:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	3308      	adds	r3, #8
 800c560:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c564:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c566:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c568:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c56a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c56c:	e841 2300 	strex	r3, r2, [r1]
 800c570:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c572:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c574:	2b00      	cmp	r3, #0
 800c576:	d1e3      	bne.n	800c540 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	2220      	movs	r2, #32
 800c57c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2200      	movs	r2, #0
 800c584:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c58c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c58e:	e853 3f00 	ldrex	r3, [r3]
 800c592:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c596:	f023 0310 	bic.w	r3, r3, #16
 800c59a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	461a      	mov	r2, r3
 800c5a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c5a8:	65bb      	str	r3, [r7, #88]	; 0x58
 800c5aa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c5ae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c5b0:	e841 2300 	strex	r3, r2, [r1]
 800c5b4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c5b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5b8:	2b00      	cmp	r3, #0
 800c5ba:	d1e4      	bne.n	800c586 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	f7f9 f96d 	bl	80058a0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c5d2:	b29b      	uxth	r3, r3
 800c5d4:	1ad3      	subs	r3, r2, r3
 800c5d6:	b29b      	uxth	r3, r3
 800c5d8:	4619      	mov	r1, r3
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f7f4 feba 	bl	8001354 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c5e0:	e0fb      	b.n	800c7da <HAL_UART_IRQHandler+0x726>
 800c5e2:	bf00      	nop
 800c5e4:	40020010 	.word	0x40020010
 800c5e8:	40020028 	.word	0x40020028
 800c5ec:	40020040 	.word	0x40020040
 800c5f0:	40020058 	.word	0x40020058
 800c5f4:	40020070 	.word	0x40020070
 800c5f8:	40020088 	.word	0x40020088
 800c5fc:	400200a0 	.word	0x400200a0
 800c600:	400200b8 	.word	0x400200b8
 800c604:	40020410 	.word	0x40020410
 800c608:	40020428 	.word	0x40020428
 800c60c:	40020440 	.word	0x40020440
 800c610:	40020458 	.word	0x40020458
 800c614:	40020470 	.word	0x40020470
 800c618:	40020488 	.word	0x40020488
 800c61c:	400204a0 	.word	0x400204a0
 800c620:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c630:	b29b      	uxth	r3, r3
 800c632:	1ad3      	subs	r3, r2, r3
 800c634:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c63e:	b29b      	uxth	r3, r3
 800c640:	2b00      	cmp	r3, #0
 800c642:	f000 80cc 	beq.w	800c7de <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800c646:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	f000 80c7 	beq.w	800c7de <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	681b      	ldr	r3, [r3, #0]
 800c654:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c658:	e853 3f00 	ldrex	r3, [r3]
 800c65c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c660:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c664:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	461a      	mov	r2, r3
 800c66e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c672:	647b      	str	r3, [r7, #68]	; 0x44
 800c674:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c676:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c678:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c67a:	e841 2300 	strex	r3, r2, [r1]
 800c67e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c680:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c682:	2b00      	cmp	r3, #0
 800c684:	d1e4      	bne.n	800c650 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	3308      	adds	r3, #8
 800c68c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c68e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c690:	e853 3f00 	ldrex	r3, [r3]
 800c694:	623b      	str	r3, [r7, #32]
   return(result);
 800c696:	6a3a      	ldr	r2, [r7, #32]
 800c698:	4b54      	ldr	r3, [pc, #336]	; (800c7ec <HAL_UART_IRQHandler+0x738>)
 800c69a:	4013      	ands	r3, r2
 800c69c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	3308      	adds	r3, #8
 800c6a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c6aa:	633a      	str	r2, [r7, #48]	; 0x30
 800c6ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c6b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c6b2:	e841 2300 	strex	r3, r2, [r1]
 800c6b6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c6b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ba:	2b00      	cmp	r3, #0
 800c6bc:	d1e3      	bne.n	800c686 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	2220      	movs	r2, #32
 800c6c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2200      	movs	r2, #0
 800c6ca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6d8:	693b      	ldr	r3, [r7, #16]
 800c6da:	e853 3f00 	ldrex	r3, [r3]
 800c6de:	60fb      	str	r3, [r7, #12]
   return(result);
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	f023 0310 	bic.w	r3, r3, #16
 800c6e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c6f4:	61fb      	str	r3, [r7, #28]
 800c6f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6f8:	69b9      	ldr	r1, [r7, #24]
 800c6fa:	69fa      	ldr	r2, [r7, #28]
 800c6fc:	e841 2300 	strex	r3, r2, [r1]
 800c700:	617b      	str	r3, [r7, #20]
   return(result);
 800c702:	697b      	ldr	r3, [r7, #20]
 800c704:	2b00      	cmp	r3, #0
 800c706:	d1e4      	bne.n	800c6d2 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c708:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c70c:	4619      	mov	r1, r3
 800c70e:	6878      	ldr	r0, [r7, #4]
 800c710:	f7f4 fe20 	bl	8001354 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c714:	e063      	b.n	800c7de <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800c716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c71a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d00e      	beq.n	800c740 <HAL_UART_IRQHandler+0x68c>
 800c722:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d008      	beq.n	800c740 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800c736:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800c738:	6878      	ldr	r0, [r7, #4]
 800c73a:	f001 fa6e 	bl	800dc1a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c73e:	e051      	b.n	800c7e4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800c740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d014      	beq.n	800c776 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800c74c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c754:	2b00      	cmp	r3, #0
 800c756:	d105      	bne.n	800c764 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800c758:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c75c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c760:	2b00      	cmp	r3, #0
 800c762:	d008      	beq.n	800c776 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d03a      	beq.n	800c7e2 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	4798      	blx	r3
    }
    return;
 800c774:	e035      	b.n	800c7e2 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c77a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d009      	beq.n	800c796 <HAL_UART_IRQHandler+0x6e2>
 800c782:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c786:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d003      	beq.n	800c796 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f001 fa18 	bl	800dbc4 <UART_EndTransmit_IT>
    return;
 800c794:	e026      	b.n	800c7e4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800c796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c79a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	d009      	beq.n	800c7b6 <HAL_UART_IRQHandler+0x702>
 800c7a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7a6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d003      	beq.n	800c7b6 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800c7ae:	6878      	ldr	r0, [r7, #4]
 800c7b0:	f001 fa47 	bl	800dc42 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7b4:	e016      	b.n	800c7e4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800c7b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c7be:	2b00      	cmp	r3, #0
 800c7c0:	d010      	beq.n	800c7e4 <HAL_UART_IRQHandler+0x730>
 800c7c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	da0c      	bge.n	800c7e4 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f001 fa2f 	bl	800dc2e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800c7d0:	e008      	b.n	800c7e4 <HAL_UART_IRQHandler+0x730>
      return;
 800c7d2:	bf00      	nop
 800c7d4:	e006      	b.n	800c7e4 <HAL_UART_IRQHandler+0x730>
    return;
 800c7d6:	bf00      	nop
 800c7d8:	e004      	b.n	800c7e4 <HAL_UART_IRQHandler+0x730>
      return;
 800c7da:	bf00      	nop
 800c7dc:	e002      	b.n	800c7e4 <HAL_UART_IRQHandler+0x730>
      return;
 800c7de:	bf00      	nop
 800c7e0:	e000      	b.n	800c7e4 <HAL_UART_IRQHandler+0x730>
    return;
 800c7e2:	bf00      	nop
  }
}
 800c7e4:	37e8      	adds	r7, #232	; 0xe8
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd80      	pop	{r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	effffffe 	.word	0xeffffffe

0800c7f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b083      	sub	sp, #12
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c7f8:	bf00      	nop
 800c7fa:	370c      	adds	r7, #12
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c802:	4770      	bx	lr

0800c804 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c804:	b480      	push	{r7}
 800c806:	b083      	sub	sp, #12
 800c808:	af00      	add	r7, sp, #0
 800c80a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c80c:	bf00      	nop
 800c80e:	370c      	adds	r7, #12
 800c810:	46bd      	mov	sp, r7
 800c812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c816:	4770      	bx	lr

0800c818 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c818:	b480      	push	{r7}
 800c81a:	b083      	sub	sp, #12
 800c81c:	af00      	add	r7, sp, #0
 800c81e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c820:	bf00      	nop
 800c822:	370c      	adds	r7, #12
 800c824:	46bd      	mov	sp, r7
 800c826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82a:	4770      	bx	lr

0800c82c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c82c:	b480      	push	{r7}
 800c82e:	b083      	sub	sp, #12
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800c834:	bf00      	nop
 800c836:	370c      	adds	r7, #12
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	4770      	bx	lr

0800c840 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c840:	b5b0      	push	{r4, r5, r7, lr}
 800c842:	b08e      	sub	sp, #56	; 0x38
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c848:	2300      	movs	r3, #0
 800c84a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	689a      	ldr	r2, [r3, #8]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	691b      	ldr	r3, [r3, #16]
 800c856:	431a      	orrs	r2, r3
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	695b      	ldr	r3, [r3, #20]
 800c85c:	431a      	orrs	r2, r3
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	69db      	ldr	r3, [r3, #28]
 800c862:	4313      	orrs	r3, r2
 800c864:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	4bbf      	ldr	r3, [pc, #764]	; (800cb6c <UART_SetConfig+0x32c>)
 800c86e:	4013      	ands	r3, r2
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	6812      	ldr	r2, [r2, #0]
 800c874:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c876:	430b      	orrs	r3, r1
 800c878:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	685b      	ldr	r3, [r3, #4]
 800c880:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	68da      	ldr	r2, [r3, #12]
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681b      	ldr	r3, [r3, #0]
 800c88c:	430a      	orrs	r2, r1
 800c88e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	699b      	ldr	r3, [r3, #24]
 800c894:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	4ab5      	ldr	r2, [pc, #724]	; (800cb70 <UART_SetConfig+0x330>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d004      	beq.n	800c8aa <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6a1b      	ldr	r3, [r3, #32]
 800c8a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8a6:	4313      	orrs	r3, r2
 800c8a8:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	689a      	ldr	r2, [r3, #8]
 800c8b0:	4bb0      	ldr	r3, [pc, #704]	; (800cb74 <UART_SetConfig+0x334>)
 800c8b2:	4013      	ands	r3, r2
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	6812      	ldr	r2, [r2, #0]
 800c8b8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c8ba:	430b      	orrs	r3, r1
 800c8bc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8c4:	f023 010f 	bic.w	r1, r3, #15
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	430a      	orrs	r2, r1
 800c8d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	4aa7      	ldr	r2, [pc, #668]	; (800cb78 <UART_SetConfig+0x338>)
 800c8da:	4293      	cmp	r3, r2
 800c8dc:	d176      	bne.n	800c9cc <UART_SetConfig+0x18c>
 800c8de:	4ba7      	ldr	r3, [pc, #668]	; (800cb7c <UART_SetConfig+0x33c>)
 800c8e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c8e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c8e6:	2b28      	cmp	r3, #40	; 0x28
 800c8e8:	d86c      	bhi.n	800c9c4 <UART_SetConfig+0x184>
 800c8ea:	a201      	add	r2, pc, #4	; (adr r2, 800c8f0 <UART_SetConfig+0xb0>)
 800c8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8f0:	0800c995 	.word	0x0800c995
 800c8f4:	0800c9c5 	.word	0x0800c9c5
 800c8f8:	0800c9c5 	.word	0x0800c9c5
 800c8fc:	0800c9c5 	.word	0x0800c9c5
 800c900:	0800c9c5 	.word	0x0800c9c5
 800c904:	0800c9c5 	.word	0x0800c9c5
 800c908:	0800c9c5 	.word	0x0800c9c5
 800c90c:	0800c9c5 	.word	0x0800c9c5
 800c910:	0800c99d 	.word	0x0800c99d
 800c914:	0800c9c5 	.word	0x0800c9c5
 800c918:	0800c9c5 	.word	0x0800c9c5
 800c91c:	0800c9c5 	.word	0x0800c9c5
 800c920:	0800c9c5 	.word	0x0800c9c5
 800c924:	0800c9c5 	.word	0x0800c9c5
 800c928:	0800c9c5 	.word	0x0800c9c5
 800c92c:	0800c9c5 	.word	0x0800c9c5
 800c930:	0800c9a5 	.word	0x0800c9a5
 800c934:	0800c9c5 	.word	0x0800c9c5
 800c938:	0800c9c5 	.word	0x0800c9c5
 800c93c:	0800c9c5 	.word	0x0800c9c5
 800c940:	0800c9c5 	.word	0x0800c9c5
 800c944:	0800c9c5 	.word	0x0800c9c5
 800c948:	0800c9c5 	.word	0x0800c9c5
 800c94c:	0800c9c5 	.word	0x0800c9c5
 800c950:	0800c9ad 	.word	0x0800c9ad
 800c954:	0800c9c5 	.word	0x0800c9c5
 800c958:	0800c9c5 	.word	0x0800c9c5
 800c95c:	0800c9c5 	.word	0x0800c9c5
 800c960:	0800c9c5 	.word	0x0800c9c5
 800c964:	0800c9c5 	.word	0x0800c9c5
 800c968:	0800c9c5 	.word	0x0800c9c5
 800c96c:	0800c9c5 	.word	0x0800c9c5
 800c970:	0800c9b5 	.word	0x0800c9b5
 800c974:	0800c9c5 	.word	0x0800c9c5
 800c978:	0800c9c5 	.word	0x0800c9c5
 800c97c:	0800c9c5 	.word	0x0800c9c5
 800c980:	0800c9c5 	.word	0x0800c9c5
 800c984:	0800c9c5 	.word	0x0800c9c5
 800c988:	0800c9c5 	.word	0x0800c9c5
 800c98c:	0800c9c5 	.word	0x0800c9c5
 800c990:	0800c9bd 	.word	0x0800c9bd
 800c994:	2301      	movs	r3, #1
 800c996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c99a:	e222      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800c99c:	2304      	movs	r3, #4
 800c99e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9a2:	e21e      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800c9a4:	2308      	movs	r3, #8
 800c9a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9aa:	e21a      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800c9ac:	2310      	movs	r3, #16
 800c9ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9b2:	e216      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800c9b4:	2320      	movs	r3, #32
 800c9b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ba:	e212      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800c9bc:	2340      	movs	r3, #64	; 0x40
 800c9be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9c2:	e20e      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800c9c4:	2380      	movs	r3, #128	; 0x80
 800c9c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800c9ca:	e20a      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	4a6b      	ldr	r2, [pc, #428]	; (800cb80 <UART_SetConfig+0x340>)
 800c9d2:	4293      	cmp	r3, r2
 800c9d4:	d130      	bne.n	800ca38 <UART_SetConfig+0x1f8>
 800c9d6:	4b69      	ldr	r3, [pc, #420]	; (800cb7c <UART_SetConfig+0x33c>)
 800c9d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c9da:	f003 0307 	and.w	r3, r3, #7
 800c9de:	2b05      	cmp	r3, #5
 800c9e0:	d826      	bhi.n	800ca30 <UART_SetConfig+0x1f0>
 800c9e2:	a201      	add	r2, pc, #4	; (adr r2, 800c9e8 <UART_SetConfig+0x1a8>)
 800c9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9e8:	0800ca01 	.word	0x0800ca01
 800c9ec:	0800ca09 	.word	0x0800ca09
 800c9f0:	0800ca11 	.word	0x0800ca11
 800c9f4:	0800ca19 	.word	0x0800ca19
 800c9f8:	0800ca21 	.word	0x0800ca21
 800c9fc:	0800ca29 	.word	0x0800ca29
 800ca00:	2300      	movs	r3, #0
 800ca02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca06:	e1ec      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800ca08:	2304      	movs	r3, #4
 800ca0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca0e:	e1e8      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800ca10:	2308      	movs	r3, #8
 800ca12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca16:	e1e4      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800ca18:	2310      	movs	r3, #16
 800ca1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca1e:	e1e0      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800ca20:	2320      	movs	r3, #32
 800ca22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca26:	e1dc      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800ca28:	2340      	movs	r3, #64	; 0x40
 800ca2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca2e:	e1d8      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800ca30:	2380      	movs	r3, #128	; 0x80
 800ca32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca36:	e1d4      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	4a51      	ldr	r2, [pc, #324]	; (800cb84 <UART_SetConfig+0x344>)
 800ca3e:	4293      	cmp	r3, r2
 800ca40:	d130      	bne.n	800caa4 <UART_SetConfig+0x264>
 800ca42:	4b4e      	ldr	r3, [pc, #312]	; (800cb7c <UART_SetConfig+0x33c>)
 800ca44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ca46:	f003 0307 	and.w	r3, r3, #7
 800ca4a:	2b05      	cmp	r3, #5
 800ca4c:	d826      	bhi.n	800ca9c <UART_SetConfig+0x25c>
 800ca4e:	a201      	add	r2, pc, #4	; (adr r2, 800ca54 <UART_SetConfig+0x214>)
 800ca50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca54:	0800ca6d 	.word	0x0800ca6d
 800ca58:	0800ca75 	.word	0x0800ca75
 800ca5c:	0800ca7d 	.word	0x0800ca7d
 800ca60:	0800ca85 	.word	0x0800ca85
 800ca64:	0800ca8d 	.word	0x0800ca8d
 800ca68:	0800ca95 	.word	0x0800ca95
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca72:	e1b6      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800ca74:	2304      	movs	r3, #4
 800ca76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca7a:	e1b2      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800ca7c:	2308      	movs	r3, #8
 800ca7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca82:	e1ae      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800ca84:	2310      	movs	r3, #16
 800ca86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca8a:	e1aa      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800ca8c:	2320      	movs	r3, #32
 800ca8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca92:	e1a6      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800ca94:	2340      	movs	r3, #64	; 0x40
 800ca96:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ca9a:	e1a2      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800ca9c:	2380      	movs	r3, #128	; 0x80
 800ca9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caa2:	e19e      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	4a37      	ldr	r2, [pc, #220]	; (800cb88 <UART_SetConfig+0x348>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d130      	bne.n	800cb10 <UART_SetConfig+0x2d0>
 800caae:	4b33      	ldr	r3, [pc, #204]	; (800cb7c <UART_SetConfig+0x33c>)
 800cab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cab2:	f003 0307 	and.w	r3, r3, #7
 800cab6:	2b05      	cmp	r3, #5
 800cab8:	d826      	bhi.n	800cb08 <UART_SetConfig+0x2c8>
 800caba:	a201      	add	r2, pc, #4	; (adr r2, 800cac0 <UART_SetConfig+0x280>)
 800cabc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cac0:	0800cad9 	.word	0x0800cad9
 800cac4:	0800cae1 	.word	0x0800cae1
 800cac8:	0800cae9 	.word	0x0800cae9
 800cacc:	0800caf1 	.word	0x0800caf1
 800cad0:	0800caf9 	.word	0x0800caf9
 800cad4:	0800cb01 	.word	0x0800cb01
 800cad8:	2300      	movs	r3, #0
 800cada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cade:	e180      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cae0:	2304      	movs	r3, #4
 800cae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cae6:	e17c      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cae8:	2308      	movs	r3, #8
 800caea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caee:	e178      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800caf0:	2310      	movs	r3, #16
 800caf2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800caf6:	e174      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800caf8:	2320      	movs	r3, #32
 800cafa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cafe:	e170      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cb00:	2340      	movs	r3, #64	; 0x40
 800cb02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb06:	e16c      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cb08:	2380      	movs	r3, #128	; 0x80
 800cb0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb0e:	e168      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	4a1d      	ldr	r2, [pc, #116]	; (800cb8c <UART_SetConfig+0x34c>)
 800cb16:	4293      	cmp	r3, r2
 800cb18:	d142      	bne.n	800cba0 <UART_SetConfig+0x360>
 800cb1a:	4b18      	ldr	r3, [pc, #96]	; (800cb7c <UART_SetConfig+0x33c>)
 800cb1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb1e:	f003 0307 	and.w	r3, r3, #7
 800cb22:	2b05      	cmp	r3, #5
 800cb24:	d838      	bhi.n	800cb98 <UART_SetConfig+0x358>
 800cb26:	a201      	add	r2, pc, #4	; (adr r2, 800cb2c <UART_SetConfig+0x2ec>)
 800cb28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb2c:	0800cb45 	.word	0x0800cb45
 800cb30:	0800cb4d 	.word	0x0800cb4d
 800cb34:	0800cb55 	.word	0x0800cb55
 800cb38:	0800cb5d 	.word	0x0800cb5d
 800cb3c:	0800cb65 	.word	0x0800cb65
 800cb40:	0800cb91 	.word	0x0800cb91
 800cb44:	2300      	movs	r3, #0
 800cb46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb4a:	e14a      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cb4c:	2304      	movs	r3, #4
 800cb4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb52:	e146      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cb54:	2308      	movs	r3, #8
 800cb56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb5a:	e142      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cb5c:	2310      	movs	r3, #16
 800cb5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb62:	e13e      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cb64:	2320      	movs	r3, #32
 800cb66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb6a:	e13a      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cb6c:	cfff69f3 	.word	0xcfff69f3
 800cb70:	58000c00 	.word	0x58000c00
 800cb74:	11fff4ff 	.word	0x11fff4ff
 800cb78:	40011000 	.word	0x40011000
 800cb7c:	58024400 	.word	0x58024400
 800cb80:	40004400 	.word	0x40004400
 800cb84:	40004800 	.word	0x40004800
 800cb88:	40004c00 	.word	0x40004c00
 800cb8c:	40005000 	.word	0x40005000
 800cb90:	2340      	movs	r3, #64	; 0x40
 800cb92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb96:	e124      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cb98:	2380      	movs	r3, #128	; 0x80
 800cb9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cb9e:	e120      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4acc      	ldr	r2, [pc, #816]	; (800ced8 <UART_SetConfig+0x698>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d176      	bne.n	800cc98 <UART_SetConfig+0x458>
 800cbaa:	4bcc      	ldr	r3, [pc, #816]	; (800cedc <UART_SetConfig+0x69c>)
 800cbac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cbae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cbb2:	2b28      	cmp	r3, #40	; 0x28
 800cbb4:	d86c      	bhi.n	800cc90 <UART_SetConfig+0x450>
 800cbb6:	a201      	add	r2, pc, #4	; (adr r2, 800cbbc <UART_SetConfig+0x37c>)
 800cbb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbbc:	0800cc61 	.word	0x0800cc61
 800cbc0:	0800cc91 	.word	0x0800cc91
 800cbc4:	0800cc91 	.word	0x0800cc91
 800cbc8:	0800cc91 	.word	0x0800cc91
 800cbcc:	0800cc91 	.word	0x0800cc91
 800cbd0:	0800cc91 	.word	0x0800cc91
 800cbd4:	0800cc91 	.word	0x0800cc91
 800cbd8:	0800cc91 	.word	0x0800cc91
 800cbdc:	0800cc69 	.word	0x0800cc69
 800cbe0:	0800cc91 	.word	0x0800cc91
 800cbe4:	0800cc91 	.word	0x0800cc91
 800cbe8:	0800cc91 	.word	0x0800cc91
 800cbec:	0800cc91 	.word	0x0800cc91
 800cbf0:	0800cc91 	.word	0x0800cc91
 800cbf4:	0800cc91 	.word	0x0800cc91
 800cbf8:	0800cc91 	.word	0x0800cc91
 800cbfc:	0800cc71 	.word	0x0800cc71
 800cc00:	0800cc91 	.word	0x0800cc91
 800cc04:	0800cc91 	.word	0x0800cc91
 800cc08:	0800cc91 	.word	0x0800cc91
 800cc0c:	0800cc91 	.word	0x0800cc91
 800cc10:	0800cc91 	.word	0x0800cc91
 800cc14:	0800cc91 	.word	0x0800cc91
 800cc18:	0800cc91 	.word	0x0800cc91
 800cc1c:	0800cc79 	.word	0x0800cc79
 800cc20:	0800cc91 	.word	0x0800cc91
 800cc24:	0800cc91 	.word	0x0800cc91
 800cc28:	0800cc91 	.word	0x0800cc91
 800cc2c:	0800cc91 	.word	0x0800cc91
 800cc30:	0800cc91 	.word	0x0800cc91
 800cc34:	0800cc91 	.word	0x0800cc91
 800cc38:	0800cc91 	.word	0x0800cc91
 800cc3c:	0800cc81 	.word	0x0800cc81
 800cc40:	0800cc91 	.word	0x0800cc91
 800cc44:	0800cc91 	.word	0x0800cc91
 800cc48:	0800cc91 	.word	0x0800cc91
 800cc4c:	0800cc91 	.word	0x0800cc91
 800cc50:	0800cc91 	.word	0x0800cc91
 800cc54:	0800cc91 	.word	0x0800cc91
 800cc58:	0800cc91 	.word	0x0800cc91
 800cc5c:	0800cc89 	.word	0x0800cc89
 800cc60:	2301      	movs	r3, #1
 800cc62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc66:	e0bc      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cc68:	2304      	movs	r3, #4
 800cc6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc6e:	e0b8      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cc70:	2308      	movs	r3, #8
 800cc72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc76:	e0b4      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cc78:	2310      	movs	r3, #16
 800cc7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc7e:	e0b0      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cc80:	2320      	movs	r3, #32
 800cc82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc86:	e0ac      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cc88:	2340      	movs	r3, #64	; 0x40
 800cc8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc8e:	e0a8      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cc90:	2380      	movs	r3, #128	; 0x80
 800cc92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cc96:	e0a4      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4a90      	ldr	r2, [pc, #576]	; (800cee0 <UART_SetConfig+0x6a0>)
 800cc9e:	4293      	cmp	r3, r2
 800cca0:	d130      	bne.n	800cd04 <UART_SetConfig+0x4c4>
 800cca2:	4b8e      	ldr	r3, [pc, #568]	; (800cedc <UART_SetConfig+0x69c>)
 800cca4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cca6:	f003 0307 	and.w	r3, r3, #7
 800ccaa:	2b05      	cmp	r3, #5
 800ccac:	d826      	bhi.n	800ccfc <UART_SetConfig+0x4bc>
 800ccae:	a201      	add	r2, pc, #4	; (adr r2, 800ccb4 <UART_SetConfig+0x474>)
 800ccb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccb4:	0800cccd 	.word	0x0800cccd
 800ccb8:	0800ccd5 	.word	0x0800ccd5
 800ccbc:	0800ccdd 	.word	0x0800ccdd
 800ccc0:	0800cce5 	.word	0x0800cce5
 800ccc4:	0800cced 	.word	0x0800cced
 800ccc8:	0800ccf5 	.word	0x0800ccf5
 800cccc:	2300      	movs	r3, #0
 800ccce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccd2:	e086      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800ccd4:	2304      	movs	r3, #4
 800ccd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccda:	e082      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800ccdc:	2308      	movs	r3, #8
 800ccde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cce2:	e07e      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cce4:	2310      	movs	r3, #16
 800cce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccea:	e07a      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800ccec:	2320      	movs	r3, #32
 800ccee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccf2:	e076      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800ccf4:	2340      	movs	r3, #64	; 0x40
 800ccf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ccfa:	e072      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800ccfc:	2380      	movs	r3, #128	; 0x80
 800ccfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd02:	e06e      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4a76      	ldr	r2, [pc, #472]	; (800cee4 <UART_SetConfig+0x6a4>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d130      	bne.n	800cd70 <UART_SetConfig+0x530>
 800cd0e:	4b73      	ldr	r3, [pc, #460]	; (800cedc <UART_SetConfig+0x69c>)
 800cd10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd12:	f003 0307 	and.w	r3, r3, #7
 800cd16:	2b05      	cmp	r3, #5
 800cd18:	d826      	bhi.n	800cd68 <UART_SetConfig+0x528>
 800cd1a:	a201      	add	r2, pc, #4	; (adr r2, 800cd20 <UART_SetConfig+0x4e0>)
 800cd1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd20:	0800cd39 	.word	0x0800cd39
 800cd24:	0800cd41 	.word	0x0800cd41
 800cd28:	0800cd49 	.word	0x0800cd49
 800cd2c:	0800cd51 	.word	0x0800cd51
 800cd30:	0800cd59 	.word	0x0800cd59
 800cd34:	0800cd61 	.word	0x0800cd61
 800cd38:	2300      	movs	r3, #0
 800cd3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd3e:	e050      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cd40:	2304      	movs	r3, #4
 800cd42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd46:	e04c      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cd48:	2308      	movs	r3, #8
 800cd4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd4e:	e048      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cd50:	2310      	movs	r3, #16
 800cd52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd56:	e044      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cd58:	2320      	movs	r3, #32
 800cd5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd5e:	e040      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cd60:	2340      	movs	r3, #64	; 0x40
 800cd62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd66:	e03c      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cd68:	2380      	movs	r3, #128	; 0x80
 800cd6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cd6e:	e038      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	4a5c      	ldr	r2, [pc, #368]	; (800cee8 <UART_SetConfig+0x6a8>)
 800cd76:	4293      	cmp	r3, r2
 800cd78:	d130      	bne.n	800cddc <UART_SetConfig+0x59c>
 800cd7a:	4b58      	ldr	r3, [pc, #352]	; (800cedc <UART_SetConfig+0x69c>)
 800cd7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd7e:	f003 0307 	and.w	r3, r3, #7
 800cd82:	2b05      	cmp	r3, #5
 800cd84:	d826      	bhi.n	800cdd4 <UART_SetConfig+0x594>
 800cd86:	a201      	add	r2, pc, #4	; (adr r2, 800cd8c <UART_SetConfig+0x54c>)
 800cd88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd8c:	0800cda5 	.word	0x0800cda5
 800cd90:	0800cdad 	.word	0x0800cdad
 800cd94:	0800cdb5 	.word	0x0800cdb5
 800cd98:	0800cdbd 	.word	0x0800cdbd
 800cd9c:	0800cdc5 	.word	0x0800cdc5
 800cda0:	0800cdcd 	.word	0x0800cdcd
 800cda4:	2302      	movs	r3, #2
 800cda6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdaa:	e01a      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cdac:	2304      	movs	r3, #4
 800cdae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdb2:	e016      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cdb4:	2308      	movs	r3, #8
 800cdb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdba:	e012      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cdbc:	2310      	movs	r3, #16
 800cdbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdc2:	e00e      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cdc4:	2320      	movs	r3, #32
 800cdc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdca:	e00a      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cdcc:	2340      	movs	r3, #64	; 0x40
 800cdce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdd2:	e006      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cdd4:	2380      	movs	r3, #128	; 0x80
 800cdd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800cdda:	e002      	b.n	800cde2 <UART_SetConfig+0x5a2>
 800cddc:	2380      	movs	r3, #128	; 0x80
 800cdde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	4a40      	ldr	r2, [pc, #256]	; (800cee8 <UART_SetConfig+0x6a8>)
 800cde8:	4293      	cmp	r3, r2
 800cdea:	f040 80ef 	bne.w	800cfcc <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800cdee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cdf2:	2b20      	cmp	r3, #32
 800cdf4:	dc46      	bgt.n	800ce84 <UART_SetConfig+0x644>
 800cdf6:	2b02      	cmp	r3, #2
 800cdf8:	f2c0 8081 	blt.w	800cefe <UART_SetConfig+0x6be>
 800cdfc:	3b02      	subs	r3, #2
 800cdfe:	2b1e      	cmp	r3, #30
 800ce00:	d87d      	bhi.n	800cefe <UART_SetConfig+0x6be>
 800ce02:	a201      	add	r2, pc, #4	; (adr r2, 800ce08 <UART_SetConfig+0x5c8>)
 800ce04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce08:	0800ce8b 	.word	0x0800ce8b
 800ce0c:	0800ceff 	.word	0x0800ceff
 800ce10:	0800ce93 	.word	0x0800ce93
 800ce14:	0800ceff 	.word	0x0800ceff
 800ce18:	0800ceff 	.word	0x0800ceff
 800ce1c:	0800ceff 	.word	0x0800ceff
 800ce20:	0800cea3 	.word	0x0800cea3
 800ce24:	0800ceff 	.word	0x0800ceff
 800ce28:	0800ceff 	.word	0x0800ceff
 800ce2c:	0800ceff 	.word	0x0800ceff
 800ce30:	0800ceff 	.word	0x0800ceff
 800ce34:	0800ceff 	.word	0x0800ceff
 800ce38:	0800ceff 	.word	0x0800ceff
 800ce3c:	0800ceff 	.word	0x0800ceff
 800ce40:	0800ceb3 	.word	0x0800ceb3
 800ce44:	0800ceff 	.word	0x0800ceff
 800ce48:	0800ceff 	.word	0x0800ceff
 800ce4c:	0800ceff 	.word	0x0800ceff
 800ce50:	0800ceff 	.word	0x0800ceff
 800ce54:	0800ceff 	.word	0x0800ceff
 800ce58:	0800ceff 	.word	0x0800ceff
 800ce5c:	0800ceff 	.word	0x0800ceff
 800ce60:	0800ceff 	.word	0x0800ceff
 800ce64:	0800ceff 	.word	0x0800ceff
 800ce68:	0800ceff 	.word	0x0800ceff
 800ce6c:	0800ceff 	.word	0x0800ceff
 800ce70:	0800ceff 	.word	0x0800ceff
 800ce74:	0800ceff 	.word	0x0800ceff
 800ce78:	0800ceff 	.word	0x0800ceff
 800ce7c:	0800ceff 	.word	0x0800ceff
 800ce80:	0800cef1 	.word	0x0800cef1
 800ce84:	2b40      	cmp	r3, #64	; 0x40
 800ce86:	d036      	beq.n	800cef6 <UART_SetConfig+0x6b6>
 800ce88:	e039      	b.n	800cefe <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800ce8a:	f7fc fe93 	bl	8009bb4 <HAL_RCCEx_GetD3PCLK1Freq>
 800ce8e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800ce90:	e03b      	b.n	800cf0a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce92:	f107 0314 	add.w	r3, r7, #20
 800ce96:	4618      	mov	r0, r3
 800ce98:	f7fc fea2 	bl	8009be0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ce9c:	69bb      	ldr	r3, [r7, #24]
 800ce9e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cea0:	e033      	b.n	800cf0a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cea2:	f107 0308 	add.w	r3, r7, #8
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7fc ffee 	bl	8009e88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ceac:	68fb      	ldr	r3, [r7, #12]
 800ceae:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ceb0:	e02b      	b.n	800cf0a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ceb2:	4b0a      	ldr	r3, [pc, #40]	; (800cedc <UART_SetConfig+0x69c>)
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	f003 0320 	and.w	r3, r3, #32
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d009      	beq.n	800ced2 <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800cebe:	4b07      	ldr	r3, [pc, #28]	; (800cedc <UART_SetConfig+0x69c>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	08db      	lsrs	r3, r3, #3
 800cec4:	f003 0303 	and.w	r3, r3, #3
 800cec8:	4a08      	ldr	r2, [pc, #32]	; (800ceec <UART_SetConfig+0x6ac>)
 800ceca:	fa22 f303 	lsr.w	r3, r2, r3
 800cece:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ced0:	e01b      	b.n	800cf0a <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800ced2:	4b06      	ldr	r3, [pc, #24]	; (800ceec <UART_SetConfig+0x6ac>)
 800ced4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ced6:	e018      	b.n	800cf0a <UART_SetConfig+0x6ca>
 800ced8:	40011400 	.word	0x40011400
 800cedc:	58024400 	.word	0x58024400
 800cee0:	40007800 	.word	0x40007800
 800cee4:	40007c00 	.word	0x40007c00
 800cee8:	58000c00 	.word	0x58000c00
 800ceec:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800cef0:	4bc4      	ldr	r3, [pc, #784]	; (800d204 <UART_SetConfig+0x9c4>)
 800cef2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cef4:	e009      	b.n	800cf0a <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cef6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cefa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800cefc:	e005      	b.n	800cf0a <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800cefe:	2300      	movs	r3, #0
 800cf00:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800cf02:	2301      	movs	r3, #1
 800cf04:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800cf08:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800cf0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	f000 81da 	beq.w	800d2c6 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf16:	4abc      	ldr	r2, [pc, #752]	; (800d208 <UART_SetConfig+0x9c8>)
 800cf18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf1c:	461a      	mov	r2, r3
 800cf1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf20:	fbb3 f3f2 	udiv	r3, r3, r2
 800cf24:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	685a      	ldr	r2, [r3, #4]
 800cf2a:	4613      	mov	r3, r2
 800cf2c:	005b      	lsls	r3, r3, #1
 800cf2e:	4413      	add	r3, r2
 800cf30:	6a3a      	ldr	r2, [r7, #32]
 800cf32:	429a      	cmp	r2, r3
 800cf34:	d305      	bcc.n	800cf42 <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	685b      	ldr	r3, [r3, #4]
 800cf3a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800cf3c:	6a3a      	ldr	r2, [r7, #32]
 800cf3e:	429a      	cmp	r2, r3
 800cf40:	d903      	bls.n	800cf4a <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800cf42:	2301      	movs	r3, #1
 800cf44:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cf48:	e1bd      	b.n	800d2c6 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800cf4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf4c:	4618      	mov	r0, r3
 800cf4e:	f04f 0100 	mov.w	r1, #0
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf56:	4aac      	ldr	r2, [pc, #688]	; (800d208 <UART_SetConfig+0x9c8>)
 800cf58:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800cf5c:	b29a      	uxth	r2, r3
 800cf5e:	f04f 0300 	mov.w	r3, #0
 800cf62:	f7f3 fa15 	bl	8000390 <__aeabi_uldivmod>
 800cf66:	4602      	mov	r2, r0
 800cf68:	460b      	mov	r3, r1
 800cf6a:	4610      	mov	r0, r2
 800cf6c:	4619      	mov	r1, r3
 800cf6e:	f04f 0200 	mov.w	r2, #0
 800cf72:	f04f 0300 	mov.w	r3, #0
 800cf76:	020b      	lsls	r3, r1, #8
 800cf78:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800cf7c:	0202      	lsls	r2, r0, #8
 800cf7e:	6879      	ldr	r1, [r7, #4]
 800cf80:	6849      	ldr	r1, [r1, #4]
 800cf82:	0849      	lsrs	r1, r1, #1
 800cf84:	4608      	mov	r0, r1
 800cf86:	f04f 0100 	mov.w	r1, #0
 800cf8a:	1814      	adds	r4, r2, r0
 800cf8c:	eb43 0501 	adc.w	r5, r3, r1
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	685b      	ldr	r3, [r3, #4]
 800cf94:	461a      	mov	r2, r3
 800cf96:	f04f 0300 	mov.w	r3, #0
 800cf9a:	4620      	mov	r0, r4
 800cf9c:	4629      	mov	r1, r5
 800cf9e:	f7f3 f9f7 	bl	8000390 <__aeabi_uldivmod>
 800cfa2:	4602      	mov	r2, r0
 800cfa4:	460b      	mov	r3, r1
 800cfa6:	4613      	mov	r3, r2
 800cfa8:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800cfaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cfb0:	d308      	bcc.n	800cfc4 <UART_SetConfig+0x784>
 800cfb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cfb8:	d204      	bcs.n	800cfc4 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfc0:	60da      	str	r2, [r3, #12]
 800cfc2:	e180      	b.n	800d2c6 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800cfca:	e17c      	b.n	800d2c6 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	69db      	ldr	r3, [r3, #28]
 800cfd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cfd4:	f040 80be 	bne.w	800d154 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800cfd8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cfdc:	2b20      	cmp	r3, #32
 800cfde:	dc49      	bgt.n	800d074 <UART_SetConfig+0x834>
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	db7c      	blt.n	800d0de <UART_SetConfig+0x89e>
 800cfe4:	2b20      	cmp	r3, #32
 800cfe6:	d87a      	bhi.n	800d0de <UART_SetConfig+0x89e>
 800cfe8:	a201      	add	r2, pc, #4	; (adr r2, 800cff0 <UART_SetConfig+0x7b0>)
 800cfea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfee:	bf00      	nop
 800cff0:	0800d07b 	.word	0x0800d07b
 800cff4:	0800d083 	.word	0x0800d083
 800cff8:	0800d0df 	.word	0x0800d0df
 800cffc:	0800d0df 	.word	0x0800d0df
 800d000:	0800d08b 	.word	0x0800d08b
 800d004:	0800d0df 	.word	0x0800d0df
 800d008:	0800d0df 	.word	0x0800d0df
 800d00c:	0800d0df 	.word	0x0800d0df
 800d010:	0800d09b 	.word	0x0800d09b
 800d014:	0800d0df 	.word	0x0800d0df
 800d018:	0800d0df 	.word	0x0800d0df
 800d01c:	0800d0df 	.word	0x0800d0df
 800d020:	0800d0df 	.word	0x0800d0df
 800d024:	0800d0df 	.word	0x0800d0df
 800d028:	0800d0df 	.word	0x0800d0df
 800d02c:	0800d0df 	.word	0x0800d0df
 800d030:	0800d0ab 	.word	0x0800d0ab
 800d034:	0800d0df 	.word	0x0800d0df
 800d038:	0800d0df 	.word	0x0800d0df
 800d03c:	0800d0df 	.word	0x0800d0df
 800d040:	0800d0df 	.word	0x0800d0df
 800d044:	0800d0df 	.word	0x0800d0df
 800d048:	0800d0df 	.word	0x0800d0df
 800d04c:	0800d0df 	.word	0x0800d0df
 800d050:	0800d0df 	.word	0x0800d0df
 800d054:	0800d0df 	.word	0x0800d0df
 800d058:	0800d0df 	.word	0x0800d0df
 800d05c:	0800d0df 	.word	0x0800d0df
 800d060:	0800d0df 	.word	0x0800d0df
 800d064:	0800d0df 	.word	0x0800d0df
 800d068:	0800d0df 	.word	0x0800d0df
 800d06c:	0800d0df 	.word	0x0800d0df
 800d070:	0800d0d1 	.word	0x0800d0d1
 800d074:	2b40      	cmp	r3, #64	; 0x40
 800d076:	d02e      	beq.n	800d0d6 <UART_SetConfig+0x896>
 800d078:	e031      	b.n	800d0de <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d07a:	f7fb fe2f 	bl	8008cdc <HAL_RCC_GetPCLK1Freq>
 800d07e:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d080:	e033      	b.n	800d0ea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d082:	f7fb fe41 	bl	8008d08 <HAL_RCC_GetPCLK2Freq>
 800d086:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d088:	e02f      	b.n	800d0ea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d08a:	f107 0314 	add.w	r3, r7, #20
 800d08e:	4618      	mov	r0, r3
 800d090:	f7fc fda6 	bl	8009be0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d094:	69bb      	ldr	r3, [r7, #24]
 800d096:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d098:	e027      	b.n	800d0ea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d09a:	f107 0308 	add.w	r3, r7, #8
 800d09e:	4618      	mov	r0, r3
 800d0a0:	f7fc fef2 	bl	8009e88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0a8:	e01f      	b.n	800d0ea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d0aa:	4b58      	ldr	r3, [pc, #352]	; (800d20c <UART_SetConfig+0x9cc>)
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	f003 0320 	and.w	r3, r3, #32
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d009      	beq.n	800d0ca <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d0b6:	4b55      	ldr	r3, [pc, #340]	; (800d20c <UART_SetConfig+0x9cc>)
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	08db      	lsrs	r3, r3, #3
 800d0bc:	f003 0303 	and.w	r3, r3, #3
 800d0c0:	4a53      	ldr	r2, [pc, #332]	; (800d210 <UART_SetConfig+0x9d0>)
 800d0c2:	fa22 f303 	lsr.w	r3, r2, r3
 800d0c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d0c8:	e00f      	b.n	800d0ea <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800d0ca:	4b51      	ldr	r3, [pc, #324]	; (800d210 <UART_SetConfig+0x9d0>)
 800d0cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0ce:	e00c      	b.n	800d0ea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d0d0:	4b4c      	ldr	r3, [pc, #304]	; (800d204 <UART_SetConfig+0x9c4>)
 800d0d2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0d4:	e009      	b.n	800d0ea <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d0d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d0da:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d0dc:	e005      	b.n	800d0ea <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d0e2:	2301      	movs	r3, #1
 800d0e4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d0e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	f000 80ea 	beq.w	800d2c6 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0f6:	4a44      	ldr	r2, [pc, #272]	; (800d208 <UART_SetConfig+0x9c8>)
 800d0f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d0fc:	461a      	mov	r2, r3
 800d0fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d100:	fbb3 f3f2 	udiv	r3, r3, r2
 800d104:	005a      	lsls	r2, r3, #1
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	685b      	ldr	r3, [r3, #4]
 800d10a:	085b      	lsrs	r3, r3, #1
 800d10c:	441a      	add	r2, r3
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	685b      	ldr	r3, [r3, #4]
 800d112:	fbb2 f3f3 	udiv	r3, r2, r3
 800d116:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d11a:	2b0f      	cmp	r3, #15
 800d11c:	d916      	bls.n	800d14c <UART_SetConfig+0x90c>
 800d11e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d124:	d212      	bcs.n	800d14c <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d128:	b29b      	uxth	r3, r3
 800d12a:	f023 030f 	bic.w	r3, r3, #15
 800d12e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d132:	085b      	lsrs	r3, r3, #1
 800d134:	b29b      	uxth	r3, r3
 800d136:	f003 0307 	and.w	r3, r3, #7
 800d13a:	b29a      	uxth	r2, r3
 800d13c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d13e:	4313      	orrs	r3, r2
 800d140:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d148:	60da      	str	r2, [r3, #12]
 800d14a:	e0bc      	b.n	800d2c6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d14c:	2301      	movs	r3, #1
 800d14e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800d152:	e0b8      	b.n	800d2c6 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d154:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d158:	2b20      	cmp	r3, #32
 800d15a:	dc4b      	bgt.n	800d1f4 <UART_SetConfig+0x9b4>
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	f2c0 8087 	blt.w	800d270 <UART_SetConfig+0xa30>
 800d162:	2b20      	cmp	r3, #32
 800d164:	f200 8084 	bhi.w	800d270 <UART_SetConfig+0xa30>
 800d168:	a201      	add	r2, pc, #4	; (adr r2, 800d170 <UART_SetConfig+0x930>)
 800d16a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d16e:	bf00      	nop
 800d170:	0800d1fb 	.word	0x0800d1fb
 800d174:	0800d215 	.word	0x0800d215
 800d178:	0800d271 	.word	0x0800d271
 800d17c:	0800d271 	.word	0x0800d271
 800d180:	0800d21d 	.word	0x0800d21d
 800d184:	0800d271 	.word	0x0800d271
 800d188:	0800d271 	.word	0x0800d271
 800d18c:	0800d271 	.word	0x0800d271
 800d190:	0800d22d 	.word	0x0800d22d
 800d194:	0800d271 	.word	0x0800d271
 800d198:	0800d271 	.word	0x0800d271
 800d19c:	0800d271 	.word	0x0800d271
 800d1a0:	0800d271 	.word	0x0800d271
 800d1a4:	0800d271 	.word	0x0800d271
 800d1a8:	0800d271 	.word	0x0800d271
 800d1ac:	0800d271 	.word	0x0800d271
 800d1b0:	0800d23d 	.word	0x0800d23d
 800d1b4:	0800d271 	.word	0x0800d271
 800d1b8:	0800d271 	.word	0x0800d271
 800d1bc:	0800d271 	.word	0x0800d271
 800d1c0:	0800d271 	.word	0x0800d271
 800d1c4:	0800d271 	.word	0x0800d271
 800d1c8:	0800d271 	.word	0x0800d271
 800d1cc:	0800d271 	.word	0x0800d271
 800d1d0:	0800d271 	.word	0x0800d271
 800d1d4:	0800d271 	.word	0x0800d271
 800d1d8:	0800d271 	.word	0x0800d271
 800d1dc:	0800d271 	.word	0x0800d271
 800d1e0:	0800d271 	.word	0x0800d271
 800d1e4:	0800d271 	.word	0x0800d271
 800d1e8:	0800d271 	.word	0x0800d271
 800d1ec:	0800d271 	.word	0x0800d271
 800d1f0:	0800d263 	.word	0x0800d263
 800d1f4:	2b40      	cmp	r3, #64	; 0x40
 800d1f6:	d037      	beq.n	800d268 <UART_SetConfig+0xa28>
 800d1f8:	e03a      	b.n	800d270 <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d1fa:	f7fb fd6f 	bl	8008cdc <HAL_RCC_GetPCLK1Freq>
 800d1fe:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d200:	e03c      	b.n	800d27c <UART_SetConfig+0xa3c>
 800d202:	bf00      	nop
 800d204:	003d0900 	.word	0x003d0900
 800d208:	08010fa0 	.word	0x08010fa0
 800d20c:	58024400 	.word	0x58024400
 800d210:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d214:	f7fb fd78 	bl	8008d08 <HAL_RCC_GetPCLK2Freq>
 800d218:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800d21a:	e02f      	b.n	800d27c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d21c:	f107 0314 	add.w	r3, r7, #20
 800d220:	4618      	mov	r0, r3
 800d222:	f7fc fcdd 	bl	8009be0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d226:	69bb      	ldr	r3, [r7, #24]
 800d228:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d22a:	e027      	b.n	800d27c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d22c:	f107 0308 	add.w	r3, r7, #8
 800d230:	4618      	mov	r0, r3
 800d232:	f7fc fe29 	bl	8009e88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d23a:	e01f      	b.n	800d27c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d23c:	4b2c      	ldr	r3, [pc, #176]	; (800d2f0 <UART_SetConfig+0xab0>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	f003 0320 	and.w	r3, r3, #32
 800d244:	2b00      	cmp	r3, #0
 800d246:	d009      	beq.n	800d25c <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d248:	4b29      	ldr	r3, [pc, #164]	; (800d2f0 <UART_SetConfig+0xab0>)
 800d24a:	681b      	ldr	r3, [r3, #0]
 800d24c:	08db      	lsrs	r3, r3, #3
 800d24e:	f003 0303 	and.w	r3, r3, #3
 800d252:	4a28      	ldr	r2, [pc, #160]	; (800d2f4 <UART_SetConfig+0xab4>)
 800d254:	fa22 f303 	lsr.w	r3, r2, r3
 800d258:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d25a:	e00f      	b.n	800d27c <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800d25c:	4b25      	ldr	r3, [pc, #148]	; (800d2f4 <UART_SetConfig+0xab4>)
 800d25e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d260:	e00c      	b.n	800d27c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d262:	4b25      	ldr	r3, [pc, #148]	; (800d2f8 <UART_SetConfig+0xab8>)
 800d264:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d266:	e009      	b.n	800d27c <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d26c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800d26e:	e005      	b.n	800d27c <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800d270:	2300      	movs	r3, #0
 800d272:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800d274:	2301      	movs	r3, #1
 800d276:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800d27a:	bf00      	nop
    }

    if (pclk != 0U)
 800d27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d021      	beq.n	800d2c6 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d286:	4a1d      	ldr	r2, [pc, #116]	; (800d2fc <UART_SetConfig+0xabc>)
 800d288:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d28c:	461a      	mov	r2, r3
 800d28e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d290:	fbb3 f2f2 	udiv	r2, r3, r2
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	085b      	lsrs	r3, r3, #1
 800d29a:	441a      	add	r2, r3
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	685b      	ldr	r3, [r3, #4]
 800d2a0:	fbb2 f3f3 	udiv	r3, r2, r3
 800d2a4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2a8:	2b0f      	cmp	r3, #15
 800d2aa:	d909      	bls.n	800d2c0 <UART_SetConfig+0xa80>
 800d2ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d2b2:	d205      	bcs.n	800d2c0 <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d2b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d2b6:	b29a      	uxth	r2, r3
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	60da      	str	r2, [r3, #12]
 800d2be:	e002      	b.n	800d2c6 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800d2c0:	2301      	movs	r3, #1
 800d2c2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	2201      	movs	r2, #1
 800d2ca:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	2201      	movs	r2, #1
 800d2d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	2200      	movs	r2, #0
 800d2e0:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d2e2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800d2e6:	4618      	mov	r0, r3
 800d2e8:	3738      	adds	r7, #56	; 0x38
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bdb0      	pop	{r4, r5, r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	58024400 	.word	0x58024400
 800d2f4:	03d09000 	.word	0x03d09000
 800d2f8:	003d0900 	.word	0x003d0900
 800d2fc:	08010fa0 	.word	0x08010fa0

0800d300 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d300:	b480      	push	{r7}
 800d302:	b083      	sub	sp, #12
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d30c:	f003 0301 	and.w	r3, r3, #1
 800d310:	2b00      	cmp	r3, #0
 800d312:	d00a      	beq.n	800d32a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	430a      	orrs	r2, r1
 800d328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d32e:	f003 0302 	and.w	r3, r3, #2
 800d332:	2b00      	cmp	r3, #0
 800d334:	d00a      	beq.n	800d34c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	685b      	ldr	r3, [r3, #4]
 800d33c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	430a      	orrs	r2, r1
 800d34a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d350:	f003 0304 	and.w	r3, r3, #4
 800d354:	2b00      	cmp	r3, #0
 800d356:	d00a      	beq.n	800d36e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	685b      	ldr	r3, [r3, #4]
 800d35e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	681b      	ldr	r3, [r3, #0]
 800d36a:	430a      	orrs	r2, r1
 800d36c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d36e:	687b      	ldr	r3, [r7, #4]
 800d370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d372:	f003 0308 	and.w	r3, r3, #8
 800d376:	2b00      	cmp	r3, #0
 800d378:	d00a      	beq.n	800d390 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	685b      	ldr	r3, [r3, #4]
 800d380:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	430a      	orrs	r2, r1
 800d38e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d394:	f003 0310 	and.w	r3, r3, #16
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d00a      	beq.n	800d3b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	689b      	ldr	r3, [r3, #8]
 800d3a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	681b      	ldr	r3, [r3, #0]
 800d3ae:	430a      	orrs	r2, r1
 800d3b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3b6:	f003 0320 	and.w	r3, r3, #32
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d00a      	beq.n	800d3d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	689b      	ldr	r3, [r3, #8]
 800d3c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	430a      	orrs	r2, r1
 800d3d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d01a      	beq.n	800d416 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	685b      	ldr	r3, [r3, #4]
 800d3e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	430a      	orrs	r2, r1
 800d3f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d3fe:	d10a      	bne.n	800d416 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	430a      	orrs	r2, r1
 800d414:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d41a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d00a      	beq.n	800d438 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	685b      	ldr	r3, [r3, #4]
 800d428:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	430a      	orrs	r2, r1
 800d436:	605a      	str	r2, [r3, #4]
  }
}
 800d438:	bf00      	nop
 800d43a:	370c      	adds	r7, #12
 800d43c:	46bd      	mov	sp, r7
 800d43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d442:	4770      	bx	lr

0800d444 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b086      	sub	sp, #24
 800d448:	af02      	add	r7, sp, #8
 800d44a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2200      	movs	r2, #0
 800d450:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d454:	f7f7 f92c 	bl	80046b0 <HAL_GetTick>
 800d458:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	f003 0308 	and.w	r3, r3, #8
 800d464:	2b08      	cmp	r3, #8
 800d466:	d10e      	bne.n	800d486 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d468:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d46c:	9300      	str	r3, [sp, #0]
 800d46e:	68fb      	ldr	r3, [r7, #12]
 800d470:	2200      	movs	r2, #0
 800d472:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d476:	6878      	ldr	r0, [r7, #4]
 800d478:	f000 f82f 	bl	800d4da <UART_WaitOnFlagUntilTimeout>
 800d47c:	4603      	mov	r3, r0
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d001      	beq.n	800d486 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d482:	2303      	movs	r3, #3
 800d484:	e025      	b.n	800d4d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f003 0304 	and.w	r3, r3, #4
 800d490:	2b04      	cmp	r3, #4
 800d492:	d10e      	bne.n	800d4b2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d494:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d498:	9300      	str	r3, [sp, #0]
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	2200      	movs	r2, #0
 800d49e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d4a2:	6878      	ldr	r0, [r7, #4]
 800d4a4:	f000 f819 	bl	800d4da <UART_WaitOnFlagUntilTimeout>
 800d4a8:	4603      	mov	r3, r0
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d001      	beq.n	800d4b2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d4ae:	2303      	movs	r3, #3
 800d4b0:	e00f      	b.n	800d4d2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2220      	movs	r2, #32
 800d4b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2220      	movs	r2, #32
 800d4be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	2200      	movs	r2, #0
 800d4c6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d4d0:	2300      	movs	r3, #0
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3710      	adds	r7, #16
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}

0800d4da <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d4da:	b580      	push	{r7, lr}
 800d4dc:	b09c      	sub	sp, #112	; 0x70
 800d4de:	af00      	add	r7, sp, #0
 800d4e0:	60f8      	str	r0, [r7, #12]
 800d4e2:	60b9      	str	r1, [r7, #8]
 800d4e4:	603b      	str	r3, [r7, #0]
 800d4e6:	4613      	mov	r3, r2
 800d4e8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d4ea:	e0a9      	b.n	800d640 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d4ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d4ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4f2:	f000 80a5 	beq.w	800d640 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d4f6:	f7f7 f8db 	bl	80046b0 <HAL_GetTick>
 800d4fa:	4602      	mov	r2, r0
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	1ad3      	subs	r3, r2, r3
 800d500:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800d502:	429a      	cmp	r2, r3
 800d504:	d302      	bcc.n	800d50c <UART_WaitOnFlagUntilTimeout+0x32>
 800d506:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d140      	bne.n	800d58e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d512:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d514:	e853 3f00 	ldrex	r3, [r3]
 800d518:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800d51a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d51c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d520:	667b      	str	r3, [r7, #100]	; 0x64
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	681b      	ldr	r3, [r3, #0]
 800d526:	461a      	mov	r2, r3
 800d528:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d52a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d52c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d52e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800d530:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d532:	e841 2300 	strex	r3, r2, [r1]
 800d536:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800d538:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d1e6      	bne.n	800d50c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	3308      	adds	r3, #8
 800d544:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d546:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d548:	e853 3f00 	ldrex	r3, [r3]
 800d54c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d54e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d550:	f023 0301 	bic.w	r3, r3, #1
 800d554:	663b      	str	r3, [r7, #96]	; 0x60
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	3308      	adds	r3, #8
 800d55c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d55e:	64ba      	str	r2, [r7, #72]	; 0x48
 800d560:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d562:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d564:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d566:	e841 2300 	strex	r3, r2, [r1]
 800d56a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d56c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d1e5      	bne.n	800d53e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800d572:	68fb      	ldr	r3, [r7, #12]
 800d574:	2220      	movs	r2, #32
 800d576:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	2220      	movs	r2, #32
 800d57e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	2200      	movs	r2, #0
 800d586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d58a:	2303      	movs	r3, #3
 800d58c:	e069      	b.n	800d662 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	f003 0304 	and.w	r3, r3, #4
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d051      	beq.n	800d640 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d59c:	68fb      	ldr	r3, [r7, #12]
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	69db      	ldr	r3, [r3, #28]
 800d5a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d5a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d5aa:	d149      	bne.n	800d640 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	681b      	ldr	r3, [r3, #0]
 800d5b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d5b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5be:	e853 3f00 	ldrex	r3, [r3]
 800d5c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800d5ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	461a      	mov	r2, r3
 800d5d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d5d4:	637b      	str	r3, [r7, #52]	; 0x34
 800d5d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d5d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d5da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d5dc:	e841 2300 	strex	r3, r2, [r1]
 800d5e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d1e6      	bne.n	800d5b6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	3308      	adds	r3, #8
 800d5ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d5f0:	697b      	ldr	r3, [r7, #20]
 800d5f2:	e853 3f00 	ldrex	r3, [r3]
 800d5f6:	613b      	str	r3, [r7, #16]
   return(result);
 800d5f8:	693b      	ldr	r3, [r7, #16]
 800d5fa:	f023 0301 	bic.w	r3, r3, #1
 800d5fe:	66bb      	str	r3, [r7, #104]	; 0x68
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	3308      	adds	r3, #8
 800d606:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800d608:	623a      	str	r2, [r7, #32]
 800d60a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d60c:	69f9      	ldr	r1, [r7, #28]
 800d60e:	6a3a      	ldr	r2, [r7, #32]
 800d610:	e841 2300 	strex	r3, r2, [r1]
 800d614:	61bb      	str	r3, [r7, #24]
   return(result);
 800d616:	69bb      	ldr	r3, [r7, #24]
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d1e5      	bne.n	800d5e8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2220      	movs	r2, #32
 800d620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	2220      	movs	r2, #32
 800d628:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	2220      	movs	r2, #32
 800d630:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	2200      	movs	r2, #0
 800d638:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d63c:	2303      	movs	r3, #3
 800d63e:	e010      	b.n	800d662 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	69da      	ldr	r2, [r3, #28]
 800d646:	68bb      	ldr	r3, [r7, #8]
 800d648:	4013      	ands	r3, r2
 800d64a:	68ba      	ldr	r2, [r7, #8]
 800d64c:	429a      	cmp	r2, r3
 800d64e:	bf0c      	ite	eq
 800d650:	2301      	moveq	r3, #1
 800d652:	2300      	movne	r3, #0
 800d654:	b2db      	uxtb	r3, r3
 800d656:	461a      	mov	r2, r3
 800d658:	79fb      	ldrb	r3, [r7, #7]
 800d65a:	429a      	cmp	r2, r3
 800d65c:	f43f af46 	beq.w	800d4ec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d660:	2300      	movs	r3, #0
}
 800d662:	4618      	mov	r0, r3
 800d664:	3770      	adds	r7, #112	; 0x70
 800d666:	46bd      	mov	sp, r7
 800d668:	bd80      	pop	{r7, pc}
	...

0800d66c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d66c:	b580      	push	{r7, lr}
 800d66e:	b096      	sub	sp, #88	; 0x58
 800d670:	af00      	add	r7, sp, #0
 800d672:	60f8      	str	r0, [r7, #12]
 800d674:	60b9      	str	r1, [r7, #8]
 800d676:	4613      	mov	r3, r2
 800d678:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	68ba      	ldr	r2, [r7, #8]
 800d67e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	88fa      	ldrh	r2, [r7, #6]
 800d684:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d688:	68fb      	ldr	r3, [r7, #12]
 800d68a:	2200      	movs	r2, #0
 800d68c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	2222      	movs	r2, #34	; 0x22
 800d694:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 800d698:	68fb      	ldr	r3, [r7, #12]
 800d69a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d02c      	beq.n	800d6fa <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6a4:	4a42      	ldr	r2, [pc, #264]	; (800d7b0 <UART_Start_Receive_DMA+0x144>)
 800d6a6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6ac:	4a41      	ldr	r2, [pc, #260]	; (800d7b4 <UART_Start_Receive_DMA+0x148>)
 800d6ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6b4:	4a40      	ldr	r2, [pc, #256]	; (800d7b8 <UART_Start_Receive_DMA+0x14c>)
 800d6b6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6bc:	2200      	movs	r2, #0
 800d6be:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	3324      	adds	r3, #36	; 0x24
 800d6ca:	4619      	mov	r1, r3
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d6d0:	461a      	mov	r2, r3
 800d6d2:	88fb      	ldrh	r3, [r7, #6]
 800d6d4:	f7f7 fe7a 	bl	80053cc <HAL_DMA_Start_IT>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d00d      	beq.n	800d6fa <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	2210      	movs	r2, #16
 800d6e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2200      	movs	r2, #0
 800d6ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2220      	movs	r2, #32
 800d6f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	e055      	b.n	800d7a6 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	691b      	ldr	r3, [r3, #16]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d018      	beq.n	800d73c <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d712:	e853 3f00 	ldrex	r3, [r3]
 800d716:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d71a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d71e:	657b      	str	r3, [r7, #84]	; 0x54
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	461a      	mov	r2, r3
 800d726:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d728:	64bb      	str	r3, [r7, #72]	; 0x48
 800d72a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d72c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d72e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d730:	e841 2300 	strex	r3, r2, [r1]
 800d734:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d736:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d1e6      	bne.n	800d70a <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d73c:	68fb      	ldr	r3, [r7, #12]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	3308      	adds	r3, #8
 800d742:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d746:	e853 3f00 	ldrex	r3, [r3]
 800d74a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d74e:	f043 0301 	orr.w	r3, r3, #1
 800d752:	653b      	str	r3, [r7, #80]	; 0x50
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	3308      	adds	r3, #8
 800d75a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d75c:	637a      	str	r2, [r7, #52]	; 0x34
 800d75e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d760:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d762:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d764:	e841 2300 	strex	r3, r2, [r1]
 800d768:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d1e5      	bne.n	800d73c <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d770:	68fb      	ldr	r3, [r7, #12]
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	3308      	adds	r3, #8
 800d776:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d778:	697b      	ldr	r3, [r7, #20]
 800d77a:	e853 3f00 	ldrex	r3, [r3]
 800d77e:	613b      	str	r3, [r7, #16]
   return(result);
 800d780:	693b      	ldr	r3, [r7, #16]
 800d782:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d786:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	3308      	adds	r3, #8
 800d78e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d790:	623a      	str	r2, [r7, #32]
 800d792:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d794:	69f9      	ldr	r1, [r7, #28]
 800d796:	6a3a      	ldr	r2, [r7, #32]
 800d798:	e841 2300 	strex	r3, r2, [r1]
 800d79c:	61bb      	str	r3, [r7, #24]
   return(result);
 800d79e:	69bb      	ldr	r3, [r7, #24]
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d1e5      	bne.n	800d770 <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 800d7a4:	2300      	movs	r3, #0
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	3758      	adds	r7, #88	; 0x58
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	bd80      	pop	{r7, pc}
 800d7ae:	bf00      	nop
 800d7b0:	0800d9bf 	.word	0x0800d9bf
 800d7b4:	0800dae1 	.word	0x0800dae1
 800d7b8:	0800db19 	.word	0x0800db19

0800d7bc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d7bc:	b480      	push	{r7}
 800d7be:	b08f      	sub	sp, #60	; 0x3c
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ca:	6a3b      	ldr	r3, [r7, #32]
 800d7cc:	e853 3f00 	ldrex	r3, [r3]
 800d7d0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d7d2:	69fb      	ldr	r3, [r7, #28]
 800d7d4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d7d8:	637b      	str	r3, [r7, #52]	; 0x34
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	461a      	mov	r2, r3
 800d7e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7e2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d7e4:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7e6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d7e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7ea:	e841 2300 	strex	r3, r2, [r1]
 800d7ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d1e6      	bne.n	800d7c4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	3308      	adds	r3, #8
 800d7fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	e853 3f00 	ldrex	r3, [r3]
 800d804:	60bb      	str	r3, [r7, #8]
   return(result);
 800d806:	68bb      	ldr	r3, [r7, #8]
 800d808:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800d80c:	633b      	str	r3, [r7, #48]	; 0x30
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	3308      	adds	r3, #8
 800d814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d816:	61ba      	str	r2, [r7, #24]
 800d818:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d81a:	6979      	ldr	r1, [r7, #20]
 800d81c:	69ba      	ldr	r2, [r7, #24]
 800d81e:	e841 2300 	strex	r3, r2, [r1]
 800d822:	613b      	str	r3, [r7, #16]
   return(result);
 800d824:	693b      	ldr	r3, [r7, #16]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d1e5      	bne.n	800d7f6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2220      	movs	r2, #32
 800d82e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 800d832:	bf00      	nop
 800d834:	373c      	adds	r7, #60	; 0x3c
 800d836:	46bd      	mov	sp, r7
 800d838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83c:	4770      	bx	lr
	...

0800d840 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d840:	b480      	push	{r7}
 800d842:	b095      	sub	sp, #84	; 0x54
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d84e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d850:	e853 3f00 	ldrex	r3, [r3]
 800d854:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d858:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d85c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	461a      	mov	r2, r3
 800d864:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d866:	643b      	str	r3, [r7, #64]	; 0x40
 800d868:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d86a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d86c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d86e:	e841 2300 	strex	r3, r2, [r1]
 800d872:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d876:	2b00      	cmp	r3, #0
 800d878:	d1e6      	bne.n	800d848 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	3308      	adds	r3, #8
 800d880:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d882:	6a3b      	ldr	r3, [r7, #32]
 800d884:	e853 3f00 	ldrex	r3, [r3]
 800d888:	61fb      	str	r3, [r7, #28]
   return(result);
 800d88a:	69fa      	ldr	r2, [r7, #28]
 800d88c:	4b1e      	ldr	r3, [pc, #120]	; (800d908 <UART_EndRxTransfer+0xc8>)
 800d88e:	4013      	ands	r3, r2
 800d890:	64bb      	str	r3, [r7, #72]	; 0x48
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	3308      	adds	r3, #8
 800d898:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d89a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d89c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d89e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d8a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d8a2:	e841 2300 	strex	r3, r2, [r1]
 800d8a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d1e5      	bne.n	800d87a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d8b2:	2b01      	cmp	r3, #1
 800d8b4:	d118      	bne.n	800d8e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	e853 3f00 	ldrex	r3, [r3]
 800d8c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	f023 0310 	bic.w	r3, r3, #16
 800d8ca:	647b      	str	r3, [r7, #68]	; 0x44
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	461a      	mov	r2, r3
 800d8d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d8d4:	61bb      	str	r3, [r7, #24]
 800d8d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8d8:	6979      	ldr	r1, [r7, #20]
 800d8da:	69ba      	ldr	r2, [r7, #24]
 800d8dc:	e841 2300 	strex	r3, r2, [r1]
 800d8e0:	613b      	str	r3, [r7, #16]
   return(result);
 800d8e2:	693b      	ldr	r3, [r7, #16]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d1e6      	bne.n	800d8b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	2220      	movs	r2, #32
 800d8ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	671a      	str	r2, [r3, #112]	; 0x70
}
 800d8fc:	bf00      	nop
 800d8fe:	3754      	adds	r7, #84	; 0x54
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr
 800d908:	effffffe 	.word	0xeffffffe

0800d90c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b090      	sub	sp, #64	; 0x40
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d918:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	69db      	ldr	r3, [r3, #28]
 800d91e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d922:	d037      	beq.n	800d994 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d926:	2200      	movs	r2, #0
 800d928:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d92c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	3308      	adds	r3, #8
 800d932:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d936:	e853 3f00 	ldrex	r3, [r3]
 800d93a:	623b      	str	r3, [r7, #32]
   return(result);
 800d93c:	6a3b      	ldr	r3, [r7, #32]
 800d93e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d942:	63bb      	str	r3, [r7, #56]	; 0x38
 800d944:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	3308      	adds	r3, #8
 800d94a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d94c:	633a      	str	r2, [r7, #48]	; 0x30
 800d94e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d950:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d952:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d954:	e841 2300 	strex	r3, r2, [r1]
 800d958:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d95a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	d1e5      	bne.n	800d92c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d966:	693b      	ldr	r3, [r7, #16]
 800d968:	e853 3f00 	ldrex	r3, [r3]
 800d96c:	60fb      	str	r3, [r7, #12]
   return(result);
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d974:	637b      	str	r3, [r7, #52]	; 0x34
 800d976:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d978:	681b      	ldr	r3, [r3, #0]
 800d97a:	461a      	mov	r2, r3
 800d97c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d97e:	61fb      	str	r3, [r7, #28]
 800d980:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d982:	69b9      	ldr	r1, [r7, #24]
 800d984:	69fa      	ldr	r2, [r7, #28]
 800d986:	e841 2300 	strex	r3, r2, [r1]
 800d98a:	617b      	str	r3, [r7, #20]
   return(result);
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d1e6      	bne.n	800d960 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d992:	e002      	b.n	800d99a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d994:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d996:	f7fe ff2b 	bl	800c7f0 <HAL_UART_TxCpltCallback>
}
 800d99a:	bf00      	nop
 800d99c:	3740      	adds	r7, #64	; 0x40
 800d99e:	46bd      	mov	sp, r7
 800d9a0:	bd80      	pop	{r7, pc}

0800d9a2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d9a2:	b580      	push	{r7, lr}
 800d9a4:	b084      	sub	sp, #16
 800d9a6:	af00      	add	r7, sp, #0
 800d9a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ae:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d9b0:	68f8      	ldr	r0, [r7, #12]
 800d9b2:	f7fe ff27 	bl	800c804 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d9b6:	bf00      	nop
 800d9b8:	3710      	adds	r7, #16
 800d9ba:	46bd      	mov	sp, r7
 800d9bc:	bd80      	pop	{r7, pc}

0800d9be <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d9be:	b580      	push	{r7, lr}
 800d9c0:	b09c      	sub	sp, #112	; 0x70
 800d9c2:	af00      	add	r7, sp, #0
 800d9c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ca:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	69db      	ldr	r3, [r3, #28]
 800d9d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d9d4:	d071      	beq.n	800daba <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d9d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9d8:	2200      	movs	r2, #0
 800d9da:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d9de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9e6:	e853 3f00 	ldrex	r3, [r3]
 800d9ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d9ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d9ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9f2:	66bb      	str	r3, [r7, #104]	; 0x68
 800d9f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	461a      	mov	r2, r3
 800d9fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d9fc:	65bb      	str	r3, [r7, #88]	; 0x58
 800d9fe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800da02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800da04:	e841 2300 	strex	r3, r2, [r1]
 800da08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800da0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d1e6      	bne.n	800d9de <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800da10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	3308      	adds	r3, #8
 800da16:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800da1a:	e853 3f00 	ldrex	r3, [r3]
 800da1e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800da20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da22:	f023 0301 	bic.w	r3, r3, #1
 800da26:	667b      	str	r3, [r7, #100]	; 0x64
 800da28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	3308      	adds	r3, #8
 800da2e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800da30:	647a      	str	r2, [r7, #68]	; 0x44
 800da32:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800da36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800da38:	e841 2300 	strex	r3, r2, [r1]
 800da3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800da3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800da40:	2b00      	cmp	r3, #0
 800da42:	d1e5      	bne.n	800da10 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800da44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	3308      	adds	r3, #8
 800da4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da4e:	e853 3f00 	ldrex	r3, [r3]
 800da52:	623b      	str	r3, [r7, #32]
   return(result);
 800da54:	6a3b      	ldr	r3, [r7, #32]
 800da56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da5a:	663b      	str	r3, [r7, #96]	; 0x60
 800da5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da5e:	681b      	ldr	r3, [r3, #0]
 800da60:	3308      	adds	r3, #8
 800da62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800da64:	633a      	str	r2, [r7, #48]	; 0x30
 800da66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da68:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800da6c:	e841 2300 	strex	r3, r2, [r1]
 800da70:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800da72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da74:	2b00      	cmp	r3, #0
 800da76:	d1e5      	bne.n	800da44 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800da78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da7a:	2220      	movs	r2, #32
 800da7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da84:	2b01      	cmp	r3, #1
 800da86:	d118      	bne.n	800daba <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	e853 3f00 	ldrex	r3, [r3]
 800da94:	60fb      	str	r3, [r7, #12]
   return(result);
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	f023 0310 	bic.w	r3, r3, #16
 800da9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800da9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800daa0:	681b      	ldr	r3, [r3, #0]
 800daa2:	461a      	mov	r2, r3
 800daa4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800daa6:	61fb      	str	r3, [r7, #28]
 800daa8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daaa:	69b9      	ldr	r1, [r7, #24]
 800daac:	69fa      	ldr	r2, [r7, #28]
 800daae:	e841 2300 	strex	r3, r2, [r1]
 800dab2:	617b      	str	r3, [r7, #20]
   return(result);
 800dab4:	697b      	ldr	r3, [r7, #20]
 800dab6:	2b00      	cmp	r3, #0
 800dab8:	d1e6      	bne.n	800da88 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800daba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dabc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dabe:	2b01      	cmp	r3, #1
 800dac0:	d107      	bne.n	800dad2 <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dac4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dac8:	4619      	mov	r1, r3
 800daca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dacc:	f7f3 fc42 	bl	8001354 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dad0:	e002      	b.n	800dad8 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 800dad2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dad4:	f7f4 ff9e 	bl	8002a14 <HAL_UART_RxCpltCallback>
}
 800dad8:	bf00      	nop
 800dada:	3770      	adds	r7, #112	; 0x70
 800dadc:	46bd      	mov	sp, r7
 800dade:	bd80      	pop	{r7, pc}

0800dae0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b084      	sub	sp, #16
 800dae4:	af00      	add	r7, sp, #0
 800dae6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daec:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daf2:	2b01      	cmp	r3, #1
 800daf4:	d109      	bne.n	800db0a <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dafc:	085b      	lsrs	r3, r3, #1
 800dafe:	b29b      	uxth	r3, r3
 800db00:	4619      	mov	r1, r3
 800db02:	68f8      	ldr	r0, [r7, #12]
 800db04:	f7f3 fc26 	bl	8001354 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800db08:	e002      	b.n	800db10 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800db0a:	68f8      	ldr	r0, [r7, #12]
 800db0c:	f7fe fe84 	bl	800c818 <HAL_UART_RxHalfCpltCallback>
}
 800db10:	bf00      	nop
 800db12:	3710      	adds	r7, #16
 800db14:	46bd      	mov	sp, r7
 800db16:	bd80      	pop	{r7, pc}

0800db18 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800db18:	b580      	push	{r7, lr}
 800db1a:	b086      	sub	sp, #24
 800db1c:	af00      	add	r7, sp, #0
 800db1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db24:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db2c:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800db2e:	697b      	ldr	r3, [r7, #20]
 800db30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db34:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	689b      	ldr	r3, [r3, #8]
 800db3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db40:	2b80      	cmp	r3, #128	; 0x80
 800db42:	d109      	bne.n	800db58 <UART_DMAError+0x40>
 800db44:	693b      	ldr	r3, [r7, #16]
 800db46:	2b21      	cmp	r3, #33	; 0x21
 800db48:	d106      	bne.n	800db58 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800db4a:	697b      	ldr	r3, [r7, #20]
 800db4c:	2200      	movs	r2, #0
 800db4e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 800db52:	6978      	ldr	r0, [r7, #20]
 800db54:	f7ff fe32 	bl	800d7bc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800db58:	697b      	ldr	r3, [r7, #20]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	689b      	ldr	r3, [r3, #8]
 800db5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db62:	2b40      	cmp	r3, #64	; 0x40
 800db64:	d109      	bne.n	800db7a <UART_DMAError+0x62>
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	2b22      	cmp	r3, #34	; 0x22
 800db6a:	d106      	bne.n	800db7a <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	2200      	movs	r2, #0
 800db70:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800db74:	6978      	ldr	r0, [r7, #20]
 800db76:	f7ff fe63 	bl	800d840 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800db7a:	697b      	ldr	r3, [r7, #20]
 800db7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db80:	f043 0210 	orr.w	r2, r3, #16
 800db84:	697b      	ldr	r3, [r7, #20]
 800db86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800db8a:	6978      	ldr	r0, [r7, #20]
 800db8c:	f7fe fe4e 	bl	800c82c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800db90:	bf00      	nop
 800db92:	3718      	adds	r7, #24
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}

0800db98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800db98:	b580      	push	{r7, lr}
 800db9a:	b084      	sub	sp, #16
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dba4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	2200      	movs	r2, #0
 800dbb2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800dbb6:	68f8      	ldr	r0, [r7, #12]
 800dbb8:	f7fe fe38 	bl	800c82c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbbc:	bf00      	nop
 800dbbe:	3710      	adds	r7, #16
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	bd80      	pop	{r7, pc}

0800dbc4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b088      	sub	sp, #32
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dbd2:	68fb      	ldr	r3, [r7, #12]
 800dbd4:	e853 3f00 	ldrex	r3, [r3]
 800dbd8:	60bb      	str	r3, [r7, #8]
   return(result);
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dbe0:	61fb      	str	r3, [r7, #28]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	461a      	mov	r2, r3
 800dbe8:	69fb      	ldr	r3, [r7, #28]
 800dbea:	61bb      	str	r3, [r7, #24]
 800dbec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbee:	6979      	ldr	r1, [r7, #20]
 800dbf0:	69ba      	ldr	r2, [r7, #24]
 800dbf2:	e841 2300 	strex	r3, r2, [r1]
 800dbf6:	613b      	str	r3, [r7, #16]
   return(result);
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d1e6      	bne.n	800dbcc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	2220      	movs	r2, #32
 800dc02:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	2200      	movs	r2, #0
 800dc0a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800dc0c:	6878      	ldr	r0, [r7, #4]
 800dc0e:	f7fe fdef 	bl	800c7f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dc12:	bf00      	nop
 800dc14:	3720      	adds	r7, #32
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}

0800dc1a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800dc1a:	b480      	push	{r7}
 800dc1c:	b083      	sub	sp, #12
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800dc22:	bf00      	nop
 800dc24:	370c      	adds	r7, #12
 800dc26:	46bd      	mov	sp, r7
 800dc28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2c:	4770      	bx	lr

0800dc2e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800dc2e:	b480      	push	{r7}
 800dc30:	b083      	sub	sp, #12
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800dc36:	bf00      	nop
 800dc38:	370c      	adds	r7, #12
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr

0800dc42 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800dc42:	b480      	push	{r7}
 800dc44:	b083      	sub	sp, #12
 800dc46:	af00      	add	r7, sp, #0
 800dc48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800dc4a:	bf00      	nop
 800dc4c:	370c      	adds	r7, #12
 800dc4e:	46bd      	mov	sp, r7
 800dc50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc54:	4770      	bx	lr

0800dc56 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800dc56:	b580      	push	{r7, lr}
 800dc58:	b084      	sub	sp, #16
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	d101      	bne.n	800dc6c <HAL_UARTEx_EnableFifoMode+0x16>
 800dc68:	2302      	movs	r3, #2
 800dc6a:	e02b      	b.n	800dcc4 <HAL_UARTEx_EnableFifoMode+0x6e>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2201      	movs	r2, #1
 800dc70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2224      	movs	r2, #36	; 0x24
 800dc78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	681a      	ldr	r2, [r3, #0]
 800dc8a:	687b      	ldr	r3, [r7, #4]
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	f022 0201 	bic.w	r2, r2, #1
 800dc92:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800dc9a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800dca2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	68fa      	ldr	r2, [r7, #12]
 800dcaa:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dcac:	6878      	ldr	r0, [r7, #4]
 800dcae:	f000 f91f 	bl	800def0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2220      	movs	r2, #32
 800dcb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dcc2:	2300      	movs	r3, #0
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3710      	adds	r7, #16
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b085      	sub	sp, #20
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dcda:	2b01      	cmp	r3, #1
 800dcdc:	d101      	bne.n	800dce2 <HAL_UARTEx_DisableFifoMode+0x16>
 800dcde:	2302      	movs	r3, #2
 800dce0:	e027      	b.n	800dd32 <HAL_UARTEx_DisableFifoMode+0x66>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2201      	movs	r2, #1
 800dce6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	2224      	movs	r2, #36	; 0x24
 800dcee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	681a      	ldr	r2, [r3, #0]
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	f022 0201 	bic.w	r2, r2, #1
 800dd08:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800dd10:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2200      	movs	r2, #0
 800dd16:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	681b      	ldr	r3, [r3, #0]
 800dd1c:	68fa      	ldr	r2, [r7, #12]
 800dd1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	2220      	movs	r2, #32
 800dd24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2200      	movs	r2, #0
 800dd2c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800dd30:	2300      	movs	r3, #0
}
 800dd32:	4618      	mov	r0, r3
 800dd34:	3714      	adds	r7, #20
 800dd36:	46bd      	mov	sp, r7
 800dd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd3c:	4770      	bx	lr

0800dd3e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800dd3e:	b580      	push	{r7, lr}
 800dd40:	b084      	sub	sp, #16
 800dd42:	af00      	add	r7, sp, #0
 800dd44:	6078      	str	r0, [r7, #4]
 800dd46:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d101      	bne.n	800dd56 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800dd52:	2302      	movs	r3, #2
 800dd54:	e02d      	b.n	800ddb2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	2201      	movs	r2, #1
 800dd5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	2224      	movs	r2, #36	; 0x24
 800dd62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	681a      	ldr	r2, [r3, #0]
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	f022 0201 	bic.w	r2, r2, #1
 800dd7c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	689b      	ldr	r3, [r3, #8]
 800dd84:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	683a      	ldr	r2, [r7, #0]
 800dd8e:	430a      	orrs	r2, r1
 800dd90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f000 f8ac 	bl	800def0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	68fa      	ldr	r2, [r7, #12]
 800dd9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	2220      	movs	r2, #32
 800dda4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ddb0:	2300      	movs	r3, #0
}
 800ddb2:	4618      	mov	r0, r3
 800ddb4:	3710      	adds	r7, #16
 800ddb6:	46bd      	mov	sp, r7
 800ddb8:	bd80      	pop	{r7, pc}

0800ddba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ddba:	b580      	push	{r7, lr}
 800ddbc:	b084      	sub	sp, #16
 800ddbe:	af00      	add	r7, sp, #0
 800ddc0:	6078      	str	r0, [r7, #4]
 800ddc2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	d101      	bne.n	800ddd2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ddce:	2302      	movs	r3, #2
 800ddd0:	e02d      	b.n	800de2e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	2201      	movs	r2, #1
 800ddd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2224      	movs	r2, #36	; 0x24
 800ddde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	681b      	ldr	r3, [r3, #0]
 800ddee:	681a      	ldr	r2, [r3, #0]
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	681b      	ldr	r3, [r3, #0]
 800ddf4:	f022 0201 	bic.w	r2, r2, #1
 800ddf8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	689b      	ldr	r3, [r3, #8]
 800de00:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	683a      	ldr	r2, [r7, #0]
 800de0a:	430a      	orrs	r2, r1
 800de0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f000 f86e 	bl	800def0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	68fa      	ldr	r2, [r7, #12]
 800de1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2220      	movs	r2, #32
 800de20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	2200      	movs	r2, #0
 800de28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800de2c:	2300      	movs	r3, #0
}
 800de2e:	4618      	mov	r0, r3
 800de30:	3710      	adds	r7, #16
 800de32:	46bd      	mov	sp, r7
 800de34:	bd80      	pop	{r7, pc}

0800de36 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800de36:	b580      	push	{r7, lr}
 800de38:	b08c      	sub	sp, #48	; 0x30
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	60f8      	str	r0, [r7, #12]
 800de3e:	60b9      	str	r1, [r7, #8]
 800de40:	4613      	mov	r3, r2
 800de42:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de4a:	2b20      	cmp	r3, #32
 800de4c:	d14a      	bne.n	800dee4 <HAL_UARTEx_ReceiveToIdle_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d002      	beq.n	800de5a <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800de54:	88fb      	ldrh	r3, [r7, #6]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d101      	bne.n	800de5e <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800de5a:	2301      	movs	r3, #1
 800de5c:	e043      	b.n	800dee6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
    }

    __HAL_LOCK(huart);
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800de64:	2b01      	cmp	r3, #1
 800de66:	d101      	bne.n	800de6c <HAL_UARTEx_ReceiveToIdle_DMA+0x36>
 800de68:	2302      	movs	r3, #2
 800de6a:	e03c      	b.n	800dee6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	2201      	movs	r2, #1
 800de70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	2201      	movs	r2, #1
 800de78:	66da      	str	r2, [r3, #108]	; 0x6c

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800de7a:	88fb      	ldrh	r3, [r7, #6]
 800de7c:	461a      	mov	r2, r3
 800de7e:	68b9      	ldr	r1, [r7, #8]
 800de80:	68f8      	ldr	r0, [r7, #12]
 800de82:	f7ff fbf3 	bl	800d66c <UART_Start_Receive_DMA>
 800de86:	4603      	mov	r3, r0
 800de88:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800de8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800de90:	2b00      	cmp	r3, #0
 800de92:	d124      	bne.n	800dede <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de98:	2b01      	cmp	r3, #1
 800de9a:	d11d      	bne.n	800ded8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800de9c:	68fb      	ldr	r3, [r7, #12]
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	2210      	movs	r2, #16
 800dea2:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800deaa:	69bb      	ldr	r3, [r7, #24]
 800deac:	e853 3f00 	ldrex	r3, [r3]
 800deb0:	617b      	str	r3, [r7, #20]
   return(result);
 800deb2:	697b      	ldr	r3, [r7, #20]
 800deb4:	f043 0310 	orr.w	r3, r3, #16
 800deb8:	62bb      	str	r3, [r7, #40]	; 0x28
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	461a      	mov	r2, r3
 800dec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dec2:	627b      	str	r3, [r7, #36]	; 0x24
 800dec4:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dec6:	6a39      	ldr	r1, [r7, #32]
 800dec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deca:	e841 2300 	strex	r3, r2, [r1]
 800dece:	61fb      	str	r3, [r7, #28]
   return(result);
 800ded0:	69fb      	ldr	r3, [r7, #28]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d1e6      	bne.n	800dea4 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800ded6:	e002      	b.n	800dede <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800ded8:	2301      	movs	r3, #1
 800deda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800dede:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800dee2:	e000      	b.n	800dee6 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800dee4:	2302      	movs	r3, #2
  }
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3730      	adds	r7, #48	; 0x30
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}
	...

0800def0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800def0:	b480      	push	{r7}
 800def2:	b085      	sub	sp, #20
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800defc:	2b00      	cmp	r3, #0
 800defe:	d108      	bne.n	800df12 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2201      	movs	r2, #1
 800df04:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	2201      	movs	r2, #1
 800df0c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800df10:	e031      	b.n	800df76 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800df12:	2310      	movs	r3, #16
 800df14:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800df16:	2310      	movs	r3, #16
 800df18:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	689b      	ldr	r3, [r3, #8]
 800df20:	0e5b      	lsrs	r3, r3, #25
 800df22:	b2db      	uxtb	r3, r3
 800df24:	f003 0307 	and.w	r3, r3, #7
 800df28:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	689b      	ldr	r3, [r3, #8]
 800df30:	0f5b      	lsrs	r3, r3, #29
 800df32:	b2db      	uxtb	r3, r3
 800df34:	f003 0307 	and.w	r3, r3, #7
 800df38:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df3a:	7bbb      	ldrb	r3, [r7, #14]
 800df3c:	7b3a      	ldrb	r2, [r7, #12]
 800df3e:	4911      	ldr	r1, [pc, #68]	; (800df84 <UARTEx_SetNbDataToProcess+0x94>)
 800df40:	5c8a      	ldrb	r2, [r1, r2]
 800df42:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800df46:	7b3a      	ldrb	r2, [r7, #12]
 800df48:	490f      	ldr	r1, [pc, #60]	; (800df88 <UARTEx_SetNbDataToProcess+0x98>)
 800df4a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800df4c:	fb93 f3f2 	sdiv	r3, r3, r2
 800df50:	b29a      	uxth	r2, r3
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df58:	7bfb      	ldrb	r3, [r7, #15]
 800df5a:	7b7a      	ldrb	r2, [r7, #13]
 800df5c:	4909      	ldr	r1, [pc, #36]	; (800df84 <UARTEx_SetNbDataToProcess+0x94>)
 800df5e:	5c8a      	ldrb	r2, [r1, r2]
 800df60:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800df64:	7b7a      	ldrb	r2, [r7, #13]
 800df66:	4908      	ldr	r1, [pc, #32]	; (800df88 <UARTEx_SetNbDataToProcess+0x98>)
 800df68:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800df6a:	fb93 f3f2 	sdiv	r3, r3, r2
 800df6e:	b29a      	uxth	r2, r3
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800df76:	bf00      	nop
 800df78:	3714      	adds	r7, #20
 800df7a:	46bd      	mov	sp, r7
 800df7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df80:	4770      	bx	lr
 800df82:	bf00      	nop
 800df84:	08010fb8 	.word	0x08010fb8
 800df88:	08010fc0 	.word	0x08010fc0

0800df8c <checkint>:
 800df8c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800df90:	f240 33fe 	movw	r3, #1022	; 0x3fe
 800df94:	429a      	cmp	r2, r3
 800df96:	b5f0      	push	{r4, r5, r6, r7, lr}
 800df98:	dd2b      	ble.n	800dff2 <checkint+0x66>
 800df9a:	f240 4333 	movw	r3, #1075	; 0x433
 800df9e:	429a      	cmp	r2, r3
 800dfa0:	dc25      	bgt.n	800dfee <checkint+0x62>
 800dfa2:	1a9b      	subs	r3, r3, r2
 800dfa4:	f1a3 0620 	sub.w	r6, r3, #32
 800dfa8:	f04f 32ff 	mov.w	r2, #4294967295
 800dfac:	fa02 f606 	lsl.w	r6, r2, r6
 800dfb0:	fa02 f403 	lsl.w	r4, r2, r3
 800dfb4:	f1c3 0520 	rsb	r5, r3, #32
 800dfb8:	4334      	orrs	r4, r6
 800dfba:	fa22 f505 	lsr.w	r5, r2, r5
 800dfbe:	432c      	orrs	r4, r5
 800dfc0:	409a      	lsls	r2, r3
 800dfc2:	ea20 0602 	bic.w	r6, r0, r2
 800dfc6:	ea21 0704 	bic.w	r7, r1, r4
 800dfca:	ea56 0207 	orrs.w	r2, r6, r7
 800dfce:	f1a3 0420 	sub.w	r4, r3, #32
 800dfd2:	f1c3 0220 	rsb	r2, r3, #32
 800dfd6:	d10c      	bne.n	800dff2 <checkint+0x66>
 800dfd8:	40d8      	lsrs	r0, r3
 800dfda:	fa01 f302 	lsl.w	r3, r1, r2
 800dfde:	4318      	orrs	r0, r3
 800dfe0:	40e1      	lsrs	r1, r4
 800dfe2:	4308      	orrs	r0, r1
 800dfe4:	f000 0301 	and.w	r3, r0, #1
 800dfe8:	f1c3 0002 	rsb	r0, r3, #2
 800dfec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dfee:	2002      	movs	r0, #2
 800dff0:	e7fc      	b.n	800dfec <checkint+0x60>
 800dff2:	2000      	movs	r0, #0
 800dff4:	e7fa      	b.n	800dfec <checkint+0x60>
	...

0800dff8 <pow>:
 800dff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dffc:	ed2d 8b0a 	vpush	{d8-d12}
 800e000:	b09b      	sub	sp, #108	; 0x6c
 800e002:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e006:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e00a:	ed8d 1b00 	vstr	d1, [sp]
 800e00e:	ea4f 5915 	mov.w	r9, r5, lsr #20
 800e012:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e016:	f109 30ff 	add.w	r0, r9, #4294967295
 800e01a:	f240 71fd 	movw	r1, #2045	; 0x7fd
 800e01e:	4288      	cmp	r0, r1
 800e020:	46cc      	mov	ip, r9
 800e022:	ea4f 5817 	mov.w	r8, r7, lsr #20
 800e026:	d806      	bhi.n	800e036 <pow+0x3e>
 800e028:	f3c8 010a 	ubfx	r1, r8, #0, #11
 800e02c:	f2a1 31be 	subw	r1, r1, #958	; 0x3be
 800e030:	297f      	cmp	r1, #127	; 0x7f
 800e032:	f240 81ab 	bls.w	800e38c <pow+0x394>
 800e036:	19b1      	adds	r1, r6, r6
 800e038:	9104      	str	r1, [sp, #16]
 800e03a:	eb47 0107 	adc.w	r1, r7, r7
 800e03e:	9105      	str	r1, [sp, #20]
 800e040:	9904      	ldr	r1, [sp, #16]
 800e042:	f111 31ff 	adds.w	r1, r1, #4294967295
 800e046:	460a      	mov	r2, r1
 800e048:	9905      	ldr	r1, [sp, #20]
 800e04a:	f141 31ff 	adc.w	r1, r1, #4294967295
 800e04e:	460b      	mov	r3, r1
 800e050:	f46f 1100 	mvn.w	r1, #2097152	; 0x200000
 800e054:	f06f 0001 	mvn.w	r0, #1
 800e058:	4299      	cmp	r1, r3
 800e05a:	bf08      	it	eq
 800e05c:	4290      	cmpeq	r0, r2
 800e05e:	d260      	bcs.n	800e122 <pow+0x12a>
 800e060:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e064:	4313      	orrs	r3, r2
 800e066:	d11a      	bne.n	800e09e <pow+0xa6>
 800e068:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800e06c:	1923      	adds	r3, r4, r4
 800e06e:	930c      	str	r3, [sp, #48]	; 0x30
 800e070:	eb42 0302 	adc.w	r3, r2, r2
 800e074:	930d      	str	r3, [sp, #52]	; 0x34
 800e076:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800e07a:	4bcf      	ldr	r3, [pc, #828]	; (800e3b8 <pow+0x3c0>)
 800e07c:	2200      	movs	r2, #0
 800e07e:	428b      	cmp	r3, r1
 800e080:	bf08      	it	eq
 800e082:	4282      	cmpeq	r2, r0
 800e084:	f080 8265 	bcs.w	800e552 <pow+0x55a>
 800e088:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e08c:	ed9d 6b00 	vldr	d6, [sp]
 800e090:	ee37 0b06 	vadd.f64	d0, d7, d6
 800e094:	b01b      	add	sp, #108	; 0x6c
 800e096:	ecbd 8b0a 	vpop	{d8-d12}
 800e09a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e09e:	49c7      	ldr	r1, [pc, #796]	; (800e3bc <pow+0x3c4>)
 800e0a0:	2000      	movs	r0, #0
 800e0a2:	428d      	cmp	r5, r1
 800e0a4:	bf08      	it	eq
 800e0a6:	4284      	cmpeq	r4, r0
 800e0a8:	d10b      	bne.n	800e0c2 <pow+0xca>
 800e0aa:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800e0ae:	19b3      	adds	r3, r6, r6
 800e0b0:	930e      	str	r3, [sp, #56]	; 0x38
 800e0b2:	eb42 0302 	adc.w	r3, r2, r2
 800e0b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e0b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800e0bc:	4bbe      	ldr	r3, [pc, #760]	; (800e3b8 <pow+0x3c0>)
 800e0be:	2200      	movs	r2, #0
 800e0c0:	e7dd      	b.n	800e07e <pow+0x86>
 800e0c2:	1921      	adds	r1, r4, r4
 800e0c4:	9106      	str	r1, [sp, #24]
 800e0c6:	eb45 0105 	adc.w	r1, r5, r5
 800e0ca:	9107      	str	r1, [sp, #28]
 800e0cc:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800e0d0:	49bb      	ldr	r1, [pc, #748]	; (800e3c0 <pow+0x3c8>)
 800e0d2:	2000      	movs	r0, #0
 800e0d4:	42a1      	cmp	r1, r4
 800e0d6:	bf08      	it	eq
 800e0d8:	4298      	cmpeq	r0, r3
 800e0da:	d3d5      	bcc.n	800e088 <pow+0x90>
 800e0dc:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800e0e0:	428c      	cmp	r4, r1
 800e0e2:	bf08      	it	eq
 800e0e4:	4283      	cmpeq	r3, r0
 800e0e6:	d1cf      	bne.n	800e088 <pow+0x90>
 800e0e8:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 800e0ec:	49b5      	ldr	r1, [pc, #724]	; (800e3c4 <pow+0x3cc>)
 800e0ee:	2000      	movs	r0, #0
 800e0f0:	428c      	cmp	r4, r1
 800e0f2:	bf08      	it	eq
 800e0f4:	4283      	cmpeq	r3, r0
 800e0f6:	f000 822c 	beq.w	800e552 <pow+0x55a>
 800e0fa:	49b3      	ldr	r1, [pc, #716]	; (800e3c8 <pow+0x3d0>)
 800e0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e100:	42a1      	cmp	r1, r4
 800e102:	bf08      	it	eq
 800e104:	4298      	cmpeq	r0, r3
 800e106:	ea6f 0307 	mvn.w	r3, r7
 800e10a:	bf34      	ite	cc
 800e10c:	2201      	movcc	r2, #1
 800e10e:	2200      	movcs	r2, #0
 800e110:	0fdb      	lsrs	r3, r3, #31
 800e112:	429a      	cmp	r2, r3
 800e114:	f040 821a 	bne.w	800e54c <pow+0x554>
 800e118:	ed9d 7b00 	vldr	d7, [sp]
 800e11c:	ee27 0b07 	vmul.f64	d0, d7, d7
 800e120:	e7b8      	b.n	800e094 <pow+0x9c>
 800e122:	1923      	adds	r3, r4, r4
 800e124:	9308      	str	r3, [sp, #32]
 800e126:	eb45 0305 	adc.w	r3, r5, r5
 800e12a:	9309      	str	r3, [sp, #36]	; 0x24
 800e12c:	9b08      	ldr	r3, [sp, #32]
 800e12e:	f113 33ff 	adds.w	r3, r3, #4294967295
 800e132:	9310      	str	r3, [sp, #64]	; 0x40
 800e134:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e136:	f143 33ff 	adc.w	r3, r3, #4294967295
 800e13a:	9311      	str	r3, [sp, #68]	; 0x44
 800e13c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e140:	4299      	cmp	r1, r3
 800e142:	bf08      	it	eq
 800e144:	4290      	cmpeq	r0, r2
 800e146:	d22d      	bcs.n	800e1a4 <pow+0x1ac>
 800e148:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e14c:	2c00      	cmp	r4, #0
 800e14e:	f175 0300 	sbcs.w	r3, r5, #0
 800e152:	ee27 0b07 	vmul.f64	d0, d7, d7
 800e156:	da16      	bge.n	800e186 <pow+0x18e>
 800e158:	4630      	mov	r0, r6
 800e15a:	4639      	mov	r1, r7
 800e15c:	f7ff ff16 	bl	800df8c <checkint>
 800e160:	2801      	cmp	r0, #1
 800e162:	d110      	bne.n	800e186 <pow+0x18e>
 800e164:	eeb1 0b40 	vneg.f64	d0, d0
 800e168:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
 800e16c:	4323      	orrs	r3, r4
 800e16e:	d10c      	bne.n	800e18a <pow+0x192>
 800e170:	2e00      	cmp	r6, #0
 800e172:	f177 0300 	sbcs.w	r3, r7, #0
 800e176:	da8d      	bge.n	800e094 <pow+0x9c>
 800e178:	b01b      	add	sp, #108	; 0x6c
 800e17a:	ecbd 8b0a 	vpop	{d8-d12}
 800e17e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e182:	f000 ba29 	b.w	800e5d8 <__math_divzero>
 800e186:	2000      	movs	r0, #0
 800e188:	e7ee      	b.n	800e168 <pow+0x170>
 800e18a:	2e00      	cmp	r6, #0
 800e18c:	f177 0300 	sbcs.w	r3, r7, #0
 800e190:	da80      	bge.n	800e094 <pow+0x9c>
 800e192:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e196:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800e19a:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 800e19e:	ed9d 0b14 	vldr	d0, [sp, #80]	; 0x50
 800e1a2:	e777      	b.n	800e094 <pow+0x9c>
 800e1a4:	2c00      	cmp	r4, #0
 800e1a6:	f175 0300 	sbcs.w	r3, r5, #0
 800e1aa:	da35      	bge.n	800e218 <pow+0x220>
 800e1ac:	4630      	mov	r0, r6
 800e1ae:	4639      	mov	r1, r7
 800e1b0:	f7ff feec 	bl	800df8c <checkint>
 800e1b4:	b940      	cbnz	r0, 800e1c8 <pow+0x1d0>
 800e1b6:	ed9d 0b02 	vldr	d0, [sp, #8]
 800e1ba:	b01b      	add	sp, #108	; 0x6c
 800e1bc:	ecbd 8b0a 	vpop	{d8-d12}
 800e1c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1c4:	f000 ba20 	b.w	800e608 <__math_invalid>
 800e1c8:	2801      	cmp	r0, #1
 800e1ca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e1ce:	bf14      	ite	ne
 800e1d0:	2000      	movne	r0, #0
 800e1d2:	f44f 2080 	moveq.w	r0, #262144	; 0x40000
 800e1d6:	461d      	mov	r5, r3
 800e1d8:	f3c9 0c0a 	ubfx	ip, r9, #0, #11
 800e1dc:	f3c8 030a 	ubfx	r3, r8, #0, #11
 800e1e0:	f2a3 32be 	subw	r2, r3, #958	; 0x3be
 800e1e4:	2a7f      	cmp	r2, #127	; 0x7f
 800e1e6:	d933      	bls.n	800e250 <pow+0x258>
 800e1e8:	4974      	ldr	r1, [pc, #464]	; (800e3bc <pow+0x3c4>)
 800e1ea:	2000      	movs	r0, #0
 800e1ec:	428d      	cmp	r5, r1
 800e1ee:	bf08      	it	eq
 800e1f0:	4284      	cmpeq	r4, r0
 800e1f2:	f000 81ae 	beq.w	800e552 <pow+0x55a>
 800e1f6:	f240 32bd 	movw	r2, #957	; 0x3bd
 800e1fa:	4293      	cmp	r3, r2
 800e1fc:	d80e      	bhi.n	800e21c <pow+0x224>
 800e1fe:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e202:	ed9d 7b00 	vldr	d7, [sp]
 800e206:	42a9      	cmp	r1, r5
 800e208:	bf08      	it	eq
 800e20a:	42a0      	cmpeq	r0, r4
 800e20c:	bf34      	ite	cc
 800e20e:	ee37 0b00 	vaddcc.f64	d0, d7, d0
 800e212:	ee30 0b47 	vsubcs.f64	d0, d0, d7
 800e216:	e73d      	b.n	800e094 <pow+0x9c>
 800e218:	2000      	movs	r0, #0
 800e21a:	e7df      	b.n	800e1dc <pow+0x1e4>
 800e21c:	42a9      	cmp	r1, r5
 800e21e:	bf08      	it	eq
 800e220:	42a0      	cmpeq	r0, r4
 800e222:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800e226:	bf2c      	ite	cs
 800e228:	2301      	movcs	r3, #1
 800e22a:	2300      	movcc	r3, #0
 800e22c:	4590      	cmp	r8, r2
 800e22e:	bf8c      	ite	hi
 800e230:	f04f 0800 	movhi.w	r8, #0
 800e234:	f04f 0801 	movls.w	r8, #1
 800e238:	4543      	cmp	r3, r8
 800e23a:	f04f 0000 	mov.w	r0, #0
 800e23e:	f000 80af 	beq.w	800e3a0 <pow+0x3a8>
 800e242:	b01b      	add	sp, #108	; 0x6c
 800e244:	ecbd 8b0a 	vpop	{d8-d12}
 800e248:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e24c:	f000 b9bc 	b.w	800e5c8 <__math_oflow>
 800e250:	f1bc 0f00 	cmp.w	ip, #0
 800e254:	d10e      	bne.n	800e274 <pow+0x27c>
 800e256:	ed9f 7b56 	vldr	d7, [pc, #344]	; 800e3b0 <pow+0x3b8>
 800e25a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800e25e:	ee26 7b07 	vmul.f64	d7, d6, d7
 800e262:	ec57 6b17 	vmov	r6, r7, d7
 800e266:	4b59      	ldr	r3, [pc, #356]	; (800e3cc <pow+0x3d4>)
 800e268:	2100      	movs	r1, #0
 800e26a:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 800e26e:	1874      	adds	r4, r6, r1
 800e270:	eb42 0503 	adc.w	r5, r2, r3
 800e274:	2300      	movs	r3, #0
 800e276:	18e3      	adds	r3, r4, r3
 800e278:	4b55      	ldr	r3, [pc, #340]	; (800e3d0 <pow+0x3d8>)
 800e27a:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 800e27e:	eb45 0303 	adc.w	r3, r5, r3
 800e282:	1519      	asrs	r1, r3, #20
 800e284:	ee03 1a10 	vmov	s6, r1
 800e288:	0d1e      	lsrs	r6, r3, #20
 800e28a:	2100      	movs	r1, #0
 800e28c:	f3c3 3246 	ubfx	r2, r3, #13, #7
 800e290:	0536      	lsls	r6, r6, #20
 800e292:	1a63      	subs	r3, r4, r1
 800e294:	9312      	str	r3, [sp, #72]	; 0x48
 800e296:	eb65 0306 	sbc.w	r3, r5, r6
 800e29a:	9313      	str	r3, [sp, #76]	; 0x4c
 800e29c:	4b4d      	ldr	r3, [pc, #308]	; (800e3d4 <pow+0x3dc>)
 800e29e:	eb03 1442 	add.w	r4, r3, r2, lsl #5
 800e2a2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e2a6:	ed9d 5b12 	vldr	d5, [sp, #72]	; 0x48
 800e2aa:	eea5 6b07 	vfma.f64	d6, d5, d7
 800e2ae:	ed93 7b00 	vldr	d7, [r3]
 800e2b2:	ed94 5b16 	vldr	d5, [r4, #88]	; 0x58
 800e2b6:	ed93 4b02 	vldr	d4, [r3, #8]
 800e2ba:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800e2be:	eea3 5b07 	vfma.f64	d5, d3, d7
 800e2c2:	ed94 7b18 	vldr	d7, [r4, #96]	; 0x60
 800e2c6:	ee36 9b05 	vadd.f64	d9, d6, d5
 800e2ca:	ee35 5b49 	vsub.f64	d5, d5, d9
 800e2ce:	eea3 7b04 	vfma.f64	d7, d3, d4
 800e2d2:	ed93 4b04 	vldr	d4, [r3, #16]
 800e2d6:	ee35 5b06 	vadd.f64	d5, d5, d6
 800e2da:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e2de:	ee26 4b04 	vmul.f64	d4, d6, d4
 800e2e2:	ed93 3b08 	vldr	d3, [r3, #32]
 800e2e6:	ee26 0b04 	vmul.f64	d0, d6, d4
 800e2ea:	eeb0 8b40 	vmov.f64	d8, d0
 800e2ee:	ee94 8b06 	vfnms.f64	d8, d4, d6
 800e2f2:	ed93 4b06 	vldr	d4, [r3, #24]
 800e2f6:	ee26 ab00 	vmul.f64	d10, d6, d0
 800e2fa:	ee39 1b00 	vadd.f64	d1, d9, d0
 800e2fe:	ed93 2b0c 	vldr	d2, [r3, #48]	; 0x30
 800e302:	eea6 4b03 	vfma.f64	d4, d6, d3
 800e306:	ee39 9b41 	vsub.f64	d9, d9, d1
 800e30a:	ed93 3b0a 	vldr	d3, [r3, #40]	; 0x28
 800e30e:	ee37 8b08 	vadd.f64	d8, d7, d8
 800e312:	ee39 9b00 	vadd.f64	d9, d9, d0
 800e316:	eea6 3b02 	vfma.f64	d3, d6, d2
 800e31a:	ed93 cb10 	vldr	d12, [r3, #64]	; 0x40
 800e31e:	ee38 9b09 	vadd.f64	d9, d8, d9
 800e322:	ed93 2b0e 	vldr	d2, [r3, #56]	; 0x38
 800e326:	eea6 2b0c 	vfma.f64	d2, d6, d12
 800e32a:	ed9d 6b00 	vldr	d6, [sp]
 800e32e:	eea0 3b02 	vfma.f64	d3, d0, d2
 800e332:	eea0 4b03 	vfma.f64	d4, d0, d3
 800e336:	eeaa 9b04 	vfma.f64	d9, d10, d4
 800e33a:	ee31 7b09 	vadd.f64	d7, d1, d9
 800e33e:	ee26 6b07 	vmul.f64	d6, d6, d7
 800e342:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e346:	eeb0 3b46 	vmov.f64	d3, d6
 800e34a:	ee31 1b47 	vsub.f64	d1, d1, d7
 800e34e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e352:	ee31 9b09 	vadd.f64	d9, d1, d9
 800e356:	ed9d 6b00 	vldr	d6, [sp]
 800e35a:	f3c3 570a 	ubfx	r7, r3, #20, #11
 800e35e:	f46f 7472 	mvn.w	r4, #968	; 0x3c8
 800e362:	193c      	adds	r4, r7, r4
 800e364:	2c3e      	cmp	r4, #62	; 0x3e
 800e366:	ee96 3b07 	vfnms.f64	d3, d6, d7
 800e36a:	eea6 3b09 	vfma.f64	d3, d6, d9
 800e36e:	d934      	bls.n	800e3da <pow+0x3e2>
 800e370:	428c      	cmp	r4, r1
 800e372:	da0d      	bge.n	800e390 <pow+0x398>
 800e374:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e378:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e37c:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e380:	2800      	cmp	r0, #0
 800e382:	f43f ae87 	beq.w	800e094 <pow+0x9c>
 800e386:	eeb1 0b40 	vneg.f64	d0, d0
 800e38a:	e683      	b.n	800e094 <pow+0x9c>
 800e38c:	2000      	movs	r0, #0
 800e38e:	e771      	b.n	800e274 <pow+0x27c>
 800e390:	f5b7 6f81 	cmp.w	r7, #1032	; 0x408
 800e394:	d920      	bls.n	800e3d8 <pow+0x3e0>
 800e396:	2a00      	cmp	r2, #0
 800e398:	f173 0300 	sbcs.w	r3, r3, #0
 800e39c:	f6bf af51 	bge.w	800e242 <pow+0x24a>
 800e3a0:	b01b      	add	sp, #108	; 0x6c
 800e3a2:	ecbd 8b0a 	vpop	{d8-d12}
 800e3a6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3aa:	f000 b905 	b.w	800e5b8 <__math_uflow>
 800e3ae:	bf00      	nop
 800e3b0:	00000000 	.word	0x00000000
 800e3b4:	43300000 	.word	0x43300000
 800e3b8:	fff00000 	.word	0xfff00000
 800e3bc:	3ff00000 	.word	0x3ff00000
 800e3c0:	ffe00000 	.word	0xffe00000
 800e3c4:	7fe00000 	.word	0x7fe00000
 800e3c8:	7fdfffff 	.word	0x7fdfffff
 800e3cc:	fcc00000 	.word	0xfcc00000
 800e3d0:	c0196aab 	.word	0xc0196aab
 800e3d4:	08010fc8 	.word	0x08010fc8
 800e3d8:	460f      	mov	r7, r1
 800e3da:	4e65      	ldr	r6, [pc, #404]	; (800e570 <pow+0x578>)
 800e3dc:	ed9d 4b02 	vldr	d4, [sp, #8]
 800e3e0:	ed96 6b02 	vldr	d6, [r6, #8]
 800e3e4:	ed96 7b00 	vldr	d7, [r6]
 800e3e8:	eeb0 5b46 	vmov.f64	d5, d6
 800e3ec:	eea4 5b07 	vfma.f64	d5, d4, d7
 800e3f0:	ed8d 5b00 	vstr	d5, [sp]
 800e3f4:	ee35 6b46 	vsub.f64	d6, d5, d6
 800e3f8:	eeb0 5b44 	vmov.f64	d5, d4
 800e3fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e400:	ed96 7b04 	vldr	d7, [r6, #16]
 800e404:	f002 017f 	and.w	r1, r2, #127	; 0x7f
 800e408:	eea6 5b07 	vfma.f64	d5, d6, d7
 800e40c:	eeb0 7b45 	vmov.f64	d7, d5
 800e410:	ed96 5b06 	vldr	d5, [r6, #24]
 800e414:	1849      	adds	r1, r1, r1
 800e416:	eb06 0cc1 	add.w	ip, r6, r1, lsl #3
 800e41a:	eb06 01c1 	add.w	r1, r6, r1, lsl #3
 800e41e:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e422:	ed96 4b0a 	vldr	d4, [r6, #40]	; 0x28
 800e426:	ee33 3b07 	vadd.f64	d3, d3, d7
 800e42a:	ee23 6b03 	vmul.f64	d6, d3, d3
 800e42e:	ed91 7b1c 	vldr	d7, [r1, #112]	; 0x70
 800e432:	ed96 5b08 	vldr	d5, [r6, #32]
 800e436:	ee33 7b07 	vadd.f64	d7, d3, d7
 800e43a:	1814      	adds	r4, r2, r0
 800e43c:	0365      	lsls	r5, r4, #13
 800e43e:	e9dc 4c1e 	ldrd	r4, ip, [ip, #120]	; 0x78
 800e442:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e446:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e44a:	ed96 4b0e 	vldr	d4, [r6, #56]	; 0x38
 800e44e:	ee26 6b06 	vmul.f64	d6, d6, d6
 800e452:	ed96 5b0c 	vldr	d5, [r6, #48]	; 0x30
 800e456:	2000      	movs	r0, #0
 800e458:	eb10 0a04 	adds.w	sl, r0, r4
 800e45c:	eea3 5b04 	vfma.f64	d5, d3, d4
 800e460:	eb45 0b0c 	adc.w	fp, r5, ip
 800e464:	eea6 7b05 	vfma.f64	d7, d6, d5
 800e468:	2f00      	cmp	r7, #0
 800e46a:	d16a      	bne.n	800e542 <pow+0x54a>
 800e46c:	f002 4000 	and.w	r0, r2, #2147483648	; 0x80000000
 800e470:	4639      	mov	r1, r7
 800e472:	ea50 0301 	orrs.w	r3, r0, r1
 800e476:	f04f 0300 	mov.w	r3, #0
 800e47a:	d115      	bne.n	800e4a8 <pow+0x4b0>
 800e47c:	eb1a 0303 	adds.w	r3, sl, r3
 800e480:	ee0b 3a10 	vmov	s22, r3
 800e484:	4b3b      	ldr	r3, [pc, #236]	; (800e574 <pow+0x57c>)
 800e486:	ed9f 0b34 	vldr	d0, [pc, #208]	; 800e558 <pow+0x560>
 800e48a:	eb4b 0303 	adc.w	r3, fp, r3
 800e48e:	ee0b 3a90 	vmov	s23, r3
 800e492:	eea7 bb0b 	vfma.f64	d11, d7, d11
 800e496:	ee2b 0b00 	vmul.f64	d0, d11, d0
 800e49a:	b01b      	add	sp, #108	; 0x6c
 800e49c:	ecbd 8b0a 	vpop	{d8-d12}
 800e4a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4a4:	f000 b8c8 	b.w	800e638 <__math_check_oflow>
 800e4a8:	eb1a 0303 	adds.w	r3, sl, r3
 800e4ac:	930a      	str	r3, [sp, #40]	; 0x28
 800e4ae:	4b32      	ldr	r3, [pc, #200]	; (800e578 <pow+0x580>)
 800e4b0:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 800e4b4:	eb4b 0303 	adc.w	r3, fp, r3
 800e4b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800e4ba:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800e4be:	ee27 6b05 	vmul.f64	d6, d7, d5
 800e4c2:	ee35 7b06 	vadd.f64	d7, d5, d6
 800e4c6:	eeb0 3bc7 	vabs.f64	d3, d7
 800e4ca:	eeb4 3bc4 	vcmpe.f64	d3, d4
 800e4ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4d2:	ed9f 0b23 	vldr	d0, [pc, #140]	; 800e560 <pow+0x568>
 800e4d6:	d52b      	bpl.n	800e530 <pow+0x538>
 800e4d8:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800e4dc:	ee35 5b47 	vsub.f64	d5, d5, d7
 800e4e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4e4:	eebf 3b00 	vmov.f64	d3, #240	; 0xbf800000 -1.0
 800e4e8:	ee35 6b06 	vadd.f64	d6, d5, d6
 800e4ec:	bf48      	it	mi
 800e4ee:	eeb0 4b43 	vmovmi.f64	d4, d3
 800e4f2:	ee37 3b04 	vadd.f64	d3, d7, d4
 800e4f6:	ee34 5b43 	vsub.f64	d5, d4, d3
 800e4fa:	ee35 7b07 	vadd.f64	d7, d5, d7
 800e4fe:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e502:	ee37 7b03 	vadd.f64	d7, d7, d3
 800e506:	ee37 7b44 	vsub.f64	d7, d7, d4
 800e50a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e50e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e512:	d105      	bne.n	800e520 <pow+0x528>
 800e514:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e516:	463a      	mov	r2, r7
 800e518:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800e51c:	ec43 2b17 	vmov	d7, r2, r3
 800e520:	ed8d 0b16 	vstr	d0, [sp, #88]	; 0x58
 800e524:	ed9d 6b16 	vldr	d6, [sp, #88]	; 0x58
 800e528:	ee26 6b00 	vmul.f64	d6, d6, d0
 800e52c:	ed8d 6b18 	vstr	d6, [sp, #96]	; 0x60
 800e530:	ee27 0b00 	vmul.f64	d0, d7, d0
 800e534:	b01b      	add	sp, #108	; 0x6c
 800e536:	ecbd 8b0a 	vpop	{d8-d12}
 800e53a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e53e:	f000 b872 	b.w	800e626 <__math_check_uflow>
 800e542:	ec4b ab10 	vmov	d0, sl, fp
 800e546:	eea7 0b00 	vfma.f64	d0, d7, d0
 800e54a:	e5a3      	b.n	800e094 <pow+0x9c>
 800e54c:	ed9f 0b06 	vldr	d0, [pc, #24]	; 800e568 <pow+0x570>
 800e550:	e5a0      	b.n	800e094 <pow+0x9c>
 800e552:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800e556:	e59d      	b.n	800e094 <pow+0x9c>
 800e558:	00000000 	.word	0x00000000
 800e55c:	7f000000 	.word	0x7f000000
 800e560:	00000000 	.word	0x00000000
 800e564:	00100000 	.word	0x00100000
	...
 800e570:	08012010 	.word	0x08012010
 800e574:	c0f00000 	.word	0xc0f00000
 800e578:	3fe00000 	.word	0x3fe00000

0800e57c <with_errno>:
 800e57c:	b513      	push	{r0, r1, r4, lr}
 800e57e:	4604      	mov	r4, r0
 800e580:	ed8d 0b00 	vstr	d0, [sp]
 800e584:	f000 f86c 	bl	800e660 <__errno>
 800e588:	ed9d 0b00 	vldr	d0, [sp]
 800e58c:	6004      	str	r4, [r0, #0]
 800e58e:	b002      	add	sp, #8
 800e590:	bd10      	pop	{r4, pc}

0800e592 <xflow>:
 800e592:	b082      	sub	sp, #8
 800e594:	b158      	cbz	r0, 800e5ae <xflow+0x1c>
 800e596:	eeb1 7b40 	vneg.f64	d7, d0
 800e59a:	ed8d 7b00 	vstr	d7, [sp]
 800e59e:	ed9d 7b00 	vldr	d7, [sp]
 800e5a2:	2022      	movs	r0, #34	; 0x22
 800e5a4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e5a8:	b002      	add	sp, #8
 800e5aa:	f7ff bfe7 	b.w	800e57c <with_errno>
 800e5ae:	eeb0 7b40 	vmov.f64	d7, d0
 800e5b2:	e7f2      	b.n	800e59a <xflow+0x8>
 800e5b4:	0000      	movs	r0, r0
	...

0800e5b8 <__math_uflow>:
 800e5b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e5c0 <__math_uflow+0x8>
 800e5bc:	f7ff bfe9 	b.w	800e592 <xflow>
 800e5c0:	00000000 	.word	0x00000000
 800e5c4:	10000000 	.word	0x10000000

0800e5c8 <__math_oflow>:
 800e5c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e5d0 <__math_oflow+0x8>
 800e5cc:	f7ff bfe1 	b.w	800e592 <xflow>
 800e5d0:	00000000 	.word	0x00000000
 800e5d4:	70000000 	.word	0x70000000

0800e5d8 <__math_divzero>:
 800e5d8:	b082      	sub	sp, #8
 800e5da:	2800      	cmp	r0, #0
 800e5dc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800e5e0:	eebf 7b00 	vmov.f64	d7, #240	; 0xbf800000 -1.0
 800e5e4:	fe06 7b07 	vseleq.f64	d7, d6, d7
 800e5e8:	ed8d 7b00 	vstr	d7, [sp]
 800e5ec:	ed9d 0b00 	vldr	d0, [sp]
 800e5f0:	ed9f 7b03 	vldr	d7, [pc, #12]	; 800e600 <__math_divzero+0x28>
 800e5f4:	2022      	movs	r0, #34	; 0x22
 800e5f6:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800e5fa:	b002      	add	sp, #8
 800e5fc:	f7ff bfbe 	b.w	800e57c <with_errno>
	...

0800e608 <__math_invalid>:
 800e608:	eeb0 7b40 	vmov.f64	d7, d0
 800e60c:	eeb4 7b47 	vcmp.f64	d7, d7
 800e610:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e614:	ee30 6b40 	vsub.f64	d6, d0, d0
 800e618:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800e61c:	d602      	bvs.n	800e624 <__math_invalid+0x1c>
 800e61e:	2021      	movs	r0, #33	; 0x21
 800e620:	f7ff bfac 	b.w	800e57c <with_errno>
 800e624:	4770      	bx	lr

0800e626 <__math_check_uflow>:
 800e626:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e62a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e62e:	d102      	bne.n	800e636 <__math_check_uflow+0x10>
 800e630:	2022      	movs	r0, #34	; 0x22
 800e632:	f7ff bfa3 	b.w	800e57c <with_errno>
 800e636:	4770      	bx	lr

0800e638 <__math_check_oflow>:
 800e638:	ed9f 6b07 	vldr	d6, [pc, #28]	; 800e658 <__math_check_oflow+0x20>
 800e63c:	eeb0 7bc0 	vabs.f64	d7, d0
 800e640:	eeb4 7b46 	vcmp.f64	d7, d6
 800e644:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e648:	dd02      	ble.n	800e650 <__math_check_oflow+0x18>
 800e64a:	2022      	movs	r0, #34	; 0x22
 800e64c:	f7ff bf96 	b.w	800e57c <with_errno>
 800e650:	4770      	bx	lr
 800e652:	bf00      	nop
 800e654:	f3af 8000 	nop.w
 800e658:	ffffffff 	.word	0xffffffff
 800e65c:	7fefffff 	.word	0x7fefffff

0800e660 <__errno>:
 800e660:	4b01      	ldr	r3, [pc, #4]	; (800e668 <__errno+0x8>)
 800e662:	6818      	ldr	r0, [r3, #0]
 800e664:	4770      	bx	lr
 800e666:	bf00      	nop
 800e668:	24000028 	.word	0x24000028

0800e66c <__libc_init_array>:
 800e66c:	b570      	push	{r4, r5, r6, lr}
 800e66e:	4d0d      	ldr	r5, [pc, #52]	; (800e6a4 <__libc_init_array+0x38>)
 800e670:	4c0d      	ldr	r4, [pc, #52]	; (800e6a8 <__libc_init_array+0x3c>)
 800e672:	1b64      	subs	r4, r4, r5
 800e674:	10a4      	asrs	r4, r4, #2
 800e676:	2600      	movs	r6, #0
 800e678:	42a6      	cmp	r6, r4
 800e67a:	d109      	bne.n	800e690 <__libc_init_array+0x24>
 800e67c:	4d0b      	ldr	r5, [pc, #44]	; (800e6ac <__libc_init_array+0x40>)
 800e67e:	4c0c      	ldr	r4, [pc, #48]	; (800e6b0 <__libc_init_array+0x44>)
 800e680:	f002 fc60 	bl	8010f44 <_init>
 800e684:	1b64      	subs	r4, r4, r5
 800e686:	10a4      	asrs	r4, r4, #2
 800e688:	2600      	movs	r6, #0
 800e68a:	42a6      	cmp	r6, r4
 800e68c:	d105      	bne.n	800e69a <__libc_init_array+0x2e>
 800e68e:	bd70      	pop	{r4, r5, r6, pc}
 800e690:	f855 3b04 	ldr.w	r3, [r5], #4
 800e694:	4798      	blx	r3
 800e696:	3601      	adds	r6, #1
 800e698:	e7ee      	b.n	800e678 <__libc_init_array+0xc>
 800e69a:	f855 3b04 	ldr.w	r3, [r5], #4
 800e69e:	4798      	blx	r3
 800e6a0:	3601      	adds	r6, #1
 800e6a2:	e7f2      	b.n	800e68a <__libc_init_array+0x1e>
 800e6a4:	08012c6c 	.word	0x08012c6c
 800e6a8:	08012c6c 	.word	0x08012c6c
 800e6ac:	08012c6c 	.word	0x08012c6c
 800e6b0:	08012c74 	.word	0x08012c74

0800e6b4 <memcpy>:
 800e6b4:	440a      	add	r2, r1
 800e6b6:	4291      	cmp	r1, r2
 800e6b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800e6bc:	d100      	bne.n	800e6c0 <memcpy+0xc>
 800e6be:	4770      	bx	lr
 800e6c0:	b510      	push	{r4, lr}
 800e6c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e6c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e6ca:	4291      	cmp	r1, r2
 800e6cc:	d1f9      	bne.n	800e6c2 <memcpy+0xe>
 800e6ce:	bd10      	pop	{r4, pc}

0800e6d0 <memset>:
 800e6d0:	4402      	add	r2, r0
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	4293      	cmp	r3, r2
 800e6d6:	d100      	bne.n	800e6da <memset+0xa>
 800e6d8:	4770      	bx	lr
 800e6da:	f803 1b01 	strb.w	r1, [r3], #1
 800e6de:	e7f9      	b.n	800e6d4 <memset+0x4>

0800e6e0 <__cvt>:
 800e6e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6e2:	ed2d 8b02 	vpush	{d8}
 800e6e6:	eeb0 8b40 	vmov.f64	d8, d0
 800e6ea:	b085      	sub	sp, #20
 800e6ec:	4617      	mov	r7, r2
 800e6ee:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e6f0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800e6f2:	ee18 2a90 	vmov	r2, s17
 800e6f6:	f025 0520 	bic.w	r5, r5, #32
 800e6fa:	2a00      	cmp	r2, #0
 800e6fc:	bfb6      	itet	lt
 800e6fe:	222d      	movlt	r2, #45	; 0x2d
 800e700:	2200      	movge	r2, #0
 800e702:	eeb1 8b40 	vneglt.f64	d8, d0
 800e706:	2d46      	cmp	r5, #70	; 0x46
 800e708:	460c      	mov	r4, r1
 800e70a:	701a      	strb	r2, [r3, #0]
 800e70c:	d004      	beq.n	800e718 <__cvt+0x38>
 800e70e:	2d45      	cmp	r5, #69	; 0x45
 800e710:	d100      	bne.n	800e714 <__cvt+0x34>
 800e712:	3401      	adds	r4, #1
 800e714:	2102      	movs	r1, #2
 800e716:	e000      	b.n	800e71a <__cvt+0x3a>
 800e718:	2103      	movs	r1, #3
 800e71a:	ab03      	add	r3, sp, #12
 800e71c:	9301      	str	r3, [sp, #4]
 800e71e:	ab02      	add	r3, sp, #8
 800e720:	9300      	str	r3, [sp, #0]
 800e722:	4622      	mov	r2, r4
 800e724:	4633      	mov	r3, r6
 800e726:	eeb0 0b48 	vmov.f64	d0, d8
 800e72a:	f000 fca9 	bl	800f080 <_dtoa_r>
 800e72e:	2d47      	cmp	r5, #71	; 0x47
 800e730:	d109      	bne.n	800e746 <__cvt+0x66>
 800e732:	07fb      	lsls	r3, r7, #31
 800e734:	d407      	bmi.n	800e746 <__cvt+0x66>
 800e736:	9b03      	ldr	r3, [sp, #12]
 800e738:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e73a:	1a1b      	subs	r3, r3, r0
 800e73c:	6013      	str	r3, [r2, #0]
 800e73e:	b005      	add	sp, #20
 800e740:	ecbd 8b02 	vpop	{d8}
 800e744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e746:	2d46      	cmp	r5, #70	; 0x46
 800e748:	eb00 0204 	add.w	r2, r0, r4
 800e74c:	d10c      	bne.n	800e768 <__cvt+0x88>
 800e74e:	7803      	ldrb	r3, [r0, #0]
 800e750:	2b30      	cmp	r3, #48	; 0x30
 800e752:	d107      	bne.n	800e764 <__cvt+0x84>
 800e754:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e75c:	bf1c      	itt	ne
 800e75e:	f1c4 0401 	rsbne	r4, r4, #1
 800e762:	6034      	strne	r4, [r6, #0]
 800e764:	6833      	ldr	r3, [r6, #0]
 800e766:	441a      	add	r2, r3
 800e768:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e76c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e770:	bf08      	it	eq
 800e772:	9203      	streq	r2, [sp, #12]
 800e774:	2130      	movs	r1, #48	; 0x30
 800e776:	9b03      	ldr	r3, [sp, #12]
 800e778:	4293      	cmp	r3, r2
 800e77a:	d2dc      	bcs.n	800e736 <__cvt+0x56>
 800e77c:	1c5c      	adds	r4, r3, #1
 800e77e:	9403      	str	r4, [sp, #12]
 800e780:	7019      	strb	r1, [r3, #0]
 800e782:	e7f8      	b.n	800e776 <__cvt+0x96>

0800e784 <__exponent>:
 800e784:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e786:	4603      	mov	r3, r0
 800e788:	2900      	cmp	r1, #0
 800e78a:	bfb8      	it	lt
 800e78c:	4249      	neglt	r1, r1
 800e78e:	f803 2b02 	strb.w	r2, [r3], #2
 800e792:	bfb4      	ite	lt
 800e794:	222d      	movlt	r2, #45	; 0x2d
 800e796:	222b      	movge	r2, #43	; 0x2b
 800e798:	2909      	cmp	r1, #9
 800e79a:	7042      	strb	r2, [r0, #1]
 800e79c:	dd2a      	ble.n	800e7f4 <__exponent+0x70>
 800e79e:	f10d 0407 	add.w	r4, sp, #7
 800e7a2:	46a4      	mov	ip, r4
 800e7a4:	270a      	movs	r7, #10
 800e7a6:	46a6      	mov	lr, r4
 800e7a8:	460a      	mov	r2, r1
 800e7aa:	fb91 f6f7 	sdiv	r6, r1, r7
 800e7ae:	fb07 1516 	mls	r5, r7, r6, r1
 800e7b2:	3530      	adds	r5, #48	; 0x30
 800e7b4:	2a63      	cmp	r2, #99	; 0x63
 800e7b6:	f104 34ff 	add.w	r4, r4, #4294967295
 800e7ba:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e7be:	4631      	mov	r1, r6
 800e7c0:	dcf1      	bgt.n	800e7a6 <__exponent+0x22>
 800e7c2:	3130      	adds	r1, #48	; 0x30
 800e7c4:	f1ae 0502 	sub.w	r5, lr, #2
 800e7c8:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e7cc:	1c44      	adds	r4, r0, #1
 800e7ce:	4629      	mov	r1, r5
 800e7d0:	4561      	cmp	r1, ip
 800e7d2:	d30a      	bcc.n	800e7ea <__exponent+0x66>
 800e7d4:	f10d 0209 	add.w	r2, sp, #9
 800e7d8:	eba2 020e 	sub.w	r2, r2, lr
 800e7dc:	4565      	cmp	r5, ip
 800e7de:	bf88      	it	hi
 800e7e0:	2200      	movhi	r2, #0
 800e7e2:	4413      	add	r3, r2
 800e7e4:	1a18      	subs	r0, r3, r0
 800e7e6:	b003      	add	sp, #12
 800e7e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e7ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e7ee:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e7f2:	e7ed      	b.n	800e7d0 <__exponent+0x4c>
 800e7f4:	2330      	movs	r3, #48	; 0x30
 800e7f6:	3130      	adds	r1, #48	; 0x30
 800e7f8:	7083      	strb	r3, [r0, #2]
 800e7fa:	70c1      	strb	r1, [r0, #3]
 800e7fc:	1d03      	adds	r3, r0, #4
 800e7fe:	e7f1      	b.n	800e7e4 <__exponent+0x60>

0800e800 <_printf_float>:
 800e800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e804:	b08b      	sub	sp, #44	; 0x2c
 800e806:	460c      	mov	r4, r1
 800e808:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800e80c:	4616      	mov	r6, r2
 800e80e:	461f      	mov	r7, r3
 800e810:	4605      	mov	r5, r0
 800e812:	f001 f9b7 	bl	800fb84 <_localeconv_r>
 800e816:	f8d0 b000 	ldr.w	fp, [r0]
 800e81a:	4658      	mov	r0, fp
 800e81c:	f7f1 fd60 	bl	80002e0 <strlen>
 800e820:	2300      	movs	r3, #0
 800e822:	9308      	str	r3, [sp, #32]
 800e824:	f8d8 3000 	ldr.w	r3, [r8]
 800e828:	f894 9018 	ldrb.w	r9, [r4, #24]
 800e82c:	6822      	ldr	r2, [r4, #0]
 800e82e:	3307      	adds	r3, #7
 800e830:	f023 0307 	bic.w	r3, r3, #7
 800e834:	f103 0108 	add.w	r1, r3, #8
 800e838:	f8c8 1000 	str.w	r1, [r8]
 800e83c:	4682      	mov	sl, r0
 800e83e:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e842:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800e846:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800eaa8 <_printf_float+0x2a8>
 800e84a:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800e84e:	eeb0 6bc0 	vabs.f64	d6, d0
 800e852:	eeb4 6b47 	vcmp.f64	d6, d7
 800e856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e85a:	dd24      	ble.n	800e8a6 <_printf_float+0xa6>
 800e85c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800e860:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e864:	d502      	bpl.n	800e86c <_printf_float+0x6c>
 800e866:	232d      	movs	r3, #45	; 0x2d
 800e868:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e86c:	4b90      	ldr	r3, [pc, #576]	; (800eab0 <_printf_float+0x2b0>)
 800e86e:	4891      	ldr	r0, [pc, #580]	; (800eab4 <_printf_float+0x2b4>)
 800e870:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800e874:	bf94      	ite	ls
 800e876:	4698      	movls	r8, r3
 800e878:	4680      	movhi	r8, r0
 800e87a:	2303      	movs	r3, #3
 800e87c:	6123      	str	r3, [r4, #16]
 800e87e:	f022 0204 	bic.w	r2, r2, #4
 800e882:	2300      	movs	r3, #0
 800e884:	6022      	str	r2, [r4, #0]
 800e886:	9304      	str	r3, [sp, #16]
 800e888:	9700      	str	r7, [sp, #0]
 800e88a:	4633      	mov	r3, r6
 800e88c:	aa09      	add	r2, sp, #36	; 0x24
 800e88e:	4621      	mov	r1, r4
 800e890:	4628      	mov	r0, r5
 800e892:	f000 f9d3 	bl	800ec3c <_printf_common>
 800e896:	3001      	adds	r0, #1
 800e898:	f040 808a 	bne.w	800e9b0 <_printf_float+0x1b0>
 800e89c:	f04f 30ff 	mov.w	r0, #4294967295
 800e8a0:	b00b      	add	sp, #44	; 0x2c
 800e8a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8a6:	eeb4 0b40 	vcmp.f64	d0, d0
 800e8aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e8ae:	d709      	bvc.n	800e8c4 <_printf_float+0xc4>
 800e8b0:	ee10 3a90 	vmov	r3, s1
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	bfbc      	itt	lt
 800e8b8:	232d      	movlt	r3, #45	; 0x2d
 800e8ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e8be:	487e      	ldr	r0, [pc, #504]	; (800eab8 <_printf_float+0x2b8>)
 800e8c0:	4b7e      	ldr	r3, [pc, #504]	; (800eabc <_printf_float+0x2bc>)
 800e8c2:	e7d5      	b.n	800e870 <_printf_float+0x70>
 800e8c4:	6863      	ldr	r3, [r4, #4]
 800e8c6:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800e8ca:	9104      	str	r1, [sp, #16]
 800e8cc:	1c59      	adds	r1, r3, #1
 800e8ce:	d13c      	bne.n	800e94a <_printf_float+0x14a>
 800e8d0:	2306      	movs	r3, #6
 800e8d2:	6063      	str	r3, [r4, #4]
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	9303      	str	r3, [sp, #12]
 800e8d8:	ab08      	add	r3, sp, #32
 800e8da:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800e8de:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800e8e2:	ab07      	add	r3, sp, #28
 800e8e4:	6861      	ldr	r1, [r4, #4]
 800e8e6:	9300      	str	r3, [sp, #0]
 800e8e8:	6022      	str	r2, [r4, #0]
 800e8ea:	f10d 031b 	add.w	r3, sp, #27
 800e8ee:	4628      	mov	r0, r5
 800e8f0:	f7ff fef6 	bl	800e6e0 <__cvt>
 800e8f4:	9b04      	ldr	r3, [sp, #16]
 800e8f6:	9907      	ldr	r1, [sp, #28]
 800e8f8:	2b47      	cmp	r3, #71	; 0x47
 800e8fa:	4680      	mov	r8, r0
 800e8fc:	d108      	bne.n	800e910 <_printf_float+0x110>
 800e8fe:	1cc8      	adds	r0, r1, #3
 800e900:	db02      	blt.n	800e908 <_printf_float+0x108>
 800e902:	6863      	ldr	r3, [r4, #4]
 800e904:	4299      	cmp	r1, r3
 800e906:	dd41      	ble.n	800e98c <_printf_float+0x18c>
 800e908:	f1a9 0902 	sub.w	r9, r9, #2
 800e90c:	fa5f f989 	uxtb.w	r9, r9
 800e910:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e914:	d820      	bhi.n	800e958 <_printf_float+0x158>
 800e916:	3901      	subs	r1, #1
 800e918:	464a      	mov	r2, r9
 800e91a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e91e:	9107      	str	r1, [sp, #28]
 800e920:	f7ff ff30 	bl	800e784 <__exponent>
 800e924:	9a08      	ldr	r2, [sp, #32]
 800e926:	9004      	str	r0, [sp, #16]
 800e928:	1813      	adds	r3, r2, r0
 800e92a:	2a01      	cmp	r2, #1
 800e92c:	6123      	str	r3, [r4, #16]
 800e92e:	dc02      	bgt.n	800e936 <_printf_float+0x136>
 800e930:	6822      	ldr	r2, [r4, #0]
 800e932:	07d2      	lsls	r2, r2, #31
 800e934:	d501      	bpl.n	800e93a <_printf_float+0x13a>
 800e936:	3301      	adds	r3, #1
 800e938:	6123      	str	r3, [r4, #16]
 800e93a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d0a2      	beq.n	800e888 <_printf_float+0x88>
 800e942:	232d      	movs	r3, #45	; 0x2d
 800e944:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e948:	e79e      	b.n	800e888 <_printf_float+0x88>
 800e94a:	9904      	ldr	r1, [sp, #16]
 800e94c:	2947      	cmp	r1, #71	; 0x47
 800e94e:	d1c1      	bne.n	800e8d4 <_printf_float+0xd4>
 800e950:	2b00      	cmp	r3, #0
 800e952:	d1bf      	bne.n	800e8d4 <_printf_float+0xd4>
 800e954:	2301      	movs	r3, #1
 800e956:	e7bc      	b.n	800e8d2 <_printf_float+0xd2>
 800e958:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800e95c:	d118      	bne.n	800e990 <_printf_float+0x190>
 800e95e:	2900      	cmp	r1, #0
 800e960:	6863      	ldr	r3, [r4, #4]
 800e962:	dd0b      	ble.n	800e97c <_printf_float+0x17c>
 800e964:	6121      	str	r1, [r4, #16]
 800e966:	b913      	cbnz	r3, 800e96e <_printf_float+0x16e>
 800e968:	6822      	ldr	r2, [r4, #0]
 800e96a:	07d0      	lsls	r0, r2, #31
 800e96c:	d502      	bpl.n	800e974 <_printf_float+0x174>
 800e96e:	3301      	adds	r3, #1
 800e970:	440b      	add	r3, r1
 800e972:	6123      	str	r3, [r4, #16]
 800e974:	2300      	movs	r3, #0
 800e976:	65a1      	str	r1, [r4, #88]	; 0x58
 800e978:	9304      	str	r3, [sp, #16]
 800e97a:	e7de      	b.n	800e93a <_printf_float+0x13a>
 800e97c:	b913      	cbnz	r3, 800e984 <_printf_float+0x184>
 800e97e:	6822      	ldr	r2, [r4, #0]
 800e980:	07d2      	lsls	r2, r2, #31
 800e982:	d501      	bpl.n	800e988 <_printf_float+0x188>
 800e984:	3302      	adds	r3, #2
 800e986:	e7f4      	b.n	800e972 <_printf_float+0x172>
 800e988:	2301      	movs	r3, #1
 800e98a:	e7f2      	b.n	800e972 <_printf_float+0x172>
 800e98c:	f04f 0967 	mov.w	r9, #103	; 0x67
 800e990:	9b08      	ldr	r3, [sp, #32]
 800e992:	4299      	cmp	r1, r3
 800e994:	db05      	blt.n	800e9a2 <_printf_float+0x1a2>
 800e996:	6823      	ldr	r3, [r4, #0]
 800e998:	6121      	str	r1, [r4, #16]
 800e99a:	07d8      	lsls	r0, r3, #31
 800e99c:	d5ea      	bpl.n	800e974 <_printf_float+0x174>
 800e99e:	1c4b      	adds	r3, r1, #1
 800e9a0:	e7e7      	b.n	800e972 <_printf_float+0x172>
 800e9a2:	2900      	cmp	r1, #0
 800e9a4:	bfd4      	ite	le
 800e9a6:	f1c1 0202 	rsble	r2, r1, #2
 800e9aa:	2201      	movgt	r2, #1
 800e9ac:	4413      	add	r3, r2
 800e9ae:	e7e0      	b.n	800e972 <_printf_float+0x172>
 800e9b0:	6823      	ldr	r3, [r4, #0]
 800e9b2:	055a      	lsls	r2, r3, #21
 800e9b4:	d407      	bmi.n	800e9c6 <_printf_float+0x1c6>
 800e9b6:	6923      	ldr	r3, [r4, #16]
 800e9b8:	4642      	mov	r2, r8
 800e9ba:	4631      	mov	r1, r6
 800e9bc:	4628      	mov	r0, r5
 800e9be:	47b8      	blx	r7
 800e9c0:	3001      	adds	r0, #1
 800e9c2:	d12a      	bne.n	800ea1a <_printf_float+0x21a>
 800e9c4:	e76a      	b.n	800e89c <_printf_float+0x9c>
 800e9c6:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800e9ca:	f240 80e2 	bls.w	800eb92 <_printf_float+0x392>
 800e9ce:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800e9d2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e9d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e9da:	d133      	bne.n	800ea44 <_printf_float+0x244>
 800e9dc:	4a38      	ldr	r2, [pc, #224]	; (800eac0 <_printf_float+0x2c0>)
 800e9de:	2301      	movs	r3, #1
 800e9e0:	4631      	mov	r1, r6
 800e9e2:	4628      	mov	r0, r5
 800e9e4:	47b8      	blx	r7
 800e9e6:	3001      	adds	r0, #1
 800e9e8:	f43f af58 	beq.w	800e89c <_printf_float+0x9c>
 800e9ec:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	db02      	blt.n	800e9fa <_printf_float+0x1fa>
 800e9f4:	6823      	ldr	r3, [r4, #0]
 800e9f6:	07d8      	lsls	r0, r3, #31
 800e9f8:	d50f      	bpl.n	800ea1a <_printf_float+0x21a>
 800e9fa:	4653      	mov	r3, sl
 800e9fc:	465a      	mov	r2, fp
 800e9fe:	4631      	mov	r1, r6
 800ea00:	4628      	mov	r0, r5
 800ea02:	47b8      	blx	r7
 800ea04:	3001      	adds	r0, #1
 800ea06:	f43f af49 	beq.w	800e89c <_printf_float+0x9c>
 800ea0a:	f04f 0800 	mov.w	r8, #0
 800ea0e:	f104 091a 	add.w	r9, r4, #26
 800ea12:	9b08      	ldr	r3, [sp, #32]
 800ea14:	3b01      	subs	r3, #1
 800ea16:	4543      	cmp	r3, r8
 800ea18:	dc09      	bgt.n	800ea2e <_printf_float+0x22e>
 800ea1a:	6823      	ldr	r3, [r4, #0]
 800ea1c:	079b      	lsls	r3, r3, #30
 800ea1e:	f100 8108 	bmi.w	800ec32 <_printf_float+0x432>
 800ea22:	68e0      	ldr	r0, [r4, #12]
 800ea24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea26:	4298      	cmp	r0, r3
 800ea28:	bfb8      	it	lt
 800ea2a:	4618      	movlt	r0, r3
 800ea2c:	e738      	b.n	800e8a0 <_printf_float+0xa0>
 800ea2e:	2301      	movs	r3, #1
 800ea30:	464a      	mov	r2, r9
 800ea32:	4631      	mov	r1, r6
 800ea34:	4628      	mov	r0, r5
 800ea36:	47b8      	blx	r7
 800ea38:	3001      	adds	r0, #1
 800ea3a:	f43f af2f 	beq.w	800e89c <_printf_float+0x9c>
 800ea3e:	f108 0801 	add.w	r8, r8, #1
 800ea42:	e7e6      	b.n	800ea12 <_printf_float+0x212>
 800ea44:	9b07      	ldr	r3, [sp, #28]
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	dc3c      	bgt.n	800eac4 <_printf_float+0x2c4>
 800ea4a:	4a1d      	ldr	r2, [pc, #116]	; (800eac0 <_printf_float+0x2c0>)
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	4631      	mov	r1, r6
 800ea50:	4628      	mov	r0, r5
 800ea52:	47b8      	blx	r7
 800ea54:	3001      	adds	r0, #1
 800ea56:	f43f af21 	beq.w	800e89c <_printf_float+0x9c>
 800ea5a:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800ea5e:	4313      	orrs	r3, r2
 800ea60:	d102      	bne.n	800ea68 <_printf_float+0x268>
 800ea62:	6823      	ldr	r3, [r4, #0]
 800ea64:	07d9      	lsls	r1, r3, #31
 800ea66:	d5d8      	bpl.n	800ea1a <_printf_float+0x21a>
 800ea68:	4653      	mov	r3, sl
 800ea6a:	465a      	mov	r2, fp
 800ea6c:	4631      	mov	r1, r6
 800ea6e:	4628      	mov	r0, r5
 800ea70:	47b8      	blx	r7
 800ea72:	3001      	adds	r0, #1
 800ea74:	f43f af12 	beq.w	800e89c <_printf_float+0x9c>
 800ea78:	f04f 0900 	mov.w	r9, #0
 800ea7c:	f104 0a1a 	add.w	sl, r4, #26
 800ea80:	9b07      	ldr	r3, [sp, #28]
 800ea82:	425b      	negs	r3, r3
 800ea84:	454b      	cmp	r3, r9
 800ea86:	dc01      	bgt.n	800ea8c <_printf_float+0x28c>
 800ea88:	9b08      	ldr	r3, [sp, #32]
 800ea8a:	e795      	b.n	800e9b8 <_printf_float+0x1b8>
 800ea8c:	2301      	movs	r3, #1
 800ea8e:	4652      	mov	r2, sl
 800ea90:	4631      	mov	r1, r6
 800ea92:	4628      	mov	r0, r5
 800ea94:	47b8      	blx	r7
 800ea96:	3001      	adds	r0, #1
 800ea98:	f43f af00 	beq.w	800e89c <_printf_float+0x9c>
 800ea9c:	f109 0901 	add.w	r9, r9, #1
 800eaa0:	e7ee      	b.n	800ea80 <_printf_float+0x280>
 800eaa2:	bf00      	nop
 800eaa4:	f3af 8000 	nop.w
 800eaa8:	ffffffff 	.word	0xffffffff
 800eaac:	7fefffff 	.word	0x7fefffff
 800eab0:	08012884 	.word	0x08012884
 800eab4:	08012888 	.word	0x08012888
 800eab8:	08012890 	.word	0x08012890
 800eabc:	0801288c 	.word	0x0801288c
 800eac0:	08012894 	.word	0x08012894
 800eac4:	9a08      	ldr	r2, [sp, #32]
 800eac6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eac8:	429a      	cmp	r2, r3
 800eaca:	bfa8      	it	ge
 800eacc:	461a      	movge	r2, r3
 800eace:	2a00      	cmp	r2, #0
 800ead0:	4691      	mov	r9, r2
 800ead2:	dc38      	bgt.n	800eb46 <_printf_float+0x346>
 800ead4:	2300      	movs	r3, #0
 800ead6:	9305      	str	r3, [sp, #20]
 800ead8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eadc:	f104 021a 	add.w	r2, r4, #26
 800eae0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800eae2:	9905      	ldr	r1, [sp, #20]
 800eae4:	9304      	str	r3, [sp, #16]
 800eae6:	eba3 0309 	sub.w	r3, r3, r9
 800eaea:	428b      	cmp	r3, r1
 800eaec:	dc33      	bgt.n	800eb56 <_printf_float+0x356>
 800eaee:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	db3c      	blt.n	800eb70 <_printf_float+0x370>
 800eaf6:	6823      	ldr	r3, [r4, #0]
 800eaf8:	07da      	lsls	r2, r3, #31
 800eafa:	d439      	bmi.n	800eb70 <_printf_float+0x370>
 800eafc:	9a08      	ldr	r2, [sp, #32]
 800eafe:	9b04      	ldr	r3, [sp, #16]
 800eb00:	9907      	ldr	r1, [sp, #28]
 800eb02:	1ad3      	subs	r3, r2, r3
 800eb04:	eba2 0901 	sub.w	r9, r2, r1
 800eb08:	4599      	cmp	r9, r3
 800eb0a:	bfa8      	it	ge
 800eb0c:	4699      	movge	r9, r3
 800eb0e:	f1b9 0f00 	cmp.w	r9, #0
 800eb12:	dc35      	bgt.n	800eb80 <_printf_float+0x380>
 800eb14:	f04f 0800 	mov.w	r8, #0
 800eb18:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800eb1c:	f104 0a1a 	add.w	sl, r4, #26
 800eb20:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800eb24:	1a9b      	subs	r3, r3, r2
 800eb26:	eba3 0309 	sub.w	r3, r3, r9
 800eb2a:	4543      	cmp	r3, r8
 800eb2c:	f77f af75 	ble.w	800ea1a <_printf_float+0x21a>
 800eb30:	2301      	movs	r3, #1
 800eb32:	4652      	mov	r2, sl
 800eb34:	4631      	mov	r1, r6
 800eb36:	4628      	mov	r0, r5
 800eb38:	47b8      	blx	r7
 800eb3a:	3001      	adds	r0, #1
 800eb3c:	f43f aeae 	beq.w	800e89c <_printf_float+0x9c>
 800eb40:	f108 0801 	add.w	r8, r8, #1
 800eb44:	e7ec      	b.n	800eb20 <_printf_float+0x320>
 800eb46:	4613      	mov	r3, r2
 800eb48:	4631      	mov	r1, r6
 800eb4a:	4642      	mov	r2, r8
 800eb4c:	4628      	mov	r0, r5
 800eb4e:	47b8      	blx	r7
 800eb50:	3001      	adds	r0, #1
 800eb52:	d1bf      	bne.n	800ead4 <_printf_float+0x2d4>
 800eb54:	e6a2      	b.n	800e89c <_printf_float+0x9c>
 800eb56:	2301      	movs	r3, #1
 800eb58:	4631      	mov	r1, r6
 800eb5a:	4628      	mov	r0, r5
 800eb5c:	9204      	str	r2, [sp, #16]
 800eb5e:	47b8      	blx	r7
 800eb60:	3001      	adds	r0, #1
 800eb62:	f43f ae9b 	beq.w	800e89c <_printf_float+0x9c>
 800eb66:	9b05      	ldr	r3, [sp, #20]
 800eb68:	9a04      	ldr	r2, [sp, #16]
 800eb6a:	3301      	adds	r3, #1
 800eb6c:	9305      	str	r3, [sp, #20]
 800eb6e:	e7b7      	b.n	800eae0 <_printf_float+0x2e0>
 800eb70:	4653      	mov	r3, sl
 800eb72:	465a      	mov	r2, fp
 800eb74:	4631      	mov	r1, r6
 800eb76:	4628      	mov	r0, r5
 800eb78:	47b8      	blx	r7
 800eb7a:	3001      	adds	r0, #1
 800eb7c:	d1be      	bne.n	800eafc <_printf_float+0x2fc>
 800eb7e:	e68d      	b.n	800e89c <_printf_float+0x9c>
 800eb80:	9a04      	ldr	r2, [sp, #16]
 800eb82:	464b      	mov	r3, r9
 800eb84:	4442      	add	r2, r8
 800eb86:	4631      	mov	r1, r6
 800eb88:	4628      	mov	r0, r5
 800eb8a:	47b8      	blx	r7
 800eb8c:	3001      	adds	r0, #1
 800eb8e:	d1c1      	bne.n	800eb14 <_printf_float+0x314>
 800eb90:	e684      	b.n	800e89c <_printf_float+0x9c>
 800eb92:	9a08      	ldr	r2, [sp, #32]
 800eb94:	2a01      	cmp	r2, #1
 800eb96:	dc01      	bgt.n	800eb9c <_printf_float+0x39c>
 800eb98:	07db      	lsls	r3, r3, #31
 800eb9a:	d537      	bpl.n	800ec0c <_printf_float+0x40c>
 800eb9c:	2301      	movs	r3, #1
 800eb9e:	4642      	mov	r2, r8
 800eba0:	4631      	mov	r1, r6
 800eba2:	4628      	mov	r0, r5
 800eba4:	47b8      	blx	r7
 800eba6:	3001      	adds	r0, #1
 800eba8:	f43f ae78 	beq.w	800e89c <_printf_float+0x9c>
 800ebac:	4653      	mov	r3, sl
 800ebae:	465a      	mov	r2, fp
 800ebb0:	4631      	mov	r1, r6
 800ebb2:	4628      	mov	r0, r5
 800ebb4:	47b8      	blx	r7
 800ebb6:	3001      	adds	r0, #1
 800ebb8:	f43f ae70 	beq.w	800e89c <_printf_float+0x9c>
 800ebbc:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800ebc0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ebc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ebc8:	d01b      	beq.n	800ec02 <_printf_float+0x402>
 800ebca:	9b08      	ldr	r3, [sp, #32]
 800ebcc:	f108 0201 	add.w	r2, r8, #1
 800ebd0:	3b01      	subs	r3, #1
 800ebd2:	4631      	mov	r1, r6
 800ebd4:	4628      	mov	r0, r5
 800ebd6:	47b8      	blx	r7
 800ebd8:	3001      	adds	r0, #1
 800ebda:	d10e      	bne.n	800ebfa <_printf_float+0x3fa>
 800ebdc:	e65e      	b.n	800e89c <_printf_float+0x9c>
 800ebde:	2301      	movs	r3, #1
 800ebe0:	464a      	mov	r2, r9
 800ebe2:	4631      	mov	r1, r6
 800ebe4:	4628      	mov	r0, r5
 800ebe6:	47b8      	blx	r7
 800ebe8:	3001      	adds	r0, #1
 800ebea:	f43f ae57 	beq.w	800e89c <_printf_float+0x9c>
 800ebee:	f108 0801 	add.w	r8, r8, #1
 800ebf2:	9b08      	ldr	r3, [sp, #32]
 800ebf4:	3b01      	subs	r3, #1
 800ebf6:	4543      	cmp	r3, r8
 800ebf8:	dcf1      	bgt.n	800ebde <_printf_float+0x3de>
 800ebfa:	9b04      	ldr	r3, [sp, #16]
 800ebfc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ec00:	e6db      	b.n	800e9ba <_printf_float+0x1ba>
 800ec02:	f04f 0800 	mov.w	r8, #0
 800ec06:	f104 091a 	add.w	r9, r4, #26
 800ec0a:	e7f2      	b.n	800ebf2 <_printf_float+0x3f2>
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	4642      	mov	r2, r8
 800ec10:	e7df      	b.n	800ebd2 <_printf_float+0x3d2>
 800ec12:	2301      	movs	r3, #1
 800ec14:	464a      	mov	r2, r9
 800ec16:	4631      	mov	r1, r6
 800ec18:	4628      	mov	r0, r5
 800ec1a:	47b8      	blx	r7
 800ec1c:	3001      	adds	r0, #1
 800ec1e:	f43f ae3d 	beq.w	800e89c <_printf_float+0x9c>
 800ec22:	f108 0801 	add.w	r8, r8, #1
 800ec26:	68e3      	ldr	r3, [r4, #12]
 800ec28:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ec2a:	1a5b      	subs	r3, r3, r1
 800ec2c:	4543      	cmp	r3, r8
 800ec2e:	dcf0      	bgt.n	800ec12 <_printf_float+0x412>
 800ec30:	e6f7      	b.n	800ea22 <_printf_float+0x222>
 800ec32:	f04f 0800 	mov.w	r8, #0
 800ec36:	f104 0919 	add.w	r9, r4, #25
 800ec3a:	e7f4      	b.n	800ec26 <_printf_float+0x426>

0800ec3c <_printf_common>:
 800ec3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec40:	4616      	mov	r6, r2
 800ec42:	4699      	mov	r9, r3
 800ec44:	688a      	ldr	r2, [r1, #8]
 800ec46:	690b      	ldr	r3, [r1, #16]
 800ec48:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ec4c:	4293      	cmp	r3, r2
 800ec4e:	bfb8      	it	lt
 800ec50:	4613      	movlt	r3, r2
 800ec52:	6033      	str	r3, [r6, #0]
 800ec54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ec58:	4607      	mov	r7, r0
 800ec5a:	460c      	mov	r4, r1
 800ec5c:	b10a      	cbz	r2, 800ec62 <_printf_common+0x26>
 800ec5e:	3301      	adds	r3, #1
 800ec60:	6033      	str	r3, [r6, #0]
 800ec62:	6823      	ldr	r3, [r4, #0]
 800ec64:	0699      	lsls	r1, r3, #26
 800ec66:	bf42      	ittt	mi
 800ec68:	6833      	ldrmi	r3, [r6, #0]
 800ec6a:	3302      	addmi	r3, #2
 800ec6c:	6033      	strmi	r3, [r6, #0]
 800ec6e:	6825      	ldr	r5, [r4, #0]
 800ec70:	f015 0506 	ands.w	r5, r5, #6
 800ec74:	d106      	bne.n	800ec84 <_printf_common+0x48>
 800ec76:	f104 0a19 	add.w	sl, r4, #25
 800ec7a:	68e3      	ldr	r3, [r4, #12]
 800ec7c:	6832      	ldr	r2, [r6, #0]
 800ec7e:	1a9b      	subs	r3, r3, r2
 800ec80:	42ab      	cmp	r3, r5
 800ec82:	dc26      	bgt.n	800ecd2 <_printf_common+0x96>
 800ec84:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ec88:	1e13      	subs	r3, r2, #0
 800ec8a:	6822      	ldr	r2, [r4, #0]
 800ec8c:	bf18      	it	ne
 800ec8e:	2301      	movne	r3, #1
 800ec90:	0692      	lsls	r2, r2, #26
 800ec92:	d42b      	bmi.n	800ecec <_printf_common+0xb0>
 800ec94:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ec98:	4649      	mov	r1, r9
 800ec9a:	4638      	mov	r0, r7
 800ec9c:	47c0      	blx	r8
 800ec9e:	3001      	adds	r0, #1
 800eca0:	d01e      	beq.n	800ece0 <_printf_common+0xa4>
 800eca2:	6823      	ldr	r3, [r4, #0]
 800eca4:	68e5      	ldr	r5, [r4, #12]
 800eca6:	6832      	ldr	r2, [r6, #0]
 800eca8:	f003 0306 	and.w	r3, r3, #6
 800ecac:	2b04      	cmp	r3, #4
 800ecae:	bf08      	it	eq
 800ecb0:	1aad      	subeq	r5, r5, r2
 800ecb2:	68a3      	ldr	r3, [r4, #8]
 800ecb4:	6922      	ldr	r2, [r4, #16]
 800ecb6:	bf0c      	ite	eq
 800ecb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ecbc:	2500      	movne	r5, #0
 800ecbe:	4293      	cmp	r3, r2
 800ecc0:	bfc4      	itt	gt
 800ecc2:	1a9b      	subgt	r3, r3, r2
 800ecc4:	18ed      	addgt	r5, r5, r3
 800ecc6:	2600      	movs	r6, #0
 800ecc8:	341a      	adds	r4, #26
 800ecca:	42b5      	cmp	r5, r6
 800eccc:	d11a      	bne.n	800ed04 <_printf_common+0xc8>
 800ecce:	2000      	movs	r0, #0
 800ecd0:	e008      	b.n	800ece4 <_printf_common+0xa8>
 800ecd2:	2301      	movs	r3, #1
 800ecd4:	4652      	mov	r2, sl
 800ecd6:	4649      	mov	r1, r9
 800ecd8:	4638      	mov	r0, r7
 800ecda:	47c0      	blx	r8
 800ecdc:	3001      	adds	r0, #1
 800ecde:	d103      	bne.n	800ece8 <_printf_common+0xac>
 800ece0:	f04f 30ff 	mov.w	r0, #4294967295
 800ece4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ece8:	3501      	adds	r5, #1
 800ecea:	e7c6      	b.n	800ec7a <_printf_common+0x3e>
 800ecec:	18e1      	adds	r1, r4, r3
 800ecee:	1c5a      	adds	r2, r3, #1
 800ecf0:	2030      	movs	r0, #48	; 0x30
 800ecf2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ecf6:	4422      	add	r2, r4
 800ecf8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ecfc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ed00:	3302      	adds	r3, #2
 800ed02:	e7c7      	b.n	800ec94 <_printf_common+0x58>
 800ed04:	2301      	movs	r3, #1
 800ed06:	4622      	mov	r2, r4
 800ed08:	4649      	mov	r1, r9
 800ed0a:	4638      	mov	r0, r7
 800ed0c:	47c0      	blx	r8
 800ed0e:	3001      	adds	r0, #1
 800ed10:	d0e6      	beq.n	800ece0 <_printf_common+0xa4>
 800ed12:	3601      	adds	r6, #1
 800ed14:	e7d9      	b.n	800ecca <_printf_common+0x8e>
	...

0800ed18 <_printf_i>:
 800ed18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ed1c:	460c      	mov	r4, r1
 800ed1e:	4691      	mov	r9, r2
 800ed20:	7e27      	ldrb	r7, [r4, #24]
 800ed22:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ed24:	2f78      	cmp	r7, #120	; 0x78
 800ed26:	4680      	mov	r8, r0
 800ed28:	469a      	mov	sl, r3
 800ed2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ed2e:	d807      	bhi.n	800ed40 <_printf_i+0x28>
 800ed30:	2f62      	cmp	r7, #98	; 0x62
 800ed32:	d80a      	bhi.n	800ed4a <_printf_i+0x32>
 800ed34:	2f00      	cmp	r7, #0
 800ed36:	f000 80d8 	beq.w	800eeea <_printf_i+0x1d2>
 800ed3a:	2f58      	cmp	r7, #88	; 0x58
 800ed3c:	f000 80a3 	beq.w	800ee86 <_printf_i+0x16e>
 800ed40:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800ed44:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ed48:	e03a      	b.n	800edc0 <_printf_i+0xa8>
 800ed4a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ed4e:	2b15      	cmp	r3, #21
 800ed50:	d8f6      	bhi.n	800ed40 <_printf_i+0x28>
 800ed52:	a001      	add	r0, pc, #4	; (adr r0, 800ed58 <_printf_i+0x40>)
 800ed54:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800ed58:	0800edb1 	.word	0x0800edb1
 800ed5c:	0800edc5 	.word	0x0800edc5
 800ed60:	0800ed41 	.word	0x0800ed41
 800ed64:	0800ed41 	.word	0x0800ed41
 800ed68:	0800ed41 	.word	0x0800ed41
 800ed6c:	0800ed41 	.word	0x0800ed41
 800ed70:	0800edc5 	.word	0x0800edc5
 800ed74:	0800ed41 	.word	0x0800ed41
 800ed78:	0800ed41 	.word	0x0800ed41
 800ed7c:	0800ed41 	.word	0x0800ed41
 800ed80:	0800ed41 	.word	0x0800ed41
 800ed84:	0800eed1 	.word	0x0800eed1
 800ed88:	0800edf5 	.word	0x0800edf5
 800ed8c:	0800eeb3 	.word	0x0800eeb3
 800ed90:	0800ed41 	.word	0x0800ed41
 800ed94:	0800ed41 	.word	0x0800ed41
 800ed98:	0800eef3 	.word	0x0800eef3
 800ed9c:	0800ed41 	.word	0x0800ed41
 800eda0:	0800edf5 	.word	0x0800edf5
 800eda4:	0800ed41 	.word	0x0800ed41
 800eda8:	0800ed41 	.word	0x0800ed41
 800edac:	0800eebb 	.word	0x0800eebb
 800edb0:	680b      	ldr	r3, [r1, #0]
 800edb2:	1d1a      	adds	r2, r3, #4
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	600a      	str	r2, [r1, #0]
 800edb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800edbc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800edc0:	2301      	movs	r3, #1
 800edc2:	e0a3      	b.n	800ef0c <_printf_i+0x1f4>
 800edc4:	6825      	ldr	r5, [r4, #0]
 800edc6:	6808      	ldr	r0, [r1, #0]
 800edc8:	062e      	lsls	r6, r5, #24
 800edca:	f100 0304 	add.w	r3, r0, #4
 800edce:	d50a      	bpl.n	800ede6 <_printf_i+0xce>
 800edd0:	6805      	ldr	r5, [r0, #0]
 800edd2:	600b      	str	r3, [r1, #0]
 800edd4:	2d00      	cmp	r5, #0
 800edd6:	da03      	bge.n	800ede0 <_printf_i+0xc8>
 800edd8:	232d      	movs	r3, #45	; 0x2d
 800edda:	426d      	negs	r5, r5
 800eddc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ede0:	485e      	ldr	r0, [pc, #376]	; (800ef5c <_printf_i+0x244>)
 800ede2:	230a      	movs	r3, #10
 800ede4:	e019      	b.n	800ee1a <_printf_i+0x102>
 800ede6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800edea:	6805      	ldr	r5, [r0, #0]
 800edec:	600b      	str	r3, [r1, #0]
 800edee:	bf18      	it	ne
 800edf0:	b22d      	sxthne	r5, r5
 800edf2:	e7ef      	b.n	800edd4 <_printf_i+0xbc>
 800edf4:	680b      	ldr	r3, [r1, #0]
 800edf6:	6825      	ldr	r5, [r4, #0]
 800edf8:	1d18      	adds	r0, r3, #4
 800edfa:	6008      	str	r0, [r1, #0]
 800edfc:	0628      	lsls	r0, r5, #24
 800edfe:	d501      	bpl.n	800ee04 <_printf_i+0xec>
 800ee00:	681d      	ldr	r5, [r3, #0]
 800ee02:	e002      	b.n	800ee0a <_printf_i+0xf2>
 800ee04:	0669      	lsls	r1, r5, #25
 800ee06:	d5fb      	bpl.n	800ee00 <_printf_i+0xe8>
 800ee08:	881d      	ldrh	r5, [r3, #0]
 800ee0a:	4854      	ldr	r0, [pc, #336]	; (800ef5c <_printf_i+0x244>)
 800ee0c:	2f6f      	cmp	r7, #111	; 0x6f
 800ee0e:	bf0c      	ite	eq
 800ee10:	2308      	moveq	r3, #8
 800ee12:	230a      	movne	r3, #10
 800ee14:	2100      	movs	r1, #0
 800ee16:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ee1a:	6866      	ldr	r6, [r4, #4]
 800ee1c:	60a6      	str	r6, [r4, #8]
 800ee1e:	2e00      	cmp	r6, #0
 800ee20:	bfa2      	ittt	ge
 800ee22:	6821      	ldrge	r1, [r4, #0]
 800ee24:	f021 0104 	bicge.w	r1, r1, #4
 800ee28:	6021      	strge	r1, [r4, #0]
 800ee2a:	b90d      	cbnz	r5, 800ee30 <_printf_i+0x118>
 800ee2c:	2e00      	cmp	r6, #0
 800ee2e:	d04d      	beq.n	800eecc <_printf_i+0x1b4>
 800ee30:	4616      	mov	r6, r2
 800ee32:	fbb5 f1f3 	udiv	r1, r5, r3
 800ee36:	fb03 5711 	mls	r7, r3, r1, r5
 800ee3a:	5dc7      	ldrb	r7, [r0, r7]
 800ee3c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ee40:	462f      	mov	r7, r5
 800ee42:	42bb      	cmp	r3, r7
 800ee44:	460d      	mov	r5, r1
 800ee46:	d9f4      	bls.n	800ee32 <_printf_i+0x11a>
 800ee48:	2b08      	cmp	r3, #8
 800ee4a:	d10b      	bne.n	800ee64 <_printf_i+0x14c>
 800ee4c:	6823      	ldr	r3, [r4, #0]
 800ee4e:	07df      	lsls	r7, r3, #31
 800ee50:	d508      	bpl.n	800ee64 <_printf_i+0x14c>
 800ee52:	6923      	ldr	r3, [r4, #16]
 800ee54:	6861      	ldr	r1, [r4, #4]
 800ee56:	4299      	cmp	r1, r3
 800ee58:	bfde      	ittt	le
 800ee5a:	2330      	movle	r3, #48	; 0x30
 800ee5c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ee60:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ee64:	1b92      	subs	r2, r2, r6
 800ee66:	6122      	str	r2, [r4, #16]
 800ee68:	f8cd a000 	str.w	sl, [sp]
 800ee6c:	464b      	mov	r3, r9
 800ee6e:	aa03      	add	r2, sp, #12
 800ee70:	4621      	mov	r1, r4
 800ee72:	4640      	mov	r0, r8
 800ee74:	f7ff fee2 	bl	800ec3c <_printf_common>
 800ee78:	3001      	adds	r0, #1
 800ee7a:	d14c      	bne.n	800ef16 <_printf_i+0x1fe>
 800ee7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee80:	b004      	add	sp, #16
 800ee82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee86:	4835      	ldr	r0, [pc, #212]	; (800ef5c <_printf_i+0x244>)
 800ee88:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ee8c:	6823      	ldr	r3, [r4, #0]
 800ee8e:	680e      	ldr	r6, [r1, #0]
 800ee90:	061f      	lsls	r7, r3, #24
 800ee92:	f856 5b04 	ldr.w	r5, [r6], #4
 800ee96:	600e      	str	r6, [r1, #0]
 800ee98:	d514      	bpl.n	800eec4 <_printf_i+0x1ac>
 800ee9a:	07d9      	lsls	r1, r3, #31
 800ee9c:	bf44      	itt	mi
 800ee9e:	f043 0320 	orrmi.w	r3, r3, #32
 800eea2:	6023      	strmi	r3, [r4, #0]
 800eea4:	b91d      	cbnz	r5, 800eeae <_printf_i+0x196>
 800eea6:	6823      	ldr	r3, [r4, #0]
 800eea8:	f023 0320 	bic.w	r3, r3, #32
 800eeac:	6023      	str	r3, [r4, #0]
 800eeae:	2310      	movs	r3, #16
 800eeb0:	e7b0      	b.n	800ee14 <_printf_i+0xfc>
 800eeb2:	6823      	ldr	r3, [r4, #0]
 800eeb4:	f043 0320 	orr.w	r3, r3, #32
 800eeb8:	6023      	str	r3, [r4, #0]
 800eeba:	2378      	movs	r3, #120	; 0x78
 800eebc:	4828      	ldr	r0, [pc, #160]	; (800ef60 <_printf_i+0x248>)
 800eebe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eec2:	e7e3      	b.n	800ee8c <_printf_i+0x174>
 800eec4:	065e      	lsls	r6, r3, #25
 800eec6:	bf48      	it	mi
 800eec8:	b2ad      	uxthmi	r5, r5
 800eeca:	e7e6      	b.n	800ee9a <_printf_i+0x182>
 800eecc:	4616      	mov	r6, r2
 800eece:	e7bb      	b.n	800ee48 <_printf_i+0x130>
 800eed0:	680b      	ldr	r3, [r1, #0]
 800eed2:	6826      	ldr	r6, [r4, #0]
 800eed4:	6960      	ldr	r0, [r4, #20]
 800eed6:	1d1d      	adds	r5, r3, #4
 800eed8:	600d      	str	r5, [r1, #0]
 800eeda:	0635      	lsls	r5, r6, #24
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	d501      	bpl.n	800eee4 <_printf_i+0x1cc>
 800eee0:	6018      	str	r0, [r3, #0]
 800eee2:	e002      	b.n	800eeea <_printf_i+0x1d2>
 800eee4:	0671      	lsls	r1, r6, #25
 800eee6:	d5fb      	bpl.n	800eee0 <_printf_i+0x1c8>
 800eee8:	8018      	strh	r0, [r3, #0]
 800eeea:	2300      	movs	r3, #0
 800eeec:	6123      	str	r3, [r4, #16]
 800eeee:	4616      	mov	r6, r2
 800eef0:	e7ba      	b.n	800ee68 <_printf_i+0x150>
 800eef2:	680b      	ldr	r3, [r1, #0]
 800eef4:	1d1a      	adds	r2, r3, #4
 800eef6:	600a      	str	r2, [r1, #0]
 800eef8:	681e      	ldr	r6, [r3, #0]
 800eefa:	6862      	ldr	r2, [r4, #4]
 800eefc:	2100      	movs	r1, #0
 800eefe:	4630      	mov	r0, r6
 800ef00:	f7f1 f9f6 	bl	80002f0 <memchr>
 800ef04:	b108      	cbz	r0, 800ef0a <_printf_i+0x1f2>
 800ef06:	1b80      	subs	r0, r0, r6
 800ef08:	6060      	str	r0, [r4, #4]
 800ef0a:	6863      	ldr	r3, [r4, #4]
 800ef0c:	6123      	str	r3, [r4, #16]
 800ef0e:	2300      	movs	r3, #0
 800ef10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef14:	e7a8      	b.n	800ee68 <_printf_i+0x150>
 800ef16:	6923      	ldr	r3, [r4, #16]
 800ef18:	4632      	mov	r2, r6
 800ef1a:	4649      	mov	r1, r9
 800ef1c:	4640      	mov	r0, r8
 800ef1e:	47d0      	blx	sl
 800ef20:	3001      	adds	r0, #1
 800ef22:	d0ab      	beq.n	800ee7c <_printf_i+0x164>
 800ef24:	6823      	ldr	r3, [r4, #0]
 800ef26:	079b      	lsls	r3, r3, #30
 800ef28:	d413      	bmi.n	800ef52 <_printf_i+0x23a>
 800ef2a:	68e0      	ldr	r0, [r4, #12]
 800ef2c:	9b03      	ldr	r3, [sp, #12]
 800ef2e:	4298      	cmp	r0, r3
 800ef30:	bfb8      	it	lt
 800ef32:	4618      	movlt	r0, r3
 800ef34:	e7a4      	b.n	800ee80 <_printf_i+0x168>
 800ef36:	2301      	movs	r3, #1
 800ef38:	4632      	mov	r2, r6
 800ef3a:	4649      	mov	r1, r9
 800ef3c:	4640      	mov	r0, r8
 800ef3e:	47d0      	blx	sl
 800ef40:	3001      	adds	r0, #1
 800ef42:	d09b      	beq.n	800ee7c <_printf_i+0x164>
 800ef44:	3501      	adds	r5, #1
 800ef46:	68e3      	ldr	r3, [r4, #12]
 800ef48:	9903      	ldr	r1, [sp, #12]
 800ef4a:	1a5b      	subs	r3, r3, r1
 800ef4c:	42ab      	cmp	r3, r5
 800ef4e:	dcf2      	bgt.n	800ef36 <_printf_i+0x21e>
 800ef50:	e7eb      	b.n	800ef2a <_printf_i+0x212>
 800ef52:	2500      	movs	r5, #0
 800ef54:	f104 0619 	add.w	r6, r4, #25
 800ef58:	e7f5      	b.n	800ef46 <_printf_i+0x22e>
 800ef5a:	bf00      	nop
 800ef5c:	08012896 	.word	0x08012896
 800ef60:	080128a7 	.word	0x080128a7

0800ef64 <quorem>:
 800ef64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ef68:	6903      	ldr	r3, [r0, #16]
 800ef6a:	690c      	ldr	r4, [r1, #16]
 800ef6c:	42a3      	cmp	r3, r4
 800ef6e:	4607      	mov	r7, r0
 800ef70:	f2c0 8081 	blt.w	800f076 <quorem+0x112>
 800ef74:	3c01      	subs	r4, #1
 800ef76:	f101 0814 	add.w	r8, r1, #20
 800ef7a:	f100 0514 	add.w	r5, r0, #20
 800ef7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ef82:	9301      	str	r3, [sp, #4]
 800ef84:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ef88:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ef8c:	3301      	adds	r3, #1
 800ef8e:	429a      	cmp	r2, r3
 800ef90:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ef94:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ef98:	fbb2 f6f3 	udiv	r6, r2, r3
 800ef9c:	d331      	bcc.n	800f002 <quorem+0x9e>
 800ef9e:	f04f 0e00 	mov.w	lr, #0
 800efa2:	4640      	mov	r0, r8
 800efa4:	46ac      	mov	ip, r5
 800efa6:	46f2      	mov	sl, lr
 800efa8:	f850 2b04 	ldr.w	r2, [r0], #4
 800efac:	b293      	uxth	r3, r2
 800efae:	fb06 e303 	mla	r3, r6, r3, lr
 800efb2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800efb6:	b29b      	uxth	r3, r3
 800efb8:	ebaa 0303 	sub.w	r3, sl, r3
 800efbc:	0c12      	lsrs	r2, r2, #16
 800efbe:	f8dc a000 	ldr.w	sl, [ip]
 800efc2:	fb06 e202 	mla	r2, r6, r2, lr
 800efc6:	fa13 f38a 	uxtah	r3, r3, sl
 800efca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800efce:	fa1f fa82 	uxth.w	sl, r2
 800efd2:	f8dc 2000 	ldr.w	r2, [ip]
 800efd6:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800efda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800efde:	b29b      	uxth	r3, r3
 800efe0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800efe4:	4581      	cmp	r9, r0
 800efe6:	f84c 3b04 	str.w	r3, [ip], #4
 800efea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800efee:	d2db      	bcs.n	800efa8 <quorem+0x44>
 800eff0:	f855 300b 	ldr.w	r3, [r5, fp]
 800eff4:	b92b      	cbnz	r3, 800f002 <quorem+0x9e>
 800eff6:	9b01      	ldr	r3, [sp, #4]
 800eff8:	3b04      	subs	r3, #4
 800effa:	429d      	cmp	r5, r3
 800effc:	461a      	mov	r2, r3
 800effe:	d32e      	bcc.n	800f05e <quorem+0xfa>
 800f000:	613c      	str	r4, [r7, #16]
 800f002:	4638      	mov	r0, r7
 800f004:	f001 f848 	bl	8010098 <__mcmp>
 800f008:	2800      	cmp	r0, #0
 800f00a:	db24      	blt.n	800f056 <quorem+0xf2>
 800f00c:	3601      	adds	r6, #1
 800f00e:	4628      	mov	r0, r5
 800f010:	f04f 0c00 	mov.w	ip, #0
 800f014:	f858 2b04 	ldr.w	r2, [r8], #4
 800f018:	f8d0 e000 	ldr.w	lr, [r0]
 800f01c:	b293      	uxth	r3, r2
 800f01e:	ebac 0303 	sub.w	r3, ip, r3
 800f022:	0c12      	lsrs	r2, r2, #16
 800f024:	fa13 f38e 	uxtah	r3, r3, lr
 800f028:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f02c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f030:	b29b      	uxth	r3, r3
 800f032:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f036:	45c1      	cmp	r9, r8
 800f038:	f840 3b04 	str.w	r3, [r0], #4
 800f03c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f040:	d2e8      	bcs.n	800f014 <quorem+0xb0>
 800f042:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f046:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f04a:	b922      	cbnz	r2, 800f056 <quorem+0xf2>
 800f04c:	3b04      	subs	r3, #4
 800f04e:	429d      	cmp	r5, r3
 800f050:	461a      	mov	r2, r3
 800f052:	d30a      	bcc.n	800f06a <quorem+0x106>
 800f054:	613c      	str	r4, [r7, #16]
 800f056:	4630      	mov	r0, r6
 800f058:	b003      	add	sp, #12
 800f05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f05e:	6812      	ldr	r2, [r2, #0]
 800f060:	3b04      	subs	r3, #4
 800f062:	2a00      	cmp	r2, #0
 800f064:	d1cc      	bne.n	800f000 <quorem+0x9c>
 800f066:	3c01      	subs	r4, #1
 800f068:	e7c7      	b.n	800effa <quorem+0x96>
 800f06a:	6812      	ldr	r2, [r2, #0]
 800f06c:	3b04      	subs	r3, #4
 800f06e:	2a00      	cmp	r2, #0
 800f070:	d1f0      	bne.n	800f054 <quorem+0xf0>
 800f072:	3c01      	subs	r4, #1
 800f074:	e7eb      	b.n	800f04e <quorem+0xea>
 800f076:	2000      	movs	r0, #0
 800f078:	e7ee      	b.n	800f058 <quorem+0xf4>
 800f07a:	0000      	movs	r0, r0
 800f07c:	0000      	movs	r0, r0
	...

0800f080 <_dtoa_r>:
 800f080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f084:	ec59 8b10 	vmov	r8, r9, d0
 800f088:	b095      	sub	sp, #84	; 0x54
 800f08a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f08c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800f08e:	9107      	str	r1, [sp, #28]
 800f090:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800f094:	4606      	mov	r6, r0
 800f096:	9209      	str	r2, [sp, #36]	; 0x24
 800f098:	9310      	str	r3, [sp, #64]	; 0x40
 800f09a:	b975      	cbnz	r5, 800f0ba <_dtoa_r+0x3a>
 800f09c:	2010      	movs	r0, #16
 800f09e:	f000 fd75 	bl	800fb8c <malloc>
 800f0a2:	4602      	mov	r2, r0
 800f0a4:	6270      	str	r0, [r6, #36]	; 0x24
 800f0a6:	b920      	cbnz	r0, 800f0b2 <_dtoa_r+0x32>
 800f0a8:	4bab      	ldr	r3, [pc, #684]	; (800f358 <_dtoa_r+0x2d8>)
 800f0aa:	21ea      	movs	r1, #234	; 0xea
 800f0ac:	48ab      	ldr	r0, [pc, #684]	; (800f35c <_dtoa_r+0x2dc>)
 800f0ae:	f001 f9bd 	bl	801042c <__assert_func>
 800f0b2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f0b6:	6005      	str	r5, [r0, #0]
 800f0b8:	60c5      	str	r5, [r0, #12]
 800f0ba:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f0bc:	6819      	ldr	r1, [r3, #0]
 800f0be:	b151      	cbz	r1, 800f0d6 <_dtoa_r+0x56>
 800f0c0:	685a      	ldr	r2, [r3, #4]
 800f0c2:	604a      	str	r2, [r1, #4]
 800f0c4:	2301      	movs	r3, #1
 800f0c6:	4093      	lsls	r3, r2
 800f0c8:	608b      	str	r3, [r1, #8]
 800f0ca:	4630      	mov	r0, r6
 800f0cc:	f000 fda6 	bl	800fc1c <_Bfree>
 800f0d0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	601a      	str	r2, [r3, #0]
 800f0d6:	f1b9 0300 	subs.w	r3, r9, #0
 800f0da:	bfbb      	ittet	lt
 800f0dc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f0e0:	9303      	strlt	r3, [sp, #12]
 800f0e2:	2300      	movge	r3, #0
 800f0e4:	2201      	movlt	r2, #1
 800f0e6:	bfac      	ite	ge
 800f0e8:	6023      	strge	r3, [r4, #0]
 800f0ea:	6022      	strlt	r2, [r4, #0]
 800f0ec:	4b9c      	ldr	r3, [pc, #624]	; (800f360 <_dtoa_r+0x2e0>)
 800f0ee:	9c03      	ldr	r4, [sp, #12]
 800f0f0:	43a3      	bics	r3, r4
 800f0f2:	d11a      	bne.n	800f12a <_dtoa_r+0xaa>
 800f0f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f0f6:	f242 730f 	movw	r3, #9999	; 0x270f
 800f0fa:	6013      	str	r3, [r2, #0]
 800f0fc:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800f100:	ea53 0308 	orrs.w	r3, r3, r8
 800f104:	f000 8512 	beq.w	800fb2c <_dtoa_r+0xaac>
 800f108:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f10a:	b953      	cbnz	r3, 800f122 <_dtoa_r+0xa2>
 800f10c:	4b95      	ldr	r3, [pc, #596]	; (800f364 <_dtoa_r+0x2e4>)
 800f10e:	e01f      	b.n	800f150 <_dtoa_r+0xd0>
 800f110:	4b95      	ldr	r3, [pc, #596]	; (800f368 <_dtoa_r+0x2e8>)
 800f112:	9300      	str	r3, [sp, #0]
 800f114:	3308      	adds	r3, #8
 800f116:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800f118:	6013      	str	r3, [r2, #0]
 800f11a:	9800      	ldr	r0, [sp, #0]
 800f11c:	b015      	add	sp, #84	; 0x54
 800f11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f122:	4b90      	ldr	r3, [pc, #576]	; (800f364 <_dtoa_r+0x2e4>)
 800f124:	9300      	str	r3, [sp, #0]
 800f126:	3303      	adds	r3, #3
 800f128:	e7f5      	b.n	800f116 <_dtoa_r+0x96>
 800f12a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f12e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f136:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800f13a:	d10b      	bne.n	800f154 <_dtoa_r+0xd4>
 800f13c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f13e:	2301      	movs	r3, #1
 800f140:	6013      	str	r3, [r2, #0]
 800f142:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f144:	2b00      	cmp	r3, #0
 800f146:	f000 84ee 	beq.w	800fb26 <_dtoa_r+0xaa6>
 800f14a:	4888      	ldr	r0, [pc, #544]	; (800f36c <_dtoa_r+0x2ec>)
 800f14c:	6018      	str	r0, [r3, #0]
 800f14e:	1e43      	subs	r3, r0, #1
 800f150:	9300      	str	r3, [sp, #0]
 800f152:	e7e2      	b.n	800f11a <_dtoa_r+0x9a>
 800f154:	a913      	add	r1, sp, #76	; 0x4c
 800f156:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800f15a:	aa12      	add	r2, sp, #72	; 0x48
 800f15c:	4630      	mov	r0, r6
 800f15e:	f001 f83f 	bl	80101e0 <__d2b>
 800f162:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800f166:	4605      	mov	r5, r0
 800f168:	9812      	ldr	r0, [sp, #72]	; 0x48
 800f16a:	2900      	cmp	r1, #0
 800f16c:	d047      	beq.n	800f1fe <_dtoa_r+0x17e>
 800f16e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f170:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800f174:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800f178:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800f17c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f180:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f184:	2400      	movs	r4, #0
 800f186:	ec43 2b16 	vmov	d6, r2, r3
 800f18a:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800f18e:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800f340 <_dtoa_r+0x2c0>
 800f192:	ee36 7b47 	vsub.f64	d7, d6, d7
 800f196:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800f348 <_dtoa_r+0x2c8>
 800f19a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800f19e:	eeb0 7b46 	vmov.f64	d7, d6
 800f1a2:	ee06 1a90 	vmov	s13, r1
 800f1a6:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800f1aa:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800f350 <_dtoa_r+0x2d0>
 800f1ae:	eea5 7b06 	vfma.f64	d7, d5, d6
 800f1b2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800f1b6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800f1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1be:	ee16 ba90 	vmov	fp, s13
 800f1c2:	9411      	str	r4, [sp, #68]	; 0x44
 800f1c4:	d508      	bpl.n	800f1d8 <_dtoa_r+0x158>
 800f1c6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800f1ca:	eeb4 6b47 	vcmp.f64	d6, d7
 800f1ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1d2:	bf18      	it	ne
 800f1d4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800f1d8:	f1bb 0f16 	cmp.w	fp, #22
 800f1dc:	d832      	bhi.n	800f244 <_dtoa_r+0x1c4>
 800f1de:	4b64      	ldr	r3, [pc, #400]	; (800f370 <_dtoa_r+0x2f0>)
 800f1e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f1e4:	ed93 7b00 	vldr	d7, [r3]
 800f1e8:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800f1ec:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f1f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1f4:	d501      	bpl.n	800f1fa <_dtoa_r+0x17a>
 800f1f6:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	e023      	b.n	800f246 <_dtoa_r+0x1c6>
 800f1fe:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800f200:	4401      	add	r1, r0
 800f202:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800f206:	2b20      	cmp	r3, #32
 800f208:	bfc3      	ittte	gt
 800f20a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f20e:	fa04 f303 	lslgt.w	r3, r4, r3
 800f212:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800f216:	f1c3 0320 	rsble	r3, r3, #32
 800f21a:	bfc6      	itte	gt
 800f21c:	fa28 f804 	lsrgt.w	r8, r8, r4
 800f220:	ea43 0308 	orrgt.w	r3, r3, r8
 800f224:	fa08 f303 	lslle.w	r3, r8, r3
 800f228:	ee07 3a90 	vmov	s15, r3
 800f22c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800f230:	3901      	subs	r1, #1
 800f232:	ed8d 7b00 	vstr	d7, [sp]
 800f236:	9c01      	ldr	r4, [sp, #4]
 800f238:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f23c:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800f240:	2401      	movs	r4, #1
 800f242:	e7a0      	b.n	800f186 <_dtoa_r+0x106>
 800f244:	2301      	movs	r3, #1
 800f246:	930f      	str	r3, [sp, #60]	; 0x3c
 800f248:	1a43      	subs	r3, r0, r1
 800f24a:	1e5a      	subs	r2, r3, #1
 800f24c:	bf45      	ittet	mi
 800f24e:	f1c3 0301 	rsbmi	r3, r3, #1
 800f252:	9305      	strmi	r3, [sp, #20]
 800f254:	2300      	movpl	r3, #0
 800f256:	2300      	movmi	r3, #0
 800f258:	9206      	str	r2, [sp, #24]
 800f25a:	bf54      	ite	pl
 800f25c:	9305      	strpl	r3, [sp, #20]
 800f25e:	9306      	strmi	r3, [sp, #24]
 800f260:	f1bb 0f00 	cmp.w	fp, #0
 800f264:	db18      	blt.n	800f298 <_dtoa_r+0x218>
 800f266:	9b06      	ldr	r3, [sp, #24]
 800f268:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800f26c:	445b      	add	r3, fp
 800f26e:	9306      	str	r3, [sp, #24]
 800f270:	2300      	movs	r3, #0
 800f272:	9a07      	ldr	r2, [sp, #28]
 800f274:	2a09      	cmp	r2, #9
 800f276:	d849      	bhi.n	800f30c <_dtoa_r+0x28c>
 800f278:	2a05      	cmp	r2, #5
 800f27a:	bfc4      	itt	gt
 800f27c:	3a04      	subgt	r2, #4
 800f27e:	9207      	strgt	r2, [sp, #28]
 800f280:	9a07      	ldr	r2, [sp, #28]
 800f282:	f1a2 0202 	sub.w	r2, r2, #2
 800f286:	bfcc      	ite	gt
 800f288:	2400      	movgt	r4, #0
 800f28a:	2401      	movle	r4, #1
 800f28c:	2a03      	cmp	r2, #3
 800f28e:	d848      	bhi.n	800f322 <_dtoa_r+0x2a2>
 800f290:	e8df f002 	tbb	[pc, r2]
 800f294:	3a2c2e0b 	.word	0x3a2c2e0b
 800f298:	9b05      	ldr	r3, [sp, #20]
 800f29a:	2200      	movs	r2, #0
 800f29c:	eba3 030b 	sub.w	r3, r3, fp
 800f2a0:	9305      	str	r3, [sp, #20]
 800f2a2:	920e      	str	r2, [sp, #56]	; 0x38
 800f2a4:	f1cb 0300 	rsb	r3, fp, #0
 800f2a8:	e7e3      	b.n	800f272 <_dtoa_r+0x1f2>
 800f2aa:	2200      	movs	r2, #0
 800f2ac:	9208      	str	r2, [sp, #32]
 800f2ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2b0:	2a00      	cmp	r2, #0
 800f2b2:	dc39      	bgt.n	800f328 <_dtoa_r+0x2a8>
 800f2b4:	f04f 0a01 	mov.w	sl, #1
 800f2b8:	46d1      	mov	r9, sl
 800f2ba:	4652      	mov	r2, sl
 800f2bc:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800f2c0:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800f2c2:	2100      	movs	r1, #0
 800f2c4:	6079      	str	r1, [r7, #4]
 800f2c6:	2004      	movs	r0, #4
 800f2c8:	f100 0c14 	add.w	ip, r0, #20
 800f2cc:	4594      	cmp	ip, r2
 800f2ce:	6879      	ldr	r1, [r7, #4]
 800f2d0:	d92f      	bls.n	800f332 <_dtoa_r+0x2b2>
 800f2d2:	4630      	mov	r0, r6
 800f2d4:	930c      	str	r3, [sp, #48]	; 0x30
 800f2d6:	f000 fc61 	bl	800fb9c <_Balloc>
 800f2da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f2dc:	9000      	str	r0, [sp, #0]
 800f2de:	4602      	mov	r2, r0
 800f2e0:	2800      	cmp	r0, #0
 800f2e2:	d149      	bne.n	800f378 <_dtoa_r+0x2f8>
 800f2e4:	4b23      	ldr	r3, [pc, #140]	; (800f374 <_dtoa_r+0x2f4>)
 800f2e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800f2ea:	e6df      	b.n	800f0ac <_dtoa_r+0x2c>
 800f2ec:	2201      	movs	r2, #1
 800f2ee:	e7dd      	b.n	800f2ac <_dtoa_r+0x22c>
 800f2f0:	2200      	movs	r2, #0
 800f2f2:	9208      	str	r2, [sp, #32]
 800f2f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f2f6:	eb0b 0a02 	add.w	sl, fp, r2
 800f2fa:	f10a 0901 	add.w	r9, sl, #1
 800f2fe:	464a      	mov	r2, r9
 800f300:	2a01      	cmp	r2, #1
 800f302:	bfb8      	it	lt
 800f304:	2201      	movlt	r2, #1
 800f306:	e7db      	b.n	800f2c0 <_dtoa_r+0x240>
 800f308:	2201      	movs	r2, #1
 800f30a:	e7f2      	b.n	800f2f2 <_dtoa_r+0x272>
 800f30c:	2401      	movs	r4, #1
 800f30e:	2200      	movs	r2, #0
 800f310:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800f314:	f04f 3aff 	mov.w	sl, #4294967295
 800f318:	2100      	movs	r1, #0
 800f31a:	46d1      	mov	r9, sl
 800f31c:	2212      	movs	r2, #18
 800f31e:	9109      	str	r1, [sp, #36]	; 0x24
 800f320:	e7ce      	b.n	800f2c0 <_dtoa_r+0x240>
 800f322:	2201      	movs	r2, #1
 800f324:	9208      	str	r2, [sp, #32]
 800f326:	e7f5      	b.n	800f314 <_dtoa_r+0x294>
 800f328:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800f32c:	46d1      	mov	r9, sl
 800f32e:	4652      	mov	r2, sl
 800f330:	e7c6      	b.n	800f2c0 <_dtoa_r+0x240>
 800f332:	3101      	adds	r1, #1
 800f334:	6079      	str	r1, [r7, #4]
 800f336:	0040      	lsls	r0, r0, #1
 800f338:	e7c6      	b.n	800f2c8 <_dtoa_r+0x248>
 800f33a:	bf00      	nop
 800f33c:	f3af 8000 	nop.w
 800f340:	636f4361 	.word	0x636f4361
 800f344:	3fd287a7 	.word	0x3fd287a7
 800f348:	8b60c8b3 	.word	0x8b60c8b3
 800f34c:	3fc68a28 	.word	0x3fc68a28
 800f350:	509f79fb 	.word	0x509f79fb
 800f354:	3fd34413 	.word	0x3fd34413
 800f358:	080128c5 	.word	0x080128c5
 800f35c:	080128dc 	.word	0x080128dc
 800f360:	7ff00000 	.word	0x7ff00000
 800f364:	080128c1 	.word	0x080128c1
 800f368:	080128b8 	.word	0x080128b8
 800f36c:	08012895 	.word	0x08012895
 800f370:	080129d8 	.word	0x080129d8
 800f374:	0801293b 	.word	0x0801293b
 800f378:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800f37a:	9900      	ldr	r1, [sp, #0]
 800f37c:	6011      	str	r1, [r2, #0]
 800f37e:	f1b9 0f0e 	cmp.w	r9, #14
 800f382:	d872      	bhi.n	800f46a <_dtoa_r+0x3ea>
 800f384:	2c00      	cmp	r4, #0
 800f386:	d070      	beq.n	800f46a <_dtoa_r+0x3ea>
 800f388:	f1bb 0f00 	cmp.w	fp, #0
 800f38c:	f340 80a6 	ble.w	800f4dc <_dtoa_r+0x45c>
 800f390:	49ca      	ldr	r1, [pc, #808]	; (800f6bc <_dtoa_r+0x63c>)
 800f392:	f00b 020f 	and.w	r2, fp, #15
 800f396:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800f39a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f39e:	ed92 7b00 	vldr	d7, [r2]
 800f3a2:	ea4f 112b 	mov.w	r1, fp, asr #4
 800f3a6:	f000 808d 	beq.w	800f4c4 <_dtoa_r+0x444>
 800f3aa:	4ac5      	ldr	r2, [pc, #788]	; (800f6c0 <_dtoa_r+0x640>)
 800f3ac:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800f3b0:	ed92 6b08 	vldr	d6, [r2, #32]
 800f3b4:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800f3b8:	ed8d 6b02 	vstr	d6, [sp, #8]
 800f3bc:	f001 010f 	and.w	r1, r1, #15
 800f3c0:	2203      	movs	r2, #3
 800f3c2:	48bf      	ldr	r0, [pc, #764]	; (800f6c0 <_dtoa_r+0x640>)
 800f3c4:	2900      	cmp	r1, #0
 800f3c6:	d17f      	bne.n	800f4c8 <_dtoa_r+0x448>
 800f3c8:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f3cc:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800f3d0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f3d4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800f3d6:	2900      	cmp	r1, #0
 800f3d8:	f000 80b2 	beq.w	800f540 <_dtoa_r+0x4c0>
 800f3dc:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800f3e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f3e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f3e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ec:	f140 80a8 	bpl.w	800f540 <_dtoa_r+0x4c0>
 800f3f0:	f1b9 0f00 	cmp.w	r9, #0
 800f3f4:	f000 80a4 	beq.w	800f540 <_dtoa_r+0x4c0>
 800f3f8:	f1ba 0f00 	cmp.w	sl, #0
 800f3fc:	dd31      	ble.n	800f462 <_dtoa_r+0x3e2>
 800f3fe:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800f402:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f406:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f40a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800f40e:	3201      	adds	r2, #1
 800f410:	4650      	mov	r0, sl
 800f412:	ed9d 6b02 	vldr	d6, [sp, #8]
 800f416:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800f41a:	ee07 2a90 	vmov	s15, r2
 800f41e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800f422:	eea7 5b06 	vfma.f64	d5, d7, d6
 800f426:	ed8d 5b02 	vstr	d5, [sp, #8]
 800f42a:	9c03      	ldr	r4, [sp, #12]
 800f42c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800f430:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800f434:	2800      	cmp	r0, #0
 800f436:	f040 8086 	bne.w	800f546 <_dtoa_r+0x4c6>
 800f43a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f43e:	ee36 6b47 	vsub.f64	d6, d6, d7
 800f442:	ec42 1b17 	vmov	d7, r1, r2
 800f446:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f44a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f44e:	f300 8272 	bgt.w	800f936 <_dtoa_r+0x8b6>
 800f452:	eeb1 7b47 	vneg.f64	d7, d7
 800f456:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f45a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f45e:	f100 8267 	bmi.w	800f930 <_dtoa_r+0x8b0>
 800f462:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800f466:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800f46a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f46c:	2a00      	cmp	r2, #0
 800f46e:	f2c0 8129 	blt.w	800f6c4 <_dtoa_r+0x644>
 800f472:	f1bb 0f0e 	cmp.w	fp, #14
 800f476:	f300 8125 	bgt.w	800f6c4 <_dtoa_r+0x644>
 800f47a:	4b90      	ldr	r3, [pc, #576]	; (800f6bc <_dtoa_r+0x63c>)
 800f47c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f480:	ed93 6b00 	vldr	d6, [r3]
 800f484:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f486:	2b00      	cmp	r3, #0
 800f488:	f280 80c3 	bge.w	800f612 <_dtoa_r+0x592>
 800f48c:	f1b9 0f00 	cmp.w	r9, #0
 800f490:	f300 80bf 	bgt.w	800f612 <_dtoa_r+0x592>
 800f494:	f040 824c 	bne.w	800f930 <_dtoa_r+0x8b0>
 800f498:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800f49c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800f4a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f4a4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f4a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4ac:	464c      	mov	r4, r9
 800f4ae:	464f      	mov	r7, r9
 800f4b0:	f280 8222 	bge.w	800f8f8 <_dtoa_r+0x878>
 800f4b4:	f8dd 8000 	ldr.w	r8, [sp]
 800f4b8:	2331      	movs	r3, #49	; 0x31
 800f4ba:	f808 3b01 	strb.w	r3, [r8], #1
 800f4be:	f10b 0b01 	add.w	fp, fp, #1
 800f4c2:	e21e      	b.n	800f902 <_dtoa_r+0x882>
 800f4c4:	2202      	movs	r2, #2
 800f4c6:	e77c      	b.n	800f3c2 <_dtoa_r+0x342>
 800f4c8:	07cc      	lsls	r4, r1, #31
 800f4ca:	d504      	bpl.n	800f4d6 <_dtoa_r+0x456>
 800f4cc:	ed90 6b00 	vldr	d6, [r0]
 800f4d0:	3201      	adds	r2, #1
 800f4d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800f4d6:	1049      	asrs	r1, r1, #1
 800f4d8:	3008      	adds	r0, #8
 800f4da:	e773      	b.n	800f3c4 <_dtoa_r+0x344>
 800f4dc:	d02e      	beq.n	800f53c <_dtoa_r+0x4bc>
 800f4de:	f1cb 0100 	rsb	r1, fp, #0
 800f4e2:	4a76      	ldr	r2, [pc, #472]	; (800f6bc <_dtoa_r+0x63c>)
 800f4e4:	f001 000f 	and.w	r0, r1, #15
 800f4e8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f4ec:	ed92 7b00 	vldr	d7, [r2]
 800f4f0:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800f4f4:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f4f8:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800f4fc:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800f500:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800f504:	486e      	ldr	r0, [pc, #440]	; (800f6c0 <_dtoa_r+0x640>)
 800f506:	1109      	asrs	r1, r1, #4
 800f508:	2400      	movs	r4, #0
 800f50a:	2202      	movs	r2, #2
 800f50c:	b939      	cbnz	r1, 800f51e <_dtoa_r+0x49e>
 800f50e:	2c00      	cmp	r4, #0
 800f510:	f43f af60 	beq.w	800f3d4 <_dtoa_r+0x354>
 800f514:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f518:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f51c:	e75a      	b.n	800f3d4 <_dtoa_r+0x354>
 800f51e:	07cf      	lsls	r7, r1, #31
 800f520:	d509      	bpl.n	800f536 <_dtoa_r+0x4b6>
 800f522:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800f526:	ed90 7b00 	vldr	d7, [r0]
 800f52a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800f52e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800f532:	3201      	adds	r2, #1
 800f534:	2401      	movs	r4, #1
 800f536:	1049      	asrs	r1, r1, #1
 800f538:	3008      	adds	r0, #8
 800f53a:	e7e7      	b.n	800f50c <_dtoa_r+0x48c>
 800f53c:	2202      	movs	r2, #2
 800f53e:	e749      	b.n	800f3d4 <_dtoa_r+0x354>
 800f540:	465f      	mov	r7, fp
 800f542:	4648      	mov	r0, r9
 800f544:	e765      	b.n	800f412 <_dtoa_r+0x392>
 800f546:	ec42 1b17 	vmov	d7, r1, r2
 800f54a:	4a5c      	ldr	r2, [pc, #368]	; (800f6bc <_dtoa_r+0x63c>)
 800f54c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800f550:	ed12 4b02 	vldr	d4, [r2, #-8]
 800f554:	9a00      	ldr	r2, [sp, #0]
 800f556:	1814      	adds	r4, r2, r0
 800f558:	9a08      	ldr	r2, [sp, #32]
 800f55a:	b352      	cbz	r2, 800f5b2 <_dtoa_r+0x532>
 800f55c:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800f560:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800f564:	f8dd 8000 	ldr.w	r8, [sp]
 800f568:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800f56c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f570:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f574:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f578:	ee14 2a90 	vmov	r2, s9
 800f57c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f580:	3230      	adds	r2, #48	; 0x30
 800f582:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f586:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f58a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f58e:	f808 2b01 	strb.w	r2, [r8], #1
 800f592:	d439      	bmi.n	800f608 <_dtoa_r+0x588>
 800f594:	ee32 5b46 	vsub.f64	d5, d2, d6
 800f598:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800f59c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5a0:	d472      	bmi.n	800f688 <_dtoa_r+0x608>
 800f5a2:	45a0      	cmp	r8, r4
 800f5a4:	f43f af5d 	beq.w	800f462 <_dtoa_r+0x3e2>
 800f5a8:	ee27 7b03 	vmul.f64	d7, d7, d3
 800f5ac:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f5b0:	e7e0      	b.n	800f574 <_dtoa_r+0x4f4>
 800f5b2:	f8dd 8000 	ldr.w	r8, [sp]
 800f5b6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f5ba:	4621      	mov	r1, r4
 800f5bc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800f5c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800f5c4:	ee14 2a90 	vmov	r2, s9
 800f5c8:	3230      	adds	r2, #48	; 0x30
 800f5ca:	f808 2b01 	strb.w	r2, [r8], #1
 800f5ce:	45a0      	cmp	r8, r4
 800f5d0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800f5d4:	ee36 6b45 	vsub.f64	d6, d6, d5
 800f5d8:	d118      	bne.n	800f60c <_dtoa_r+0x58c>
 800f5da:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800f5de:	ee37 4b05 	vadd.f64	d4, d7, d5
 800f5e2:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800f5e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5ea:	dc4d      	bgt.n	800f688 <_dtoa_r+0x608>
 800f5ec:	ee35 7b47 	vsub.f64	d7, d5, d7
 800f5f0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800f5f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5f8:	f57f af33 	bpl.w	800f462 <_dtoa_r+0x3e2>
 800f5fc:	4688      	mov	r8, r1
 800f5fe:	3901      	subs	r1, #1
 800f600:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800f604:	2b30      	cmp	r3, #48	; 0x30
 800f606:	d0f9      	beq.n	800f5fc <_dtoa_r+0x57c>
 800f608:	46bb      	mov	fp, r7
 800f60a:	e02a      	b.n	800f662 <_dtoa_r+0x5e2>
 800f60c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800f610:	e7d6      	b.n	800f5c0 <_dtoa_r+0x540>
 800f612:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f616:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800f61a:	f8dd 8000 	ldr.w	r8, [sp]
 800f61e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800f622:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800f626:	ee15 3a10 	vmov	r3, s10
 800f62a:	3330      	adds	r3, #48	; 0x30
 800f62c:	f808 3b01 	strb.w	r3, [r8], #1
 800f630:	9b00      	ldr	r3, [sp, #0]
 800f632:	eba8 0303 	sub.w	r3, r8, r3
 800f636:	4599      	cmp	r9, r3
 800f638:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800f63c:	eea3 7b46 	vfms.f64	d7, d3, d6
 800f640:	d133      	bne.n	800f6aa <_dtoa_r+0x62a>
 800f642:	ee37 7b07 	vadd.f64	d7, d7, d7
 800f646:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800f64a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f64e:	dc1a      	bgt.n	800f686 <_dtoa_r+0x606>
 800f650:	eeb4 7b46 	vcmp.f64	d7, d6
 800f654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f658:	d103      	bne.n	800f662 <_dtoa_r+0x5e2>
 800f65a:	ee15 3a10 	vmov	r3, s10
 800f65e:	07d9      	lsls	r1, r3, #31
 800f660:	d411      	bmi.n	800f686 <_dtoa_r+0x606>
 800f662:	4629      	mov	r1, r5
 800f664:	4630      	mov	r0, r6
 800f666:	f000 fad9 	bl	800fc1c <_Bfree>
 800f66a:	2300      	movs	r3, #0
 800f66c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800f66e:	f888 3000 	strb.w	r3, [r8]
 800f672:	f10b 0301 	add.w	r3, fp, #1
 800f676:	6013      	str	r3, [r2, #0]
 800f678:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	f43f ad4d 	beq.w	800f11a <_dtoa_r+0x9a>
 800f680:	f8c3 8000 	str.w	r8, [r3]
 800f684:	e549      	b.n	800f11a <_dtoa_r+0x9a>
 800f686:	465f      	mov	r7, fp
 800f688:	4643      	mov	r3, r8
 800f68a:	4698      	mov	r8, r3
 800f68c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f690:	2a39      	cmp	r2, #57	; 0x39
 800f692:	d106      	bne.n	800f6a2 <_dtoa_r+0x622>
 800f694:	9a00      	ldr	r2, [sp, #0]
 800f696:	429a      	cmp	r2, r3
 800f698:	d1f7      	bne.n	800f68a <_dtoa_r+0x60a>
 800f69a:	9900      	ldr	r1, [sp, #0]
 800f69c:	2230      	movs	r2, #48	; 0x30
 800f69e:	3701      	adds	r7, #1
 800f6a0:	700a      	strb	r2, [r1, #0]
 800f6a2:	781a      	ldrb	r2, [r3, #0]
 800f6a4:	3201      	adds	r2, #1
 800f6a6:	701a      	strb	r2, [r3, #0]
 800f6a8:	e7ae      	b.n	800f608 <_dtoa_r+0x588>
 800f6aa:	ee27 7b04 	vmul.f64	d7, d7, d4
 800f6ae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f6b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6b6:	d1b2      	bne.n	800f61e <_dtoa_r+0x59e>
 800f6b8:	e7d3      	b.n	800f662 <_dtoa_r+0x5e2>
 800f6ba:	bf00      	nop
 800f6bc:	080129d8 	.word	0x080129d8
 800f6c0:	080129b0 	.word	0x080129b0
 800f6c4:	9908      	ldr	r1, [sp, #32]
 800f6c6:	2900      	cmp	r1, #0
 800f6c8:	f000 80d1 	beq.w	800f86e <_dtoa_r+0x7ee>
 800f6cc:	9907      	ldr	r1, [sp, #28]
 800f6ce:	2901      	cmp	r1, #1
 800f6d0:	f300 80b4 	bgt.w	800f83c <_dtoa_r+0x7bc>
 800f6d4:	9911      	ldr	r1, [sp, #68]	; 0x44
 800f6d6:	2900      	cmp	r1, #0
 800f6d8:	f000 80ac 	beq.w	800f834 <_dtoa_r+0x7b4>
 800f6dc:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800f6e0:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f6e4:	461c      	mov	r4, r3
 800f6e6:	930a      	str	r3, [sp, #40]	; 0x28
 800f6e8:	9b05      	ldr	r3, [sp, #20]
 800f6ea:	4413      	add	r3, r2
 800f6ec:	9305      	str	r3, [sp, #20]
 800f6ee:	9b06      	ldr	r3, [sp, #24]
 800f6f0:	2101      	movs	r1, #1
 800f6f2:	4413      	add	r3, r2
 800f6f4:	4630      	mov	r0, r6
 800f6f6:	9306      	str	r3, [sp, #24]
 800f6f8:	f000 fb4c 	bl	800fd94 <__i2b>
 800f6fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6fe:	4607      	mov	r7, r0
 800f700:	f1b8 0f00 	cmp.w	r8, #0
 800f704:	dd0d      	ble.n	800f722 <_dtoa_r+0x6a2>
 800f706:	9a06      	ldr	r2, [sp, #24]
 800f708:	2a00      	cmp	r2, #0
 800f70a:	dd0a      	ble.n	800f722 <_dtoa_r+0x6a2>
 800f70c:	4542      	cmp	r2, r8
 800f70e:	9905      	ldr	r1, [sp, #20]
 800f710:	bfa8      	it	ge
 800f712:	4642      	movge	r2, r8
 800f714:	1a89      	subs	r1, r1, r2
 800f716:	9105      	str	r1, [sp, #20]
 800f718:	9906      	ldr	r1, [sp, #24]
 800f71a:	eba8 0802 	sub.w	r8, r8, r2
 800f71e:	1a8a      	subs	r2, r1, r2
 800f720:	9206      	str	r2, [sp, #24]
 800f722:	b303      	cbz	r3, 800f766 <_dtoa_r+0x6e6>
 800f724:	9a08      	ldr	r2, [sp, #32]
 800f726:	2a00      	cmp	r2, #0
 800f728:	f000 80a6 	beq.w	800f878 <_dtoa_r+0x7f8>
 800f72c:	2c00      	cmp	r4, #0
 800f72e:	dd13      	ble.n	800f758 <_dtoa_r+0x6d8>
 800f730:	4639      	mov	r1, r7
 800f732:	4622      	mov	r2, r4
 800f734:	4630      	mov	r0, r6
 800f736:	930c      	str	r3, [sp, #48]	; 0x30
 800f738:	f000 fbe8 	bl	800ff0c <__pow5mult>
 800f73c:	462a      	mov	r2, r5
 800f73e:	4601      	mov	r1, r0
 800f740:	4607      	mov	r7, r0
 800f742:	4630      	mov	r0, r6
 800f744:	f000 fb3c 	bl	800fdc0 <__multiply>
 800f748:	4629      	mov	r1, r5
 800f74a:	900a      	str	r0, [sp, #40]	; 0x28
 800f74c:	4630      	mov	r0, r6
 800f74e:	f000 fa65 	bl	800fc1c <_Bfree>
 800f752:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f754:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f756:	4615      	mov	r5, r2
 800f758:	1b1a      	subs	r2, r3, r4
 800f75a:	d004      	beq.n	800f766 <_dtoa_r+0x6e6>
 800f75c:	4629      	mov	r1, r5
 800f75e:	4630      	mov	r0, r6
 800f760:	f000 fbd4 	bl	800ff0c <__pow5mult>
 800f764:	4605      	mov	r5, r0
 800f766:	2101      	movs	r1, #1
 800f768:	4630      	mov	r0, r6
 800f76a:	f000 fb13 	bl	800fd94 <__i2b>
 800f76e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f770:	2b00      	cmp	r3, #0
 800f772:	4604      	mov	r4, r0
 800f774:	f340 8082 	ble.w	800f87c <_dtoa_r+0x7fc>
 800f778:	461a      	mov	r2, r3
 800f77a:	4601      	mov	r1, r0
 800f77c:	4630      	mov	r0, r6
 800f77e:	f000 fbc5 	bl	800ff0c <__pow5mult>
 800f782:	9b07      	ldr	r3, [sp, #28]
 800f784:	2b01      	cmp	r3, #1
 800f786:	4604      	mov	r4, r0
 800f788:	dd7b      	ble.n	800f882 <_dtoa_r+0x802>
 800f78a:	2300      	movs	r3, #0
 800f78c:	930a      	str	r3, [sp, #40]	; 0x28
 800f78e:	6922      	ldr	r2, [r4, #16]
 800f790:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800f794:	6910      	ldr	r0, [r2, #16]
 800f796:	f000 faad 	bl	800fcf4 <__hi0bits>
 800f79a:	f1c0 0020 	rsb	r0, r0, #32
 800f79e:	9b06      	ldr	r3, [sp, #24]
 800f7a0:	4418      	add	r0, r3
 800f7a2:	f010 001f 	ands.w	r0, r0, #31
 800f7a6:	f000 808d 	beq.w	800f8c4 <_dtoa_r+0x844>
 800f7aa:	f1c0 0220 	rsb	r2, r0, #32
 800f7ae:	2a04      	cmp	r2, #4
 800f7b0:	f340 8086 	ble.w	800f8c0 <_dtoa_r+0x840>
 800f7b4:	f1c0 001c 	rsb	r0, r0, #28
 800f7b8:	9b05      	ldr	r3, [sp, #20]
 800f7ba:	4403      	add	r3, r0
 800f7bc:	9305      	str	r3, [sp, #20]
 800f7be:	9b06      	ldr	r3, [sp, #24]
 800f7c0:	4403      	add	r3, r0
 800f7c2:	4480      	add	r8, r0
 800f7c4:	9306      	str	r3, [sp, #24]
 800f7c6:	9b05      	ldr	r3, [sp, #20]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	dd05      	ble.n	800f7d8 <_dtoa_r+0x758>
 800f7cc:	4629      	mov	r1, r5
 800f7ce:	461a      	mov	r2, r3
 800f7d0:	4630      	mov	r0, r6
 800f7d2:	f000 fbf5 	bl	800ffc0 <__lshift>
 800f7d6:	4605      	mov	r5, r0
 800f7d8:	9b06      	ldr	r3, [sp, #24]
 800f7da:	2b00      	cmp	r3, #0
 800f7dc:	dd05      	ble.n	800f7ea <_dtoa_r+0x76a>
 800f7de:	4621      	mov	r1, r4
 800f7e0:	461a      	mov	r2, r3
 800f7e2:	4630      	mov	r0, r6
 800f7e4:	f000 fbec 	bl	800ffc0 <__lshift>
 800f7e8:	4604      	mov	r4, r0
 800f7ea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f7ec:	2b00      	cmp	r3, #0
 800f7ee:	d06b      	beq.n	800f8c8 <_dtoa_r+0x848>
 800f7f0:	4621      	mov	r1, r4
 800f7f2:	4628      	mov	r0, r5
 800f7f4:	f000 fc50 	bl	8010098 <__mcmp>
 800f7f8:	2800      	cmp	r0, #0
 800f7fa:	da65      	bge.n	800f8c8 <_dtoa_r+0x848>
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	4629      	mov	r1, r5
 800f800:	220a      	movs	r2, #10
 800f802:	4630      	mov	r0, r6
 800f804:	f000 fa2c 	bl	800fc60 <__multadd>
 800f808:	9b08      	ldr	r3, [sp, #32]
 800f80a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800f80e:	4605      	mov	r5, r0
 800f810:	2b00      	cmp	r3, #0
 800f812:	f000 8192 	beq.w	800fb3a <_dtoa_r+0xaba>
 800f816:	4639      	mov	r1, r7
 800f818:	2300      	movs	r3, #0
 800f81a:	220a      	movs	r2, #10
 800f81c:	4630      	mov	r0, r6
 800f81e:	f000 fa1f 	bl	800fc60 <__multadd>
 800f822:	f1ba 0f00 	cmp.w	sl, #0
 800f826:	4607      	mov	r7, r0
 800f828:	f300 808e 	bgt.w	800f948 <_dtoa_r+0x8c8>
 800f82c:	9b07      	ldr	r3, [sp, #28]
 800f82e:	2b02      	cmp	r3, #2
 800f830:	dc51      	bgt.n	800f8d6 <_dtoa_r+0x856>
 800f832:	e089      	b.n	800f948 <_dtoa_r+0x8c8>
 800f834:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f836:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f83a:	e751      	b.n	800f6e0 <_dtoa_r+0x660>
 800f83c:	f109 34ff 	add.w	r4, r9, #4294967295
 800f840:	42a3      	cmp	r3, r4
 800f842:	bfbf      	itttt	lt
 800f844:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800f846:	1ae3      	sublt	r3, r4, r3
 800f848:	18d2      	addlt	r2, r2, r3
 800f84a:	4613      	movlt	r3, r2
 800f84c:	bfb7      	itett	lt
 800f84e:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f850:	1b1c      	subge	r4, r3, r4
 800f852:	4623      	movlt	r3, r4
 800f854:	2400      	movlt	r4, #0
 800f856:	f1b9 0f00 	cmp.w	r9, #0
 800f85a:	bfb5      	itete	lt
 800f85c:	9a05      	ldrlt	r2, [sp, #20]
 800f85e:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800f862:	eba2 0809 	sublt.w	r8, r2, r9
 800f866:	464a      	movge	r2, r9
 800f868:	bfb8      	it	lt
 800f86a:	2200      	movlt	r2, #0
 800f86c:	e73b      	b.n	800f6e6 <_dtoa_r+0x666>
 800f86e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f872:	9f08      	ldr	r7, [sp, #32]
 800f874:	461c      	mov	r4, r3
 800f876:	e743      	b.n	800f700 <_dtoa_r+0x680>
 800f878:	461a      	mov	r2, r3
 800f87a:	e76f      	b.n	800f75c <_dtoa_r+0x6dc>
 800f87c:	9b07      	ldr	r3, [sp, #28]
 800f87e:	2b01      	cmp	r3, #1
 800f880:	dc18      	bgt.n	800f8b4 <_dtoa_r+0x834>
 800f882:	9b02      	ldr	r3, [sp, #8]
 800f884:	b9b3      	cbnz	r3, 800f8b4 <_dtoa_r+0x834>
 800f886:	9b03      	ldr	r3, [sp, #12]
 800f888:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800f88c:	b9a2      	cbnz	r2, 800f8b8 <_dtoa_r+0x838>
 800f88e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800f892:	0d12      	lsrs	r2, r2, #20
 800f894:	0512      	lsls	r2, r2, #20
 800f896:	b18a      	cbz	r2, 800f8bc <_dtoa_r+0x83c>
 800f898:	9b05      	ldr	r3, [sp, #20]
 800f89a:	3301      	adds	r3, #1
 800f89c:	9305      	str	r3, [sp, #20]
 800f89e:	9b06      	ldr	r3, [sp, #24]
 800f8a0:	3301      	adds	r3, #1
 800f8a2:	9306      	str	r3, [sp, #24]
 800f8a4:	2301      	movs	r3, #1
 800f8a6:	930a      	str	r3, [sp, #40]	; 0x28
 800f8a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	f47f af6f 	bne.w	800f78e <_dtoa_r+0x70e>
 800f8b0:	2001      	movs	r0, #1
 800f8b2:	e774      	b.n	800f79e <_dtoa_r+0x71e>
 800f8b4:	2300      	movs	r3, #0
 800f8b6:	e7f6      	b.n	800f8a6 <_dtoa_r+0x826>
 800f8b8:	9b02      	ldr	r3, [sp, #8]
 800f8ba:	e7f4      	b.n	800f8a6 <_dtoa_r+0x826>
 800f8bc:	920a      	str	r2, [sp, #40]	; 0x28
 800f8be:	e7f3      	b.n	800f8a8 <_dtoa_r+0x828>
 800f8c0:	d081      	beq.n	800f7c6 <_dtoa_r+0x746>
 800f8c2:	4610      	mov	r0, r2
 800f8c4:	301c      	adds	r0, #28
 800f8c6:	e777      	b.n	800f7b8 <_dtoa_r+0x738>
 800f8c8:	f1b9 0f00 	cmp.w	r9, #0
 800f8cc:	dc37      	bgt.n	800f93e <_dtoa_r+0x8be>
 800f8ce:	9b07      	ldr	r3, [sp, #28]
 800f8d0:	2b02      	cmp	r3, #2
 800f8d2:	dd34      	ble.n	800f93e <_dtoa_r+0x8be>
 800f8d4:	46ca      	mov	sl, r9
 800f8d6:	f1ba 0f00 	cmp.w	sl, #0
 800f8da:	d10d      	bne.n	800f8f8 <_dtoa_r+0x878>
 800f8dc:	4621      	mov	r1, r4
 800f8de:	4653      	mov	r3, sl
 800f8e0:	2205      	movs	r2, #5
 800f8e2:	4630      	mov	r0, r6
 800f8e4:	f000 f9bc 	bl	800fc60 <__multadd>
 800f8e8:	4601      	mov	r1, r0
 800f8ea:	4604      	mov	r4, r0
 800f8ec:	4628      	mov	r0, r5
 800f8ee:	f000 fbd3 	bl	8010098 <__mcmp>
 800f8f2:	2800      	cmp	r0, #0
 800f8f4:	f73f adde 	bgt.w	800f4b4 <_dtoa_r+0x434>
 800f8f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8fa:	f8dd 8000 	ldr.w	r8, [sp]
 800f8fe:	ea6f 0b03 	mvn.w	fp, r3
 800f902:	f04f 0900 	mov.w	r9, #0
 800f906:	4621      	mov	r1, r4
 800f908:	4630      	mov	r0, r6
 800f90a:	f000 f987 	bl	800fc1c <_Bfree>
 800f90e:	2f00      	cmp	r7, #0
 800f910:	f43f aea7 	beq.w	800f662 <_dtoa_r+0x5e2>
 800f914:	f1b9 0f00 	cmp.w	r9, #0
 800f918:	d005      	beq.n	800f926 <_dtoa_r+0x8a6>
 800f91a:	45b9      	cmp	r9, r7
 800f91c:	d003      	beq.n	800f926 <_dtoa_r+0x8a6>
 800f91e:	4649      	mov	r1, r9
 800f920:	4630      	mov	r0, r6
 800f922:	f000 f97b 	bl	800fc1c <_Bfree>
 800f926:	4639      	mov	r1, r7
 800f928:	4630      	mov	r0, r6
 800f92a:	f000 f977 	bl	800fc1c <_Bfree>
 800f92e:	e698      	b.n	800f662 <_dtoa_r+0x5e2>
 800f930:	2400      	movs	r4, #0
 800f932:	4627      	mov	r7, r4
 800f934:	e7e0      	b.n	800f8f8 <_dtoa_r+0x878>
 800f936:	46bb      	mov	fp, r7
 800f938:	4604      	mov	r4, r0
 800f93a:	4607      	mov	r7, r0
 800f93c:	e5ba      	b.n	800f4b4 <_dtoa_r+0x434>
 800f93e:	9b08      	ldr	r3, [sp, #32]
 800f940:	46ca      	mov	sl, r9
 800f942:	2b00      	cmp	r3, #0
 800f944:	f000 8100 	beq.w	800fb48 <_dtoa_r+0xac8>
 800f948:	f1b8 0f00 	cmp.w	r8, #0
 800f94c:	dd05      	ble.n	800f95a <_dtoa_r+0x8da>
 800f94e:	4639      	mov	r1, r7
 800f950:	4642      	mov	r2, r8
 800f952:	4630      	mov	r0, r6
 800f954:	f000 fb34 	bl	800ffc0 <__lshift>
 800f958:	4607      	mov	r7, r0
 800f95a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d05d      	beq.n	800fa1c <_dtoa_r+0x99c>
 800f960:	6879      	ldr	r1, [r7, #4]
 800f962:	4630      	mov	r0, r6
 800f964:	f000 f91a 	bl	800fb9c <_Balloc>
 800f968:	4680      	mov	r8, r0
 800f96a:	b928      	cbnz	r0, 800f978 <_dtoa_r+0x8f8>
 800f96c:	4b82      	ldr	r3, [pc, #520]	; (800fb78 <_dtoa_r+0xaf8>)
 800f96e:	4602      	mov	r2, r0
 800f970:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f974:	f7ff bb9a 	b.w	800f0ac <_dtoa_r+0x2c>
 800f978:	693a      	ldr	r2, [r7, #16]
 800f97a:	3202      	adds	r2, #2
 800f97c:	0092      	lsls	r2, r2, #2
 800f97e:	f107 010c 	add.w	r1, r7, #12
 800f982:	300c      	adds	r0, #12
 800f984:	f7fe fe96 	bl	800e6b4 <memcpy>
 800f988:	2201      	movs	r2, #1
 800f98a:	4641      	mov	r1, r8
 800f98c:	4630      	mov	r0, r6
 800f98e:	f000 fb17 	bl	800ffc0 <__lshift>
 800f992:	9b00      	ldr	r3, [sp, #0]
 800f994:	3301      	adds	r3, #1
 800f996:	9305      	str	r3, [sp, #20]
 800f998:	9b00      	ldr	r3, [sp, #0]
 800f99a:	4453      	add	r3, sl
 800f99c:	9309      	str	r3, [sp, #36]	; 0x24
 800f99e:	9b02      	ldr	r3, [sp, #8]
 800f9a0:	f003 0301 	and.w	r3, r3, #1
 800f9a4:	46b9      	mov	r9, r7
 800f9a6:	9308      	str	r3, [sp, #32]
 800f9a8:	4607      	mov	r7, r0
 800f9aa:	9b05      	ldr	r3, [sp, #20]
 800f9ac:	4621      	mov	r1, r4
 800f9ae:	3b01      	subs	r3, #1
 800f9b0:	4628      	mov	r0, r5
 800f9b2:	9302      	str	r3, [sp, #8]
 800f9b4:	f7ff fad6 	bl	800ef64 <quorem>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	3330      	adds	r3, #48	; 0x30
 800f9bc:	9006      	str	r0, [sp, #24]
 800f9be:	4649      	mov	r1, r9
 800f9c0:	4628      	mov	r0, r5
 800f9c2:	930a      	str	r3, [sp, #40]	; 0x28
 800f9c4:	f000 fb68 	bl	8010098 <__mcmp>
 800f9c8:	463a      	mov	r2, r7
 800f9ca:	4682      	mov	sl, r0
 800f9cc:	4621      	mov	r1, r4
 800f9ce:	4630      	mov	r0, r6
 800f9d0:	f000 fb7e 	bl	80100d0 <__mdiff>
 800f9d4:	68c2      	ldr	r2, [r0, #12]
 800f9d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9d8:	4680      	mov	r8, r0
 800f9da:	bb0a      	cbnz	r2, 800fa20 <_dtoa_r+0x9a0>
 800f9dc:	4601      	mov	r1, r0
 800f9de:	4628      	mov	r0, r5
 800f9e0:	f000 fb5a 	bl	8010098 <__mcmp>
 800f9e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f9e6:	4602      	mov	r2, r0
 800f9e8:	4641      	mov	r1, r8
 800f9ea:	4630      	mov	r0, r6
 800f9ec:	920e      	str	r2, [sp, #56]	; 0x38
 800f9ee:	930a      	str	r3, [sp, #40]	; 0x28
 800f9f0:	f000 f914 	bl	800fc1c <_Bfree>
 800f9f4:	9b07      	ldr	r3, [sp, #28]
 800f9f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f9f8:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800f9fc:	ea43 0102 	orr.w	r1, r3, r2
 800fa00:	9b08      	ldr	r3, [sp, #32]
 800fa02:	430b      	orrs	r3, r1
 800fa04:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fa06:	d10d      	bne.n	800fa24 <_dtoa_r+0x9a4>
 800fa08:	2b39      	cmp	r3, #57	; 0x39
 800fa0a:	d029      	beq.n	800fa60 <_dtoa_r+0x9e0>
 800fa0c:	f1ba 0f00 	cmp.w	sl, #0
 800fa10:	dd01      	ble.n	800fa16 <_dtoa_r+0x996>
 800fa12:	9b06      	ldr	r3, [sp, #24]
 800fa14:	3331      	adds	r3, #49	; 0x31
 800fa16:	9a02      	ldr	r2, [sp, #8]
 800fa18:	7013      	strb	r3, [r2, #0]
 800fa1a:	e774      	b.n	800f906 <_dtoa_r+0x886>
 800fa1c:	4638      	mov	r0, r7
 800fa1e:	e7b8      	b.n	800f992 <_dtoa_r+0x912>
 800fa20:	2201      	movs	r2, #1
 800fa22:	e7e1      	b.n	800f9e8 <_dtoa_r+0x968>
 800fa24:	f1ba 0f00 	cmp.w	sl, #0
 800fa28:	db06      	blt.n	800fa38 <_dtoa_r+0x9b8>
 800fa2a:	9907      	ldr	r1, [sp, #28]
 800fa2c:	ea41 0a0a 	orr.w	sl, r1, sl
 800fa30:	9908      	ldr	r1, [sp, #32]
 800fa32:	ea5a 0101 	orrs.w	r1, sl, r1
 800fa36:	d120      	bne.n	800fa7a <_dtoa_r+0x9fa>
 800fa38:	2a00      	cmp	r2, #0
 800fa3a:	ddec      	ble.n	800fa16 <_dtoa_r+0x996>
 800fa3c:	4629      	mov	r1, r5
 800fa3e:	2201      	movs	r2, #1
 800fa40:	4630      	mov	r0, r6
 800fa42:	9305      	str	r3, [sp, #20]
 800fa44:	f000 fabc 	bl	800ffc0 <__lshift>
 800fa48:	4621      	mov	r1, r4
 800fa4a:	4605      	mov	r5, r0
 800fa4c:	f000 fb24 	bl	8010098 <__mcmp>
 800fa50:	2800      	cmp	r0, #0
 800fa52:	9b05      	ldr	r3, [sp, #20]
 800fa54:	dc02      	bgt.n	800fa5c <_dtoa_r+0x9dc>
 800fa56:	d1de      	bne.n	800fa16 <_dtoa_r+0x996>
 800fa58:	07da      	lsls	r2, r3, #31
 800fa5a:	d5dc      	bpl.n	800fa16 <_dtoa_r+0x996>
 800fa5c:	2b39      	cmp	r3, #57	; 0x39
 800fa5e:	d1d8      	bne.n	800fa12 <_dtoa_r+0x992>
 800fa60:	9a02      	ldr	r2, [sp, #8]
 800fa62:	2339      	movs	r3, #57	; 0x39
 800fa64:	7013      	strb	r3, [r2, #0]
 800fa66:	4643      	mov	r3, r8
 800fa68:	4698      	mov	r8, r3
 800fa6a:	3b01      	subs	r3, #1
 800fa6c:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800fa70:	2a39      	cmp	r2, #57	; 0x39
 800fa72:	d051      	beq.n	800fb18 <_dtoa_r+0xa98>
 800fa74:	3201      	adds	r2, #1
 800fa76:	701a      	strb	r2, [r3, #0]
 800fa78:	e745      	b.n	800f906 <_dtoa_r+0x886>
 800fa7a:	2a00      	cmp	r2, #0
 800fa7c:	dd03      	ble.n	800fa86 <_dtoa_r+0xa06>
 800fa7e:	2b39      	cmp	r3, #57	; 0x39
 800fa80:	d0ee      	beq.n	800fa60 <_dtoa_r+0x9e0>
 800fa82:	3301      	adds	r3, #1
 800fa84:	e7c7      	b.n	800fa16 <_dtoa_r+0x996>
 800fa86:	9a05      	ldr	r2, [sp, #20]
 800fa88:	9909      	ldr	r1, [sp, #36]	; 0x24
 800fa8a:	f802 3c01 	strb.w	r3, [r2, #-1]
 800fa8e:	428a      	cmp	r2, r1
 800fa90:	d02b      	beq.n	800faea <_dtoa_r+0xa6a>
 800fa92:	4629      	mov	r1, r5
 800fa94:	2300      	movs	r3, #0
 800fa96:	220a      	movs	r2, #10
 800fa98:	4630      	mov	r0, r6
 800fa9a:	f000 f8e1 	bl	800fc60 <__multadd>
 800fa9e:	45b9      	cmp	r9, r7
 800faa0:	4605      	mov	r5, r0
 800faa2:	f04f 0300 	mov.w	r3, #0
 800faa6:	f04f 020a 	mov.w	r2, #10
 800faaa:	4649      	mov	r1, r9
 800faac:	4630      	mov	r0, r6
 800faae:	d107      	bne.n	800fac0 <_dtoa_r+0xa40>
 800fab0:	f000 f8d6 	bl	800fc60 <__multadd>
 800fab4:	4681      	mov	r9, r0
 800fab6:	4607      	mov	r7, r0
 800fab8:	9b05      	ldr	r3, [sp, #20]
 800faba:	3301      	adds	r3, #1
 800fabc:	9305      	str	r3, [sp, #20]
 800fabe:	e774      	b.n	800f9aa <_dtoa_r+0x92a>
 800fac0:	f000 f8ce 	bl	800fc60 <__multadd>
 800fac4:	4639      	mov	r1, r7
 800fac6:	4681      	mov	r9, r0
 800fac8:	2300      	movs	r3, #0
 800faca:	220a      	movs	r2, #10
 800facc:	4630      	mov	r0, r6
 800face:	f000 f8c7 	bl	800fc60 <__multadd>
 800fad2:	4607      	mov	r7, r0
 800fad4:	e7f0      	b.n	800fab8 <_dtoa_r+0xa38>
 800fad6:	f1ba 0f00 	cmp.w	sl, #0
 800fada:	9a00      	ldr	r2, [sp, #0]
 800fadc:	bfcc      	ite	gt
 800fade:	46d0      	movgt	r8, sl
 800fae0:	f04f 0801 	movle.w	r8, #1
 800fae4:	4490      	add	r8, r2
 800fae6:	f04f 0900 	mov.w	r9, #0
 800faea:	4629      	mov	r1, r5
 800faec:	2201      	movs	r2, #1
 800faee:	4630      	mov	r0, r6
 800faf0:	9302      	str	r3, [sp, #8]
 800faf2:	f000 fa65 	bl	800ffc0 <__lshift>
 800faf6:	4621      	mov	r1, r4
 800faf8:	4605      	mov	r5, r0
 800fafa:	f000 facd 	bl	8010098 <__mcmp>
 800fafe:	2800      	cmp	r0, #0
 800fb00:	dcb1      	bgt.n	800fa66 <_dtoa_r+0x9e6>
 800fb02:	d102      	bne.n	800fb0a <_dtoa_r+0xa8a>
 800fb04:	9b02      	ldr	r3, [sp, #8]
 800fb06:	07db      	lsls	r3, r3, #31
 800fb08:	d4ad      	bmi.n	800fa66 <_dtoa_r+0x9e6>
 800fb0a:	4643      	mov	r3, r8
 800fb0c:	4698      	mov	r8, r3
 800fb0e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fb12:	2a30      	cmp	r2, #48	; 0x30
 800fb14:	d0fa      	beq.n	800fb0c <_dtoa_r+0xa8c>
 800fb16:	e6f6      	b.n	800f906 <_dtoa_r+0x886>
 800fb18:	9a00      	ldr	r2, [sp, #0]
 800fb1a:	429a      	cmp	r2, r3
 800fb1c:	d1a4      	bne.n	800fa68 <_dtoa_r+0x9e8>
 800fb1e:	f10b 0b01 	add.w	fp, fp, #1
 800fb22:	2331      	movs	r3, #49	; 0x31
 800fb24:	e778      	b.n	800fa18 <_dtoa_r+0x998>
 800fb26:	4b15      	ldr	r3, [pc, #84]	; (800fb7c <_dtoa_r+0xafc>)
 800fb28:	f7ff bb12 	b.w	800f150 <_dtoa_r+0xd0>
 800fb2c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	f47f aaee 	bne.w	800f110 <_dtoa_r+0x90>
 800fb34:	4b12      	ldr	r3, [pc, #72]	; (800fb80 <_dtoa_r+0xb00>)
 800fb36:	f7ff bb0b 	b.w	800f150 <_dtoa_r+0xd0>
 800fb3a:	f1ba 0f00 	cmp.w	sl, #0
 800fb3e:	dc03      	bgt.n	800fb48 <_dtoa_r+0xac8>
 800fb40:	9b07      	ldr	r3, [sp, #28]
 800fb42:	2b02      	cmp	r3, #2
 800fb44:	f73f aec7 	bgt.w	800f8d6 <_dtoa_r+0x856>
 800fb48:	f8dd 8000 	ldr.w	r8, [sp]
 800fb4c:	4621      	mov	r1, r4
 800fb4e:	4628      	mov	r0, r5
 800fb50:	f7ff fa08 	bl	800ef64 <quorem>
 800fb54:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800fb58:	f808 3b01 	strb.w	r3, [r8], #1
 800fb5c:	9a00      	ldr	r2, [sp, #0]
 800fb5e:	eba8 0202 	sub.w	r2, r8, r2
 800fb62:	4592      	cmp	sl, r2
 800fb64:	ddb7      	ble.n	800fad6 <_dtoa_r+0xa56>
 800fb66:	4629      	mov	r1, r5
 800fb68:	2300      	movs	r3, #0
 800fb6a:	220a      	movs	r2, #10
 800fb6c:	4630      	mov	r0, r6
 800fb6e:	f000 f877 	bl	800fc60 <__multadd>
 800fb72:	4605      	mov	r5, r0
 800fb74:	e7ea      	b.n	800fb4c <_dtoa_r+0xacc>
 800fb76:	bf00      	nop
 800fb78:	0801293b 	.word	0x0801293b
 800fb7c:	08012894 	.word	0x08012894
 800fb80:	080128b8 	.word	0x080128b8

0800fb84 <_localeconv_r>:
 800fb84:	4800      	ldr	r0, [pc, #0]	; (800fb88 <_localeconv_r+0x4>)
 800fb86:	4770      	bx	lr
 800fb88:	2400017c 	.word	0x2400017c

0800fb8c <malloc>:
 800fb8c:	4b02      	ldr	r3, [pc, #8]	; (800fb98 <malloc+0xc>)
 800fb8e:	4601      	mov	r1, r0
 800fb90:	6818      	ldr	r0, [r3, #0]
 800fb92:	f000 bbe1 	b.w	8010358 <_malloc_r>
 800fb96:	bf00      	nop
 800fb98:	24000028 	.word	0x24000028

0800fb9c <_Balloc>:
 800fb9c:	b570      	push	{r4, r5, r6, lr}
 800fb9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fba0:	4604      	mov	r4, r0
 800fba2:	460d      	mov	r5, r1
 800fba4:	b976      	cbnz	r6, 800fbc4 <_Balloc+0x28>
 800fba6:	2010      	movs	r0, #16
 800fba8:	f7ff fff0 	bl	800fb8c <malloc>
 800fbac:	4602      	mov	r2, r0
 800fbae:	6260      	str	r0, [r4, #36]	; 0x24
 800fbb0:	b920      	cbnz	r0, 800fbbc <_Balloc+0x20>
 800fbb2:	4b18      	ldr	r3, [pc, #96]	; (800fc14 <_Balloc+0x78>)
 800fbb4:	4818      	ldr	r0, [pc, #96]	; (800fc18 <_Balloc+0x7c>)
 800fbb6:	2166      	movs	r1, #102	; 0x66
 800fbb8:	f000 fc38 	bl	801042c <__assert_func>
 800fbbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fbc0:	6006      	str	r6, [r0, #0]
 800fbc2:	60c6      	str	r6, [r0, #12]
 800fbc4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800fbc6:	68f3      	ldr	r3, [r6, #12]
 800fbc8:	b183      	cbz	r3, 800fbec <_Balloc+0x50>
 800fbca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbcc:	68db      	ldr	r3, [r3, #12]
 800fbce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fbd2:	b9b8      	cbnz	r0, 800fc04 <_Balloc+0x68>
 800fbd4:	2101      	movs	r1, #1
 800fbd6:	fa01 f605 	lsl.w	r6, r1, r5
 800fbda:	1d72      	adds	r2, r6, #5
 800fbdc:	0092      	lsls	r2, r2, #2
 800fbde:	4620      	mov	r0, r4
 800fbe0:	f000 fb5a 	bl	8010298 <_calloc_r>
 800fbe4:	b160      	cbz	r0, 800fc00 <_Balloc+0x64>
 800fbe6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fbea:	e00e      	b.n	800fc0a <_Balloc+0x6e>
 800fbec:	2221      	movs	r2, #33	; 0x21
 800fbee:	2104      	movs	r1, #4
 800fbf0:	4620      	mov	r0, r4
 800fbf2:	f000 fb51 	bl	8010298 <_calloc_r>
 800fbf6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fbf8:	60f0      	str	r0, [r6, #12]
 800fbfa:	68db      	ldr	r3, [r3, #12]
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d1e4      	bne.n	800fbca <_Balloc+0x2e>
 800fc00:	2000      	movs	r0, #0
 800fc02:	bd70      	pop	{r4, r5, r6, pc}
 800fc04:	6802      	ldr	r2, [r0, #0]
 800fc06:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fc0a:	2300      	movs	r3, #0
 800fc0c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fc10:	e7f7      	b.n	800fc02 <_Balloc+0x66>
 800fc12:	bf00      	nop
 800fc14:	080128c5 	.word	0x080128c5
 800fc18:	0801294c 	.word	0x0801294c

0800fc1c <_Bfree>:
 800fc1c:	b570      	push	{r4, r5, r6, lr}
 800fc1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800fc20:	4605      	mov	r5, r0
 800fc22:	460c      	mov	r4, r1
 800fc24:	b976      	cbnz	r6, 800fc44 <_Bfree+0x28>
 800fc26:	2010      	movs	r0, #16
 800fc28:	f7ff ffb0 	bl	800fb8c <malloc>
 800fc2c:	4602      	mov	r2, r0
 800fc2e:	6268      	str	r0, [r5, #36]	; 0x24
 800fc30:	b920      	cbnz	r0, 800fc3c <_Bfree+0x20>
 800fc32:	4b09      	ldr	r3, [pc, #36]	; (800fc58 <_Bfree+0x3c>)
 800fc34:	4809      	ldr	r0, [pc, #36]	; (800fc5c <_Bfree+0x40>)
 800fc36:	218a      	movs	r1, #138	; 0x8a
 800fc38:	f000 fbf8 	bl	801042c <__assert_func>
 800fc3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc40:	6006      	str	r6, [r0, #0]
 800fc42:	60c6      	str	r6, [r0, #12]
 800fc44:	b13c      	cbz	r4, 800fc56 <_Bfree+0x3a>
 800fc46:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800fc48:	6862      	ldr	r2, [r4, #4]
 800fc4a:	68db      	ldr	r3, [r3, #12]
 800fc4c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fc50:	6021      	str	r1, [r4, #0]
 800fc52:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fc56:	bd70      	pop	{r4, r5, r6, pc}
 800fc58:	080128c5 	.word	0x080128c5
 800fc5c:	0801294c 	.word	0x0801294c

0800fc60 <__multadd>:
 800fc60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc64:	690e      	ldr	r6, [r1, #16]
 800fc66:	4607      	mov	r7, r0
 800fc68:	4698      	mov	r8, r3
 800fc6a:	460c      	mov	r4, r1
 800fc6c:	f101 0014 	add.w	r0, r1, #20
 800fc70:	2300      	movs	r3, #0
 800fc72:	6805      	ldr	r5, [r0, #0]
 800fc74:	b2a9      	uxth	r1, r5
 800fc76:	fb02 8101 	mla	r1, r2, r1, r8
 800fc7a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800fc7e:	0c2d      	lsrs	r5, r5, #16
 800fc80:	fb02 c505 	mla	r5, r2, r5, ip
 800fc84:	b289      	uxth	r1, r1
 800fc86:	3301      	adds	r3, #1
 800fc88:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800fc8c:	429e      	cmp	r6, r3
 800fc8e:	f840 1b04 	str.w	r1, [r0], #4
 800fc92:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800fc96:	dcec      	bgt.n	800fc72 <__multadd+0x12>
 800fc98:	f1b8 0f00 	cmp.w	r8, #0
 800fc9c:	d022      	beq.n	800fce4 <__multadd+0x84>
 800fc9e:	68a3      	ldr	r3, [r4, #8]
 800fca0:	42b3      	cmp	r3, r6
 800fca2:	dc19      	bgt.n	800fcd8 <__multadd+0x78>
 800fca4:	6861      	ldr	r1, [r4, #4]
 800fca6:	4638      	mov	r0, r7
 800fca8:	3101      	adds	r1, #1
 800fcaa:	f7ff ff77 	bl	800fb9c <_Balloc>
 800fcae:	4605      	mov	r5, r0
 800fcb0:	b928      	cbnz	r0, 800fcbe <__multadd+0x5e>
 800fcb2:	4602      	mov	r2, r0
 800fcb4:	4b0d      	ldr	r3, [pc, #52]	; (800fcec <__multadd+0x8c>)
 800fcb6:	480e      	ldr	r0, [pc, #56]	; (800fcf0 <__multadd+0x90>)
 800fcb8:	21b5      	movs	r1, #181	; 0xb5
 800fcba:	f000 fbb7 	bl	801042c <__assert_func>
 800fcbe:	6922      	ldr	r2, [r4, #16]
 800fcc0:	3202      	adds	r2, #2
 800fcc2:	f104 010c 	add.w	r1, r4, #12
 800fcc6:	0092      	lsls	r2, r2, #2
 800fcc8:	300c      	adds	r0, #12
 800fcca:	f7fe fcf3 	bl	800e6b4 <memcpy>
 800fcce:	4621      	mov	r1, r4
 800fcd0:	4638      	mov	r0, r7
 800fcd2:	f7ff ffa3 	bl	800fc1c <_Bfree>
 800fcd6:	462c      	mov	r4, r5
 800fcd8:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800fcdc:	3601      	adds	r6, #1
 800fcde:	f8c3 8014 	str.w	r8, [r3, #20]
 800fce2:	6126      	str	r6, [r4, #16]
 800fce4:	4620      	mov	r0, r4
 800fce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcea:	bf00      	nop
 800fcec:	0801293b 	.word	0x0801293b
 800fcf0:	0801294c 	.word	0x0801294c

0800fcf4 <__hi0bits>:
 800fcf4:	0c03      	lsrs	r3, r0, #16
 800fcf6:	041b      	lsls	r3, r3, #16
 800fcf8:	b9d3      	cbnz	r3, 800fd30 <__hi0bits+0x3c>
 800fcfa:	0400      	lsls	r0, r0, #16
 800fcfc:	2310      	movs	r3, #16
 800fcfe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fd02:	bf04      	itt	eq
 800fd04:	0200      	lsleq	r0, r0, #8
 800fd06:	3308      	addeq	r3, #8
 800fd08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fd0c:	bf04      	itt	eq
 800fd0e:	0100      	lsleq	r0, r0, #4
 800fd10:	3304      	addeq	r3, #4
 800fd12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fd16:	bf04      	itt	eq
 800fd18:	0080      	lsleq	r0, r0, #2
 800fd1a:	3302      	addeq	r3, #2
 800fd1c:	2800      	cmp	r0, #0
 800fd1e:	db05      	blt.n	800fd2c <__hi0bits+0x38>
 800fd20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800fd24:	f103 0301 	add.w	r3, r3, #1
 800fd28:	bf08      	it	eq
 800fd2a:	2320      	moveq	r3, #32
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	4770      	bx	lr
 800fd30:	2300      	movs	r3, #0
 800fd32:	e7e4      	b.n	800fcfe <__hi0bits+0xa>

0800fd34 <__lo0bits>:
 800fd34:	6803      	ldr	r3, [r0, #0]
 800fd36:	f013 0207 	ands.w	r2, r3, #7
 800fd3a:	4601      	mov	r1, r0
 800fd3c:	d00b      	beq.n	800fd56 <__lo0bits+0x22>
 800fd3e:	07da      	lsls	r2, r3, #31
 800fd40:	d424      	bmi.n	800fd8c <__lo0bits+0x58>
 800fd42:	0798      	lsls	r0, r3, #30
 800fd44:	bf49      	itett	mi
 800fd46:	085b      	lsrmi	r3, r3, #1
 800fd48:	089b      	lsrpl	r3, r3, #2
 800fd4a:	2001      	movmi	r0, #1
 800fd4c:	600b      	strmi	r3, [r1, #0]
 800fd4e:	bf5c      	itt	pl
 800fd50:	600b      	strpl	r3, [r1, #0]
 800fd52:	2002      	movpl	r0, #2
 800fd54:	4770      	bx	lr
 800fd56:	b298      	uxth	r0, r3
 800fd58:	b9b0      	cbnz	r0, 800fd88 <__lo0bits+0x54>
 800fd5a:	0c1b      	lsrs	r3, r3, #16
 800fd5c:	2010      	movs	r0, #16
 800fd5e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800fd62:	bf04      	itt	eq
 800fd64:	0a1b      	lsreq	r3, r3, #8
 800fd66:	3008      	addeq	r0, #8
 800fd68:	071a      	lsls	r2, r3, #28
 800fd6a:	bf04      	itt	eq
 800fd6c:	091b      	lsreq	r3, r3, #4
 800fd6e:	3004      	addeq	r0, #4
 800fd70:	079a      	lsls	r2, r3, #30
 800fd72:	bf04      	itt	eq
 800fd74:	089b      	lsreq	r3, r3, #2
 800fd76:	3002      	addeq	r0, #2
 800fd78:	07da      	lsls	r2, r3, #31
 800fd7a:	d403      	bmi.n	800fd84 <__lo0bits+0x50>
 800fd7c:	085b      	lsrs	r3, r3, #1
 800fd7e:	f100 0001 	add.w	r0, r0, #1
 800fd82:	d005      	beq.n	800fd90 <__lo0bits+0x5c>
 800fd84:	600b      	str	r3, [r1, #0]
 800fd86:	4770      	bx	lr
 800fd88:	4610      	mov	r0, r2
 800fd8a:	e7e8      	b.n	800fd5e <__lo0bits+0x2a>
 800fd8c:	2000      	movs	r0, #0
 800fd8e:	4770      	bx	lr
 800fd90:	2020      	movs	r0, #32
 800fd92:	4770      	bx	lr

0800fd94 <__i2b>:
 800fd94:	b510      	push	{r4, lr}
 800fd96:	460c      	mov	r4, r1
 800fd98:	2101      	movs	r1, #1
 800fd9a:	f7ff feff 	bl	800fb9c <_Balloc>
 800fd9e:	4602      	mov	r2, r0
 800fda0:	b928      	cbnz	r0, 800fdae <__i2b+0x1a>
 800fda2:	4b05      	ldr	r3, [pc, #20]	; (800fdb8 <__i2b+0x24>)
 800fda4:	4805      	ldr	r0, [pc, #20]	; (800fdbc <__i2b+0x28>)
 800fda6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fdaa:	f000 fb3f 	bl	801042c <__assert_func>
 800fdae:	2301      	movs	r3, #1
 800fdb0:	6144      	str	r4, [r0, #20]
 800fdb2:	6103      	str	r3, [r0, #16]
 800fdb4:	bd10      	pop	{r4, pc}
 800fdb6:	bf00      	nop
 800fdb8:	0801293b 	.word	0x0801293b
 800fdbc:	0801294c 	.word	0x0801294c

0800fdc0 <__multiply>:
 800fdc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fdc4:	4614      	mov	r4, r2
 800fdc6:	690a      	ldr	r2, [r1, #16]
 800fdc8:	6923      	ldr	r3, [r4, #16]
 800fdca:	429a      	cmp	r2, r3
 800fdcc:	bfb8      	it	lt
 800fdce:	460b      	movlt	r3, r1
 800fdd0:	460d      	mov	r5, r1
 800fdd2:	bfbc      	itt	lt
 800fdd4:	4625      	movlt	r5, r4
 800fdd6:	461c      	movlt	r4, r3
 800fdd8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800fddc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800fde0:	68ab      	ldr	r3, [r5, #8]
 800fde2:	6869      	ldr	r1, [r5, #4]
 800fde4:	eb0a 0709 	add.w	r7, sl, r9
 800fde8:	42bb      	cmp	r3, r7
 800fdea:	b085      	sub	sp, #20
 800fdec:	bfb8      	it	lt
 800fdee:	3101      	addlt	r1, #1
 800fdf0:	f7ff fed4 	bl	800fb9c <_Balloc>
 800fdf4:	b930      	cbnz	r0, 800fe04 <__multiply+0x44>
 800fdf6:	4602      	mov	r2, r0
 800fdf8:	4b42      	ldr	r3, [pc, #264]	; (800ff04 <__multiply+0x144>)
 800fdfa:	4843      	ldr	r0, [pc, #268]	; (800ff08 <__multiply+0x148>)
 800fdfc:	f240 115d 	movw	r1, #349	; 0x15d
 800fe00:	f000 fb14 	bl	801042c <__assert_func>
 800fe04:	f100 0614 	add.w	r6, r0, #20
 800fe08:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800fe0c:	4633      	mov	r3, r6
 800fe0e:	2200      	movs	r2, #0
 800fe10:	4543      	cmp	r3, r8
 800fe12:	d31e      	bcc.n	800fe52 <__multiply+0x92>
 800fe14:	f105 0c14 	add.w	ip, r5, #20
 800fe18:	f104 0314 	add.w	r3, r4, #20
 800fe1c:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800fe20:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800fe24:	9202      	str	r2, [sp, #8]
 800fe26:	ebac 0205 	sub.w	r2, ip, r5
 800fe2a:	3a15      	subs	r2, #21
 800fe2c:	f022 0203 	bic.w	r2, r2, #3
 800fe30:	3204      	adds	r2, #4
 800fe32:	f105 0115 	add.w	r1, r5, #21
 800fe36:	458c      	cmp	ip, r1
 800fe38:	bf38      	it	cc
 800fe3a:	2204      	movcc	r2, #4
 800fe3c:	9201      	str	r2, [sp, #4]
 800fe3e:	9a02      	ldr	r2, [sp, #8]
 800fe40:	9303      	str	r3, [sp, #12]
 800fe42:	429a      	cmp	r2, r3
 800fe44:	d808      	bhi.n	800fe58 <__multiply+0x98>
 800fe46:	2f00      	cmp	r7, #0
 800fe48:	dc55      	bgt.n	800fef6 <__multiply+0x136>
 800fe4a:	6107      	str	r7, [r0, #16]
 800fe4c:	b005      	add	sp, #20
 800fe4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe52:	f843 2b04 	str.w	r2, [r3], #4
 800fe56:	e7db      	b.n	800fe10 <__multiply+0x50>
 800fe58:	f8b3 a000 	ldrh.w	sl, [r3]
 800fe5c:	f1ba 0f00 	cmp.w	sl, #0
 800fe60:	d020      	beq.n	800fea4 <__multiply+0xe4>
 800fe62:	f105 0e14 	add.w	lr, r5, #20
 800fe66:	46b1      	mov	r9, r6
 800fe68:	2200      	movs	r2, #0
 800fe6a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800fe6e:	f8d9 b000 	ldr.w	fp, [r9]
 800fe72:	b2a1      	uxth	r1, r4
 800fe74:	fa1f fb8b 	uxth.w	fp, fp
 800fe78:	fb0a b101 	mla	r1, sl, r1, fp
 800fe7c:	4411      	add	r1, r2
 800fe7e:	f8d9 2000 	ldr.w	r2, [r9]
 800fe82:	0c24      	lsrs	r4, r4, #16
 800fe84:	0c12      	lsrs	r2, r2, #16
 800fe86:	fb0a 2404 	mla	r4, sl, r4, r2
 800fe8a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800fe8e:	b289      	uxth	r1, r1
 800fe90:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800fe94:	45f4      	cmp	ip, lr
 800fe96:	f849 1b04 	str.w	r1, [r9], #4
 800fe9a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800fe9e:	d8e4      	bhi.n	800fe6a <__multiply+0xaa>
 800fea0:	9901      	ldr	r1, [sp, #4]
 800fea2:	5072      	str	r2, [r6, r1]
 800fea4:	9a03      	ldr	r2, [sp, #12]
 800fea6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800feaa:	3304      	adds	r3, #4
 800feac:	f1b9 0f00 	cmp.w	r9, #0
 800feb0:	d01f      	beq.n	800fef2 <__multiply+0x132>
 800feb2:	6834      	ldr	r4, [r6, #0]
 800feb4:	f105 0114 	add.w	r1, r5, #20
 800feb8:	46b6      	mov	lr, r6
 800feba:	f04f 0a00 	mov.w	sl, #0
 800febe:	880a      	ldrh	r2, [r1, #0]
 800fec0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800fec4:	fb09 b202 	mla	r2, r9, r2, fp
 800fec8:	4492      	add	sl, r2
 800feca:	b2a4      	uxth	r4, r4
 800fecc:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800fed0:	f84e 4b04 	str.w	r4, [lr], #4
 800fed4:	f851 4b04 	ldr.w	r4, [r1], #4
 800fed8:	f8be 2000 	ldrh.w	r2, [lr]
 800fedc:	0c24      	lsrs	r4, r4, #16
 800fede:	fb09 2404 	mla	r4, r9, r4, r2
 800fee2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800fee6:	458c      	cmp	ip, r1
 800fee8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800feec:	d8e7      	bhi.n	800febe <__multiply+0xfe>
 800feee:	9a01      	ldr	r2, [sp, #4]
 800fef0:	50b4      	str	r4, [r6, r2]
 800fef2:	3604      	adds	r6, #4
 800fef4:	e7a3      	b.n	800fe3e <__multiply+0x7e>
 800fef6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fefa:	2b00      	cmp	r3, #0
 800fefc:	d1a5      	bne.n	800fe4a <__multiply+0x8a>
 800fefe:	3f01      	subs	r7, #1
 800ff00:	e7a1      	b.n	800fe46 <__multiply+0x86>
 800ff02:	bf00      	nop
 800ff04:	0801293b 	.word	0x0801293b
 800ff08:	0801294c 	.word	0x0801294c

0800ff0c <__pow5mult>:
 800ff0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff10:	4615      	mov	r5, r2
 800ff12:	f012 0203 	ands.w	r2, r2, #3
 800ff16:	4606      	mov	r6, r0
 800ff18:	460f      	mov	r7, r1
 800ff1a:	d007      	beq.n	800ff2c <__pow5mult+0x20>
 800ff1c:	4c25      	ldr	r4, [pc, #148]	; (800ffb4 <__pow5mult+0xa8>)
 800ff1e:	3a01      	subs	r2, #1
 800ff20:	2300      	movs	r3, #0
 800ff22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ff26:	f7ff fe9b 	bl	800fc60 <__multadd>
 800ff2a:	4607      	mov	r7, r0
 800ff2c:	10ad      	asrs	r5, r5, #2
 800ff2e:	d03d      	beq.n	800ffac <__pow5mult+0xa0>
 800ff30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ff32:	b97c      	cbnz	r4, 800ff54 <__pow5mult+0x48>
 800ff34:	2010      	movs	r0, #16
 800ff36:	f7ff fe29 	bl	800fb8c <malloc>
 800ff3a:	4602      	mov	r2, r0
 800ff3c:	6270      	str	r0, [r6, #36]	; 0x24
 800ff3e:	b928      	cbnz	r0, 800ff4c <__pow5mult+0x40>
 800ff40:	4b1d      	ldr	r3, [pc, #116]	; (800ffb8 <__pow5mult+0xac>)
 800ff42:	481e      	ldr	r0, [pc, #120]	; (800ffbc <__pow5mult+0xb0>)
 800ff44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ff48:	f000 fa70 	bl	801042c <__assert_func>
 800ff4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ff50:	6004      	str	r4, [r0, #0]
 800ff52:	60c4      	str	r4, [r0, #12]
 800ff54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ff58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ff5c:	b94c      	cbnz	r4, 800ff72 <__pow5mult+0x66>
 800ff5e:	f240 2171 	movw	r1, #625	; 0x271
 800ff62:	4630      	mov	r0, r6
 800ff64:	f7ff ff16 	bl	800fd94 <__i2b>
 800ff68:	2300      	movs	r3, #0
 800ff6a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ff6e:	4604      	mov	r4, r0
 800ff70:	6003      	str	r3, [r0, #0]
 800ff72:	f04f 0900 	mov.w	r9, #0
 800ff76:	07eb      	lsls	r3, r5, #31
 800ff78:	d50a      	bpl.n	800ff90 <__pow5mult+0x84>
 800ff7a:	4639      	mov	r1, r7
 800ff7c:	4622      	mov	r2, r4
 800ff7e:	4630      	mov	r0, r6
 800ff80:	f7ff ff1e 	bl	800fdc0 <__multiply>
 800ff84:	4639      	mov	r1, r7
 800ff86:	4680      	mov	r8, r0
 800ff88:	4630      	mov	r0, r6
 800ff8a:	f7ff fe47 	bl	800fc1c <_Bfree>
 800ff8e:	4647      	mov	r7, r8
 800ff90:	106d      	asrs	r5, r5, #1
 800ff92:	d00b      	beq.n	800ffac <__pow5mult+0xa0>
 800ff94:	6820      	ldr	r0, [r4, #0]
 800ff96:	b938      	cbnz	r0, 800ffa8 <__pow5mult+0x9c>
 800ff98:	4622      	mov	r2, r4
 800ff9a:	4621      	mov	r1, r4
 800ff9c:	4630      	mov	r0, r6
 800ff9e:	f7ff ff0f 	bl	800fdc0 <__multiply>
 800ffa2:	6020      	str	r0, [r4, #0]
 800ffa4:	f8c0 9000 	str.w	r9, [r0]
 800ffa8:	4604      	mov	r4, r0
 800ffaa:	e7e4      	b.n	800ff76 <__pow5mult+0x6a>
 800ffac:	4638      	mov	r0, r7
 800ffae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ffb2:	bf00      	nop
 800ffb4:	08012aa0 	.word	0x08012aa0
 800ffb8:	080128c5 	.word	0x080128c5
 800ffbc:	0801294c 	.word	0x0801294c

0800ffc0 <__lshift>:
 800ffc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ffc4:	460c      	mov	r4, r1
 800ffc6:	6849      	ldr	r1, [r1, #4]
 800ffc8:	6923      	ldr	r3, [r4, #16]
 800ffca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ffce:	68a3      	ldr	r3, [r4, #8]
 800ffd0:	4607      	mov	r7, r0
 800ffd2:	4691      	mov	r9, r2
 800ffd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ffd8:	f108 0601 	add.w	r6, r8, #1
 800ffdc:	42b3      	cmp	r3, r6
 800ffde:	db0b      	blt.n	800fff8 <__lshift+0x38>
 800ffe0:	4638      	mov	r0, r7
 800ffe2:	f7ff fddb 	bl	800fb9c <_Balloc>
 800ffe6:	4605      	mov	r5, r0
 800ffe8:	b948      	cbnz	r0, 800fffe <__lshift+0x3e>
 800ffea:	4602      	mov	r2, r0
 800ffec:	4b28      	ldr	r3, [pc, #160]	; (8010090 <__lshift+0xd0>)
 800ffee:	4829      	ldr	r0, [pc, #164]	; (8010094 <__lshift+0xd4>)
 800fff0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fff4:	f000 fa1a 	bl	801042c <__assert_func>
 800fff8:	3101      	adds	r1, #1
 800fffa:	005b      	lsls	r3, r3, #1
 800fffc:	e7ee      	b.n	800ffdc <__lshift+0x1c>
 800fffe:	2300      	movs	r3, #0
 8010000:	f100 0114 	add.w	r1, r0, #20
 8010004:	f100 0210 	add.w	r2, r0, #16
 8010008:	4618      	mov	r0, r3
 801000a:	4553      	cmp	r3, sl
 801000c:	db33      	blt.n	8010076 <__lshift+0xb6>
 801000e:	6920      	ldr	r0, [r4, #16]
 8010010:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010014:	f104 0314 	add.w	r3, r4, #20
 8010018:	f019 091f 	ands.w	r9, r9, #31
 801001c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010020:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010024:	d02b      	beq.n	801007e <__lshift+0xbe>
 8010026:	f1c9 0e20 	rsb	lr, r9, #32
 801002a:	468a      	mov	sl, r1
 801002c:	2200      	movs	r2, #0
 801002e:	6818      	ldr	r0, [r3, #0]
 8010030:	fa00 f009 	lsl.w	r0, r0, r9
 8010034:	4302      	orrs	r2, r0
 8010036:	f84a 2b04 	str.w	r2, [sl], #4
 801003a:	f853 2b04 	ldr.w	r2, [r3], #4
 801003e:	459c      	cmp	ip, r3
 8010040:	fa22 f20e 	lsr.w	r2, r2, lr
 8010044:	d8f3      	bhi.n	801002e <__lshift+0x6e>
 8010046:	ebac 0304 	sub.w	r3, ip, r4
 801004a:	3b15      	subs	r3, #21
 801004c:	f023 0303 	bic.w	r3, r3, #3
 8010050:	3304      	adds	r3, #4
 8010052:	f104 0015 	add.w	r0, r4, #21
 8010056:	4584      	cmp	ip, r0
 8010058:	bf38      	it	cc
 801005a:	2304      	movcc	r3, #4
 801005c:	50ca      	str	r2, [r1, r3]
 801005e:	b10a      	cbz	r2, 8010064 <__lshift+0xa4>
 8010060:	f108 0602 	add.w	r6, r8, #2
 8010064:	3e01      	subs	r6, #1
 8010066:	4638      	mov	r0, r7
 8010068:	612e      	str	r6, [r5, #16]
 801006a:	4621      	mov	r1, r4
 801006c:	f7ff fdd6 	bl	800fc1c <_Bfree>
 8010070:	4628      	mov	r0, r5
 8010072:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010076:	f842 0f04 	str.w	r0, [r2, #4]!
 801007a:	3301      	adds	r3, #1
 801007c:	e7c5      	b.n	801000a <__lshift+0x4a>
 801007e:	3904      	subs	r1, #4
 8010080:	f853 2b04 	ldr.w	r2, [r3], #4
 8010084:	f841 2f04 	str.w	r2, [r1, #4]!
 8010088:	459c      	cmp	ip, r3
 801008a:	d8f9      	bhi.n	8010080 <__lshift+0xc0>
 801008c:	e7ea      	b.n	8010064 <__lshift+0xa4>
 801008e:	bf00      	nop
 8010090:	0801293b 	.word	0x0801293b
 8010094:	0801294c 	.word	0x0801294c

08010098 <__mcmp>:
 8010098:	b530      	push	{r4, r5, lr}
 801009a:	6902      	ldr	r2, [r0, #16]
 801009c:	690c      	ldr	r4, [r1, #16]
 801009e:	1b12      	subs	r2, r2, r4
 80100a0:	d10e      	bne.n	80100c0 <__mcmp+0x28>
 80100a2:	f100 0314 	add.w	r3, r0, #20
 80100a6:	3114      	adds	r1, #20
 80100a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80100ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80100b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80100b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80100b8:	42a5      	cmp	r5, r4
 80100ba:	d003      	beq.n	80100c4 <__mcmp+0x2c>
 80100bc:	d305      	bcc.n	80100ca <__mcmp+0x32>
 80100be:	2201      	movs	r2, #1
 80100c0:	4610      	mov	r0, r2
 80100c2:	bd30      	pop	{r4, r5, pc}
 80100c4:	4283      	cmp	r3, r0
 80100c6:	d3f3      	bcc.n	80100b0 <__mcmp+0x18>
 80100c8:	e7fa      	b.n	80100c0 <__mcmp+0x28>
 80100ca:	f04f 32ff 	mov.w	r2, #4294967295
 80100ce:	e7f7      	b.n	80100c0 <__mcmp+0x28>

080100d0 <__mdiff>:
 80100d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100d4:	460c      	mov	r4, r1
 80100d6:	4606      	mov	r6, r0
 80100d8:	4611      	mov	r1, r2
 80100da:	4620      	mov	r0, r4
 80100dc:	4617      	mov	r7, r2
 80100de:	f7ff ffdb 	bl	8010098 <__mcmp>
 80100e2:	1e05      	subs	r5, r0, #0
 80100e4:	d110      	bne.n	8010108 <__mdiff+0x38>
 80100e6:	4629      	mov	r1, r5
 80100e8:	4630      	mov	r0, r6
 80100ea:	f7ff fd57 	bl	800fb9c <_Balloc>
 80100ee:	b930      	cbnz	r0, 80100fe <__mdiff+0x2e>
 80100f0:	4b39      	ldr	r3, [pc, #228]	; (80101d8 <__mdiff+0x108>)
 80100f2:	4602      	mov	r2, r0
 80100f4:	f240 2132 	movw	r1, #562	; 0x232
 80100f8:	4838      	ldr	r0, [pc, #224]	; (80101dc <__mdiff+0x10c>)
 80100fa:	f000 f997 	bl	801042c <__assert_func>
 80100fe:	2301      	movs	r3, #1
 8010100:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010104:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010108:	bfa4      	itt	ge
 801010a:	463b      	movge	r3, r7
 801010c:	4627      	movge	r7, r4
 801010e:	4630      	mov	r0, r6
 8010110:	6879      	ldr	r1, [r7, #4]
 8010112:	bfa6      	itte	ge
 8010114:	461c      	movge	r4, r3
 8010116:	2500      	movge	r5, #0
 8010118:	2501      	movlt	r5, #1
 801011a:	f7ff fd3f 	bl	800fb9c <_Balloc>
 801011e:	b920      	cbnz	r0, 801012a <__mdiff+0x5a>
 8010120:	4b2d      	ldr	r3, [pc, #180]	; (80101d8 <__mdiff+0x108>)
 8010122:	4602      	mov	r2, r0
 8010124:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010128:	e7e6      	b.n	80100f8 <__mdiff+0x28>
 801012a:	693e      	ldr	r6, [r7, #16]
 801012c:	60c5      	str	r5, [r0, #12]
 801012e:	6925      	ldr	r5, [r4, #16]
 8010130:	f107 0114 	add.w	r1, r7, #20
 8010134:	f104 0914 	add.w	r9, r4, #20
 8010138:	f100 0e14 	add.w	lr, r0, #20
 801013c:	f107 0210 	add.w	r2, r7, #16
 8010140:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8010144:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8010148:	46f2      	mov	sl, lr
 801014a:	2700      	movs	r7, #0
 801014c:	f859 3b04 	ldr.w	r3, [r9], #4
 8010150:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010154:	fa1f f883 	uxth.w	r8, r3
 8010158:	fa17 f78b 	uxtah	r7, r7, fp
 801015c:	0c1b      	lsrs	r3, r3, #16
 801015e:	eba7 0808 	sub.w	r8, r7, r8
 8010162:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010166:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801016a:	fa1f f888 	uxth.w	r8, r8
 801016e:	141f      	asrs	r7, r3, #16
 8010170:	454d      	cmp	r5, r9
 8010172:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010176:	f84a 3b04 	str.w	r3, [sl], #4
 801017a:	d8e7      	bhi.n	801014c <__mdiff+0x7c>
 801017c:	1b2b      	subs	r3, r5, r4
 801017e:	3b15      	subs	r3, #21
 8010180:	f023 0303 	bic.w	r3, r3, #3
 8010184:	3304      	adds	r3, #4
 8010186:	3415      	adds	r4, #21
 8010188:	42a5      	cmp	r5, r4
 801018a:	bf38      	it	cc
 801018c:	2304      	movcc	r3, #4
 801018e:	4419      	add	r1, r3
 8010190:	4473      	add	r3, lr
 8010192:	469e      	mov	lr, r3
 8010194:	460d      	mov	r5, r1
 8010196:	4565      	cmp	r5, ip
 8010198:	d30e      	bcc.n	80101b8 <__mdiff+0xe8>
 801019a:	f10c 0203 	add.w	r2, ip, #3
 801019e:	1a52      	subs	r2, r2, r1
 80101a0:	f022 0203 	bic.w	r2, r2, #3
 80101a4:	3903      	subs	r1, #3
 80101a6:	458c      	cmp	ip, r1
 80101a8:	bf38      	it	cc
 80101aa:	2200      	movcc	r2, #0
 80101ac:	441a      	add	r2, r3
 80101ae:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80101b2:	b17b      	cbz	r3, 80101d4 <__mdiff+0x104>
 80101b4:	6106      	str	r6, [r0, #16]
 80101b6:	e7a5      	b.n	8010104 <__mdiff+0x34>
 80101b8:	f855 8b04 	ldr.w	r8, [r5], #4
 80101bc:	fa17 f488 	uxtah	r4, r7, r8
 80101c0:	1422      	asrs	r2, r4, #16
 80101c2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 80101c6:	b2a4      	uxth	r4, r4
 80101c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80101cc:	f84e 4b04 	str.w	r4, [lr], #4
 80101d0:	1417      	asrs	r7, r2, #16
 80101d2:	e7e0      	b.n	8010196 <__mdiff+0xc6>
 80101d4:	3e01      	subs	r6, #1
 80101d6:	e7ea      	b.n	80101ae <__mdiff+0xde>
 80101d8:	0801293b 	.word	0x0801293b
 80101dc:	0801294c 	.word	0x0801294c

080101e0 <__d2b>:
 80101e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80101e4:	4689      	mov	r9, r1
 80101e6:	2101      	movs	r1, #1
 80101e8:	ec57 6b10 	vmov	r6, r7, d0
 80101ec:	4690      	mov	r8, r2
 80101ee:	f7ff fcd5 	bl	800fb9c <_Balloc>
 80101f2:	4604      	mov	r4, r0
 80101f4:	b930      	cbnz	r0, 8010204 <__d2b+0x24>
 80101f6:	4602      	mov	r2, r0
 80101f8:	4b25      	ldr	r3, [pc, #148]	; (8010290 <__d2b+0xb0>)
 80101fa:	4826      	ldr	r0, [pc, #152]	; (8010294 <__d2b+0xb4>)
 80101fc:	f240 310a 	movw	r1, #778	; 0x30a
 8010200:	f000 f914 	bl	801042c <__assert_func>
 8010204:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010208:	f3c7 0313 	ubfx	r3, r7, #0, #20
 801020c:	bb35      	cbnz	r5, 801025c <__d2b+0x7c>
 801020e:	2e00      	cmp	r6, #0
 8010210:	9301      	str	r3, [sp, #4]
 8010212:	d028      	beq.n	8010266 <__d2b+0x86>
 8010214:	4668      	mov	r0, sp
 8010216:	9600      	str	r6, [sp, #0]
 8010218:	f7ff fd8c 	bl	800fd34 <__lo0bits>
 801021c:	9900      	ldr	r1, [sp, #0]
 801021e:	b300      	cbz	r0, 8010262 <__d2b+0x82>
 8010220:	9a01      	ldr	r2, [sp, #4]
 8010222:	f1c0 0320 	rsb	r3, r0, #32
 8010226:	fa02 f303 	lsl.w	r3, r2, r3
 801022a:	430b      	orrs	r3, r1
 801022c:	40c2      	lsrs	r2, r0
 801022e:	6163      	str	r3, [r4, #20]
 8010230:	9201      	str	r2, [sp, #4]
 8010232:	9b01      	ldr	r3, [sp, #4]
 8010234:	61a3      	str	r3, [r4, #24]
 8010236:	2b00      	cmp	r3, #0
 8010238:	bf14      	ite	ne
 801023a:	2202      	movne	r2, #2
 801023c:	2201      	moveq	r2, #1
 801023e:	6122      	str	r2, [r4, #16]
 8010240:	b1d5      	cbz	r5, 8010278 <__d2b+0x98>
 8010242:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010246:	4405      	add	r5, r0
 8010248:	f8c9 5000 	str.w	r5, [r9]
 801024c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010250:	f8c8 0000 	str.w	r0, [r8]
 8010254:	4620      	mov	r0, r4
 8010256:	b003      	add	sp, #12
 8010258:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801025c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010260:	e7d5      	b.n	801020e <__d2b+0x2e>
 8010262:	6161      	str	r1, [r4, #20]
 8010264:	e7e5      	b.n	8010232 <__d2b+0x52>
 8010266:	a801      	add	r0, sp, #4
 8010268:	f7ff fd64 	bl	800fd34 <__lo0bits>
 801026c:	9b01      	ldr	r3, [sp, #4]
 801026e:	6163      	str	r3, [r4, #20]
 8010270:	2201      	movs	r2, #1
 8010272:	6122      	str	r2, [r4, #16]
 8010274:	3020      	adds	r0, #32
 8010276:	e7e3      	b.n	8010240 <__d2b+0x60>
 8010278:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801027c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010280:	f8c9 0000 	str.w	r0, [r9]
 8010284:	6918      	ldr	r0, [r3, #16]
 8010286:	f7ff fd35 	bl	800fcf4 <__hi0bits>
 801028a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801028e:	e7df      	b.n	8010250 <__d2b+0x70>
 8010290:	0801293b 	.word	0x0801293b
 8010294:	0801294c 	.word	0x0801294c

08010298 <_calloc_r>:
 8010298:	b513      	push	{r0, r1, r4, lr}
 801029a:	434a      	muls	r2, r1
 801029c:	4611      	mov	r1, r2
 801029e:	9201      	str	r2, [sp, #4]
 80102a0:	f000 f85a 	bl	8010358 <_malloc_r>
 80102a4:	4604      	mov	r4, r0
 80102a6:	b118      	cbz	r0, 80102b0 <_calloc_r+0x18>
 80102a8:	9a01      	ldr	r2, [sp, #4]
 80102aa:	2100      	movs	r1, #0
 80102ac:	f7fe fa10 	bl	800e6d0 <memset>
 80102b0:	4620      	mov	r0, r4
 80102b2:	b002      	add	sp, #8
 80102b4:	bd10      	pop	{r4, pc}
	...

080102b8 <_free_r>:
 80102b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80102ba:	2900      	cmp	r1, #0
 80102bc:	d048      	beq.n	8010350 <_free_r+0x98>
 80102be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80102c2:	9001      	str	r0, [sp, #4]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	f1a1 0404 	sub.w	r4, r1, #4
 80102ca:	bfb8      	it	lt
 80102cc:	18e4      	addlt	r4, r4, r3
 80102ce:	f000 f8ef 	bl	80104b0 <__malloc_lock>
 80102d2:	4a20      	ldr	r2, [pc, #128]	; (8010354 <_free_r+0x9c>)
 80102d4:	9801      	ldr	r0, [sp, #4]
 80102d6:	6813      	ldr	r3, [r2, #0]
 80102d8:	4615      	mov	r5, r2
 80102da:	b933      	cbnz	r3, 80102ea <_free_r+0x32>
 80102dc:	6063      	str	r3, [r4, #4]
 80102de:	6014      	str	r4, [r2, #0]
 80102e0:	b003      	add	sp, #12
 80102e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80102e6:	f000 b8e9 	b.w	80104bc <__malloc_unlock>
 80102ea:	42a3      	cmp	r3, r4
 80102ec:	d90b      	bls.n	8010306 <_free_r+0x4e>
 80102ee:	6821      	ldr	r1, [r4, #0]
 80102f0:	1862      	adds	r2, r4, r1
 80102f2:	4293      	cmp	r3, r2
 80102f4:	bf04      	itt	eq
 80102f6:	681a      	ldreq	r2, [r3, #0]
 80102f8:	685b      	ldreq	r3, [r3, #4]
 80102fa:	6063      	str	r3, [r4, #4]
 80102fc:	bf04      	itt	eq
 80102fe:	1852      	addeq	r2, r2, r1
 8010300:	6022      	streq	r2, [r4, #0]
 8010302:	602c      	str	r4, [r5, #0]
 8010304:	e7ec      	b.n	80102e0 <_free_r+0x28>
 8010306:	461a      	mov	r2, r3
 8010308:	685b      	ldr	r3, [r3, #4]
 801030a:	b10b      	cbz	r3, 8010310 <_free_r+0x58>
 801030c:	42a3      	cmp	r3, r4
 801030e:	d9fa      	bls.n	8010306 <_free_r+0x4e>
 8010310:	6811      	ldr	r1, [r2, #0]
 8010312:	1855      	adds	r5, r2, r1
 8010314:	42a5      	cmp	r5, r4
 8010316:	d10b      	bne.n	8010330 <_free_r+0x78>
 8010318:	6824      	ldr	r4, [r4, #0]
 801031a:	4421      	add	r1, r4
 801031c:	1854      	adds	r4, r2, r1
 801031e:	42a3      	cmp	r3, r4
 8010320:	6011      	str	r1, [r2, #0]
 8010322:	d1dd      	bne.n	80102e0 <_free_r+0x28>
 8010324:	681c      	ldr	r4, [r3, #0]
 8010326:	685b      	ldr	r3, [r3, #4]
 8010328:	6053      	str	r3, [r2, #4]
 801032a:	4421      	add	r1, r4
 801032c:	6011      	str	r1, [r2, #0]
 801032e:	e7d7      	b.n	80102e0 <_free_r+0x28>
 8010330:	d902      	bls.n	8010338 <_free_r+0x80>
 8010332:	230c      	movs	r3, #12
 8010334:	6003      	str	r3, [r0, #0]
 8010336:	e7d3      	b.n	80102e0 <_free_r+0x28>
 8010338:	6825      	ldr	r5, [r4, #0]
 801033a:	1961      	adds	r1, r4, r5
 801033c:	428b      	cmp	r3, r1
 801033e:	bf04      	itt	eq
 8010340:	6819      	ldreq	r1, [r3, #0]
 8010342:	685b      	ldreq	r3, [r3, #4]
 8010344:	6063      	str	r3, [r4, #4]
 8010346:	bf04      	itt	eq
 8010348:	1949      	addeq	r1, r1, r5
 801034a:	6021      	streq	r1, [r4, #0]
 801034c:	6054      	str	r4, [r2, #4]
 801034e:	e7c7      	b.n	80102e0 <_free_r+0x28>
 8010350:	b003      	add	sp, #12
 8010352:	bd30      	pop	{r4, r5, pc}
 8010354:	24000524 	.word	0x24000524

08010358 <_malloc_r>:
 8010358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801035a:	1ccd      	adds	r5, r1, #3
 801035c:	f025 0503 	bic.w	r5, r5, #3
 8010360:	3508      	adds	r5, #8
 8010362:	2d0c      	cmp	r5, #12
 8010364:	bf38      	it	cc
 8010366:	250c      	movcc	r5, #12
 8010368:	2d00      	cmp	r5, #0
 801036a:	4606      	mov	r6, r0
 801036c:	db01      	blt.n	8010372 <_malloc_r+0x1a>
 801036e:	42a9      	cmp	r1, r5
 8010370:	d903      	bls.n	801037a <_malloc_r+0x22>
 8010372:	230c      	movs	r3, #12
 8010374:	6033      	str	r3, [r6, #0]
 8010376:	2000      	movs	r0, #0
 8010378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801037a:	f000 f899 	bl	80104b0 <__malloc_lock>
 801037e:	4921      	ldr	r1, [pc, #132]	; (8010404 <_malloc_r+0xac>)
 8010380:	680a      	ldr	r2, [r1, #0]
 8010382:	4614      	mov	r4, r2
 8010384:	b99c      	cbnz	r4, 80103ae <_malloc_r+0x56>
 8010386:	4f20      	ldr	r7, [pc, #128]	; (8010408 <_malloc_r+0xb0>)
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	b923      	cbnz	r3, 8010396 <_malloc_r+0x3e>
 801038c:	4621      	mov	r1, r4
 801038e:	4630      	mov	r0, r6
 8010390:	f000 f83c 	bl	801040c <_sbrk_r>
 8010394:	6038      	str	r0, [r7, #0]
 8010396:	4629      	mov	r1, r5
 8010398:	4630      	mov	r0, r6
 801039a:	f000 f837 	bl	801040c <_sbrk_r>
 801039e:	1c43      	adds	r3, r0, #1
 80103a0:	d123      	bne.n	80103ea <_malloc_r+0x92>
 80103a2:	230c      	movs	r3, #12
 80103a4:	6033      	str	r3, [r6, #0]
 80103a6:	4630      	mov	r0, r6
 80103a8:	f000 f888 	bl	80104bc <__malloc_unlock>
 80103ac:	e7e3      	b.n	8010376 <_malloc_r+0x1e>
 80103ae:	6823      	ldr	r3, [r4, #0]
 80103b0:	1b5b      	subs	r3, r3, r5
 80103b2:	d417      	bmi.n	80103e4 <_malloc_r+0x8c>
 80103b4:	2b0b      	cmp	r3, #11
 80103b6:	d903      	bls.n	80103c0 <_malloc_r+0x68>
 80103b8:	6023      	str	r3, [r4, #0]
 80103ba:	441c      	add	r4, r3
 80103bc:	6025      	str	r5, [r4, #0]
 80103be:	e004      	b.n	80103ca <_malloc_r+0x72>
 80103c0:	6863      	ldr	r3, [r4, #4]
 80103c2:	42a2      	cmp	r2, r4
 80103c4:	bf0c      	ite	eq
 80103c6:	600b      	streq	r3, [r1, #0]
 80103c8:	6053      	strne	r3, [r2, #4]
 80103ca:	4630      	mov	r0, r6
 80103cc:	f000 f876 	bl	80104bc <__malloc_unlock>
 80103d0:	f104 000b 	add.w	r0, r4, #11
 80103d4:	1d23      	adds	r3, r4, #4
 80103d6:	f020 0007 	bic.w	r0, r0, #7
 80103da:	1ac2      	subs	r2, r0, r3
 80103dc:	d0cc      	beq.n	8010378 <_malloc_r+0x20>
 80103de:	1a1b      	subs	r3, r3, r0
 80103e0:	50a3      	str	r3, [r4, r2]
 80103e2:	e7c9      	b.n	8010378 <_malloc_r+0x20>
 80103e4:	4622      	mov	r2, r4
 80103e6:	6864      	ldr	r4, [r4, #4]
 80103e8:	e7cc      	b.n	8010384 <_malloc_r+0x2c>
 80103ea:	1cc4      	adds	r4, r0, #3
 80103ec:	f024 0403 	bic.w	r4, r4, #3
 80103f0:	42a0      	cmp	r0, r4
 80103f2:	d0e3      	beq.n	80103bc <_malloc_r+0x64>
 80103f4:	1a21      	subs	r1, r4, r0
 80103f6:	4630      	mov	r0, r6
 80103f8:	f000 f808 	bl	801040c <_sbrk_r>
 80103fc:	3001      	adds	r0, #1
 80103fe:	d1dd      	bne.n	80103bc <_malloc_r+0x64>
 8010400:	e7cf      	b.n	80103a2 <_malloc_r+0x4a>
 8010402:	bf00      	nop
 8010404:	24000524 	.word	0x24000524
 8010408:	24000528 	.word	0x24000528

0801040c <_sbrk_r>:
 801040c:	b538      	push	{r3, r4, r5, lr}
 801040e:	4d06      	ldr	r5, [pc, #24]	; (8010428 <_sbrk_r+0x1c>)
 8010410:	2300      	movs	r3, #0
 8010412:	4604      	mov	r4, r0
 8010414:	4608      	mov	r0, r1
 8010416:	602b      	str	r3, [r5, #0]
 8010418:	f7f2 feae 	bl	8003178 <_sbrk>
 801041c:	1c43      	adds	r3, r0, #1
 801041e:	d102      	bne.n	8010426 <_sbrk_r+0x1a>
 8010420:	682b      	ldr	r3, [r5, #0]
 8010422:	b103      	cbz	r3, 8010426 <_sbrk_r+0x1a>
 8010424:	6023      	str	r3, [r4, #0]
 8010426:	bd38      	pop	{r3, r4, r5, pc}
 8010428:	24000d28 	.word	0x24000d28

0801042c <__assert_func>:
 801042c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801042e:	4614      	mov	r4, r2
 8010430:	461a      	mov	r2, r3
 8010432:	4b09      	ldr	r3, [pc, #36]	; (8010458 <__assert_func+0x2c>)
 8010434:	681b      	ldr	r3, [r3, #0]
 8010436:	4605      	mov	r5, r0
 8010438:	68d8      	ldr	r0, [r3, #12]
 801043a:	b14c      	cbz	r4, 8010450 <__assert_func+0x24>
 801043c:	4b07      	ldr	r3, [pc, #28]	; (801045c <__assert_func+0x30>)
 801043e:	9100      	str	r1, [sp, #0]
 8010440:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010444:	4906      	ldr	r1, [pc, #24]	; (8010460 <__assert_func+0x34>)
 8010446:	462b      	mov	r3, r5
 8010448:	f000 f80e 	bl	8010468 <fiprintf>
 801044c:	f000 fa64 	bl	8010918 <abort>
 8010450:	4b04      	ldr	r3, [pc, #16]	; (8010464 <__assert_func+0x38>)
 8010452:	461c      	mov	r4, r3
 8010454:	e7f3      	b.n	801043e <__assert_func+0x12>
 8010456:	bf00      	nop
 8010458:	24000028 	.word	0x24000028
 801045c:	08012aac 	.word	0x08012aac
 8010460:	08012ab9 	.word	0x08012ab9
 8010464:	08012ae7 	.word	0x08012ae7

08010468 <fiprintf>:
 8010468:	b40e      	push	{r1, r2, r3}
 801046a:	b503      	push	{r0, r1, lr}
 801046c:	4601      	mov	r1, r0
 801046e:	ab03      	add	r3, sp, #12
 8010470:	4805      	ldr	r0, [pc, #20]	; (8010488 <fiprintf+0x20>)
 8010472:	f853 2b04 	ldr.w	r2, [r3], #4
 8010476:	6800      	ldr	r0, [r0, #0]
 8010478:	9301      	str	r3, [sp, #4]
 801047a:	f000 f84f 	bl	801051c <_vfiprintf_r>
 801047e:	b002      	add	sp, #8
 8010480:	f85d eb04 	ldr.w	lr, [sp], #4
 8010484:	b003      	add	sp, #12
 8010486:	4770      	bx	lr
 8010488:	24000028 	.word	0x24000028

0801048c <__ascii_mbtowc>:
 801048c:	b082      	sub	sp, #8
 801048e:	b901      	cbnz	r1, 8010492 <__ascii_mbtowc+0x6>
 8010490:	a901      	add	r1, sp, #4
 8010492:	b142      	cbz	r2, 80104a6 <__ascii_mbtowc+0x1a>
 8010494:	b14b      	cbz	r3, 80104aa <__ascii_mbtowc+0x1e>
 8010496:	7813      	ldrb	r3, [r2, #0]
 8010498:	600b      	str	r3, [r1, #0]
 801049a:	7812      	ldrb	r2, [r2, #0]
 801049c:	1e10      	subs	r0, r2, #0
 801049e:	bf18      	it	ne
 80104a0:	2001      	movne	r0, #1
 80104a2:	b002      	add	sp, #8
 80104a4:	4770      	bx	lr
 80104a6:	4610      	mov	r0, r2
 80104a8:	e7fb      	b.n	80104a2 <__ascii_mbtowc+0x16>
 80104aa:	f06f 0001 	mvn.w	r0, #1
 80104ae:	e7f8      	b.n	80104a2 <__ascii_mbtowc+0x16>

080104b0 <__malloc_lock>:
 80104b0:	4801      	ldr	r0, [pc, #4]	; (80104b8 <__malloc_lock+0x8>)
 80104b2:	f000 bbf1 	b.w	8010c98 <__retarget_lock_acquire_recursive>
 80104b6:	bf00      	nop
 80104b8:	24000d30 	.word	0x24000d30

080104bc <__malloc_unlock>:
 80104bc:	4801      	ldr	r0, [pc, #4]	; (80104c4 <__malloc_unlock+0x8>)
 80104be:	f000 bbec 	b.w	8010c9a <__retarget_lock_release_recursive>
 80104c2:	bf00      	nop
 80104c4:	24000d30 	.word	0x24000d30

080104c8 <__sfputc_r>:
 80104c8:	6893      	ldr	r3, [r2, #8]
 80104ca:	3b01      	subs	r3, #1
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	b410      	push	{r4}
 80104d0:	6093      	str	r3, [r2, #8]
 80104d2:	da08      	bge.n	80104e6 <__sfputc_r+0x1e>
 80104d4:	6994      	ldr	r4, [r2, #24]
 80104d6:	42a3      	cmp	r3, r4
 80104d8:	db01      	blt.n	80104de <__sfputc_r+0x16>
 80104da:	290a      	cmp	r1, #10
 80104dc:	d103      	bne.n	80104e6 <__sfputc_r+0x1e>
 80104de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104e2:	f000 b94b 	b.w	801077c <__swbuf_r>
 80104e6:	6813      	ldr	r3, [r2, #0]
 80104e8:	1c58      	adds	r0, r3, #1
 80104ea:	6010      	str	r0, [r2, #0]
 80104ec:	7019      	strb	r1, [r3, #0]
 80104ee:	4608      	mov	r0, r1
 80104f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104f4:	4770      	bx	lr

080104f6 <__sfputs_r>:
 80104f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104f8:	4606      	mov	r6, r0
 80104fa:	460f      	mov	r7, r1
 80104fc:	4614      	mov	r4, r2
 80104fe:	18d5      	adds	r5, r2, r3
 8010500:	42ac      	cmp	r4, r5
 8010502:	d101      	bne.n	8010508 <__sfputs_r+0x12>
 8010504:	2000      	movs	r0, #0
 8010506:	e007      	b.n	8010518 <__sfputs_r+0x22>
 8010508:	f814 1b01 	ldrb.w	r1, [r4], #1
 801050c:	463a      	mov	r2, r7
 801050e:	4630      	mov	r0, r6
 8010510:	f7ff ffda 	bl	80104c8 <__sfputc_r>
 8010514:	1c43      	adds	r3, r0, #1
 8010516:	d1f3      	bne.n	8010500 <__sfputs_r+0xa>
 8010518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801051c <_vfiprintf_r>:
 801051c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010520:	460d      	mov	r5, r1
 8010522:	b09d      	sub	sp, #116	; 0x74
 8010524:	4614      	mov	r4, r2
 8010526:	4698      	mov	r8, r3
 8010528:	4606      	mov	r6, r0
 801052a:	b118      	cbz	r0, 8010534 <_vfiprintf_r+0x18>
 801052c:	6983      	ldr	r3, [r0, #24]
 801052e:	b90b      	cbnz	r3, 8010534 <_vfiprintf_r+0x18>
 8010530:	f000 fb14 	bl	8010b5c <__sinit>
 8010534:	4b89      	ldr	r3, [pc, #548]	; (801075c <_vfiprintf_r+0x240>)
 8010536:	429d      	cmp	r5, r3
 8010538:	d11b      	bne.n	8010572 <_vfiprintf_r+0x56>
 801053a:	6875      	ldr	r5, [r6, #4]
 801053c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801053e:	07d9      	lsls	r1, r3, #31
 8010540:	d405      	bmi.n	801054e <_vfiprintf_r+0x32>
 8010542:	89ab      	ldrh	r3, [r5, #12]
 8010544:	059a      	lsls	r2, r3, #22
 8010546:	d402      	bmi.n	801054e <_vfiprintf_r+0x32>
 8010548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801054a:	f000 fba5 	bl	8010c98 <__retarget_lock_acquire_recursive>
 801054e:	89ab      	ldrh	r3, [r5, #12]
 8010550:	071b      	lsls	r3, r3, #28
 8010552:	d501      	bpl.n	8010558 <_vfiprintf_r+0x3c>
 8010554:	692b      	ldr	r3, [r5, #16]
 8010556:	b9eb      	cbnz	r3, 8010594 <_vfiprintf_r+0x78>
 8010558:	4629      	mov	r1, r5
 801055a:	4630      	mov	r0, r6
 801055c:	f000 f96e 	bl	801083c <__swsetup_r>
 8010560:	b1c0      	cbz	r0, 8010594 <_vfiprintf_r+0x78>
 8010562:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010564:	07dc      	lsls	r4, r3, #31
 8010566:	d50e      	bpl.n	8010586 <_vfiprintf_r+0x6a>
 8010568:	f04f 30ff 	mov.w	r0, #4294967295
 801056c:	b01d      	add	sp, #116	; 0x74
 801056e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010572:	4b7b      	ldr	r3, [pc, #492]	; (8010760 <_vfiprintf_r+0x244>)
 8010574:	429d      	cmp	r5, r3
 8010576:	d101      	bne.n	801057c <_vfiprintf_r+0x60>
 8010578:	68b5      	ldr	r5, [r6, #8]
 801057a:	e7df      	b.n	801053c <_vfiprintf_r+0x20>
 801057c:	4b79      	ldr	r3, [pc, #484]	; (8010764 <_vfiprintf_r+0x248>)
 801057e:	429d      	cmp	r5, r3
 8010580:	bf08      	it	eq
 8010582:	68f5      	ldreq	r5, [r6, #12]
 8010584:	e7da      	b.n	801053c <_vfiprintf_r+0x20>
 8010586:	89ab      	ldrh	r3, [r5, #12]
 8010588:	0598      	lsls	r0, r3, #22
 801058a:	d4ed      	bmi.n	8010568 <_vfiprintf_r+0x4c>
 801058c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801058e:	f000 fb84 	bl	8010c9a <__retarget_lock_release_recursive>
 8010592:	e7e9      	b.n	8010568 <_vfiprintf_r+0x4c>
 8010594:	2300      	movs	r3, #0
 8010596:	9309      	str	r3, [sp, #36]	; 0x24
 8010598:	2320      	movs	r3, #32
 801059a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801059e:	f8cd 800c 	str.w	r8, [sp, #12]
 80105a2:	2330      	movs	r3, #48	; 0x30
 80105a4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010768 <_vfiprintf_r+0x24c>
 80105a8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80105ac:	f04f 0901 	mov.w	r9, #1
 80105b0:	4623      	mov	r3, r4
 80105b2:	469a      	mov	sl, r3
 80105b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105b8:	b10a      	cbz	r2, 80105be <_vfiprintf_r+0xa2>
 80105ba:	2a25      	cmp	r2, #37	; 0x25
 80105bc:	d1f9      	bne.n	80105b2 <_vfiprintf_r+0x96>
 80105be:	ebba 0b04 	subs.w	fp, sl, r4
 80105c2:	d00b      	beq.n	80105dc <_vfiprintf_r+0xc0>
 80105c4:	465b      	mov	r3, fp
 80105c6:	4622      	mov	r2, r4
 80105c8:	4629      	mov	r1, r5
 80105ca:	4630      	mov	r0, r6
 80105cc:	f7ff ff93 	bl	80104f6 <__sfputs_r>
 80105d0:	3001      	adds	r0, #1
 80105d2:	f000 80aa 	beq.w	801072a <_vfiprintf_r+0x20e>
 80105d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80105d8:	445a      	add	r2, fp
 80105da:	9209      	str	r2, [sp, #36]	; 0x24
 80105dc:	f89a 3000 	ldrb.w	r3, [sl]
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	f000 80a2 	beq.w	801072a <_vfiprintf_r+0x20e>
 80105e6:	2300      	movs	r3, #0
 80105e8:	f04f 32ff 	mov.w	r2, #4294967295
 80105ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105f0:	f10a 0a01 	add.w	sl, sl, #1
 80105f4:	9304      	str	r3, [sp, #16]
 80105f6:	9307      	str	r3, [sp, #28]
 80105f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80105fc:	931a      	str	r3, [sp, #104]	; 0x68
 80105fe:	4654      	mov	r4, sl
 8010600:	2205      	movs	r2, #5
 8010602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010606:	4858      	ldr	r0, [pc, #352]	; (8010768 <_vfiprintf_r+0x24c>)
 8010608:	f7ef fe72 	bl	80002f0 <memchr>
 801060c:	9a04      	ldr	r2, [sp, #16]
 801060e:	b9d8      	cbnz	r0, 8010648 <_vfiprintf_r+0x12c>
 8010610:	06d1      	lsls	r1, r2, #27
 8010612:	bf44      	itt	mi
 8010614:	2320      	movmi	r3, #32
 8010616:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801061a:	0713      	lsls	r3, r2, #28
 801061c:	bf44      	itt	mi
 801061e:	232b      	movmi	r3, #43	; 0x2b
 8010620:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010624:	f89a 3000 	ldrb.w	r3, [sl]
 8010628:	2b2a      	cmp	r3, #42	; 0x2a
 801062a:	d015      	beq.n	8010658 <_vfiprintf_r+0x13c>
 801062c:	9a07      	ldr	r2, [sp, #28]
 801062e:	4654      	mov	r4, sl
 8010630:	2000      	movs	r0, #0
 8010632:	f04f 0c0a 	mov.w	ip, #10
 8010636:	4621      	mov	r1, r4
 8010638:	f811 3b01 	ldrb.w	r3, [r1], #1
 801063c:	3b30      	subs	r3, #48	; 0x30
 801063e:	2b09      	cmp	r3, #9
 8010640:	d94e      	bls.n	80106e0 <_vfiprintf_r+0x1c4>
 8010642:	b1b0      	cbz	r0, 8010672 <_vfiprintf_r+0x156>
 8010644:	9207      	str	r2, [sp, #28]
 8010646:	e014      	b.n	8010672 <_vfiprintf_r+0x156>
 8010648:	eba0 0308 	sub.w	r3, r0, r8
 801064c:	fa09 f303 	lsl.w	r3, r9, r3
 8010650:	4313      	orrs	r3, r2
 8010652:	9304      	str	r3, [sp, #16]
 8010654:	46a2      	mov	sl, r4
 8010656:	e7d2      	b.n	80105fe <_vfiprintf_r+0xe2>
 8010658:	9b03      	ldr	r3, [sp, #12]
 801065a:	1d19      	adds	r1, r3, #4
 801065c:	681b      	ldr	r3, [r3, #0]
 801065e:	9103      	str	r1, [sp, #12]
 8010660:	2b00      	cmp	r3, #0
 8010662:	bfbb      	ittet	lt
 8010664:	425b      	neglt	r3, r3
 8010666:	f042 0202 	orrlt.w	r2, r2, #2
 801066a:	9307      	strge	r3, [sp, #28]
 801066c:	9307      	strlt	r3, [sp, #28]
 801066e:	bfb8      	it	lt
 8010670:	9204      	strlt	r2, [sp, #16]
 8010672:	7823      	ldrb	r3, [r4, #0]
 8010674:	2b2e      	cmp	r3, #46	; 0x2e
 8010676:	d10c      	bne.n	8010692 <_vfiprintf_r+0x176>
 8010678:	7863      	ldrb	r3, [r4, #1]
 801067a:	2b2a      	cmp	r3, #42	; 0x2a
 801067c:	d135      	bne.n	80106ea <_vfiprintf_r+0x1ce>
 801067e:	9b03      	ldr	r3, [sp, #12]
 8010680:	1d1a      	adds	r2, r3, #4
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	9203      	str	r2, [sp, #12]
 8010686:	2b00      	cmp	r3, #0
 8010688:	bfb8      	it	lt
 801068a:	f04f 33ff 	movlt.w	r3, #4294967295
 801068e:	3402      	adds	r4, #2
 8010690:	9305      	str	r3, [sp, #20]
 8010692:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010778 <_vfiprintf_r+0x25c>
 8010696:	7821      	ldrb	r1, [r4, #0]
 8010698:	2203      	movs	r2, #3
 801069a:	4650      	mov	r0, sl
 801069c:	f7ef fe28 	bl	80002f0 <memchr>
 80106a0:	b140      	cbz	r0, 80106b4 <_vfiprintf_r+0x198>
 80106a2:	2340      	movs	r3, #64	; 0x40
 80106a4:	eba0 000a 	sub.w	r0, r0, sl
 80106a8:	fa03 f000 	lsl.w	r0, r3, r0
 80106ac:	9b04      	ldr	r3, [sp, #16]
 80106ae:	4303      	orrs	r3, r0
 80106b0:	3401      	adds	r4, #1
 80106b2:	9304      	str	r3, [sp, #16]
 80106b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106b8:	482c      	ldr	r0, [pc, #176]	; (801076c <_vfiprintf_r+0x250>)
 80106ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80106be:	2206      	movs	r2, #6
 80106c0:	f7ef fe16 	bl	80002f0 <memchr>
 80106c4:	2800      	cmp	r0, #0
 80106c6:	d03f      	beq.n	8010748 <_vfiprintf_r+0x22c>
 80106c8:	4b29      	ldr	r3, [pc, #164]	; (8010770 <_vfiprintf_r+0x254>)
 80106ca:	bb1b      	cbnz	r3, 8010714 <_vfiprintf_r+0x1f8>
 80106cc:	9b03      	ldr	r3, [sp, #12]
 80106ce:	3307      	adds	r3, #7
 80106d0:	f023 0307 	bic.w	r3, r3, #7
 80106d4:	3308      	adds	r3, #8
 80106d6:	9303      	str	r3, [sp, #12]
 80106d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80106da:	443b      	add	r3, r7
 80106dc:	9309      	str	r3, [sp, #36]	; 0x24
 80106de:	e767      	b.n	80105b0 <_vfiprintf_r+0x94>
 80106e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80106e4:	460c      	mov	r4, r1
 80106e6:	2001      	movs	r0, #1
 80106e8:	e7a5      	b.n	8010636 <_vfiprintf_r+0x11a>
 80106ea:	2300      	movs	r3, #0
 80106ec:	3401      	adds	r4, #1
 80106ee:	9305      	str	r3, [sp, #20]
 80106f0:	4619      	mov	r1, r3
 80106f2:	f04f 0c0a 	mov.w	ip, #10
 80106f6:	4620      	mov	r0, r4
 80106f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106fc:	3a30      	subs	r2, #48	; 0x30
 80106fe:	2a09      	cmp	r2, #9
 8010700:	d903      	bls.n	801070a <_vfiprintf_r+0x1ee>
 8010702:	2b00      	cmp	r3, #0
 8010704:	d0c5      	beq.n	8010692 <_vfiprintf_r+0x176>
 8010706:	9105      	str	r1, [sp, #20]
 8010708:	e7c3      	b.n	8010692 <_vfiprintf_r+0x176>
 801070a:	fb0c 2101 	mla	r1, ip, r1, r2
 801070e:	4604      	mov	r4, r0
 8010710:	2301      	movs	r3, #1
 8010712:	e7f0      	b.n	80106f6 <_vfiprintf_r+0x1da>
 8010714:	ab03      	add	r3, sp, #12
 8010716:	9300      	str	r3, [sp, #0]
 8010718:	462a      	mov	r2, r5
 801071a:	4b16      	ldr	r3, [pc, #88]	; (8010774 <_vfiprintf_r+0x258>)
 801071c:	a904      	add	r1, sp, #16
 801071e:	4630      	mov	r0, r6
 8010720:	f7fe f86e 	bl	800e800 <_printf_float>
 8010724:	4607      	mov	r7, r0
 8010726:	1c78      	adds	r0, r7, #1
 8010728:	d1d6      	bne.n	80106d8 <_vfiprintf_r+0x1bc>
 801072a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801072c:	07d9      	lsls	r1, r3, #31
 801072e:	d405      	bmi.n	801073c <_vfiprintf_r+0x220>
 8010730:	89ab      	ldrh	r3, [r5, #12]
 8010732:	059a      	lsls	r2, r3, #22
 8010734:	d402      	bmi.n	801073c <_vfiprintf_r+0x220>
 8010736:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010738:	f000 faaf 	bl	8010c9a <__retarget_lock_release_recursive>
 801073c:	89ab      	ldrh	r3, [r5, #12]
 801073e:	065b      	lsls	r3, r3, #25
 8010740:	f53f af12 	bmi.w	8010568 <_vfiprintf_r+0x4c>
 8010744:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010746:	e711      	b.n	801056c <_vfiprintf_r+0x50>
 8010748:	ab03      	add	r3, sp, #12
 801074a:	9300      	str	r3, [sp, #0]
 801074c:	462a      	mov	r2, r5
 801074e:	4b09      	ldr	r3, [pc, #36]	; (8010774 <_vfiprintf_r+0x258>)
 8010750:	a904      	add	r1, sp, #16
 8010752:	4630      	mov	r0, r6
 8010754:	f7fe fae0 	bl	800ed18 <_printf_i>
 8010758:	e7e4      	b.n	8010724 <_vfiprintf_r+0x208>
 801075a:	bf00      	nop
 801075c:	08012c24 	.word	0x08012c24
 8010760:	08012c44 	.word	0x08012c44
 8010764:	08012c04 	.word	0x08012c04
 8010768:	08012af2 	.word	0x08012af2
 801076c:	08012afc 	.word	0x08012afc
 8010770:	0800e801 	.word	0x0800e801
 8010774:	080104f7 	.word	0x080104f7
 8010778:	08012af8 	.word	0x08012af8

0801077c <__swbuf_r>:
 801077c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801077e:	460e      	mov	r6, r1
 8010780:	4614      	mov	r4, r2
 8010782:	4605      	mov	r5, r0
 8010784:	b118      	cbz	r0, 801078e <__swbuf_r+0x12>
 8010786:	6983      	ldr	r3, [r0, #24]
 8010788:	b90b      	cbnz	r3, 801078e <__swbuf_r+0x12>
 801078a:	f000 f9e7 	bl	8010b5c <__sinit>
 801078e:	4b21      	ldr	r3, [pc, #132]	; (8010814 <__swbuf_r+0x98>)
 8010790:	429c      	cmp	r4, r3
 8010792:	d12b      	bne.n	80107ec <__swbuf_r+0x70>
 8010794:	686c      	ldr	r4, [r5, #4]
 8010796:	69a3      	ldr	r3, [r4, #24]
 8010798:	60a3      	str	r3, [r4, #8]
 801079a:	89a3      	ldrh	r3, [r4, #12]
 801079c:	071a      	lsls	r2, r3, #28
 801079e:	d52f      	bpl.n	8010800 <__swbuf_r+0x84>
 80107a0:	6923      	ldr	r3, [r4, #16]
 80107a2:	b36b      	cbz	r3, 8010800 <__swbuf_r+0x84>
 80107a4:	6923      	ldr	r3, [r4, #16]
 80107a6:	6820      	ldr	r0, [r4, #0]
 80107a8:	1ac0      	subs	r0, r0, r3
 80107aa:	6963      	ldr	r3, [r4, #20]
 80107ac:	b2f6      	uxtb	r6, r6
 80107ae:	4283      	cmp	r3, r0
 80107b0:	4637      	mov	r7, r6
 80107b2:	dc04      	bgt.n	80107be <__swbuf_r+0x42>
 80107b4:	4621      	mov	r1, r4
 80107b6:	4628      	mov	r0, r5
 80107b8:	f000 f93c 	bl	8010a34 <_fflush_r>
 80107bc:	bb30      	cbnz	r0, 801080c <__swbuf_r+0x90>
 80107be:	68a3      	ldr	r3, [r4, #8]
 80107c0:	3b01      	subs	r3, #1
 80107c2:	60a3      	str	r3, [r4, #8]
 80107c4:	6823      	ldr	r3, [r4, #0]
 80107c6:	1c5a      	adds	r2, r3, #1
 80107c8:	6022      	str	r2, [r4, #0]
 80107ca:	701e      	strb	r6, [r3, #0]
 80107cc:	6963      	ldr	r3, [r4, #20]
 80107ce:	3001      	adds	r0, #1
 80107d0:	4283      	cmp	r3, r0
 80107d2:	d004      	beq.n	80107de <__swbuf_r+0x62>
 80107d4:	89a3      	ldrh	r3, [r4, #12]
 80107d6:	07db      	lsls	r3, r3, #31
 80107d8:	d506      	bpl.n	80107e8 <__swbuf_r+0x6c>
 80107da:	2e0a      	cmp	r6, #10
 80107dc:	d104      	bne.n	80107e8 <__swbuf_r+0x6c>
 80107de:	4621      	mov	r1, r4
 80107e0:	4628      	mov	r0, r5
 80107e2:	f000 f927 	bl	8010a34 <_fflush_r>
 80107e6:	b988      	cbnz	r0, 801080c <__swbuf_r+0x90>
 80107e8:	4638      	mov	r0, r7
 80107ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107ec:	4b0a      	ldr	r3, [pc, #40]	; (8010818 <__swbuf_r+0x9c>)
 80107ee:	429c      	cmp	r4, r3
 80107f0:	d101      	bne.n	80107f6 <__swbuf_r+0x7a>
 80107f2:	68ac      	ldr	r4, [r5, #8]
 80107f4:	e7cf      	b.n	8010796 <__swbuf_r+0x1a>
 80107f6:	4b09      	ldr	r3, [pc, #36]	; (801081c <__swbuf_r+0xa0>)
 80107f8:	429c      	cmp	r4, r3
 80107fa:	bf08      	it	eq
 80107fc:	68ec      	ldreq	r4, [r5, #12]
 80107fe:	e7ca      	b.n	8010796 <__swbuf_r+0x1a>
 8010800:	4621      	mov	r1, r4
 8010802:	4628      	mov	r0, r5
 8010804:	f000 f81a 	bl	801083c <__swsetup_r>
 8010808:	2800      	cmp	r0, #0
 801080a:	d0cb      	beq.n	80107a4 <__swbuf_r+0x28>
 801080c:	f04f 37ff 	mov.w	r7, #4294967295
 8010810:	e7ea      	b.n	80107e8 <__swbuf_r+0x6c>
 8010812:	bf00      	nop
 8010814:	08012c24 	.word	0x08012c24
 8010818:	08012c44 	.word	0x08012c44
 801081c:	08012c04 	.word	0x08012c04

08010820 <__ascii_wctomb>:
 8010820:	b149      	cbz	r1, 8010836 <__ascii_wctomb+0x16>
 8010822:	2aff      	cmp	r2, #255	; 0xff
 8010824:	bf85      	ittet	hi
 8010826:	238a      	movhi	r3, #138	; 0x8a
 8010828:	6003      	strhi	r3, [r0, #0]
 801082a:	700a      	strbls	r2, [r1, #0]
 801082c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010830:	bf98      	it	ls
 8010832:	2001      	movls	r0, #1
 8010834:	4770      	bx	lr
 8010836:	4608      	mov	r0, r1
 8010838:	4770      	bx	lr
	...

0801083c <__swsetup_r>:
 801083c:	4b32      	ldr	r3, [pc, #200]	; (8010908 <__swsetup_r+0xcc>)
 801083e:	b570      	push	{r4, r5, r6, lr}
 8010840:	681d      	ldr	r5, [r3, #0]
 8010842:	4606      	mov	r6, r0
 8010844:	460c      	mov	r4, r1
 8010846:	b125      	cbz	r5, 8010852 <__swsetup_r+0x16>
 8010848:	69ab      	ldr	r3, [r5, #24]
 801084a:	b913      	cbnz	r3, 8010852 <__swsetup_r+0x16>
 801084c:	4628      	mov	r0, r5
 801084e:	f000 f985 	bl	8010b5c <__sinit>
 8010852:	4b2e      	ldr	r3, [pc, #184]	; (801090c <__swsetup_r+0xd0>)
 8010854:	429c      	cmp	r4, r3
 8010856:	d10f      	bne.n	8010878 <__swsetup_r+0x3c>
 8010858:	686c      	ldr	r4, [r5, #4]
 801085a:	89a3      	ldrh	r3, [r4, #12]
 801085c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010860:	0719      	lsls	r1, r3, #28
 8010862:	d42c      	bmi.n	80108be <__swsetup_r+0x82>
 8010864:	06dd      	lsls	r5, r3, #27
 8010866:	d411      	bmi.n	801088c <__swsetup_r+0x50>
 8010868:	2309      	movs	r3, #9
 801086a:	6033      	str	r3, [r6, #0]
 801086c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010870:	81a3      	strh	r3, [r4, #12]
 8010872:	f04f 30ff 	mov.w	r0, #4294967295
 8010876:	e03e      	b.n	80108f6 <__swsetup_r+0xba>
 8010878:	4b25      	ldr	r3, [pc, #148]	; (8010910 <__swsetup_r+0xd4>)
 801087a:	429c      	cmp	r4, r3
 801087c:	d101      	bne.n	8010882 <__swsetup_r+0x46>
 801087e:	68ac      	ldr	r4, [r5, #8]
 8010880:	e7eb      	b.n	801085a <__swsetup_r+0x1e>
 8010882:	4b24      	ldr	r3, [pc, #144]	; (8010914 <__swsetup_r+0xd8>)
 8010884:	429c      	cmp	r4, r3
 8010886:	bf08      	it	eq
 8010888:	68ec      	ldreq	r4, [r5, #12]
 801088a:	e7e6      	b.n	801085a <__swsetup_r+0x1e>
 801088c:	0758      	lsls	r0, r3, #29
 801088e:	d512      	bpl.n	80108b6 <__swsetup_r+0x7a>
 8010890:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010892:	b141      	cbz	r1, 80108a6 <__swsetup_r+0x6a>
 8010894:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010898:	4299      	cmp	r1, r3
 801089a:	d002      	beq.n	80108a2 <__swsetup_r+0x66>
 801089c:	4630      	mov	r0, r6
 801089e:	f7ff fd0b 	bl	80102b8 <_free_r>
 80108a2:	2300      	movs	r3, #0
 80108a4:	6363      	str	r3, [r4, #52]	; 0x34
 80108a6:	89a3      	ldrh	r3, [r4, #12]
 80108a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80108ac:	81a3      	strh	r3, [r4, #12]
 80108ae:	2300      	movs	r3, #0
 80108b0:	6063      	str	r3, [r4, #4]
 80108b2:	6923      	ldr	r3, [r4, #16]
 80108b4:	6023      	str	r3, [r4, #0]
 80108b6:	89a3      	ldrh	r3, [r4, #12]
 80108b8:	f043 0308 	orr.w	r3, r3, #8
 80108bc:	81a3      	strh	r3, [r4, #12]
 80108be:	6923      	ldr	r3, [r4, #16]
 80108c0:	b94b      	cbnz	r3, 80108d6 <__swsetup_r+0x9a>
 80108c2:	89a3      	ldrh	r3, [r4, #12]
 80108c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80108c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80108cc:	d003      	beq.n	80108d6 <__swsetup_r+0x9a>
 80108ce:	4621      	mov	r1, r4
 80108d0:	4630      	mov	r0, r6
 80108d2:	f000 fa07 	bl	8010ce4 <__smakebuf_r>
 80108d6:	89a0      	ldrh	r0, [r4, #12]
 80108d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80108dc:	f010 0301 	ands.w	r3, r0, #1
 80108e0:	d00a      	beq.n	80108f8 <__swsetup_r+0xbc>
 80108e2:	2300      	movs	r3, #0
 80108e4:	60a3      	str	r3, [r4, #8]
 80108e6:	6963      	ldr	r3, [r4, #20]
 80108e8:	425b      	negs	r3, r3
 80108ea:	61a3      	str	r3, [r4, #24]
 80108ec:	6923      	ldr	r3, [r4, #16]
 80108ee:	b943      	cbnz	r3, 8010902 <__swsetup_r+0xc6>
 80108f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80108f4:	d1ba      	bne.n	801086c <__swsetup_r+0x30>
 80108f6:	bd70      	pop	{r4, r5, r6, pc}
 80108f8:	0781      	lsls	r1, r0, #30
 80108fa:	bf58      	it	pl
 80108fc:	6963      	ldrpl	r3, [r4, #20]
 80108fe:	60a3      	str	r3, [r4, #8]
 8010900:	e7f4      	b.n	80108ec <__swsetup_r+0xb0>
 8010902:	2000      	movs	r0, #0
 8010904:	e7f7      	b.n	80108f6 <__swsetup_r+0xba>
 8010906:	bf00      	nop
 8010908:	24000028 	.word	0x24000028
 801090c:	08012c24 	.word	0x08012c24
 8010910:	08012c44 	.word	0x08012c44
 8010914:	08012c04 	.word	0x08012c04

08010918 <abort>:
 8010918:	b508      	push	{r3, lr}
 801091a:	2006      	movs	r0, #6
 801091c:	f000 fa4a 	bl	8010db4 <raise>
 8010920:	2001      	movs	r0, #1
 8010922:	f7f2 fbb1 	bl	8003088 <_exit>
	...

08010928 <__sflush_r>:
 8010928:	898a      	ldrh	r2, [r1, #12]
 801092a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801092e:	4605      	mov	r5, r0
 8010930:	0710      	lsls	r0, r2, #28
 8010932:	460c      	mov	r4, r1
 8010934:	d458      	bmi.n	80109e8 <__sflush_r+0xc0>
 8010936:	684b      	ldr	r3, [r1, #4]
 8010938:	2b00      	cmp	r3, #0
 801093a:	dc05      	bgt.n	8010948 <__sflush_r+0x20>
 801093c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801093e:	2b00      	cmp	r3, #0
 8010940:	dc02      	bgt.n	8010948 <__sflush_r+0x20>
 8010942:	2000      	movs	r0, #0
 8010944:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010948:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801094a:	2e00      	cmp	r6, #0
 801094c:	d0f9      	beq.n	8010942 <__sflush_r+0x1a>
 801094e:	2300      	movs	r3, #0
 8010950:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010954:	682f      	ldr	r7, [r5, #0]
 8010956:	602b      	str	r3, [r5, #0]
 8010958:	d032      	beq.n	80109c0 <__sflush_r+0x98>
 801095a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801095c:	89a3      	ldrh	r3, [r4, #12]
 801095e:	075a      	lsls	r2, r3, #29
 8010960:	d505      	bpl.n	801096e <__sflush_r+0x46>
 8010962:	6863      	ldr	r3, [r4, #4]
 8010964:	1ac0      	subs	r0, r0, r3
 8010966:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010968:	b10b      	cbz	r3, 801096e <__sflush_r+0x46>
 801096a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801096c:	1ac0      	subs	r0, r0, r3
 801096e:	2300      	movs	r3, #0
 8010970:	4602      	mov	r2, r0
 8010972:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010974:	6a21      	ldr	r1, [r4, #32]
 8010976:	4628      	mov	r0, r5
 8010978:	47b0      	blx	r6
 801097a:	1c43      	adds	r3, r0, #1
 801097c:	89a3      	ldrh	r3, [r4, #12]
 801097e:	d106      	bne.n	801098e <__sflush_r+0x66>
 8010980:	6829      	ldr	r1, [r5, #0]
 8010982:	291d      	cmp	r1, #29
 8010984:	d82c      	bhi.n	80109e0 <__sflush_r+0xb8>
 8010986:	4a2a      	ldr	r2, [pc, #168]	; (8010a30 <__sflush_r+0x108>)
 8010988:	40ca      	lsrs	r2, r1
 801098a:	07d6      	lsls	r6, r2, #31
 801098c:	d528      	bpl.n	80109e0 <__sflush_r+0xb8>
 801098e:	2200      	movs	r2, #0
 8010990:	6062      	str	r2, [r4, #4]
 8010992:	04d9      	lsls	r1, r3, #19
 8010994:	6922      	ldr	r2, [r4, #16]
 8010996:	6022      	str	r2, [r4, #0]
 8010998:	d504      	bpl.n	80109a4 <__sflush_r+0x7c>
 801099a:	1c42      	adds	r2, r0, #1
 801099c:	d101      	bne.n	80109a2 <__sflush_r+0x7a>
 801099e:	682b      	ldr	r3, [r5, #0]
 80109a0:	b903      	cbnz	r3, 80109a4 <__sflush_r+0x7c>
 80109a2:	6560      	str	r0, [r4, #84]	; 0x54
 80109a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80109a6:	602f      	str	r7, [r5, #0]
 80109a8:	2900      	cmp	r1, #0
 80109aa:	d0ca      	beq.n	8010942 <__sflush_r+0x1a>
 80109ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80109b0:	4299      	cmp	r1, r3
 80109b2:	d002      	beq.n	80109ba <__sflush_r+0x92>
 80109b4:	4628      	mov	r0, r5
 80109b6:	f7ff fc7f 	bl	80102b8 <_free_r>
 80109ba:	2000      	movs	r0, #0
 80109bc:	6360      	str	r0, [r4, #52]	; 0x34
 80109be:	e7c1      	b.n	8010944 <__sflush_r+0x1c>
 80109c0:	6a21      	ldr	r1, [r4, #32]
 80109c2:	2301      	movs	r3, #1
 80109c4:	4628      	mov	r0, r5
 80109c6:	47b0      	blx	r6
 80109c8:	1c41      	adds	r1, r0, #1
 80109ca:	d1c7      	bne.n	801095c <__sflush_r+0x34>
 80109cc:	682b      	ldr	r3, [r5, #0]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d0c4      	beq.n	801095c <__sflush_r+0x34>
 80109d2:	2b1d      	cmp	r3, #29
 80109d4:	d001      	beq.n	80109da <__sflush_r+0xb2>
 80109d6:	2b16      	cmp	r3, #22
 80109d8:	d101      	bne.n	80109de <__sflush_r+0xb6>
 80109da:	602f      	str	r7, [r5, #0]
 80109dc:	e7b1      	b.n	8010942 <__sflush_r+0x1a>
 80109de:	89a3      	ldrh	r3, [r4, #12]
 80109e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109e4:	81a3      	strh	r3, [r4, #12]
 80109e6:	e7ad      	b.n	8010944 <__sflush_r+0x1c>
 80109e8:	690f      	ldr	r7, [r1, #16]
 80109ea:	2f00      	cmp	r7, #0
 80109ec:	d0a9      	beq.n	8010942 <__sflush_r+0x1a>
 80109ee:	0793      	lsls	r3, r2, #30
 80109f0:	680e      	ldr	r6, [r1, #0]
 80109f2:	bf08      	it	eq
 80109f4:	694b      	ldreq	r3, [r1, #20]
 80109f6:	600f      	str	r7, [r1, #0]
 80109f8:	bf18      	it	ne
 80109fa:	2300      	movne	r3, #0
 80109fc:	eba6 0807 	sub.w	r8, r6, r7
 8010a00:	608b      	str	r3, [r1, #8]
 8010a02:	f1b8 0f00 	cmp.w	r8, #0
 8010a06:	dd9c      	ble.n	8010942 <__sflush_r+0x1a>
 8010a08:	6a21      	ldr	r1, [r4, #32]
 8010a0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010a0c:	4643      	mov	r3, r8
 8010a0e:	463a      	mov	r2, r7
 8010a10:	4628      	mov	r0, r5
 8010a12:	47b0      	blx	r6
 8010a14:	2800      	cmp	r0, #0
 8010a16:	dc06      	bgt.n	8010a26 <__sflush_r+0xfe>
 8010a18:	89a3      	ldrh	r3, [r4, #12]
 8010a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a1e:	81a3      	strh	r3, [r4, #12]
 8010a20:	f04f 30ff 	mov.w	r0, #4294967295
 8010a24:	e78e      	b.n	8010944 <__sflush_r+0x1c>
 8010a26:	4407      	add	r7, r0
 8010a28:	eba8 0800 	sub.w	r8, r8, r0
 8010a2c:	e7e9      	b.n	8010a02 <__sflush_r+0xda>
 8010a2e:	bf00      	nop
 8010a30:	20400001 	.word	0x20400001

08010a34 <_fflush_r>:
 8010a34:	b538      	push	{r3, r4, r5, lr}
 8010a36:	690b      	ldr	r3, [r1, #16]
 8010a38:	4605      	mov	r5, r0
 8010a3a:	460c      	mov	r4, r1
 8010a3c:	b913      	cbnz	r3, 8010a44 <_fflush_r+0x10>
 8010a3e:	2500      	movs	r5, #0
 8010a40:	4628      	mov	r0, r5
 8010a42:	bd38      	pop	{r3, r4, r5, pc}
 8010a44:	b118      	cbz	r0, 8010a4e <_fflush_r+0x1a>
 8010a46:	6983      	ldr	r3, [r0, #24]
 8010a48:	b90b      	cbnz	r3, 8010a4e <_fflush_r+0x1a>
 8010a4a:	f000 f887 	bl	8010b5c <__sinit>
 8010a4e:	4b14      	ldr	r3, [pc, #80]	; (8010aa0 <_fflush_r+0x6c>)
 8010a50:	429c      	cmp	r4, r3
 8010a52:	d11b      	bne.n	8010a8c <_fflush_r+0x58>
 8010a54:	686c      	ldr	r4, [r5, #4]
 8010a56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d0ef      	beq.n	8010a3e <_fflush_r+0xa>
 8010a5e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010a60:	07d0      	lsls	r0, r2, #31
 8010a62:	d404      	bmi.n	8010a6e <_fflush_r+0x3a>
 8010a64:	0599      	lsls	r1, r3, #22
 8010a66:	d402      	bmi.n	8010a6e <_fflush_r+0x3a>
 8010a68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a6a:	f000 f915 	bl	8010c98 <__retarget_lock_acquire_recursive>
 8010a6e:	4628      	mov	r0, r5
 8010a70:	4621      	mov	r1, r4
 8010a72:	f7ff ff59 	bl	8010928 <__sflush_r>
 8010a76:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a78:	07da      	lsls	r2, r3, #31
 8010a7a:	4605      	mov	r5, r0
 8010a7c:	d4e0      	bmi.n	8010a40 <_fflush_r+0xc>
 8010a7e:	89a3      	ldrh	r3, [r4, #12]
 8010a80:	059b      	lsls	r3, r3, #22
 8010a82:	d4dd      	bmi.n	8010a40 <_fflush_r+0xc>
 8010a84:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a86:	f000 f908 	bl	8010c9a <__retarget_lock_release_recursive>
 8010a8a:	e7d9      	b.n	8010a40 <_fflush_r+0xc>
 8010a8c:	4b05      	ldr	r3, [pc, #20]	; (8010aa4 <_fflush_r+0x70>)
 8010a8e:	429c      	cmp	r4, r3
 8010a90:	d101      	bne.n	8010a96 <_fflush_r+0x62>
 8010a92:	68ac      	ldr	r4, [r5, #8]
 8010a94:	e7df      	b.n	8010a56 <_fflush_r+0x22>
 8010a96:	4b04      	ldr	r3, [pc, #16]	; (8010aa8 <_fflush_r+0x74>)
 8010a98:	429c      	cmp	r4, r3
 8010a9a:	bf08      	it	eq
 8010a9c:	68ec      	ldreq	r4, [r5, #12]
 8010a9e:	e7da      	b.n	8010a56 <_fflush_r+0x22>
 8010aa0:	08012c24 	.word	0x08012c24
 8010aa4:	08012c44 	.word	0x08012c44
 8010aa8:	08012c04 	.word	0x08012c04

08010aac <std>:
 8010aac:	2300      	movs	r3, #0
 8010aae:	b510      	push	{r4, lr}
 8010ab0:	4604      	mov	r4, r0
 8010ab2:	e9c0 3300 	strd	r3, r3, [r0]
 8010ab6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010aba:	6083      	str	r3, [r0, #8]
 8010abc:	8181      	strh	r1, [r0, #12]
 8010abe:	6643      	str	r3, [r0, #100]	; 0x64
 8010ac0:	81c2      	strh	r2, [r0, #14]
 8010ac2:	6183      	str	r3, [r0, #24]
 8010ac4:	4619      	mov	r1, r3
 8010ac6:	2208      	movs	r2, #8
 8010ac8:	305c      	adds	r0, #92	; 0x5c
 8010aca:	f7fd fe01 	bl	800e6d0 <memset>
 8010ace:	4b05      	ldr	r3, [pc, #20]	; (8010ae4 <std+0x38>)
 8010ad0:	6263      	str	r3, [r4, #36]	; 0x24
 8010ad2:	4b05      	ldr	r3, [pc, #20]	; (8010ae8 <std+0x3c>)
 8010ad4:	62a3      	str	r3, [r4, #40]	; 0x28
 8010ad6:	4b05      	ldr	r3, [pc, #20]	; (8010aec <std+0x40>)
 8010ad8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010ada:	4b05      	ldr	r3, [pc, #20]	; (8010af0 <std+0x44>)
 8010adc:	6224      	str	r4, [r4, #32]
 8010ade:	6323      	str	r3, [r4, #48]	; 0x30
 8010ae0:	bd10      	pop	{r4, pc}
 8010ae2:	bf00      	nop
 8010ae4:	08010ded 	.word	0x08010ded
 8010ae8:	08010e0f 	.word	0x08010e0f
 8010aec:	08010e47 	.word	0x08010e47
 8010af0:	08010e6b 	.word	0x08010e6b

08010af4 <_cleanup_r>:
 8010af4:	4901      	ldr	r1, [pc, #4]	; (8010afc <_cleanup_r+0x8>)
 8010af6:	f000 b8af 	b.w	8010c58 <_fwalk_reent>
 8010afa:	bf00      	nop
 8010afc:	08010a35 	.word	0x08010a35

08010b00 <__sfmoreglue>:
 8010b00:	b570      	push	{r4, r5, r6, lr}
 8010b02:	1e4a      	subs	r2, r1, #1
 8010b04:	2568      	movs	r5, #104	; 0x68
 8010b06:	4355      	muls	r5, r2
 8010b08:	460e      	mov	r6, r1
 8010b0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010b0e:	f7ff fc23 	bl	8010358 <_malloc_r>
 8010b12:	4604      	mov	r4, r0
 8010b14:	b140      	cbz	r0, 8010b28 <__sfmoreglue+0x28>
 8010b16:	2100      	movs	r1, #0
 8010b18:	e9c0 1600 	strd	r1, r6, [r0]
 8010b1c:	300c      	adds	r0, #12
 8010b1e:	60a0      	str	r0, [r4, #8]
 8010b20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010b24:	f7fd fdd4 	bl	800e6d0 <memset>
 8010b28:	4620      	mov	r0, r4
 8010b2a:	bd70      	pop	{r4, r5, r6, pc}

08010b2c <__sfp_lock_acquire>:
 8010b2c:	4801      	ldr	r0, [pc, #4]	; (8010b34 <__sfp_lock_acquire+0x8>)
 8010b2e:	f000 b8b3 	b.w	8010c98 <__retarget_lock_acquire_recursive>
 8010b32:	bf00      	nop
 8010b34:	24000d34 	.word	0x24000d34

08010b38 <__sfp_lock_release>:
 8010b38:	4801      	ldr	r0, [pc, #4]	; (8010b40 <__sfp_lock_release+0x8>)
 8010b3a:	f000 b8ae 	b.w	8010c9a <__retarget_lock_release_recursive>
 8010b3e:	bf00      	nop
 8010b40:	24000d34 	.word	0x24000d34

08010b44 <__sinit_lock_acquire>:
 8010b44:	4801      	ldr	r0, [pc, #4]	; (8010b4c <__sinit_lock_acquire+0x8>)
 8010b46:	f000 b8a7 	b.w	8010c98 <__retarget_lock_acquire_recursive>
 8010b4a:	bf00      	nop
 8010b4c:	24000d2f 	.word	0x24000d2f

08010b50 <__sinit_lock_release>:
 8010b50:	4801      	ldr	r0, [pc, #4]	; (8010b58 <__sinit_lock_release+0x8>)
 8010b52:	f000 b8a2 	b.w	8010c9a <__retarget_lock_release_recursive>
 8010b56:	bf00      	nop
 8010b58:	24000d2f 	.word	0x24000d2f

08010b5c <__sinit>:
 8010b5c:	b510      	push	{r4, lr}
 8010b5e:	4604      	mov	r4, r0
 8010b60:	f7ff fff0 	bl	8010b44 <__sinit_lock_acquire>
 8010b64:	69a3      	ldr	r3, [r4, #24]
 8010b66:	b11b      	cbz	r3, 8010b70 <__sinit+0x14>
 8010b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b6c:	f7ff bff0 	b.w	8010b50 <__sinit_lock_release>
 8010b70:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010b74:	6523      	str	r3, [r4, #80]	; 0x50
 8010b76:	4b13      	ldr	r3, [pc, #76]	; (8010bc4 <__sinit+0x68>)
 8010b78:	4a13      	ldr	r2, [pc, #76]	; (8010bc8 <__sinit+0x6c>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	62a2      	str	r2, [r4, #40]	; 0x28
 8010b7e:	42a3      	cmp	r3, r4
 8010b80:	bf04      	itt	eq
 8010b82:	2301      	moveq	r3, #1
 8010b84:	61a3      	streq	r3, [r4, #24]
 8010b86:	4620      	mov	r0, r4
 8010b88:	f000 f820 	bl	8010bcc <__sfp>
 8010b8c:	6060      	str	r0, [r4, #4]
 8010b8e:	4620      	mov	r0, r4
 8010b90:	f000 f81c 	bl	8010bcc <__sfp>
 8010b94:	60a0      	str	r0, [r4, #8]
 8010b96:	4620      	mov	r0, r4
 8010b98:	f000 f818 	bl	8010bcc <__sfp>
 8010b9c:	2200      	movs	r2, #0
 8010b9e:	60e0      	str	r0, [r4, #12]
 8010ba0:	2104      	movs	r1, #4
 8010ba2:	6860      	ldr	r0, [r4, #4]
 8010ba4:	f7ff ff82 	bl	8010aac <std>
 8010ba8:	68a0      	ldr	r0, [r4, #8]
 8010baa:	2201      	movs	r2, #1
 8010bac:	2109      	movs	r1, #9
 8010bae:	f7ff ff7d 	bl	8010aac <std>
 8010bb2:	68e0      	ldr	r0, [r4, #12]
 8010bb4:	2202      	movs	r2, #2
 8010bb6:	2112      	movs	r1, #18
 8010bb8:	f7ff ff78 	bl	8010aac <std>
 8010bbc:	2301      	movs	r3, #1
 8010bbe:	61a3      	str	r3, [r4, #24]
 8010bc0:	e7d2      	b.n	8010b68 <__sinit+0xc>
 8010bc2:	bf00      	nop
 8010bc4:	08012880 	.word	0x08012880
 8010bc8:	08010af5 	.word	0x08010af5

08010bcc <__sfp>:
 8010bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bce:	4607      	mov	r7, r0
 8010bd0:	f7ff ffac 	bl	8010b2c <__sfp_lock_acquire>
 8010bd4:	4b1e      	ldr	r3, [pc, #120]	; (8010c50 <__sfp+0x84>)
 8010bd6:	681e      	ldr	r6, [r3, #0]
 8010bd8:	69b3      	ldr	r3, [r6, #24]
 8010bda:	b913      	cbnz	r3, 8010be2 <__sfp+0x16>
 8010bdc:	4630      	mov	r0, r6
 8010bde:	f7ff ffbd 	bl	8010b5c <__sinit>
 8010be2:	3648      	adds	r6, #72	; 0x48
 8010be4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010be8:	3b01      	subs	r3, #1
 8010bea:	d503      	bpl.n	8010bf4 <__sfp+0x28>
 8010bec:	6833      	ldr	r3, [r6, #0]
 8010bee:	b30b      	cbz	r3, 8010c34 <__sfp+0x68>
 8010bf0:	6836      	ldr	r6, [r6, #0]
 8010bf2:	e7f7      	b.n	8010be4 <__sfp+0x18>
 8010bf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010bf8:	b9d5      	cbnz	r5, 8010c30 <__sfp+0x64>
 8010bfa:	4b16      	ldr	r3, [pc, #88]	; (8010c54 <__sfp+0x88>)
 8010bfc:	60e3      	str	r3, [r4, #12]
 8010bfe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010c02:	6665      	str	r5, [r4, #100]	; 0x64
 8010c04:	f000 f847 	bl	8010c96 <__retarget_lock_init_recursive>
 8010c08:	f7ff ff96 	bl	8010b38 <__sfp_lock_release>
 8010c0c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010c10:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010c14:	6025      	str	r5, [r4, #0]
 8010c16:	61a5      	str	r5, [r4, #24]
 8010c18:	2208      	movs	r2, #8
 8010c1a:	4629      	mov	r1, r5
 8010c1c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010c20:	f7fd fd56 	bl	800e6d0 <memset>
 8010c24:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010c28:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010c2c:	4620      	mov	r0, r4
 8010c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c30:	3468      	adds	r4, #104	; 0x68
 8010c32:	e7d9      	b.n	8010be8 <__sfp+0x1c>
 8010c34:	2104      	movs	r1, #4
 8010c36:	4638      	mov	r0, r7
 8010c38:	f7ff ff62 	bl	8010b00 <__sfmoreglue>
 8010c3c:	4604      	mov	r4, r0
 8010c3e:	6030      	str	r0, [r6, #0]
 8010c40:	2800      	cmp	r0, #0
 8010c42:	d1d5      	bne.n	8010bf0 <__sfp+0x24>
 8010c44:	f7ff ff78 	bl	8010b38 <__sfp_lock_release>
 8010c48:	230c      	movs	r3, #12
 8010c4a:	603b      	str	r3, [r7, #0]
 8010c4c:	e7ee      	b.n	8010c2c <__sfp+0x60>
 8010c4e:	bf00      	nop
 8010c50:	08012880 	.word	0x08012880
 8010c54:	ffff0001 	.word	0xffff0001

08010c58 <_fwalk_reent>:
 8010c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c5c:	4606      	mov	r6, r0
 8010c5e:	4688      	mov	r8, r1
 8010c60:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010c64:	2700      	movs	r7, #0
 8010c66:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010c6a:	f1b9 0901 	subs.w	r9, r9, #1
 8010c6e:	d505      	bpl.n	8010c7c <_fwalk_reent+0x24>
 8010c70:	6824      	ldr	r4, [r4, #0]
 8010c72:	2c00      	cmp	r4, #0
 8010c74:	d1f7      	bne.n	8010c66 <_fwalk_reent+0xe>
 8010c76:	4638      	mov	r0, r7
 8010c78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c7c:	89ab      	ldrh	r3, [r5, #12]
 8010c7e:	2b01      	cmp	r3, #1
 8010c80:	d907      	bls.n	8010c92 <_fwalk_reent+0x3a>
 8010c82:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010c86:	3301      	adds	r3, #1
 8010c88:	d003      	beq.n	8010c92 <_fwalk_reent+0x3a>
 8010c8a:	4629      	mov	r1, r5
 8010c8c:	4630      	mov	r0, r6
 8010c8e:	47c0      	blx	r8
 8010c90:	4307      	orrs	r7, r0
 8010c92:	3568      	adds	r5, #104	; 0x68
 8010c94:	e7e9      	b.n	8010c6a <_fwalk_reent+0x12>

08010c96 <__retarget_lock_init_recursive>:
 8010c96:	4770      	bx	lr

08010c98 <__retarget_lock_acquire_recursive>:
 8010c98:	4770      	bx	lr

08010c9a <__retarget_lock_release_recursive>:
 8010c9a:	4770      	bx	lr

08010c9c <__swhatbuf_r>:
 8010c9c:	b570      	push	{r4, r5, r6, lr}
 8010c9e:	460e      	mov	r6, r1
 8010ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ca4:	2900      	cmp	r1, #0
 8010ca6:	b096      	sub	sp, #88	; 0x58
 8010ca8:	4614      	mov	r4, r2
 8010caa:	461d      	mov	r5, r3
 8010cac:	da07      	bge.n	8010cbe <__swhatbuf_r+0x22>
 8010cae:	2300      	movs	r3, #0
 8010cb0:	602b      	str	r3, [r5, #0]
 8010cb2:	89b3      	ldrh	r3, [r6, #12]
 8010cb4:	061a      	lsls	r2, r3, #24
 8010cb6:	d410      	bmi.n	8010cda <__swhatbuf_r+0x3e>
 8010cb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010cbc:	e00e      	b.n	8010cdc <__swhatbuf_r+0x40>
 8010cbe:	466a      	mov	r2, sp
 8010cc0:	f000 f8fa 	bl	8010eb8 <_fstat_r>
 8010cc4:	2800      	cmp	r0, #0
 8010cc6:	dbf2      	blt.n	8010cae <__swhatbuf_r+0x12>
 8010cc8:	9a01      	ldr	r2, [sp, #4]
 8010cca:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010cce:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010cd2:	425a      	negs	r2, r3
 8010cd4:	415a      	adcs	r2, r3
 8010cd6:	602a      	str	r2, [r5, #0]
 8010cd8:	e7ee      	b.n	8010cb8 <__swhatbuf_r+0x1c>
 8010cda:	2340      	movs	r3, #64	; 0x40
 8010cdc:	2000      	movs	r0, #0
 8010cde:	6023      	str	r3, [r4, #0]
 8010ce0:	b016      	add	sp, #88	; 0x58
 8010ce2:	bd70      	pop	{r4, r5, r6, pc}

08010ce4 <__smakebuf_r>:
 8010ce4:	898b      	ldrh	r3, [r1, #12]
 8010ce6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010ce8:	079d      	lsls	r5, r3, #30
 8010cea:	4606      	mov	r6, r0
 8010cec:	460c      	mov	r4, r1
 8010cee:	d507      	bpl.n	8010d00 <__smakebuf_r+0x1c>
 8010cf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010cf4:	6023      	str	r3, [r4, #0]
 8010cf6:	6123      	str	r3, [r4, #16]
 8010cf8:	2301      	movs	r3, #1
 8010cfa:	6163      	str	r3, [r4, #20]
 8010cfc:	b002      	add	sp, #8
 8010cfe:	bd70      	pop	{r4, r5, r6, pc}
 8010d00:	ab01      	add	r3, sp, #4
 8010d02:	466a      	mov	r2, sp
 8010d04:	f7ff ffca 	bl	8010c9c <__swhatbuf_r>
 8010d08:	9900      	ldr	r1, [sp, #0]
 8010d0a:	4605      	mov	r5, r0
 8010d0c:	4630      	mov	r0, r6
 8010d0e:	f7ff fb23 	bl	8010358 <_malloc_r>
 8010d12:	b948      	cbnz	r0, 8010d28 <__smakebuf_r+0x44>
 8010d14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010d18:	059a      	lsls	r2, r3, #22
 8010d1a:	d4ef      	bmi.n	8010cfc <__smakebuf_r+0x18>
 8010d1c:	f023 0303 	bic.w	r3, r3, #3
 8010d20:	f043 0302 	orr.w	r3, r3, #2
 8010d24:	81a3      	strh	r3, [r4, #12]
 8010d26:	e7e3      	b.n	8010cf0 <__smakebuf_r+0xc>
 8010d28:	4b0d      	ldr	r3, [pc, #52]	; (8010d60 <__smakebuf_r+0x7c>)
 8010d2a:	62b3      	str	r3, [r6, #40]	; 0x28
 8010d2c:	89a3      	ldrh	r3, [r4, #12]
 8010d2e:	6020      	str	r0, [r4, #0]
 8010d30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d34:	81a3      	strh	r3, [r4, #12]
 8010d36:	9b00      	ldr	r3, [sp, #0]
 8010d38:	6163      	str	r3, [r4, #20]
 8010d3a:	9b01      	ldr	r3, [sp, #4]
 8010d3c:	6120      	str	r0, [r4, #16]
 8010d3e:	b15b      	cbz	r3, 8010d58 <__smakebuf_r+0x74>
 8010d40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d44:	4630      	mov	r0, r6
 8010d46:	f000 f8c9 	bl	8010edc <_isatty_r>
 8010d4a:	b128      	cbz	r0, 8010d58 <__smakebuf_r+0x74>
 8010d4c:	89a3      	ldrh	r3, [r4, #12]
 8010d4e:	f023 0303 	bic.w	r3, r3, #3
 8010d52:	f043 0301 	orr.w	r3, r3, #1
 8010d56:	81a3      	strh	r3, [r4, #12]
 8010d58:	89a0      	ldrh	r0, [r4, #12]
 8010d5a:	4305      	orrs	r5, r0
 8010d5c:	81a5      	strh	r5, [r4, #12]
 8010d5e:	e7cd      	b.n	8010cfc <__smakebuf_r+0x18>
 8010d60:	08010af5 	.word	0x08010af5

08010d64 <_raise_r>:
 8010d64:	291f      	cmp	r1, #31
 8010d66:	b538      	push	{r3, r4, r5, lr}
 8010d68:	4604      	mov	r4, r0
 8010d6a:	460d      	mov	r5, r1
 8010d6c:	d904      	bls.n	8010d78 <_raise_r+0x14>
 8010d6e:	2316      	movs	r3, #22
 8010d70:	6003      	str	r3, [r0, #0]
 8010d72:	f04f 30ff 	mov.w	r0, #4294967295
 8010d76:	bd38      	pop	{r3, r4, r5, pc}
 8010d78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010d7a:	b112      	cbz	r2, 8010d82 <_raise_r+0x1e>
 8010d7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d80:	b94b      	cbnz	r3, 8010d96 <_raise_r+0x32>
 8010d82:	4620      	mov	r0, r4
 8010d84:	f000 f830 	bl	8010de8 <_getpid_r>
 8010d88:	462a      	mov	r2, r5
 8010d8a:	4601      	mov	r1, r0
 8010d8c:	4620      	mov	r0, r4
 8010d8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d92:	f000 b817 	b.w	8010dc4 <_kill_r>
 8010d96:	2b01      	cmp	r3, #1
 8010d98:	d00a      	beq.n	8010db0 <_raise_r+0x4c>
 8010d9a:	1c59      	adds	r1, r3, #1
 8010d9c:	d103      	bne.n	8010da6 <_raise_r+0x42>
 8010d9e:	2316      	movs	r3, #22
 8010da0:	6003      	str	r3, [r0, #0]
 8010da2:	2001      	movs	r0, #1
 8010da4:	e7e7      	b.n	8010d76 <_raise_r+0x12>
 8010da6:	2400      	movs	r4, #0
 8010da8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010dac:	4628      	mov	r0, r5
 8010dae:	4798      	blx	r3
 8010db0:	2000      	movs	r0, #0
 8010db2:	e7e0      	b.n	8010d76 <_raise_r+0x12>

08010db4 <raise>:
 8010db4:	4b02      	ldr	r3, [pc, #8]	; (8010dc0 <raise+0xc>)
 8010db6:	4601      	mov	r1, r0
 8010db8:	6818      	ldr	r0, [r3, #0]
 8010dba:	f7ff bfd3 	b.w	8010d64 <_raise_r>
 8010dbe:	bf00      	nop
 8010dc0:	24000028 	.word	0x24000028

08010dc4 <_kill_r>:
 8010dc4:	b538      	push	{r3, r4, r5, lr}
 8010dc6:	4d07      	ldr	r5, [pc, #28]	; (8010de4 <_kill_r+0x20>)
 8010dc8:	2300      	movs	r3, #0
 8010dca:	4604      	mov	r4, r0
 8010dcc:	4608      	mov	r0, r1
 8010dce:	4611      	mov	r1, r2
 8010dd0:	602b      	str	r3, [r5, #0]
 8010dd2:	f7f2 f949 	bl	8003068 <_kill>
 8010dd6:	1c43      	adds	r3, r0, #1
 8010dd8:	d102      	bne.n	8010de0 <_kill_r+0x1c>
 8010dda:	682b      	ldr	r3, [r5, #0]
 8010ddc:	b103      	cbz	r3, 8010de0 <_kill_r+0x1c>
 8010dde:	6023      	str	r3, [r4, #0]
 8010de0:	bd38      	pop	{r3, r4, r5, pc}
 8010de2:	bf00      	nop
 8010de4:	24000d28 	.word	0x24000d28

08010de8 <_getpid_r>:
 8010de8:	f7f2 b936 	b.w	8003058 <_getpid>

08010dec <__sread>:
 8010dec:	b510      	push	{r4, lr}
 8010dee:	460c      	mov	r4, r1
 8010df0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010df4:	f000 f894 	bl	8010f20 <_read_r>
 8010df8:	2800      	cmp	r0, #0
 8010dfa:	bfab      	itete	ge
 8010dfc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010dfe:	89a3      	ldrhlt	r3, [r4, #12]
 8010e00:	181b      	addge	r3, r3, r0
 8010e02:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010e06:	bfac      	ite	ge
 8010e08:	6563      	strge	r3, [r4, #84]	; 0x54
 8010e0a:	81a3      	strhlt	r3, [r4, #12]
 8010e0c:	bd10      	pop	{r4, pc}

08010e0e <__swrite>:
 8010e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010e12:	461f      	mov	r7, r3
 8010e14:	898b      	ldrh	r3, [r1, #12]
 8010e16:	05db      	lsls	r3, r3, #23
 8010e18:	4605      	mov	r5, r0
 8010e1a:	460c      	mov	r4, r1
 8010e1c:	4616      	mov	r6, r2
 8010e1e:	d505      	bpl.n	8010e2c <__swrite+0x1e>
 8010e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e24:	2302      	movs	r3, #2
 8010e26:	2200      	movs	r2, #0
 8010e28:	f000 f868 	bl	8010efc <_lseek_r>
 8010e2c:	89a3      	ldrh	r3, [r4, #12]
 8010e2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010e32:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010e36:	81a3      	strh	r3, [r4, #12]
 8010e38:	4632      	mov	r2, r6
 8010e3a:	463b      	mov	r3, r7
 8010e3c:	4628      	mov	r0, r5
 8010e3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010e42:	f000 b817 	b.w	8010e74 <_write_r>

08010e46 <__sseek>:
 8010e46:	b510      	push	{r4, lr}
 8010e48:	460c      	mov	r4, r1
 8010e4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e4e:	f000 f855 	bl	8010efc <_lseek_r>
 8010e52:	1c43      	adds	r3, r0, #1
 8010e54:	89a3      	ldrh	r3, [r4, #12]
 8010e56:	bf15      	itete	ne
 8010e58:	6560      	strne	r0, [r4, #84]	; 0x54
 8010e5a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010e5e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010e62:	81a3      	strheq	r3, [r4, #12]
 8010e64:	bf18      	it	ne
 8010e66:	81a3      	strhne	r3, [r4, #12]
 8010e68:	bd10      	pop	{r4, pc}

08010e6a <__sclose>:
 8010e6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e6e:	f000 b813 	b.w	8010e98 <_close_r>
	...

08010e74 <_write_r>:
 8010e74:	b538      	push	{r3, r4, r5, lr}
 8010e76:	4d07      	ldr	r5, [pc, #28]	; (8010e94 <_write_r+0x20>)
 8010e78:	4604      	mov	r4, r0
 8010e7a:	4608      	mov	r0, r1
 8010e7c:	4611      	mov	r1, r2
 8010e7e:	2200      	movs	r2, #0
 8010e80:	602a      	str	r2, [r5, #0]
 8010e82:	461a      	mov	r2, r3
 8010e84:	f7f2 f927 	bl	80030d6 <_write>
 8010e88:	1c43      	adds	r3, r0, #1
 8010e8a:	d102      	bne.n	8010e92 <_write_r+0x1e>
 8010e8c:	682b      	ldr	r3, [r5, #0]
 8010e8e:	b103      	cbz	r3, 8010e92 <_write_r+0x1e>
 8010e90:	6023      	str	r3, [r4, #0]
 8010e92:	bd38      	pop	{r3, r4, r5, pc}
 8010e94:	24000d28 	.word	0x24000d28

08010e98 <_close_r>:
 8010e98:	b538      	push	{r3, r4, r5, lr}
 8010e9a:	4d06      	ldr	r5, [pc, #24]	; (8010eb4 <_close_r+0x1c>)
 8010e9c:	2300      	movs	r3, #0
 8010e9e:	4604      	mov	r4, r0
 8010ea0:	4608      	mov	r0, r1
 8010ea2:	602b      	str	r3, [r5, #0]
 8010ea4:	f7f2 f933 	bl	800310e <_close>
 8010ea8:	1c43      	adds	r3, r0, #1
 8010eaa:	d102      	bne.n	8010eb2 <_close_r+0x1a>
 8010eac:	682b      	ldr	r3, [r5, #0]
 8010eae:	b103      	cbz	r3, 8010eb2 <_close_r+0x1a>
 8010eb0:	6023      	str	r3, [r4, #0]
 8010eb2:	bd38      	pop	{r3, r4, r5, pc}
 8010eb4:	24000d28 	.word	0x24000d28

08010eb8 <_fstat_r>:
 8010eb8:	b538      	push	{r3, r4, r5, lr}
 8010eba:	4d07      	ldr	r5, [pc, #28]	; (8010ed8 <_fstat_r+0x20>)
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	4604      	mov	r4, r0
 8010ec0:	4608      	mov	r0, r1
 8010ec2:	4611      	mov	r1, r2
 8010ec4:	602b      	str	r3, [r5, #0]
 8010ec6:	f7f2 f92e 	bl	8003126 <_fstat>
 8010eca:	1c43      	adds	r3, r0, #1
 8010ecc:	d102      	bne.n	8010ed4 <_fstat_r+0x1c>
 8010ece:	682b      	ldr	r3, [r5, #0]
 8010ed0:	b103      	cbz	r3, 8010ed4 <_fstat_r+0x1c>
 8010ed2:	6023      	str	r3, [r4, #0]
 8010ed4:	bd38      	pop	{r3, r4, r5, pc}
 8010ed6:	bf00      	nop
 8010ed8:	24000d28 	.word	0x24000d28

08010edc <_isatty_r>:
 8010edc:	b538      	push	{r3, r4, r5, lr}
 8010ede:	4d06      	ldr	r5, [pc, #24]	; (8010ef8 <_isatty_r+0x1c>)
 8010ee0:	2300      	movs	r3, #0
 8010ee2:	4604      	mov	r4, r0
 8010ee4:	4608      	mov	r0, r1
 8010ee6:	602b      	str	r3, [r5, #0]
 8010ee8:	f7f2 f92d 	bl	8003146 <_isatty>
 8010eec:	1c43      	adds	r3, r0, #1
 8010eee:	d102      	bne.n	8010ef6 <_isatty_r+0x1a>
 8010ef0:	682b      	ldr	r3, [r5, #0]
 8010ef2:	b103      	cbz	r3, 8010ef6 <_isatty_r+0x1a>
 8010ef4:	6023      	str	r3, [r4, #0]
 8010ef6:	bd38      	pop	{r3, r4, r5, pc}
 8010ef8:	24000d28 	.word	0x24000d28

08010efc <_lseek_r>:
 8010efc:	b538      	push	{r3, r4, r5, lr}
 8010efe:	4d07      	ldr	r5, [pc, #28]	; (8010f1c <_lseek_r+0x20>)
 8010f00:	4604      	mov	r4, r0
 8010f02:	4608      	mov	r0, r1
 8010f04:	4611      	mov	r1, r2
 8010f06:	2200      	movs	r2, #0
 8010f08:	602a      	str	r2, [r5, #0]
 8010f0a:	461a      	mov	r2, r3
 8010f0c:	f7f2 f926 	bl	800315c <_lseek>
 8010f10:	1c43      	adds	r3, r0, #1
 8010f12:	d102      	bne.n	8010f1a <_lseek_r+0x1e>
 8010f14:	682b      	ldr	r3, [r5, #0]
 8010f16:	b103      	cbz	r3, 8010f1a <_lseek_r+0x1e>
 8010f18:	6023      	str	r3, [r4, #0]
 8010f1a:	bd38      	pop	{r3, r4, r5, pc}
 8010f1c:	24000d28 	.word	0x24000d28

08010f20 <_read_r>:
 8010f20:	b538      	push	{r3, r4, r5, lr}
 8010f22:	4d07      	ldr	r5, [pc, #28]	; (8010f40 <_read_r+0x20>)
 8010f24:	4604      	mov	r4, r0
 8010f26:	4608      	mov	r0, r1
 8010f28:	4611      	mov	r1, r2
 8010f2a:	2200      	movs	r2, #0
 8010f2c:	602a      	str	r2, [r5, #0]
 8010f2e:	461a      	mov	r2, r3
 8010f30:	f7f2 f8b4 	bl	800309c <_read>
 8010f34:	1c43      	adds	r3, r0, #1
 8010f36:	d102      	bne.n	8010f3e <_read_r+0x1e>
 8010f38:	682b      	ldr	r3, [r5, #0]
 8010f3a:	b103      	cbz	r3, 8010f3e <_read_r+0x1e>
 8010f3c:	6023      	str	r3, [r4, #0]
 8010f3e:	bd38      	pop	{r3, r4, r5, pc}
 8010f40:	24000d28 	.word	0x24000d28

08010f44 <_init>:
 8010f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f46:	bf00      	nop
 8010f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f4a:	bc08      	pop	{r3}
 8010f4c:	469e      	mov	lr, r3
 8010f4e:	4770      	bx	lr

08010f50 <_fini>:
 8010f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f52:	bf00      	nop
 8010f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010f56:	bc08      	pop	{r3}
 8010f58:	469e      	mov	lr, r3
 8010f5a:	4770      	bx	lr
