
STM32H743ZI2_Module8-9.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d748  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800d9e8  0800d9e8  0001d9e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800de0c  0800de0c  0001de0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000008  0800de14  0800de14  0001de14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000008  0800de1c  0800de1c  0001de1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001e0  24000000  0800de24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000007a4  240001e0  0800e004  000201e0  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000984  0800e004  00020984  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002c622  00000000  00000000  0002020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000040a8  00000000  00000000  0004c830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b8  00000000  00000000  000508d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001390  00000000  00000000  00051d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00005018  00000000  00000000  00053120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c9f1  00000000  00000000  00058138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0016cdf4  00000000  00000000  00074b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000053  00000000  00000000  001e191d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000065bc  00000000  00000000  001e1970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d9d0 	.word	0x0800d9d0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0800d9d0 	.word	0x0800d9d0

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <_ZSt4fabsf>:
  using ::fabs;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  fabs(float __x)
  { return __builtin_fabsf(__x); }
 8000688:	b480      	push	{r7}
 800068a:	b083      	sub	sp, #12
 800068c:	af00      	add	r7, sp, #0
 800068e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000692:	edd7 7a01 	vldr	s15, [r7, #4]
 8000696:	eef0 7ae7 	vabs.f32	s15, s15
 800069a:	eeb0 0a67 	vmov.f32	s0, s15
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80006b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80006b6:	fef8 7a67 	vrinta.f32	s15, s15
 80006ba:	eeb0 0a67 	vmov.f32	s0, s15
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr

080006c8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>:
 *  Created on: 29 ม.ค. 2565
 *      Author: SakuranohanaTH
 */
#include "Stepper.h"

Stepper::Stepper(TIM_HandleTypeDef *_htim, uint32_t _TIMER_CHANNEL,
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	60f8      	str	r0, [r7, #12]
 80006d0:	60b9      	str	r1, [r7, #8]
 80006d2:	607a      	str	r2, [r7, #4]
 80006d4:	603b      	str	r3, [r7, #0]
		GPIO_TypeDef *_DIRPort, uint32_t _DIRPin) {
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	4a18      	ldr	r2, [pc, #96]	; (800073c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 80006da:	615a      	str	r2, [r3, #20]
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	4a18      	ldr	r2, [pc, #96]	; (8000740 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 80006e0:	619a      	str	r2, [r3, #24]
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80006e8:	61da      	str	r2, [r3, #28]
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	4a15      	ldr	r2, [pc, #84]	; (8000744 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x7c>)
 80006ee:	621a      	str	r2, [r3, #32]
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80006f6:	625a      	str	r2, [r3, #36]	; 0x24
	this->htim = _htim;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	601a      	str	r2, [r3, #0]
	this->TIM_CHANNEL = _TIMER_CHANNEL;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	687a      	ldr	r2, [r7, #4]
 8000702:	605a      	str	r2, [r3, #4]
	this->htim->Instance->PSC = _PSC - 1U;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	22c7      	movs	r2, #199	; 0xc7
 800070c:	629a      	str	r2, [r3, #40]	; 0x28
	this->minFrequency = 20.0f;
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	4a0a      	ldr	r2, [pc, #40]	; (800073c <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x74>)
 8000712:	615a      	str	r2, [r3, #20]
	this->maxFrequency = 20000.0f;
 8000714:	68fb      	ldr	r3, [r7, #12]
 8000716:	4a0a      	ldr	r2, [pc, #40]	; (8000740 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x78>)
 8000718:	619a      	str	r2, [r3, #24]
	this->StepperSetFrequency(0.0f);
 800071a:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8000748 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm+0x80>
 800071e:	68f8      	ldr	r0, [r7, #12]
 8000720:	f000 f830 	bl	8000784 <_ZN7Stepper19StepperSetFrequencyEf>
	this->DIRPort = _DIRPort;
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	683a      	ldr	r2, [r7, #0]
 8000728:	609a      	str	r2, [r3, #8]
	this->DIRPin = _DIRPin;
 800072a:	68fb      	ldr	r3, [r7, #12]
 800072c:	69ba      	ldr	r2, [r7, #24]
 800072e:	60da      	str	r2, [r3, #12]

}
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	4618      	mov	r0, r3
 8000734:	3710      	adds	r7, #16
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	41a00000 	.word	0x41a00000
 8000740:	469c4000 	.word	0x469c4000
 8000744:	43480000 	.word	0x43480000
 8000748:	00000000 	.word	0x00000000

0800074c <_ZN7StepperD1Ev>:
Stepper::~Stepper() {
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
}
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4618      	mov	r0, r3
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr

08000762 <_ZN7Stepper13StepperEnableEv>:
void Stepper::StepperEnable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
 8000762:	b580      	push	{r7, lr}
 8000764:	b082      	sub	sp, #8
 8000766:	af00      	add	r7, sp, #0
 8000768:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Start(this->htim, this->TIM_CHANNEL);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	4619      	mov	r1, r3
 8000774:	4610      	mov	r0, r2
 8000776:	f007 fe0b 	bl	8008390 <HAL_TIM_PWM_Start>
}
 800077a:	bf00      	nop
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <_ZN7Stepper19StepperSetFrequencyEf>:
void Stepper::StepperDisable(void) { // ENABLE PIN IS OFF AS DEFAULT!!!
	HAL_TIM_PWM_Stop(this->htim, this->TIM_CHANNEL);
}
void Stepper::StepperSetFrequency(float _frequency) {
 8000784:	b580      	push	{r7, lr}
 8000786:	ed2d 8b02 	vpush	{d8}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	ed87 0a00 	vstr	s0, [r7]
	this->frequency = _frequency;
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	683a      	ldr	r2, [r7, #0]
 8000798:	611a      	str	r2, [r3, #16]

	float f;
	if (fabs(this->frequency) <= this->minFrequency)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	edd3 7a04 	vldr	s15, [r3, #16]
 80007a0:	eeb0 0a67 	vmov.f32	s0, s15
 80007a4:	f7ff ff70 	bl	8000688 <_ZSt4fabsf>
 80007a8:	eeb0 7a40 	vmov.f32	s14, s0
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	edd3 7a05 	vldr	s15, [r3, #20]
 80007b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ba:	bf94      	ite	ls
 80007bc:	2301      	movls	r3, #1
 80007be:	2300      	movhi	r3, #0
 80007c0:	b2db      	uxtb	r3, r3
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d003      	beq.n	80007ce <_ZN7Stepper19StepperSetFrequencyEf+0x4a>
		f = this->minFrequency;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	695b      	ldr	r3, [r3, #20]
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	e01b      	b.n	8000806 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else if (fabs(this->frequency) >= this->maxFrequency)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	edd3 7a04 	vldr	s15, [r3, #16]
 80007d4:	eeb0 0a67 	vmov.f32	s0, s15
 80007d8:	f7ff ff56 	bl	8000688 <_ZSt4fabsf>
 80007dc:	eeb0 7a40 	vmov.f32	s14, s0
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	edd3 7a06 	vldr	s15, [r3, #24]
 80007e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ee:	bfac      	ite	ge
 80007f0:	2301      	movge	r3, #1
 80007f2:	2300      	movlt	r3, #0
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d003      	beq.n	8000802 <_ZN7Stepper19StepperSetFrequencyEf+0x7e>
		f = this->maxFrequency;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	60fb      	str	r3, [r7, #12]
 8000800:	e001      	b.n	8000806 <_ZN7Stepper19StepperSetFrequencyEf+0x82>
	else
		f = _frequency;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	60fb      	str	r3, [r7, #12]

	if (this->frequency > 0.001f && this->frequency != 0.0f) {
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	edd3 7a04 	vldr	s15, [r3, #16]
 800080c:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 8000acc <_ZN7Stepper19StepperSetFrequencyEf+0x348>
 8000810:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000814:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000818:	f340 80e4 	ble.w	80009e4 <_ZN7Stepper19StepperSetFrequencyEf+0x260>
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	edd3 7a04 	vldr	s15, [r3, #16]
 8000822:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800082a:	f000 80db 	beq.w	80009e4 <_ZN7Stepper19StepperSetFrequencyEf+0x260>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_SET);
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	6898      	ldr	r0, [r3, #8]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	68db      	ldr	r3, [r3, #12]
 8000836:	b29b      	uxth	r3, r3
 8000838:	2201      	movs	r2, #1
 800083a:	4619      	mov	r1, r3
 800083c:	f005 f82c 	bl	8005898 <HAL_GPIO_WritePin>
		this->htim->Instance->ARR = round(
				(_FCY / ((this->htim->Instance->PSC + 1U) * f)) - 1U);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000848:	3301      	adds	r3, #1
 800084a:	ee07 3a90 	vmov	s15, r3
 800084e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000852:	edd7 7a03 	vldr	s15, [r7, #12]
 8000856:	ee27 7a27 	vmul.f32	s14, s14, s15
 800085a:	eddf 6a9d 	vldr	s13, [pc, #628]	; 8000ad0 <_ZN7Stepper19StepperSetFrequencyEf+0x34c>
 800085e:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->htim->Instance->ARR = round(
 8000862:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000866:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800086a:	eeb0 0a67 	vmov.f32	s0, s15
 800086e:	f7ff ff1b 	bl	80006a8 <_ZSt5roundf>
 8000872:	eef0 7a40 	vmov.f32	s15, s0
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000880:	ee17 2a90 	vmov	r2, s15
 8000884:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->TIM_CHANNEL == TIM_CHANNEL_1) {
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d113      	bne.n	80008b6 <_ZN7Stepper19StepperSetFrequencyEf+0x132>
			this->htim->Instance->CCR1 = round(
					(this->htim->Instance->ARR + 1U ) / 2U );
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000896:	3301      	adds	r3, #1
			this->htim->Instance->CCR1 = round(
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	4618      	mov	r0, r3
 800089c:	f000 fa33 	bl	8000d06 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80008a0:	eeb0 7b40 	vmov.f64	d7, d0
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80008ae:	ee17 2a90 	vmov	r2, s15
 80008b2:	635a      	str	r2, [r3, #52]	; 0x34
		if (this->TIM_CHANNEL == TIM_CHANNEL_1) {
 80008b4:	e1e8      	b.n	8000c88 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->TIM_CHANNEL == TIM_CHANNEL_2) {
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	685b      	ldr	r3, [r3, #4]
 80008ba:	2b04      	cmp	r3, #4
 80008bc:	d113      	bne.n	80008e6 <_ZN7Stepper19StepperSetFrequencyEf+0x162>
			this->htim->Instance->CCR2 = round(
					(this->htim->Instance->ARR + 1U ) / 2U );
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008c6:	3301      	adds	r3, #1
			this->htim->Instance->CCR2 = round(
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	4618      	mov	r0, r3
 80008cc:	f000 fa1b 	bl	8000d06 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 80008d0:	eeb0 7b40 	vmov.f64	d7, d0
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80008de:	ee17 2a90 	vmov	r2, s15
 80008e2:	639a      	str	r2, [r3, #56]	; 0x38
		if (this->TIM_CHANNEL == TIM_CHANNEL_1) {
 80008e4:	e1d0      	b.n	8000c88 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->TIM_CHANNEL == TIM_CHANNEL_3) {
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	685b      	ldr	r3, [r3, #4]
 80008ea:	2b08      	cmp	r3, #8
 80008ec:	d113      	bne.n	8000916 <_ZN7Stepper19StepperSetFrequencyEf+0x192>
			this->htim->Instance->CCR3 = round(
					(this->htim->Instance->ARR + 1U ) / 2U );
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008f6:	3301      	adds	r3, #1
			this->htim->Instance->CCR3 = round(
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	4618      	mov	r0, r3
 80008fc:	f000 fa03 	bl	8000d06 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000900:	eeb0 7b40 	vmov.f64	d7, d0
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800090e:	ee17 2a90 	vmov	r2, s15
 8000912:	63da      	str	r2, [r3, #60]	; 0x3c
		if (this->TIM_CHANNEL == TIM_CHANNEL_1) {
 8000914:	e1b8      	b.n	8000c88 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->TIM_CHANNEL == TIM_CHANNEL_4) {
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	685b      	ldr	r3, [r3, #4]
 800091a:	2b0c      	cmp	r3, #12
 800091c:	d113      	bne.n	8000946 <_ZN7Stepper19StepperSetFrequencyEf+0x1c2>
			this->htim->Instance->CCR4 = round(
					(this->htim->Instance->ARR + 1U ) / 2U );
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000926:	3301      	adds	r3, #1
			this->htim->Instance->CCR4 = round(
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	4618      	mov	r0, r3
 800092c:	f000 f9eb 	bl	8000d06 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000930:	eeb0 7b40 	vmov.f64	d7, d0
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800093e:	ee17 2a90 	vmov	r2, s15
 8000942:	641a      	str	r2, [r3, #64]	; 0x40
		if (this->TIM_CHANNEL == TIM_CHANNEL_1) {
 8000944:	e1a0      	b.n	8000c88 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->TIM_CHANNEL == TIM_CHANNEL_5) {
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	685b      	ldr	r3, [r3, #4]
 800094a:	2b10      	cmp	r3, #16
 800094c:	d113      	bne.n	8000976 <_ZN7Stepper19StepperSetFrequencyEf+0x1f2>
			this->htim->Instance->CCR5 = round(
					(this->htim->Instance->ARR + 1U ) / 2U );
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000956:	3301      	adds	r3, #1
			this->htim->Instance->CCR5 = round(
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	4618      	mov	r0, r3
 800095c:	f000 f9d3 	bl	8000d06 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000960:	eeb0 7b40 	vmov.f64	d7, d0
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800096e:	ee17 2a90 	vmov	r2, s15
 8000972:	659a      	str	r2, [r3, #88]	; 0x58
		if (this->TIM_CHANNEL == TIM_CHANNEL_1) {
 8000974:	e188      	b.n	8000c88 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->TIM_CHANNEL == TIM_CHANNEL_6) {
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	2b14      	cmp	r3, #20
 800097c:	d113      	bne.n	80009a6 <_ZN7Stepper19StepperSetFrequencyEf+0x222>
			this->htim->Instance->CCR6 = round(
					(this->htim->Instance->ARR + 1U ) / 2U );
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000986:	3301      	adds	r3, #1
			this->htim->Instance->CCR6 = round(
 8000988:	085b      	lsrs	r3, r3, #1
 800098a:	4618      	mov	r0, r3
 800098c:	f000 f9bb 	bl	8000d06 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000990:	eeb0 7b40 	vmov.f64	d7, d0
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800099e:	ee17 2a90 	vmov	r2, s15
 80009a2:	65da      	str	r2, [r3, #92]	; 0x5c
		if (this->TIM_CHANNEL == TIM_CHANNEL_1) {
 80009a4:	e170      	b.n	8000c88 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else {
			this->htim->Instance->CCR1 = 0;
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	2200      	movs	r2, #0
 80009ae:	635a      	str	r2, [r3, #52]	; 0x34
			this->htim->Instance->CCR2 = 0;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2200      	movs	r2, #0
 80009b8:	639a      	str	r2, [r3, #56]	; 0x38
			this->htim->Instance->CCR3 = 0;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2200      	movs	r2, #0
 80009c2:	63da      	str	r2, [r3, #60]	; 0x3c
			this->htim->Instance->CCR4 = 0;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	2200      	movs	r2, #0
 80009cc:	641a      	str	r2, [r3, #64]	; 0x40
			this->htim->Instance->CCR5 = 0;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2200      	movs	r2, #0
 80009d6:	659a      	str	r2, [r3, #88]	; 0x58
			this->htim->Instance->CCR6 = 0;
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2200      	movs	r2, #0
 80009e0:	65da      	str	r2, [r3, #92]	; 0x5c
		if (this->TIM_CHANNEL == TIM_CHANNEL_1) {
 80009e2:	e151      	b.n	8000c88 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

	} else if (this->frequency < 0.001f  &&  this->frequency != 0.0f) {
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	edd3 7a04 	vldr	s15, [r3, #16]
 80009ea:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8000acc <_ZN7Stepper19StepperSetFrequencyEf+0x348>
 80009ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f6:	f140 80ec 	bpl.w	8000bd2 <_ZN7Stepper19StepperSetFrequencyEf+0x44e>
 80009fa:	687b      	ldr	r3, [r7, #4]
 80009fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8000a00:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a08:	f000 80e3 	beq.w	8000bd2 <_ZN7Stepper19StepperSetFrequencyEf+0x44e>
		HAL_GPIO_WritePin(this->DIRPort, this->DIRPin, GPIO_PIN_RESET);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	6898      	ldr	r0, [r3, #8]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	2200      	movs	r2, #0
 8000a18:	4619      	mov	r1, r3
 8000a1a:	f004 ff3d 	bl	8005898 <HAL_GPIO_WritePin>
		this->htim->Instance->ARR = round(
				(_FCY / ((this->htim->Instance->PSC + 1U) * fabs(f))) - 1U);
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a26:	3301      	adds	r3, #1
 8000a28:	ee07 3a90 	vmov	s15, r3
 8000a2c:	eeb8 8a67 	vcvt.f32.u32	s16, s15
 8000a30:	ed97 0a03 	vldr	s0, [r7, #12]
 8000a34:	f7ff fe28 	bl	8000688 <_ZSt4fabsf>
 8000a38:	eef0 7a40 	vmov.f32	s15, s0
 8000a3c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8000a40:	eddf 6a23 	vldr	s13, [pc, #140]	; 8000ad0 <_ZN7Stepper19StepperSetFrequencyEf+0x34c>
 8000a44:	eec6 7a87 	vdiv.f32	s15, s13, s14
		this->htim->Instance->ARR = round(
 8000a48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a50:	eeb0 0a67 	vmov.f32	s0, s15
 8000a54:	f7ff fe28 	bl	80006a8 <_ZSt5roundf>
 8000a58:	eef0 7a40 	vmov.f32	s15, s0
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a66:	ee17 2a90 	vmov	r2, s15
 8000a6a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (this->TIM_CHANNEL == TIM_CHANNEL_1) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	685b      	ldr	r3, [r3, #4]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d113      	bne.n	8000a9c <_ZN7Stepper19StepperSetFrequencyEf+0x318>
			this->htim->Instance->CCR1 = round(
					(this->htim->Instance->ARR + 1U ) / 2U );
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a7c:	3301      	adds	r3, #1
			this->htim->Instance->CCR1 = round(
 8000a7e:	085b      	lsrs	r3, r3, #1
 8000a80:	4618      	mov	r0, r3
 8000a82:	f000 f940 	bl	8000d06 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000a86:	eeb0 7b40 	vmov.f64	d7, d0
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000a94:	ee17 2a90 	vmov	r2, s15
 8000a98:	635a      	str	r2, [r3, #52]	; 0x34
		if (this->TIM_CHANNEL == TIM_CHANNEL_1) {
 8000a9a:	e0f5      	b.n	8000c88 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->TIM_CHANNEL == TIM_CHANNEL_2) {
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	2b04      	cmp	r3, #4
 8000aa2:	d117      	bne.n	8000ad4 <_ZN7Stepper19StepperSetFrequencyEf+0x350>
			this->htim->Instance->CCR2 = round(
					(this->htim->Instance->ARR + 1U ) / 2U );
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000aac:	3301      	adds	r3, #1
			this->htim->Instance->CCR2 = round(
 8000aae:	085b      	lsrs	r3, r3, #1
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 f928 	bl	8000d06 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000ab6:	eeb0 7b40 	vmov.f64	d7, d0
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000ac4:	ee17 2a90 	vmov	r2, s15
 8000ac8:	639a      	str	r2, [r3, #56]	; 0x38
		if (this->TIM_CHANNEL == TIM_CHANNEL_1) {
 8000aca:	e0dd      	b.n	8000c88 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
 8000acc:	3a83126f 	.word	0x3a83126f
 8000ad0:	4d64e1c0 	.word	0x4d64e1c0
		}

		else if (this->TIM_CHANNEL == TIM_CHANNEL_3) {
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	685b      	ldr	r3, [r3, #4]
 8000ad8:	2b08      	cmp	r3, #8
 8000ada:	d113      	bne.n	8000b04 <_ZN7Stepper19StepperSetFrequencyEf+0x380>
			this->htim->Instance->CCR3 = round(
					(this->htim->Instance->ARR + 1U ) / 2U );
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae4:	3301      	adds	r3, #1
			this->htim->Instance->CCR3 = round(
 8000ae6:	085b      	lsrs	r3, r3, #1
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 f90c 	bl	8000d06 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000aee:	eeb0 7b40 	vmov.f64	d7, d0
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000afc:	ee17 2a90 	vmov	r2, s15
 8000b00:	63da      	str	r2, [r3, #60]	; 0x3c
		if (this->TIM_CHANNEL == TIM_CHANNEL_1) {
 8000b02:	e0c1      	b.n	8000c88 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->TIM_CHANNEL == TIM_CHANNEL_4) {
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	2b0c      	cmp	r3, #12
 8000b0a:	d113      	bne.n	8000b34 <_ZN7Stepper19StepperSetFrequencyEf+0x3b0>
			this->htim->Instance->CCR4 = round(
					(this->htim->Instance->ARR + 1U ) / 2U );
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b14:	3301      	adds	r3, #1
			this->htim->Instance->CCR4 = round(
 8000b16:	085b      	lsrs	r3, r3, #1
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 f8f4 	bl	8000d06 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000b1e:	eeb0 7b40 	vmov.f64	d7, d0
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b2c:	ee17 2a90 	vmov	r2, s15
 8000b30:	641a      	str	r2, [r3, #64]	; 0x40
		if (this->TIM_CHANNEL == TIM_CHANNEL_1) {
 8000b32:	e0a9      	b.n	8000c88 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->TIM_CHANNEL == TIM_CHANNEL_5) {
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	2b10      	cmp	r3, #16
 8000b3a:	d113      	bne.n	8000b64 <_ZN7Stepper19StepperSetFrequencyEf+0x3e0>
			this->htim->Instance->CCR5 = round(
					(this->htim->Instance->ARR + 1U ) / 2U );
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b44:	3301      	adds	r3, #1
			this->htim->Instance->CCR5 = round(
 8000b46:	085b      	lsrs	r3, r3, #1
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f000 f8dc 	bl	8000d06 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000b4e:	eeb0 7b40 	vmov.f64	d7, d0
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b5c:	ee17 2a90 	vmov	r2, s15
 8000b60:	659a      	str	r2, [r3, #88]	; 0x58
		if (this->TIM_CHANNEL == TIM_CHANNEL_1) {
 8000b62:	e091      	b.n	8000c88 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else if (this->TIM_CHANNEL == TIM_CHANNEL_6) {
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	685b      	ldr	r3, [r3, #4]
 8000b68:	2b14      	cmp	r3, #20
 8000b6a:	d113      	bne.n	8000b94 <_ZN7Stepper19StepperSetFrequencyEf+0x410>
			this->htim->Instance->CCR6 = round(
					(this->htim->Instance->ARR + 1U ) / 2U );
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b74:	3301      	adds	r3, #1
			this->htim->Instance->CCR6 = round(
 8000b76:	085b      	lsrs	r3, r3, #1
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f000 f8c4 	bl	8000d06 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000b7e:	eeb0 7b40 	vmov.f64	d7, d0
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000b8c:	ee17 2a90 	vmov	r2, s15
 8000b90:	65da      	str	r2, [r3, #92]	; 0x5c
		if (this->TIM_CHANNEL == TIM_CHANNEL_1) {
 8000b92:	e079      	b.n	8000c88 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}

		else {
			this->htim->Instance->CCR1 = 0;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	635a      	str	r2, [r3, #52]	; 0x34
			this->htim->Instance->CCR2 = 0;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	639a      	str	r2, [r3, #56]	; 0x38
			this->htim->Instance->CCR3 = 0;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	2200      	movs	r2, #0
 8000bb0:	63da      	str	r2, [r3, #60]	; 0x3c
			this->htim->Instance->CCR4 = 0;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	641a      	str	r2, [r3, #64]	; 0x40
			this->htim->Instance->CCR5 = 0;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	659a      	str	r2, [r3, #88]	; 0x58
			this->htim->Instance->CCR6 = 0;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2200      	movs	r2, #0
 8000bce:	65da      	str	r2, [r3, #92]	; 0x5c
		if (this->TIM_CHANNEL == TIM_CHANNEL_1) {
 8000bd0:	e05a      	b.n	8000c88 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		}
	} else {
//		this->STEP.write(0.0f);
		if (this->TIM_CHANNEL == TIM_CHANNEL_1) {
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	685b      	ldr	r3, [r3, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d105      	bne.n	8000be6 <_ZN7Stepper19StepperSetFrequencyEf+0x462>
			this->htim->Instance->CCR1 = 0;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2200      	movs	r2, #0
 8000be2:	635a      	str	r2, [r3, #52]	; 0x34
			this->htim->Instance->CCR4 = 0;
			this->htim->Instance->CCR5 = 0;
			this->htim->Instance->CCR6 = 0;
		}
	}
}
 8000be4:	e050      	b.n	8000c88 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		else if (this->TIM_CHANNEL == TIM_CHANNEL_2) {
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	d105      	bne.n	8000bfa <_ZN7Stepper19StepperSetFrequencyEf+0x476>
			this->htim->Instance->CCR2 = 0;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000bf8:	e046      	b.n	8000c88 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		else if (this->TIM_CHANNEL == TIM_CHANNEL_3) {
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	2b08      	cmp	r3, #8
 8000c00:	d105      	bne.n	8000c0e <_ZN7Stepper19StepperSetFrequencyEf+0x48a>
			this->htim->Instance->CCR3 = 0;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000c0c:	e03c      	b.n	8000c88 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		else if (this->TIM_CHANNEL == TIM_CHANNEL_4) {
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	2b0c      	cmp	r3, #12
 8000c14:	d105      	bne.n	8000c22 <_ZN7Stepper19StepperSetFrequencyEf+0x49e>
			this->htim->Instance->CCR4 = 0;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000c20:	e032      	b.n	8000c88 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		else if (this->TIM_CHANNEL == TIM_CHANNEL_5) {
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	2b10      	cmp	r3, #16
 8000c28:	d105      	bne.n	8000c36 <_ZN7Stepper19StepperSetFrequencyEf+0x4b2>
			this->htim->Instance->CCR5 = 0;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	2200      	movs	r2, #0
 8000c32:	659a      	str	r2, [r3, #88]	; 0x58
}
 8000c34:	e028      	b.n	8000c88 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
		else if (this->TIM_CHANNEL == TIM_CHANNEL_6) {
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	2b14      	cmp	r3, #20
 8000c3c:	d105      	bne.n	8000c4a <_ZN7Stepper19StepperSetFrequencyEf+0x4c6>
			this->htim->Instance->CCR6 = 0;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2200      	movs	r2, #0
 8000c46:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000c48:	e01e      	b.n	8000c88 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
			this->htim->Instance->CCR1 = 0;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2200      	movs	r2, #0
 8000c52:	635a      	str	r2, [r3, #52]	; 0x34
			this->htim->Instance->CCR2 = 0;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	639a      	str	r2, [r3, #56]	; 0x38
			this->htim->Instance->CCR3 = 0;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	2200      	movs	r2, #0
 8000c66:	63da      	str	r2, [r3, #60]	; 0x3c
			this->htim->Instance->CCR4 = 0;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	641a      	str	r2, [r3, #64]	; 0x40
			this->htim->Instance->CCR5 = 0;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2200      	movs	r2, #0
 8000c7a:	659a      	str	r2, [r3, #88]	; 0x58
			this->htim->Instance->CCR6 = 0;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	2200      	movs	r2, #0
 8000c84:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000c86:	e7ff      	b.n	8000c88 <_ZN7Stepper19StepperSetFrequencyEf+0x504>
 8000c88:	bf00      	nop
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	ecbd 8b02 	vpop	{d8}
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <_ZN7Stepper15StepperSetRatioEf>:
void Stepper::StepperSetMaxFrequency(float _maxFrequency) {
	this->maxFrequency = fabs((float) _maxFrequency);
}
void Stepper::StepperSetRatio(float _ratio) {
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	ed87 0a00 	vstr	s0, [r7]
	this->ratio = fabs(_ratio);
 8000ca0:	ed97 0a00 	vldr	s0, [r7]
 8000ca4:	f7ff fcf0 	bl	8000688 <_ZSt4fabsf>
 8000ca8:	eef0 7a40 	vmov.f32	s15, s0
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    fabs(_Tp __x)
 8000cba:	b480      	push	{r7}
 8000cbc:	b083      	sub	sp, #12
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	71fb      	strb	r3, [r7, #7]
    { return __builtin_fabs(__x); }
 8000cc4:	79fb      	ldrb	r3, [r7, #7]
 8000cc6:	ee07 3a90 	vmov	s15, r3
 8000cca:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000cce:	eeb0 0b47 	vmov.f64	d0, d7
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <_ZN7Stepper19StepperSetMicrostepEh>:
void Stepper::StepperSetMicrostep(uint8_t _microstep) {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	70fb      	strb	r3, [r7, #3]
	this->microStep = fabs(_microstep);
 8000ce8:	78fb      	ldrb	r3, [r7, #3]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff ffe5 	bl	8000cba <_ZSt4fabsIhEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8000cf0:	eeb0 7b40 	vmov.f64	d7, d0
 8000cf4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	edc3 7a07 	vstr	s15, [r3, #28]
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <_ZSt5roundImEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
  template<typename _Tp>
    constexpr typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                              double>::__type
    round(_Tp __x)
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
    { return __builtin_round(__x); }
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	ee07 3a90 	vmov	s15, r3
 8000d14:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000d18:	eeb0 0b47 	vmov.f64	d0, d7
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d2c:	f001 ff48 	bl	8002bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d30:	f000 f87c 	bl	8000e2c <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d34:	f000 fed2 	bl	8001adc <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000d38:	f000 fe90 	bl	8001a5c <_ZL11MX_DMA_Initv>
  MX_USART3_UART_Init();
 8000d3c:	f000 fe2c 	bl	8001998 <_ZL19MX_USART3_UART_Initv>
  MX_TIM2_Init();
 8000d40:	f000 fa4c 	bl	80011dc <_ZL12MX_TIM2_Initv>
  MX_UART4_Init();
 8000d44:	f000 fd62 	bl	800180c <_ZL13MX_UART4_Initv>
  MX_TIM4_Init();
 8000d48:	f000 fb6a 	bl	8001420 <_ZL12MX_TIM4_Initv>
  MX_SPI3_Init();
 8000d4c:	f000 f920 	bl	8000f90 <_ZL12MX_SPI3_Initv>
  MX_TIM1_Init();
 8000d50:	f000 f978 	bl	8001044 <_ZL12MX_TIM1_Initv>
  MX_TIM3_Init();
 8000d54:	f000 fad2 	bl	80012fc <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 8000d58:	f000 fbf4 	bl	8001544 <_ZL12MX_TIM5_Initv>
  MX_TIM15_Init();
 8000d5c:	f000 fc94 	bl	8001688 <_ZL13MX_TIM15_Initv>
  MX_TIM12_Init();
 8000d60:	f000 fc4e 	bl	8001600 <_ZL13MX_TIM12_Initv>
  MX_CRC_Init();
 8000d64:	f000 f8ec 	bl	8000f40 <_ZL11MX_CRC_Initv>
  MX_UART7_Init();
 8000d68:	f000 fdb4 	bl	80018d4 <_ZL13MX_UART7_Initv>
  /* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	2101      	movs	r1, #1
 8000d70:	4827      	ldr	r0, [pc, #156]	; (8000e10 <main+0xe8>)
 8000d72:	f004 fd91 	bl	8005898 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2102      	movs	r1, #2
 8000d7a:	4826      	ldr	r0, [pc, #152]	; (8000e14 <main+0xec>)
 8000d7c:	f004 fd8c 	bl	8005898 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d86:	4822      	ldr	r0, [pc, #136]	; (8000e10 <main+0xe8>)
 8000d88:	f004 fd86 	bl	8005898 <HAL_GPIO_WritePin>

	#ifdef __cplusplus
//	stepperJ1.StepperSetFrequency(0);
	stepperJ1.StepperSetMicrostep(8);
 8000d8c:	2108      	movs	r1, #8
 8000d8e:	4822      	ldr	r0, [pc, #136]	; (8000e18 <main+0xf0>)
 8000d90:	f7ff ffa4 	bl	8000cdc <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ1.StepperSetRatio(1);
 8000d94:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000d98:	481f      	ldr	r0, [pc, #124]	; (8000e18 <main+0xf0>)
 8000d9a:	f7ff ff7b 	bl	8000c94 <_ZN7Stepper15StepperSetRatioEf>
//	stepperJ1.StepperOpenLoopSpeed(0.0f);
	stepperJ1.StepperEnable();
 8000d9e:	481e      	ldr	r0, [pc, #120]	; (8000e18 <main+0xf0>)
 8000da0:	f7ff fcdf 	bl	8000762 <_ZN7Stepper13StepperEnableEv>

//	stepperJ2.StepperSetFrequency(20.0f);
	stepperJ2.StepperSetMicrostep(8);
 8000da4:	2108      	movs	r1, #8
 8000da6:	481d      	ldr	r0, [pc, #116]	; (8000e1c <main+0xf4>)
 8000da8:	f7ff ff98 	bl	8000cdc <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ2.StepperSetRatio(1);
 8000dac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000db0:	481a      	ldr	r0, [pc, #104]	; (8000e1c <main+0xf4>)
 8000db2:	f7ff ff6f 	bl	8000c94 <_ZN7Stepper15StepperSetRatioEf>
//	stepperJ2.StepperOpenLoopSpeed(-3.14f);
	stepperJ2.StepperEnable();
 8000db6:	4819      	ldr	r0, [pc, #100]	; (8000e1c <main+0xf4>)
 8000db8:	f7ff fcd3 	bl	8000762 <_ZN7Stepper13StepperEnableEv>

//	stepperJ3.StepperSetFrequency(2000.0f);
	stepperJ3.StepperSetMicrostep(8);
 8000dbc:	2108      	movs	r1, #8
 8000dbe:	4818      	ldr	r0, [pc, #96]	; (8000e20 <main+0xf8>)
 8000dc0:	f7ff ff8c 	bl	8000cdc <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ3.StepperSetRatio(1);
 8000dc4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000dc8:	4815      	ldr	r0, [pc, #84]	; (8000e20 <main+0xf8>)
 8000dca:	f7ff ff63 	bl	8000c94 <_ZN7Stepper15StepperSetRatioEf>
//	stepperJ3.StepperOpenLoopSpeed(0.07853981635f);
	stepperJ3.StepperEnable();
 8000dce:	4814      	ldr	r0, [pc, #80]	; (8000e20 <main+0xf8>)
 8000dd0:	f7ff fcc7 	bl	8000762 <_ZN7Stepper13StepperEnableEv>

//	stepperJ4.StepperSetFrequency(20000.0f);
	stepperJ4.StepperSetMicrostep(8);
 8000dd4:	2108      	movs	r1, #8
 8000dd6:	4813      	ldr	r0, [pc, #76]	; (8000e24 <main+0xfc>)
 8000dd8:	f7ff ff80 	bl	8000cdc <_ZN7Stepper19StepperSetMicrostepEh>
	stepperJ4.StepperSetRatio(1);
 8000ddc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000de0:	4810      	ldr	r0, [pc, #64]	; (8000e24 <main+0xfc>)
 8000de2:	f7ff ff57 	bl	8000c94 <_ZN7Stepper15StepperSetRatioEf>
//	stepperJ4.StepperOpenLoopSpeed(-80.00f);
	stepperJ4.StepperEnable();
 8000de6:	480f      	ldr	r0, [pc, #60]	; (8000e24 <main+0xfc>)
 8000de8:	f7ff fcbb 	bl	8000762 <_ZN7Stepper13StepperEnableEv>
	#endif

	__HAL_UART_ENABLE_IT(&huart3, UART_IT_RXNE);
 8000dec:	4b0e      	ldr	r3, [pc, #56]	; (8000e28 <main+0x100>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <main+0x100>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f042 0220 	orr.w	r2, r2, #32
 8000dfa:	601a      	str	r2, [r3, #0]
	__HAL_UART_ENABLE_IT(&huart3, UART_IT_TC);
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <main+0x100>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <main+0x100>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e0a:	601a      	str	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000e0c:	e7fe      	b.n	8000e0c <main+0xe4>
 8000e0e:	bf00      	nop
 8000e10:	58020400 	.word	0x58020400
 8000e14:	58021000 	.word	0x58021000
 8000e18:	240008c4 	.word	0x240008c4
 8000e1c:	240008ec 	.word	0x240008ec
 8000e20:	24000914 	.word	0x24000914
 8000e24:	2400093c 	.word	0x2400093c
 8000e28:	240005dc 	.word	0x240005dc

08000e2c <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b09c      	sub	sp, #112	; 0x70
 8000e30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e36:	224c      	movs	r2, #76	; 0x4c
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f00a f980 	bl	800b140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2220      	movs	r2, #32
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f00a f97a 	bl	800b140 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f004 fd71 	bl	8005934 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e52:	2300      	movs	r3, #0
 8000e54:	603b      	str	r3, [r7, #0]
 8000e56:	4b38      	ldr	r3, [pc, #224]	; (8000f38 <_Z18SystemClock_Configv+0x10c>)
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	4a37      	ldr	r2, [pc, #220]	; (8000f38 <_Z18SystemClock_Configv+0x10c>)
 8000e5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e60:	6193      	str	r3, [r2, #24]
 8000e62:	4b35      	ldr	r3, [pc, #212]	; (8000f38 <_Z18SystemClock_Configv+0x10c>)
 8000e64:	699b      	ldr	r3, [r3, #24]
 8000e66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	4b33      	ldr	r3, [pc, #204]	; (8000f3c <_Z18SystemClock_Configv+0x110>)
 8000e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e70:	4a32      	ldr	r2, [pc, #200]	; (8000f3c <_Z18SystemClock_Configv+0x110>)
 8000e72:	f043 0301 	orr.w	r3, r3, #1
 8000e76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e78:	4b30      	ldr	r3, [pc, #192]	; (8000f3c <_Z18SystemClock_Configv+0x110>)
 8000e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e84:	4b2c      	ldr	r3, [pc, #176]	; (8000f38 <_Z18SystemClock_Configv+0x10c>)
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e90:	bf14      	ite	ne
 8000e92:	2301      	movne	r3, #1
 8000e94:	2300      	moveq	r3, #0
 8000e96:	b2db      	uxtb	r3, r3
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d000      	beq.n	8000e9e <_Z18SystemClock_Configv+0x72>
 8000e9c:	e7f2      	b.n	8000e84 <_Z18SystemClock_Configv+0x58>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ea6:	2340      	movs	r3, #64	; 0x40
 8000ea8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eaa:	2302      	movs	r3, #2
 8000eac:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000eb6:	233c      	movs	r3, #60	; 0x3c
 8000eb8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 6;
 8000ebe:	2306      	movs	r3, #6
 8000ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ec6:	230c      	movs	r3, #12
 8000ec8:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ed2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f004 fd66 	bl	80059a8 <HAL_RCC_OscConfig>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	bf14      	ite	ne
 8000ee2:	2301      	movne	r3, #1
 8000ee4:	2300      	moveq	r3, #0
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <_Z18SystemClock_Configv+0xc4>
  {
    Error_Handler();
 8000eec:	f000 ff4c 	bl	8001d88 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ef0:	233f      	movs	r3, #63	; 0x3f
 8000ef2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000efc:	2308      	movs	r3, #8
 8000efe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000f00:	2340      	movs	r3, #64	; 0x40
 8000f02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000f04:	2340      	movs	r3, #64	; 0x40
 8000f06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f0c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000f0e:	2340      	movs	r3, #64	; 0x40
 8000f10:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2104      	movs	r1, #4
 8000f16:	4618      	mov	r0, r3
 8000f18:	f005 f972 	bl	8006200 <HAL_RCC_ClockConfig>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	bf14      	ite	ne
 8000f22:	2301      	movne	r3, #1
 8000f24:	2300      	moveq	r3, #0
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <_Z18SystemClock_Configv+0x104>
  {
    Error_Handler();
 8000f2c:	f000 ff2c 	bl	8001d88 <Error_Handler>
  }
}
 8000f30:	bf00      	nop
 8000f32:	3770      	adds	r7, #112	; 0x70
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	58024800 	.word	0x58024800
 8000f3c:	58000400 	.word	0x58000400

08000f40 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000f44:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <_ZL11MX_CRC_Initv+0x48>)
 8000f46:	4a11      	ldr	r2, [pc, #68]	; (8000f8c <_ZL11MX_CRC_Initv+0x4c>)
 8000f48:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	; (8000f88 <_ZL11MX_CRC_Initv+0x48>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000f50:	4b0d      	ldr	r3, [pc, #52]	; (8000f88 <_ZL11MX_CRC_Initv+0x48>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <_ZL11MX_CRC_Initv+0x48>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	; (8000f88 <_ZL11MX_CRC_Initv+0x48>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f62:	4b09      	ldr	r3, [pc, #36]	; (8000f88 <_ZL11MX_CRC_Initv+0x48>)
 8000f64:	2201      	movs	r2, #1
 8000f66:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f68:	4807      	ldr	r0, [pc, #28]	; (8000f88 <_ZL11MX_CRC_Initv+0x48>)
 8000f6a:	f001 ffd7 	bl	8002f1c <HAL_CRC_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	bf14      	ite	ne
 8000f74:	2301      	movne	r3, #1
 8000f76:	2300      	moveq	r3, #0
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 8000f7e:	f000 ff03 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	240001fc 	.word	0x240001fc
 8000f8c:	58024c00 	.word	0x58024c00

08000f90 <_ZL12MX_SPI3_Initv>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000f94:	4b29      	ldr	r3, [pc, #164]	; (800103c <_ZL12MX_SPI3_Initv+0xac>)
 8000f96:	4a2a      	ldr	r2, [pc, #168]	; (8001040 <_ZL12MX_SPI3_Initv+0xb0>)
 8000f98:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f9a:	4b28      	ldr	r3, [pc, #160]	; (800103c <_ZL12MX_SPI3_Initv+0xac>)
 8000f9c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000fa0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000fa2:	4b26      	ldr	r3, [pc, #152]	; (800103c <_ZL12MX_SPI3_Initv+0xac>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fa8:	4b24      	ldr	r3, [pc, #144]	; (800103c <_ZL12MX_SPI3_Initv+0xac>)
 8000faa:	2203      	movs	r2, #3
 8000fac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fae:	4b23      	ldr	r3, [pc, #140]	; (800103c <_ZL12MX_SPI3_Initv+0xac>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb4:	4b21      	ldr	r3, [pc, #132]	; (800103c <_ZL12MX_SPI3_Initv+0xac>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000fba:	4b20      	ldr	r3, [pc, #128]	; (800103c <_ZL12MX_SPI3_Initv+0xac>)
 8000fbc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000fc0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fc2:	4b1e      	ldr	r3, [pc, #120]	; (800103c <_ZL12MX_SPI3_Initv+0xac>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc8:	4b1c      	ldr	r3, [pc, #112]	; (800103c <_ZL12MX_SPI3_Initv+0xac>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fce:	4b1b      	ldr	r3, [pc, #108]	; (800103c <_ZL12MX_SPI3_Initv+0xac>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd4:	4b19      	ldr	r3, [pc, #100]	; (800103c <_ZL12MX_SPI3_Initv+0xac>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000fda:	4b18      	ldr	r3, [pc, #96]	; (800103c <_ZL12MX_SPI3_Initv+0xac>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fe0:	4b16      	ldr	r3, [pc, #88]	; (800103c <_ZL12MX_SPI3_Initv+0xac>)
 8000fe2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000fe6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <_ZL12MX_SPI3_Initv+0xac>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fee:	4b13      	ldr	r3, [pc, #76]	; (800103c <_ZL12MX_SPI3_Initv+0xac>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <_ZL12MX_SPI3_Initv+0xac>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <_ZL12MX_SPI3_Initv+0xac>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001000:	4b0e      	ldr	r3, [pc, #56]	; (800103c <_ZL12MX_SPI3_Initv+0xac>)
 8001002:	2200      	movs	r2, #0
 8001004:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001006:	4b0d      	ldr	r3, [pc, #52]	; (800103c <_ZL12MX_SPI3_Initv+0xac>)
 8001008:	2200      	movs	r2, #0
 800100a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <_ZL12MX_SPI3_Initv+0xac>)
 800100e:	2200      	movs	r2, #0
 8001010:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001012:	4b0a      	ldr	r3, [pc, #40]	; (800103c <_ZL12MX_SPI3_Initv+0xac>)
 8001014:	2200      	movs	r2, #0
 8001016:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <_ZL12MX_SPI3_Initv+0xac>)
 800101a:	2200      	movs	r2, #0
 800101c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800101e:	4807      	ldr	r0, [pc, #28]	; (800103c <_ZL12MX_SPI3_Initv+0xac>)
 8001020:	f006 ffdc 	bl	8007fdc <HAL_SPI_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	bf14      	ite	ne
 800102a:	2301      	movne	r3, #1
 800102c:	2300      	moveq	r3, #0
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <_ZL12MX_SPI3_Initv+0xa8>
  {
    Error_Handler();
 8001034:	f000 fea8 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001038:	bf00      	nop
 800103a:	bd80      	pop	{r7, pc}
 800103c:	24000220 	.word	0x24000220
 8001040:	40003c00 	.word	0x40003c00

08001044 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b09a      	sub	sp, #104	; 0x68
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001058:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001064:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
 8001074:	615a      	str	r2, [r3, #20]
 8001076:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001078:	1d3b      	adds	r3, r7, #4
 800107a:	222c      	movs	r2, #44	; 0x2c
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f00a f85e 	bl	800b140 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001084:	4b53      	ldr	r3, [pc, #332]	; (80011d4 <_ZL12MX_TIM1_Initv+0x190>)
 8001086:	4a54      	ldr	r2, [pc, #336]	; (80011d8 <_ZL12MX_TIM1_Initv+0x194>)
 8001088:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200-1;
 800108a:	4b52      	ldr	r3, [pc, #328]	; (80011d4 <_ZL12MX_TIM1_Initv+0x190>)
 800108c:	22c7      	movs	r2, #199	; 0xc7
 800108e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001090:	4b50      	ldr	r3, [pc, #320]	; (80011d4 <_ZL12MX_TIM1_Initv+0x190>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 60000-1;
 8001096:	4b4f      	ldr	r3, [pc, #316]	; (80011d4 <_ZL12MX_TIM1_Initv+0x190>)
 8001098:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800109c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109e:	4b4d      	ldr	r3, [pc, #308]	; (80011d4 <_ZL12MX_TIM1_Initv+0x190>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010a4:	4b4b      	ldr	r3, [pc, #300]	; (80011d4 <_ZL12MX_TIM1_Initv+0x190>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010aa:	4b4a      	ldr	r3, [pc, #296]	; (80011d4 <_ZL12MX_TIM1_Initv+0x190>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010b0:	4848      	ldr	r0, [pc, #288]	; (80011d4 <_ZL12MX_TIM1_Initv+0x190>)
 80010b2:	f007 f8b4 	bl	800821e <HAL_TIM_Base_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	bf14      	ite	ne
 80010bc:	2301      	movne	r3, #1
 80010be:	2300      	moveq	r3, #0
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <_ZL12MX_TIM1_Initv+0x86>
  {
    Error_Handler();
 80010c6:	f000 fe5f 	bl	8001d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010ce:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010d0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80010d4:	4619      	mov	r1, r3
 80010d6:	483f      	ldr	r0, [pc, #252]	; (80011d4 <_ZL12MX_TIM1_Initv+0x190>)
 80010d8:	f007 fc9c 	bl	8008a14 <HAL_TIM_ConfigClockSource>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	bf14      	ite	ne
 80010e2:	2301      	movne	r3, #1
 80010e4:	2300      	moveq	r3, #0
 80010e6:	b2db      	uxtb	r3, r3
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 80010ec:	f000 fe4c 	bl	8001d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010f0:	4838      	ldr	r0, [pc, #224]	; (80011d4 <_ZL12MX_TIM1_Initv+0x190>)
 80010f2:	f007 f8eb 	bl	80082cc <HAL_TIM_PWM_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	bf14      	ite	ne
 80010fc:	2301      	movne	r3, #1
 80010fe:	2300      	moveq	r3, #0
 8001100:	b2db      	uxtb	r3, r3
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 8001106:	f000 fe3f 	bl	8001d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110a:	2300      	movs	r3, #0
 800110c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800110e:	2300      	movs	r3, #0
 8001110:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001116:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800111a:	4619      	mov	r1, r3
 800111c:	482d      	ldr	r0, [pc, #180]	; (80011d4 <_ZL12MX_TIM1_Initv+0x190>)
 800111e:	f008 f9cd 	bl	80094bc <HAL_TIMEx_MasterConfigSynchronization>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	bf14      	ite	ne
 8001128:	2301      	movne	r3, #1
 800112a:	2300      	moveq	r3, #0
 800112c:	b2db      	uxtb	r3, r3
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <_ZL12MX_TIM1_Initv+0xf2>
  {
    Error_Handler();
 8001132:	f000 fe29 	bl	8001d88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001136:	2360      	movs	r3, #96	; 0x60
 8001138:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800113a:	f240 1339 	movw	r3, #313	; 0x139
 800113e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001140:	2300      	movs	r3, #0
 8001142:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001144:	2300      	movs	r3, #0
 8001146:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001148:	2300      	movs	r3, #0
 800114a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800114c:	2300      	movs	r3, #0
 800114e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001150:	2300      	movs	r3, #0
 8001152:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001154:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001158:	2204      	movs	r2, #4
 800115a:	4619      	mov	r1, r3
 800115c:	481d      	ldr	r0, [pc, #116]	; (80011d4 <_ZL12MX_TIM1_Initv+0x190>)
 800115e:	f007 fb45 	bl	80087ec <HAL_TIM_PWM_ConfigChannel>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	bf14      	ite	ne
 8001168:	2301      	movne	r3, #1
 800116a:	2300      	moveq	r3, #0
 800116c:	b2db      	uxtb	r3, r3
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <_ZL12MX_TIM1_Initv+0x132>
  {
    Error_Handler();
 8001172:	f000 fe09 	bl	8001d88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800117a:	2300      	movs	r3, #0
 800117c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800117e:	2300      	movs	r3, #0
 8001180:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800118a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800118e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001194:	2300      	movs	r3, #0
 8001196:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001198:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011a6:	1d3b      	adds	r3, r7, #4
 80011a8:	4619      	mov	r1, r3
 80011aa:	480a      	ldr	r0, [pc, #40]	; (80011d4 <_ZL12MX_TIM1_Initv+0x190>)
 80011ac:	f008 fa14 	bl	80095d8 <HAL_TIMEx_ConfigBreakDeadTime>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	bf14      	ite	ne
 80011b6:	2301      	movne	r3, #1
 80011b8:	2300      	moveq	r3, #0
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <_ZL12MX_TIM1_Initv+0x180>
  {
    Error_Handler();
 80011c0:	f000 fde2 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011c4:	4803      	ldr	r0, [pc, #12]	; (80011d4 <_ZL12MX_TIM1_Initv+0x190>)
 80011c6:	f000 ffbf 	bl	8002148 <HAL_TIM_MspPostInit>

}
 80011ca:	bf00      	nop
 80011cc:	3768      	adds	r7, #104	; 0x68
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	240002a8 	.word	0x240002a8
 80011d8:	40010000 	.word	0x40010000

080011dc <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08e      	sub	sp, #56	; 0x38
 80011e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f0:	f107 031c 	add.w	r3, r7, #28
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
 80011f8:	605a      	str	r2, [r3, #4]
 80011fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011fc:	463b      	mov	r3, r7
 80011fe:	2200      	movs	r2, #0
 8001200:	601a      	str	r2, [r3, #0]
 8001202:	605a      	str	r2, [r3, #4]
 8001204:	609a      	str	r2, [r3, #8]
 8001206:	60da      	str	r2, [r3, #12]
 8001208:	611a      	str	r2, [r3, #16]
 800120a:	615a      	str	r2, [r3, #20]
 800120c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800120e:	4b3a      	ldr	r3, [pc, #232]	; (80012f8 <_ZL12MX_TIM2_Initv+0x11c>)
 8001210:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001214:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 200-1;
 8001216:	4b38      	ldr	r3, [pc, #224]	; (80012f8 <_ZL12MX_TIM2_Initv+0x11c>)
 8001218:	22c7      	movs	r2, #199	; 0xc7
 800121a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800121c:	4b36      	ldr	r3, [pc, #216]	; (80012f8 <_ZL12MX_TIM2_Initv+0x11c>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 60000-1;
 8001222:	4b35      	ldr	r3, [pc, #212]	; (80012f8 <_ZL12MX_TIM2_Initv+0x11c>)
 8001224:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001228:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800122a:	4b33      	ldr	r3, [pc, #204]	; (80012f8 <_ZL12MX_TIM2_Initv+0x11c>)
 800122c:	2200      	movs	r2, #0
 800122e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001230:	4b31      	ldr	r3, [pc, #196]	; (80012f8 <_ZL12MX_TIM2_Initv+0x11c>)
 8001232:	2200      	movs	r2, #0
 8001234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001236:	4830      	ldr	r0, [pc, #192]	; (80012f8 <_ZL12MX_TIM2_Initv+0x11c>)
 8001238:	f006 fff1 	bl	800821e <HAL_TIM_Base_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	bf14      	ite	ne
 8001242:	2301      	movne	r3, #1
 8001244:	2300      	moveq	r3, #0
 8001246:	b2db      	uxtb	r3, r3
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 800124c:	f000 fd9c 	bl	8001d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001250:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001254:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001256:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800125a:	4619      	mov	r1, r3
 800125c:	4826      	ldr	r0, [pc, #152]	; (80012f8 <_ZL12MX_TIM2_Initv+0x11c>)
 800125e:	f007 fbd9 	bl	8008a14 <HAL_TIM_ConfigClockSource>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	bf14      	ite	ne
 8001268:	2301      	movne	r3, #1
 800126a:	2300      	moveq	r3, #0
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 8001272:	f000 fd89 	bl	8001d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001276:	4820      	ldr	r0, [pc, #128]	; (80012f8 <_ZL12MX_TIM2_Initv+0x11c>)
 8001278:	f007 f828 	bl	80082cc <HAL_TIM_PWM_Init>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	bf14      	ite	ne
 8001282:	2301      	movne	r3, #1
 8001284:	2300      	moveq	r3, #0
 8001286:	b2db      	uxtb	r3, r3
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 800128c:	f000 fd7c 	bl	8001d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001298:	f107 031c 	add.w	r3, r7, #28
 800129c:	4619      	mov	r1, r3
 800129e:	4816      	ldr	r0, [pc, #88]	; (80012f8 <_ZL12MX_TIM2_Initv+0x11c>)
 80012a0:	f008 f90c 	bl	80094bc <HAL_TIMEx_MasterConfigSynchronization>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	bf14      	ite	ne
 80012aa:	2301      	movne	r3, #1
 80012ac:	2300      	moveq	r3, #0
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 80012b4:	f000 fd68 	bl	8001d88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012b8:	2360      	movs	r3, #96	; 0x60
 80012ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80012bc:	f240 1339 	movw	r3, #313	; 0x139
 80012c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012c2:	2300      	movs	r3, #0
 80012c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012ca:	463b      	mov	r3, r7
 80012cc:	2208      	movs	r2, #8
 80012ce:	4619      	mov	r1, r3
 80012d0:	4809      	ldr	r0, [pc, #36]	; (80012f8 <_ZL12MX_TIM2_Initv+0x11c>)
 80012d2:	f007 fa8b 	bl	80087ec <HAL_TIM_PWM_ConfigChannel>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	bf14      	ite	ne
 80012dc:	2301      	movne	r3, #1
 80012de:	2300      	moveq	r3, #0
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 80012e6:	f000 fd4f 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80012ea:	4803      	ldr	r0, [pc, #12]	; (80012f8 <_ZL12MX_TIM2_Initv+0x11c>)
 80012ec:	f000 ff2c 	bl	8002148 <HAL_TIM_MspPostInit>

}
 80012f0:	bf00      	nop
 80012f2:	3738      	adds	r7, #56	; 0x38
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	240002f4 	.word	0x240002f4

080012fc <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08e      	sub	sp, #56	; 0x38
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001302:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001310:	f107 031c 	add.w	r3, r7, #28
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
 800131a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800131c:	463b      	mov	r3, r7
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]
 8001326:	60da      	str	r2, [r3, #12]
 8001328:	611a      	str	r2, [r3, #16]
 800132a:	615a      	str	r2, [r3, #20]
 800132c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800132e:	4b3a      	ldr	r3, [pc, #232]	; (8001418 <_ZL12MX_TIM3_Initv+0x11c>)
 8001330:	4a3a      	ldr	r2, [pc, #232]	; (800141c <_ZL12MX_TIM3_Initv+0x120>)
 8001332:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 200-1;
 8001334:	4b38      	ldr	r3, [pc, #224]	; (8001418 <_ZL12MX_TIM3_Initv+0x11c>)
 8001336:	22c7      	movs	r2, #199	; 0xc7
 8001338:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133a:	4b37      	ldr	r3, [pc, #220]	; (8001418 <_ZL12MX_TIM3_Initv+0x11c>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 60000-1;
 8001340:	4b35      	ldr	r3, [pc, #212]	; (8001418 <_ZL12MX_TIM3_Initv+0x11c>)
 8001342:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001346:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001348:	4b33      	ldr	r3, [pc, #204]	; (8001418 <_ZL12MX_TIM3_Initv+0x11c>)
 800134a:	2200      	movs	r2, #0
 800134c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134e:	4b32      	ldr	r3, [pc, #200]	; (8001418 <_ZL12MX_TIM3_Initv+0x11c>)
 8001350:	2200      	movs	r2, #0
 8001352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001354:	4830      	ldr	r0, [pc, #192]	; (8001418 <_ZL12MX_TIM3_Initv+0x11c>)
 8001356:	f006 ff62 	bl	800821e <HAL_TIM_Base_Init>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	bf14      	ite	ne
 8001360:	2301      	movne	r3, #1
 8001362:	2300      	moveq	r3, #0
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	d001      	beq.n	800136e <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 800136a:	f000 fd0d 	bl	8001d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800136e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001372:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001374:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001378:	4619      	mov	r1, r3
 800137a:	4827      	ldr	r0, [pc, #156]	; (8001418 <_ZL12MX_TIM3_Initv+0x11c>)
 800137c:	f007 fb4a 	bl	8008a14 <HAL_TIM_ConfigClockSource>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	bf14      	ite	ne
 8001386:	2301      	movne	r3, #1
 8001388:	2300      	moveq	r3, #0
 800138a:	b2db      	uxtb	r3, r3
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <_ZL12MX_TIM3_Initv+0x98>
  {
    Error_Handler();
 8001390:	f000 fcfa 	bl	8001d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001394:	4820      	ldr	r0, [pc, #128]	; (8001418 <_ZL12MX_TIM3_Initv+0x11c>)
 8001396:	f006 ff99 	bl	80082cc <HAL_TIM_PWM_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	bf14      	ite	ne
 80013a0:	2301      	movne	r3, #1
 80013a2:	2300      	moveq	r3, #0
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <_ZL12MX_TIM3_Initv+0xb2>
  {
    Error_Handler();
 80013aa:	f000 fced 	bl	8001d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	4816      	ldr	r0, [pc, #88]	; (8001418 <_ZL12MX_TIM3_Initv+0x11c>)
 80013be:	f008 f87d 	bl	80094bc <HAL_TIMEx_MasterConfigSynchronization>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	bf14      	ite	ne
 80013c8:	2301      	movne	r3, #1
 80013ca:	2300      	moveq	r3, #0
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <_ZL12MX_TIM3_Initv+0xda>
  {
    Error_Handler();
 80013d2:	f000 fcd9 	bl	8001d88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013d6:	2360      	movs	r3, #96	; 0x60
 80013d8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80013da:	f240 1339 	movw	r3, #313	; 0x139
 80013de:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013e8:	463b      	mov	r3, r7
 80013ea:	2200      	movs	r2, #0
 80013ec:	4619      	mov	r1, r3
 80013ee:	480a      	ldr	r0, [pc, #40]	; (8001418 <_ZL12MX_TIM3_Initv+0x11c>)
 80013f0:	f007 f9fc 	bl	80087ec <HAL_TIM_PWM_ConfigChannel>
 80013f4:	4603      	mov	r3, r0
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	bf14      	ite	ne
 80013fa:	2301      	movne	r3, #1
 80013fc:	2300      	moveq	r3, #0
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <_ZL12MX_TIM3_Initv+0x10c>
  {
    Error_Handler();
 8001404:	f000 fcc0 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001408:	4803      	ldr	r0, [pc, #12]	; (8001418 <_ZL12MX_TIM3_Initv+0x11c>)
 800140a:	f000 fe9d 	bl	8002148 <HAL_TIM_MspPostInit>

}
 800140e:	bf00      	nop
 8001410:	3738      	adds	r7, #56	; 0x38
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	24000340 	.word	0x24000340
 800141c:	40000400 	.word	0x40000400

08001420 <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08e      	sub	sp, #56	; 0x38
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001426:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	2200      	movs	r2, #0
 800143a:	601a      	str	r2, [r3, #0]
 800143c:	605a      	str	r2, [r3, #4]
 800143e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001440:	463b      	mov	r3, r7
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]
 800144a:	60da      	str	r2, [r3, #12]
 800144c:	611a      	str	r2, [r3, #16]
 800144e:	615a      	str	r2, [r3, #20]
 8001450:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001452:	4b3a      	ldr	r3, [pc, #232]	; (800153c <_ZL12MX_TIM4_Initv+0x11c>)
 8001454:	4a3a      	ldr	r2, [pc, #232]	; (8001540 <_ZL12MX_TIM4_Initv+0x120>)
 8001456:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 200-1;
 8001458:	4b38      	ldr	r3, [pc, #224]	; (800153c <_ZL12MX_TIM4_Initv+0x11c>)
 800145a:	22c7      	movs	r2, #199	; 0xc7
 800145c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145e:	4b37      	ldr	r3, [pc, #220]	; (800153c <_ZL12MX_TIM4_Initv+0x11c>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 60000-1;
 8001464:	4b35      	ldr	r3, [pc, #212]	; (800153c <_ZL12MX_TIM4_Initv+0x11c>)
 8001466:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800146a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800146c:	4b33      	ldr	r3, [pc, #204]	; (800153c <_ZL12MX_TIM4_Initv+0x11c>)
 800146e:	2200      	movs	r2, #0
 8001470:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001472:	4b32      	ldr	r3, [pc, #200]	; (800153c <_ZL12MX_TIM4_Initv+0x11c>)
 8001474:	2280      	movs	r2, #128	; 0x80
 8001476:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001478:	4830      	ldr	r0, [pc, #192]	; (800153c <_ZL12MX_TIM4_Initv+0x11c>)
 800147a:	f006 fed0 	bl	800821e <HAL_TIM_Base_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	bf14      	ite	ne
 8001484:	2301      	movne	r3, #1
 8001486:	2300      	moveq	r3, #0
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <_ZL12MX_TIM4_Initv+0x72>
  {
    Error_Handler();
 800148e:	f000 fc7b 	bl	8001d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001498:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800149c:	4619      	mov	r1, r3
 800149e:	4827      	ldr	r0, [pc, #156]	; (800153c <_ZL12MX_TIM4_Initv+0x11c>)
 80014a0:	f007 fab8 	bl	8008a14 <HAL_TIM_ConfigClockSource>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	bf14      	ite	ne
 80014aa:	2301      	movne	r3, #1
 80014ac:	2300      	moveq	r3, #0
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <_ZL12MX_TIM4_Initv+0x98>
  {
    Error_Handler();
 80014b4:	f000 fc68 	bl	8001d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014b8:	4820      	ldr	r0, [pc, #128]	; (800153c <_ZL12MX_TIM4_Initv+0x11c>)
 80014ba:	f006 ff07 	bl	80082cc <HAL_TIM_PWM_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	bf14      	ite	ne
 80014c4:	2301      	movne	r3, #1
 80014c6:	2300      	moveq	r3, #0
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <_ZL12MX_TIM4_Initv+0xb2>
  {
    Error_Handler();
 80014ce:	f000 fc5b 	bl	8001d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d2:	2300      	movs	r3, #0
 80014d4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d6:	2300      	movs	r3, #0
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	4619      	mov	r1, r3
 80014e0:	4816      	ldr	r0, [pc, #88]	; (800153c <_ZL12MX_TIM4_Initv+0x11c>)
 80014e2:	f007 ffeb 	bl	80094bc <HAL_TIMEx_MasterConfigSynchronization>
 80014e6:	4603      	mov	r3, r0
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	bf14      	ite	ne
 80014ec:	2301      	movne	r3, #1
 80014ee:	2300      	moveq	r3, #0
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <_ZL12MX_TIM4_Initv+0xda>
  {
    Error_Handler();
 80014f6:	f000 fc47 	bl	8001d88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014fa:	2360      	movs	r3, #96	; 0x60
 80014fc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 313;
 80014fe:	f240 1339 	movw	r3, #313	; 0x139
 8001502:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001504:	2300      	movs	r3, #0
 8001506:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800150c:	463b      	mov	r3, r7
 800150e:	2208      	movs	r2, #8
 8001510:	4619      	mov	r1, r3
 8001512:	480a      	ldr	r0, [pc, #40]	; (800153c <_ZL12MX_TIM4_Initv+0x11c>)
 8001514:	f007 f96a 	bl	80087ec <HAL_TIM_PWM_ConfigChannel>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	bf14      	ite	ne
 800151e:	2301      	movne	r3, #1
 8001520:	2300      	moveq	r3, #0
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <_ZL12MX_TIM4_Initv+0x10c>
  {
    Error_Handler();
 8001528:	f000 fc2e 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800152c:	4803      	ldr	r0, [pc, #12]	; (800153c <_ZL12MX_TIM4_Initv+0x11c>)
 800152e:	f000 fe0b 	bl	8002148 <HAL_TIM_MspPostInit>

}
 8001532:	bf00      	nop
 8001534:	3738      	adds	r7, #56	; 0x38
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	2400038c 	.word	0x2400038c
 8001540:	40000800 	.word	0x40000800

08001544 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154a:	f107 0310 	add.w	r3, r7, #16
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001562:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <_ZL12MX_TIM5_Initv+0xb4>)
 8001564:	4a25      	ldr	r2, [pc, #148]	; (80015fc <_ZL12MX_TIM5_Initv+0xb8>)
 8001566:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 200-1;
 8001568:	4b23      	ldr	r3, [pc, #140]	; (80015f8 <_ZL12MX_TIM5_Initv+0xb4>)
 800156a:	22c7      	movs	r2, #199	; 0xc7
 800156c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156e:	4b22      	ldr	r3, [pc, #136]	; (80015f8 <_ZL12MX_TIM5_Initv+0xb4>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 12000-1;
 8001574:	4b20      	ldr	r3, [pc, #128]	; (80015f8 <_ZL12MX_TIM5_Initv+0xb4>)
 8001576:	f642 62df 	movw	r2, #11999	; 0x2edf
 800157a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157c:	4b1e      	ldr	r3, [pc, #120]	; (80015f8 <_ZL12MX_TIM5_Initv+0xb4>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <_ZL12MX_TIM5_Initv+0xb4>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001588:	481b      	ldr	r0, [pc, #108]	; (80015f8 <_ZL12MX_TIM5_Initv+0xb4>)
 800158a:	f006 fe48 	bl	800821e <HAL_TIM_Base_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	bf14      	ite	ne
 8001594:	2301      	movne	r3, #1
 8001596:	2300      	moveq	r3, #0
 8001598:	b2db      	uxtb	r3, r3
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <_ZL12MX_TIM5_Initv+0x5e>
  {
    Error_Handler();
 800159e:	f000 fbf3 	bl	8001d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015a6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80015a8:	f107 0310 	add.w	r3, r7, #16
 80015ac:	4619      	mov	r1, r3
 80015ae:	4812      	ldr	r0, [pc, #72]	; (80015f8 <_ZL12MX_TIM5_Initv+0xb4>)
 80015b0:	f007 fa30 	bl	8008a14 <HAL_TIM_ConfigClockSource>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	bf14      	ite	ne
 80015ba:	2301      	movne	r3, #1
 80015bc:	2300      	moveq	r3, #0
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <_ZL12MX_TIM5_Initv+0x84>
  {
    Error_Handler();
 80015c4:	f000 fbe0 	bl	8001d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	4619      	mov	r1, r3
 80015d4:	4808      	ldr	r0, [pc, #32]	; (80015f8 <_ZL12MX_TIM5_Initv+0xb4>)
 80015d6:	f007 ff71 	bl	80094bc <HAL_TIMEx_MasterConfigSynchronization>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	bf14      	ite	ne
 80015e0:	2301      	movne	r3, #1
 80015e2:	2300      	moveq	r3, #0
 80015e4:	b2db      	uxtb	r3, r3
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <_ZL12MX_TIM5_Initv+0xaa>
  {
    Error_Handler();
 80015ea:	f000 fbcd 	bl	8001d88 <Error_Handler>
  /* USER CODE BEGIN TIM5_Init 2 */
//  HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
//    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE END TIM5_Init 2 */

}
 80015ee:	bf00      	nop
 80015f0:	3720      	adds	r7, #32
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	240003d8 	.word	0x240003d8
 80015fc:	40000c00 	.word	0x40000c00

08001600 <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001606:	463b      	mov	r3, r7
 8001608:	2200      	movs	r2, #0
 800160a:	601a      	str	r2, [r3, #0]
 800160c:	605a      	str	r2, [r3, #4]
 800160e:	609a      	str	r2, [r3, #8]
 8001610:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001612:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <_ZL13MX_TIM12_Initv+0x80>)
 8001614:	4a1b      	ldr	r2, [pc, #108]	; (8001684 <_ZL13MX_TIM12_Initv+0x84>)
 8001616:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 200-1;
 8001618:	4b19      	ldr	r3, [pc, #100]	; (8001680 <_ZL13MX_TIM12_Initv+0x80>)
 800161a:	22c7      	movs	r2, #199	; 0xc7
 800161c:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161e:	4b18      	ldr	r3, [pc, #96]	; (8001680 <_ZL13MX_TIM12_Initv+0x80>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 12000-1;
 8001624:	4b16      	ldr	r3, [pc, #88]	; (8001680 <_ZL13MX_TIM12_Initv+0x80>)
 8001626:	f642 62df 	movw	r2, #11999	; 0x2edf
 800162a:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162c:	4b14      	ldr	r3, [pc, #80]	; (8001680 <_ZL13MX_TIM12_Initv+0x80>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001632:	4b13      	ldr	r3, [pc, #76]	; (8001680 <_ZL13MX_TIM12_Initv+0x80>)
 8001634:	2200      	movs	r2, #0
 8001636:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001638:	4811      	ldr	r0, [pc, #68]	; (8001680 <_ZL13MX_TIM12_Initv+0x80>)
 800163a:	f006 fdf0 	bl	800821e <HAL_TIM_Base_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	bf14      	ite	ne
 8001644:	2301      	movne	r3, #1
 8001646:	2300      	moveq	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <_ZL13MX_TIM12_Initv+0x52>
  {
    Error_Handler();
 800164e:	f000 fb9b 	bl	8001d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001656:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001658:	463b      	mov	r3, r7
 800165a:	4619      	mov	r1, r3
 800165c:	4808      	ldr	r0, [pc, #32]	; (8001680 <_ZL13MX_TIM12_Initv+0x80>)
 800165e:	f007 f9d9 	bl	8008a14 <HAL_TIM_ConfigClockSource>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	bf14      	ite	ne
 8001668:	2301      	movne	r3, #1
 800166a:	2300      	moveq	r3, #0
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <_ZL13MX_TIM12_Initv+0x76>
  {
    Error_Handler();
 8001672:	f000 fb89 	bl	8001d88 <Error_Handler>
  /* USER CODE BEGIN TIM12_Init 2 */
//  HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 1);
//    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE END TIM12_Init 2 */

}
 8001676:	bf00      	nop
 8001678:	3710      	adds	r7, #16
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	24000424 	.word	0x24000424
 8001684:	40001800 	.word	0x40001800

08001688 <_ZL13MX_TIM15_Initv>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b09a      	sub	sp, #104	; 0x68
 800168c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800168e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800169c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80016a0:	2200      	movs	r2, #0
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	605a      	str	r2, [r3, #4]
 80016a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
 80016b8:	615a      	str	r2, [r3, #20]
 80016ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	222c      	movs	r2, #44	; 0x2c
 80016c0:	2100      	movs	r1, #0
 80016c2:	4618      	mov	r0, r3
 80016c4:	f009 fd3c 	bl	800b140 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 80016c8:	4b4e      	ldr	r3, [pc, #312]	; (8001804 <_ZL13MX_TIM15_Initv+0x17c>)
 80016ca:	4a4f      	ldr	r2, [pc, #316]	; (8001808 <_ZL13MX_TIM15_Initv+0x180>)
 80016cc:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 240-1;
 80016ce:	4b4d      	ldr	r3, [pc, #308]	; (8001804 <_ZL13MX_TIM15_Initv+0x17c>)
 80016d0:	22ef      	movs	r2, #239	; 0xef
 80016d2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d4:	4b4b      	ldr	r3, [pc, #300]	; (8001804 <_ZL13MX_TIM15_Initv+0x17c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 20000-1;
 80016da:	4b4a      	ldr	r3, [pc, #296]	; (8001804 <_ZL13MX_TIM15_Initv+0x17c>)
 80016dc:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80016e0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e2:	4b48      	ldr	r3, [pc, #288]	; (8001804 <_ZL13MX_TIM15_Initv+0x17c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80016e8:	4b46      	ldr	r3, [pc, #280]	; (8001804 <_ZL13MX_TIM15_Initv+0x17c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ee:	4b45      	ldr	r3, [pc, #276]	; (8001804 <_ZL13MX_TIM15_Initv+0x17c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80016f4:	4843      	ldr	r0, [pc, #268]	; (8001804 <_ZL13MX_TIM15_Initv+0x17c>)
 80016f6:	f006 fd92 	bl	800821e <HAL_TIM_Base_Init>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	bf14      	ite	ne
 8001700:	2301      	movne	r3, #1
 8001702:	2300      	moveq	r3, #0
 8001704:	b2db      	uxtb	r3, r3
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <_ZL13MX_TIM15_Initv+0x86>
  {
    Error_Handler();
 800170a:	f000 fb3d 	bl	8001d88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800170e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001712:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8001714:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001718:	4619      	mov	r1, r3
 800171a:	483a      	ldr	r0, [pc, #232]	; (8001804 <_ZL13MX_TIM15_Initv+0x17c>)
 800171c:	f007 f97a 	bl	8008a14 <HAL_TIM_ConfigClockSource>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	bf14      	ite	ne
 8001726:	2301      	movne	r3, #1
 8001728:	2300      	moveq	r3, #0
 800172a:	b2db      	uxtb	r3, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <_ZL13MX_TIM15_Initv+0xac>
  {
    Error_Handler();
 8001730:	f000 fb2a 	bl	8001d88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001734:	4833      	ldr	r0, [pc, #204]	; (8001804 <_ZL13MX_TIM15_Initv+0x17c>)
 8001736:	f006 fdc9 	bl	80082cc <HAL_TIM_PWM_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	bf14      	ite	ne
 8001740:	2301      	movne	r3, #1
 8001742:	2300      	moveq	r3, #0
 8001744:	b2db      	uxtb	r3, r3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <_ZL13MX_TIM15_Initv+0xc6>
  {
    Error_Handler();
 800174a:	f000 fb1d 	bl	8001d88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174e:	2300      	movs	r3, #0
 8001750:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001756:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800175a:	4619      	mov	r1, r3
 800175c:	4829      	ldr	r0, [pc, #164]	; (8001804 <_ZL13MX_TIM15_Initv+0x17c>)
 800175e:	f007 fead 	bl	80094bc <HAL_TIMEx_MasterConfigSynchronization>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	bf14      	ite	ne
 8001768:	2301      	movne	r3, #1
 800176a:	2300      	moveq	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <_ZL13MX_TIM15_Initv+0xee>
  {
    Error_Handler();
 8001772:	f000 fb09 	bl	8001d88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001776:	2360      	movs	r3, #96	; 0x60
 8001778:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 313;
 800177a:	f240 1339 	movw	r3, #313	; 0x139
 800177e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001780:	2300      	movs	r3, #0
 8001782:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001784:	2300      	movs	r3, #0
 8001786:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800178c:	2300      	movs	r3, #0
 800178e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001790:	2300      	movs	r3, #0
 8001792:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001794:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001798:	2204      	movs	r2, #4
 800179a:	4619      	mov	r1, r3
 800179c:	4819      	ldr	r0, [pc, #100]	; (8001804 <_ZL13MX_TIM15_Initv+0x17c>)
 800179e:	f007 f825 	bl	80087ec <HAL_TIM_PWM_ConfigChannel>
 80017a2:	4603      	mov	r3, r0
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	bf14      	ite	ne
 80017a8:	2301      	movne	r3, #1
 80017aa:	2300      	moveq	r3, #0
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <_ZL13MX_TIM15_Initv+0x12e>
  {
    Error_Handler();
 80017b2:	f000 fae9 	bl	8001d88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017b6:	2300      	movs	r3, #0
 80017b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017d4:	2300      	movs	r3, #0
 80017d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 80017d8:	1d3b      	adds	r3, r7, #4
 80017da:	4619      	mov	r1, r3
 80017dc:	4809      	ldr	r0, [pc, #36]	; (8001804 <_ZL13MX_TIM15_Initv+0x17c>)
 80017de:	f007 fefb 	bl	80095d8 <HAL_TIMEx_ConfigBreakDeadTime>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	bf14      	ite	ne
 80017e8:	2301      	movne	r3, #1
 80017ea:	2300      	moveq	r3, #0
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <_ZL13MX_TIM15_Initv+0x16e>
  {
    Error_Handler();
 80017f2:	f000 fac9 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 80017f6:	4803      	ldr	r0, [pc, #12]	; (8001804 <_ZL13MX_TIM15_Initv+0x17c>)
 80017f8:	f000 fca6 	bl	8002148 <HAL_TIM_MspPostInit>

}
 80017fc:	bf00      	nop
 80017fe:	3768      	adds	r7, #104	; 0x68
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	24000470 	.word	0x24000470
 8001808:	40014000 	.word	0x40014000

0800180c <_ZL13MX_UART4_Initv>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001810:	4b2d      	ldr	r3, [pc, #180]	; (80018c8 <_ZL13MX_UART4_Initv+0xbc>)
 8001812:	4a2e      	ldr	r2, [pc, #184]	; (80018cc <_ZL13MX_UART4_Initv+0xc0>)
 8001814:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 2000000;
 8001816:	4b2c      	ldr	r3, [pc, #176]	; (80018c8 <_ZL13MX_UART4_Initv+0xbc>)
 8001818:	4a2d      	ldr	r2, [pc, #180]	; (80018d0 <_ZL13MX_UART4_Initv+0xc4>)
 800181a:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800181c:	4b2a      	ldr	r3, [pc, #168]	; (80018c8 <_ZL13MX_UART4_Initv+0xbc>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001822:	4b29      	ldr	r3, [pc, #164]	; (80018c8 <_ZL13MX_UART4_Initv+0xbc>)
 8001824:	2200      	movs	r2, #0
 8001826:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001828:	4b27      	ldr	r3, [pc, #156]	; (80018c8 <_ZL13MX_UART4_Initv+0xbc>)
 800182a:	2200      	movs	r2, #0
 800182c:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800182e:	4b26      	ldr	r3, [pc, #152]	; (80018c8 <_ZL13MX_UART4_Initv+0xbc>)
 8001830:	220c      	movs	r2, #12
 8001832:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001834:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <_ZL13MX_UART4_Initv+0xbc>)
 8001836:	2200      	movs	r2, #0
 8001838:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800183a:	4b23      	ldr	r3, [pc, #140]	; (80018c8 <_ZL13MX_UART4_Initv+0xbc>)
 800183c:	2200      	movs	r2, #0
 800183e:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001840:	4b21      	ldr	r3, [pc, #132]	; (80018c8 <_ZL13MX_UART4_Initv+0xbc>)
 8001842:	2200      	movs	r2, #0
 8001844:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001846:	4b20      	ldr	r3, [pc, #128]	; (80018c8 <_ZL13MX_UART4_Initv+0xbc>)
 8001848:	2200      	movs	r2, #0
 800184a:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800184c:	4b1e      	ldr	r3, [pc, #120]	; (80018c8 <_ZL13MX_UART4_Initv+0xbc>)
 800184e:	2200      	movs	r2, #0
 8001850:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001852:	481d      	ldr	r0, [pc, #116]	; (80018c8 <_ZL13MX_UART4_Initv+0xbc>)
 8001854:	f007 ff5c 	bl	8009710 <HAL_UART_Init>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	bf14      	ite	ne
 800185e:	2301      	movne	r3, #1
 8001860:	2300      	moveq	r3, #0
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <_ZL13MX_UART4_Initv+0x60>
  {
    Error_Handler();
 8001868:	f000 fa8e 	bl	8001d88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 800186c:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 8001870:	4815      	ldr	r0, [pc, #84]	; (80018c8 <_ZL13MX_UART4_Initv+0xbc>)
 8001872:	f009 fb71 	bl	800af58 <HAL_UARTEx_SetTxFifoThreshold>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	bf14      	ite	ne
 800187c:	2301      	movne	r3, #1
 800187e:	2300      	moveq	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <_ZL13MX_UART4_Initv+0x7e>
  {
    Error_Handler();
 8001886:	f000 fa7f 	bl	8001d88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 800188a:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 800188e:	480e      	ldr	r0, [pc, #56]	; (80018c8 <_ZL13MX_UART4_Initv+0xbc>)
 8001890:	f009 fba0 	bl	800afd4 <HAL_UARTEx_SetRxFifoThreshold>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	bf14      	ite	ne
 800189a:	2301      	movne	r3, #1
 800189c:	2300      	moveq	r3, #0
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d001      	beq.n	80018a8 <_ZL13MX_UART4_Initv+0x9c>
  {
    Error_Handler();
 80018a4:	f000 fa70 	bl	8001d88 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart4) != HAL_OK)
 80018a8:	4807      	ldr	r0, [pc, #28]	; (80018c8 <_ZL13MX_UART4_Initv+0xbc>)
 80018aa:	f009 fb1a 	bl	800aee2 <HAL_UARTEx_EnableFifoMode>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bf14      	ite	ne
 80018b4:	2301      	movne	r3, #1
 80018b6:	2300      	moveq	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <_ZL13MX_UART4_Initv+0xb6>
  {
    Error_Handler();
 80018be:	f000 fa63 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	240004bc 	.word	0x240004bc
 80018cc:	40004c00 	.word	0x40004c00
 80018d0:	001e8480 	.word	0x001e8480

080018d4 <_ZL13MX_UART7_Initv>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80018d8:	4b2d      	ldr	r3, [pc, #180]	; (8001990 <_ZL13MX_UART7_Initv+0xbc>)
 80018da:	4a2e      	ldr	r2, [pc, #184]	; (8001994 <_ZL13MX_UART7_Initv+0xc0>)
 80018dc:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80018de:	4b2c      	ldr	r3, [pc, #176]	; (8001990 <_ZL13MX_UART7_Initv+0xbc>)
 80018e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80018e6:	4b2a      	ldr	r3, [pc, #168]	; (8001990 <_ZL13MX_UART7_Initv+0xbc>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80018ec:	4b28      	ldr	r3, [pc, #160]	; (8001990 <_ZL13MX_UART7_Initv+0xbc>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80018f2:	4b27      	ldr	r3, [pc, #156]	; (8001990 <_ZL13MX_UART7_Initv+0xbc>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80018f8:	4b25      	ldr	r3, [pc, #148]	; (8001990 <_ZL13MX_UART7_Initv+0xbc>)
 80018fa:	220c      	movs	r2, #12
 80018fc:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fe:	4b24      	ldr	r3, [pc, #144]	; (8001990 <_ZL13MX_UART7_Initv+0xbc>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001904:	4b22      	ldr	r3, [pc, #136]	; (8001990 <_ZL13MX_UART7_Initv+0xbc>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800190a:	4b21      	ldr	r3, [pc, #132]	; (8001990 <_ZL13MX_UART7_Initv+0xbc>)
 800190c:	2200      	movs	r2, #0
 800190e:	621a      	str	r2, [r3, #32]
  huart7.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001910:	4b1f      	ldr	r3, [pc, #124]	; (8001990 <_ZL13MX_UART7_Initv+0xbc>)
 8001912:	2200      	movs	r2, #0
 8001914:	625a      	str	r2, [r3, #36]	; 0x24
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001916:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <_ZL13MX_UART7_Initv+0xbc>)
 8001918:	2200      	movs	r2, #0
 800191a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800191c:	481c      	ldr	r0, [pc, #112]	; (8001990 <_ZL13MX_UART7_Initv+0xbc>)
 800191e:	f007 fef7 	bl	8009710 <HAL_UART_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	bf14      	ite	ne
 8001928:	2301      	movne	r3, #1
 800192a:	2300      	moveq	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <_ZL13MX_UART7_Initv+0x62>
  {
    Error_Handler();
 8001932:	f000 fa29 	bl	8001d88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart7, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001936:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 800193a:	4815      	ldr	r0, [pc, #84]	; (8001990 <_ZL13MX_UART7_Initv+0xbc>)
 800193c:	f009 fb0c 	bl	800af58 <HAL_UARTEx_SetTxFifoThreshold>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	bf14      	ite	ne
 8001946:	2301      	movne	r3, #1
 8001948:	2300      	moveq	r3, #0
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <_ZL13MX_UART7_Initv+0x80>
  {
    Error_Handler();
 8001950:	f000 fa1a 	bl	8001d88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart7, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001954:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8001958:	480d      	ldr	r0, [pc, #52]	; (8001990 <_ZL13MX_UART7_Initv+0xbc>)
 800195a:	f009 fb3b 	bl	800afd4 <HAL_UARTEx_SetRxFifoThreshold>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	bf14      	ite	ne
 8001964:	2301      	movne	r3, #1
 8001966:	2300      	moveq	r3, #0
 8001968:	b2db      	uxtb	r3, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <_ZL13MX_UART7_Initv+0x9e>
  {
    Error_Handler();
 800196e:	f000 fa0b 	bl	8001d88 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart7) != HAL_OK)
 8001972:	4807      	ldr	r0, [pc, #28]	; (8001990 <_ZL13MX_UART7_Initv+0xbc>)
 8001974:	f009 fab5 	bl	800aee2 <HAL_UARTEx_EnableFifoMode>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	bf14      	ite	ne
 800197e:	2301      	movne	r3, #1
 8001980:	2300      	moveq	r3, #0
 8001982:	b2db      	uxtb	r3, r3
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <_ZL13MX_UART7_Initv+0xb8>
  {
    Error_Handler();
 8001988:	f000 f9fe 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	bd80      	pop	{r7, pc}
 8001990:	2400054c 	.word	0x2400054c
 8001994:	40007800 	.word	0x40007800

08001998 <_ZL19MX_USART3_UART_Initv>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800199c:	4b2d      	ldr	r3, [pc, #180]	; (8001a54 <_ZL19MX_USART3_UART_Initv+0xbc>)
 800199e:	4a2e      	ldr	r2, [pc, #184]	; (8001a58 <_ZL19MX_USART3_UART_Initv+0xc0>)
 80019a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80019a2:	4b2c      	ldr	r3, [pc, #176]	; (8001a54 <_ZL19MX_USART3_UART_Initv+0xbc>)
 80019a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80019aa:	4b2a      	ldr	r3, [pc, #168]	; (8001a54 <_ZL19MX_USART3_UART_Initv+0xbc>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80019b0:	4b28      	ldr	r3, [pc, #160]	; (8001a54 <_ZL19MX_USART3_UART_Initv+0xbc>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80019b6:	4b27      	ldr	r3, [pc, #156]	; (8001a54 <_ZL19MX_USART3_UART_Initv+0xbc>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80019bc:	4b25      	ldr	r3, [pc, #148]	; (8001a54 <_ZL19MX_USART3_UART_Initv+0xbc>)
 80019be:	220c      	movs	r2, #12
 80019c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c2:	4b24      	ldr	r3, [pc, #144]	; (8001a54 <_ZL19MX_USART3_UART_Initv+0xbc>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c8:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <_ZL19MX_USART3_UART_Initv+0xbc>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019ce:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <_ZL19MX_USART3_UART_Initv+0xbc>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80019d4:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <_ZL19MX_USART3_UART_Initv+0xbc>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019da:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <_ZL19MX_USART3_UART_Initv+0xbc>)
 80019dc:	2200      	movs	r2, #0
 80019de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80019e0:	481c      	ldr	r0, [pc, #112]	; (8001a54 <_ZL19MX_USART3_UART_Initv+0xbc>)
 80019e2:	f007 fe95 	bl	8009710 <HAL_UART_Init>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	bf14      	ite	ne
 80019ec:	2301      	movne	r3, #1
 80019ee:	2300      	moveq	r3, #0
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <_ZL19MX_USART3_UART_Initv+0x62>
  {
    Error_Handler();
 80019f6:	f000 f9c7 	bl	8001d88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 80019fa:	f04f 4120 	mov.w	r1, #2684354560	; 0xa0000000
 80019fe:	4815      	ldr	r0, [pc, #84]	; (8001a54 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8001a00:	f009 faaa 	bl	800af58 <HAL_UARTEx_SetTxFifoThreshold>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	bf14      	ite	ne
 8001a0a:	2301      	movne	r3, #1
 8001a0c:	2300      	moveq	r3, #0
 8001a0e:	b2db      	uxtb	r3, r3
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <_ZL19MX_USART3_UART_Initv+0x80>
  {
    Error_Handler();
 8001a14:	f000 f9b8 	bl	8001d88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_8_8) != HAL_OK)
 8001a18:	f04f 6120 	mov.w	r1, #167772160	; 0xa000000
 8001a1c:	480d      	ldr	r0, [pc, #52]	; (8001a54 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8001a1e:	f009 fad9 	bl	800afd4 <HAL_UARTEx_SetRxFifoThreshold>
 8001a22:	4603      	mov	r3, r0
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	bf14      	ite	ne
 8001a28:	2301      	movne	r3, #1
 8001a2a:	2300      	moveq	r3, #0
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <_ZL19MX_USART3_UART_Initv+0x9e>
  {
    Error_Handler();
 8001a32:	f000 f9a9 	bl	8001d88 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart3) != HAL_OK)
 8001a36:	4807      	ldr	r0, [pc, #28]	; (8001a54 <_ZL19MX_USART3_UART_Initv+0xbc>)
 8001a38:	f009 fa53 	bl	800aee2 <HAL_UARTEx_EnableFifoMode>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	bf14      	ite	ne
 8001a42:	2301      	movne	r3, #1
 8001a44:	2300      	moveq	r3, #0
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <_ZL19MX_USART3_UART_Initv+0xb8>
  {
    Error_Handler();
 8001a4c:	f000 f99c 	bl	8001d88 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	240005dc 	.word	0x240005dc
 8001a58:	40004800 	.word	0x40004800

08001a5c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001a62:	4b1d      	ldr	r3, [pc, #116]	; (8001ad8 <_ZL11MX_DMA_Initv+0x7c>)
 8001a64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a68:	4a1b      	ldr	r2, [pc, #108]	; (8001ad8 <_ZL11MX_DMA_Initv+0x7c>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001a72:	4b19      	ldr	r3, [pc, #100]	; (8001ad8 <_ZL11MX_DMA_Initv+0x7c>)
 8001a74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2100      	movs	r1, #0
 8001a84:	200b      	movs	r0, #11
 8001a86:	f001 fa14 	bl	8002eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001a8a:	200b      	movs	r0, #11
 8001a8c:	f001 fa2b 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001a90:	2200      	movs	r2, #0
 8001a92:	2100      	movs	r1, #0
 8001a94:	200c      	movs	r0, #12
 8001a96:	f001 fa0c 	bl	8002eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001a9a:	200c      	movs	r0, #12
 8001a9c:	f001 fa23 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	200d      	movs	r0, #13
 8001aa6:	f001 fa04 	bl	8002eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001aaa:	200d      	movs	r0, #13
 8001aac:	f001 fa1b 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	200e      	movs	r0, #14
 8001ab6:	f001 f9fc 	bl	8002eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001aba:	200e      	movs	r0, #14
 8001abc:	f001 fa13 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	2100      	movs	r1, #0
 8001ac4:	200f      	movs	r0, #15
 8001ac6:	f001 f9f4 	bl	8002eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001aca:	200f      	movs	r0, #15
 8001acc:	f001 fa0b 	bl	8002ee6 <HAL_NVIC_EnableIRQ>

}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	58024400 	.word	0x58024400

08001adc <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08c      	sub	sp, #48	; 0x30
 8001ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae2:	f107 031c 	add.w	r3, r7, #28
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
 8001af0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001af2:	4b8e      	ldr	r3, [pc, #568]	; (8001d2c <_ZL12MX_GPIO_Initv+0x250>)
 8001af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001af8:	4a8c      	ldr	r2, [pc, #560]	; (8001d2c <_ZL12MX_GPIO_Initv+0x250>)
 8001afa:	f043 0310 	orr.w	r3, r3, #16
 8001afe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b02:	4b8a      	ldr	r3, [pc, #552]	; (8001d2c <_ZL12MX_GPIO_Initv+0x250>)
 8001b04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b08:	f003 0310 	and.w	r3, r3, #16
 8001b0c:	61bb      	str	r3, [r7, #24]
 8001b0e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b10:	4b86      	ldr	r3, [pc, #536]	; (8001d2c <_ZL12MX_GPIO_Initv+0x250>)
 8001b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b16:	4a85      	ldr	r2, [pc, #532]	; (8001d2c <_ZL12MX_GPIO_Initv+0x250>)
 8001b18:	f043 0304 	orr.w	r3, r3, #4
 8001b1c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b20:	4b82      	ldr	r3, [pc, #520]	; (8001d2c <_ZL12MX_GPIO_Initv+0x250>)
 8001b22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	617b      	str	r3, [r7, #20]
 8001b2c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b2e:	4b7f      	ldr	r3, [pc, #508]	; (8001d2c <_ZL12MX_GPIO_Initv+0x250>)
 8001b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b34:	4a7d      	ldr	r2, [pc, #500]	; (8001d2c <_ZL12MX_GPIO_Initv+0x250>)
 8001b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b3e:	4b7b      	ldr	r3, [pc, #492]	; (8001d2c <_ZL12MX_GPIO_Initv+0x250>)
 8001b40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b4c:	4b77      	ldr	r3, [pc, #476]	; (8001d2c <_ZL12MX_GPIO_Initv+0x250>)
 8001b4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b52:	4a76      	ldr	r2, [pc, #472]	; (8001d2c <_ZL12MX_GPIO_Initv+0x250>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b5c:	4b73      	ldr	r3, [pc, #460]	; (8001d2c <_ZL12MX_GPIO_Initv+0x250>)
 8001b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	60fb      	str	r3, [r7, #12]
 8001b68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b6a:	4b70      	ldr	r3, [pc, #448]	; (8001d2c <_ZL12MX_GPIO_Initv+0x250>)
 8001b6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b70:	4a6e      	ldr	r2, [pc, #440]	; (8001d2c <_ZL12MX_GPIO_Initv+0x250>)
 8001b72:	f043 0302 	orr.w	r3, r3, #2
 8001b76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b7a:	4b6c      	ldr	r3, [pc, #432]	; (8001d2c <_ZL12MX_GPIO_Initv+0x250>)
 8001b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b88:	4b68      	ldr	r3, [pc, #416]	; (8001d2c <_ZL12MX_GPIO_Initv+0x250>)
 8001b8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b8e:	4a67      	ldr	r2, [pc, #412]	; (8001d2c <_ZL12MX_GPIO_Initv+0x250>)
 8001b90:	f043 0308 	orr.w	r3, r3, #8
 8001b94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b98:	4b64      	ldr	r3, [pc, #400]	; (8001d2c <_ZL12MX_GPIO_Initv+0x250>)
 8001b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b9e:	f003 0308 	and.w	r3, r3, #8
 8001ba2:	607b      	str	r3, [r7, #4]
 8001ba4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ba6:	4b61      	ldr	r3, [pc, #388]	; (8001d2c <_ZL12MX_GPIO_Initv+0x250>)
 8001ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bac:	4a5f      	ldr	r2, [pc, #380]	; (8001d2c <_ZL12MX_GPIO_Initv+0x250>)
 8001bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bb2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001bb6:	4b5d      	ldr	r3, [pc, #372]	; (8001d2c <_ZL12MX_GPIO_Initv+0x250>)
 8001bb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001bbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc0:	603b      	str	r3, [r7, #0]
 8001bc2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	f644 2121 	movw	r1, #18977	; 0x4a21
 8001bca:	4859      	ldr	r0, [pc, #356]	; (8001d30 <_ZL12MX_GPIO_Initv+0x254>)
 8001bcc:	f003 fe64 	bl	8005898 <HAL_GPIO_WritePin>
                          |DIR_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DIR_1_Pin|DIR_5_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f24c 0102 	movw	r1, #49154	; 0xc002
 8001bd6:	4857      	ldr	r0, [pc, #348]	; (8001d34 <_ZL12MX_GPIO_Initv+0x258>)
 8001bd8:	f003 fe5e 	bl	8005898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001be2:	4855      	ldr	r0, [pc, #340]	; (8001d38 <_ZL12MX_GPIO_Initv+0x25c>)
 8001be4:	f003 fe58 	bl	8005898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI3_CS_GPIO_Port, SPI3_CS_Pin, GPIO_PIN_RESET);
 8001be8:	2200      	movs	r2, #0
 8001bea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bee:	4853      	ldr	r0, [pc, #332]	; (8001d3c <_ZL12MX_GPIO_Initv+0x260>)
 8001bf0:	f003 fe52 	bl	8005898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UART4_DE_GPIO_Port, UART4_DE_Pin, GPIO_PIN_RESET);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bfa:	4851      	ldr	r0, [pc, #324]	; (8001d40 <_ZL12MX_GPIO_Initv+0x264>)
 8001bfc:	f003 fe4c 	bl	8005898 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Blue_Button_Pin_Pin */
  GPIO_InitStruct.Pin = Blue_Button_Pin_Pin;
 8001c00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Blue_Button_Pin_GPIO_Port, &GPIO_InitStruct);
 8001c10:	f107 031c 	add.w	r3, r7, #28
 8001c14:	4619      	mov	r1, r3
 8001c16:	4849      	ldr	r0, [pc, #292]	; (8001d3c <_ZL12MX_GPIO_Initv+0x260>)
 8001c18:	f003 fc8e 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin DIR_2_Pin LD3_Pin DIR_3_Pin
                           DIR_4_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|DIR_2_Pin|LD3_Pin|DIR_3_Pin
 8001c1c:	f644 2321 	movw	r3, #18977	; 0x4a21
 8001c20:	61fb      	str	r3, [r7, #28]
                          |DIR_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c22:	2301      	movs	r3, #1
 8001c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c2e:	f107 031c 	add.w	r3, r7, #28
 8001c32:	4619      	mov	r1, r3
 8001c34:	483e      	ldr	r0, [pc, #248]	; (8001d30 <_ZL12MX_GPIO_Initv+0x254>)
 8001c36:	f003 fc7f 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM2_Pin LM1_Pin */
  GPIO_InitStruct.Pin = LM2_Pin|LM1_Pin;
 8001c3a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c40:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c4a:	f107 031c 	add.w	r3, r7, #28
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4838      	ldr	r0, [pc, #224]	; (8001d34 <_ZL12MX_GPIO_Initv+0x258>)
 8001c52:	f003 fc71 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pins : DIR_1_Pin DIR_5_Pin LD2_Pin */
  GPIO_InitStruct.Pin = DIR_1_Pin|DIR_5_Pin|LD2_Pin;
 8001c56:	f24c 0302 	movw	r3, #49154	; 0xc002
 8001c5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	2300      	movs	r3, #0
 8001c66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c68:	f107 031c 	add.w	r3, r7, #28
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4831      	ldr	r0, [pc, #196]	; (8001d34 <_ZL12MX_GPIO_Initv+0x258>)
 8001c70:	f003 fc62 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001c74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c82:	2300      	movs	r3, #0
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001c86:	f107 031c 	add.w	r3, r7, #28
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	482a      	ldr	r0, [pc, #168]	; (8001d38 <_ZL12MX_GPIO_Initv+0x25c>)
 8001c8e:	f003 fc53 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI3_CS_Pin */
  GPIO_InitStruct.Pin = SPI3_CS_Pin;
 8001c92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(SPI3_CS_GPIO_Port, &GPIO_InitStruct);
 8001ca4:	f107 031c 	add.w	r3, r7, #28
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4824      	ldr	r0, [pc, #144]	; (8001d3c <_ZL12MX_GPIO_Initv+0x260>)
 8001cac:	f003 fc44 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pin : UART4_DE_Pin */
  GPIO_InitStruct.Pin = UART4_DE_Pin;
 8001cb0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(UART4_DE_GPIO_Port, &GPIO_InitStruct);
 8001cc2:	f107 031c 	add.w	r3, r7, #28
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	481d      	ldr	r0, [pc, #116]	; (8001d40 <_ZL12MX_GPIO_Initv+0x264>)
 8001cca:	f003 fc35 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM5_Pin */
  GPIO_InitStruct.Pin = LM5_Pin;
 8001cce:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001cd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cd4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LM5_GPIO_Port, &GPIO_InitStruct);
 8001cde:	f107 031c 	add.w	r3, r7, #28
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4817      	ldr	r0, [pc, #92]	; (8001d44 <_ZL12MX_GPIO_Initv+0x268>)
 8001ce6:	f003 fc27 	bl	8005538 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM4_Pin LM3_Pin */
  GPIO_InitStruct.Pin = LM4_Pin|LM3_Pin;
 8001cea:	23c0      	movs	r3, #192	; 0xc0
 8001cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001cee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf8:	f107 031c 	add.w	r3, r7, #28
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	480c      	ldr	r0, [pc, #48]	; (8001d30 <_ZL12MX_GPIO_Initv+0x254>)
 8001d00:	f003 fc1a 	bl	8005538 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8001d04:	2200      	movs	r2, #0
 8001d06:	2103      	movs	r1, #3
 8001d08:	2017      	movs	r0, #23
 8001d0a:	f001 f8d2 	bl	8002eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001d0e:	2017      	movs	r0, #23
 8001d10:	f001 f8e9 	bl	8002ee6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001d14:	2200      	movs	r2, #0
 8001d16:	2103      	movs	r1, #3
 8001d18:	2028      	movs	r0, #40	; 0x28
 8001d1a:	f001 f8ca 	bl	8002eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001d1e:	2028      	movs	r0, #40	; 0x28
 8001d20:	f001 f8e1 	bl	8002ee6 <HAL_NVIC_EnableIRQ>

}
 8001d24:	bf00      	nop
 8001d26:	3730      	adds	r7, #48	; 0x30
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	58024400 	.word	0x58024400
 8001d30:	58020400 	.word	0x58020400
 8001d34:	58021000 	.word	0x58021000
 8001d38:	58020c00 	.word	0x58020c00
 8001d3c:	58020800 	.word	0x58020800
 8001d40:	58020000 	.word	0x58020000
 8001d44:	58021800 	.word	0x58021800

08001d48 <HAL_GPIO_EXTI_Callback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
//	if (huart == &huart3) {
//		HAL_UART_Transmit_DMA(&huart3, UART3_RXBUFFER, 9);
//	}
}
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	80fb      	strh	r3, [r7, #6]
//		UART3_TXBUFFER_ACK[0] = (uint8_t)ACK_ReceivedData_Address;
//		HAL_UART_Transmit_IT(&huart3, (uint8_t *)UART3_TXBUFFER_ACK, 1);
	//		T += 3;
//		HAL_TIM_Base_Start_IT(&htim12);
//	  }
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
	...

08001d60 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
//	    	State_Casade_Control_Timer = 1;
//	        // Stop Control Loop
//	    }
//	  HAL_UART_Transmit_DMA(&huart7, (uint8_t *) &pos, 2);
//  }
	if (htim == &htim12) {
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a05      	ldr	r2, [pc, #20]	; (8001d80 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d103      	bne.n	8001d78 <HAL_TIM_PeriodElapsedCallback+0x18>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001d70:	2102      	movs	r1, #2
 8001d72:	4804      	ldr	r0, [pc, #16]	; (8001d84 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001d74:	f003 fda9 	bl	80058ca <HAL_GPIO_TogglePin>
//		HAL_UART_Transmit_DMA(&huart7, (uint8_t*) UART3_RXBUFFER,
//				sizeof(UART3_RXBUFFER));
	}
}
 8001d78:	bf00      	nop
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	24000424 	.word	0x24000424
 8001d84:	58021000 	.word	0x58021000

08001d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	2101      	movs	r1, #1
 8001d90:	4808      	ldr	r0, [pc, #32]	; (8001db4 <Error_Handler+0x2c>)
 8001d92:	f003 fd81 	bl	8005898 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d96:	2200      	movs	r2, #0
 8001d98:	2102      	movs	r1, #2
 8001d9a:	4807      	ldr	r0, [pc, #28]	; (8001db8 <Error_Handler+0x30>)
 8001d9c:	f003 fd7c 	bl	8005898 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8001da0:	2201      	movs	r2, #1
 8001da2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001da6:	4803      	ldr	r0, [pc, #12]	; (8001db4 <Error_Handler+0x2c>)
 8001da8:	f003 fd76 	bl	8005898 <HAL_GPIO_WritePin>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dac:	b672      	cpsid	i
}
 8001dae:	bf00      	nop
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001db0:	e7fe      	b.n	8001db0 <Error_Handler+0x28>
 8001db2:	bf00      	nop
 8001db4:	58020400 	.word	0x58020400
 8001db8:	58021000 	.word	0x58021000

08001dbc <_Z41__static_initialization_and_destruction_0ii>:
	}
  /* USER CODE END Error_Handler_Debug */
}
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af02      	add	r7, sp, #8
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d127      	bne.n	8001e1c <_Z41__static_initialization_and_destruction_0ii+0x60>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d122      	bne.n	8001e1c <_Z41__static_initialization_and_destruction_0ii+0x60>
Stepper stepperJ1(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8001dd6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8001dde:	2204      	movs	r2, #4
 8001de0:	491b      	ldr	r1, [pc, #108]	; (8001e50 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8001de2:	481c      	ldr	r0, [pc, #112]	; (8001e54 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001de4:	f7fe fc70 	bl	80006c8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ2(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8001de8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001df0:	2208      	movs	r2, #8
 8001df2:	491a      	ldr	r1, [pc, #104]	; (8001e5c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8001df4:	481a      	ldr	r0, [pc, #104]	; (8001e60 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8001df6:	f7fe fc67 	bl	80006c8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ3(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8001dfa:	2320      	movs	r3, #32
 8001dfc:	9300      	str	r3, [sp, #0]
 8001dfe:	4b16      	ldr	r3, [pc, #88]	; (8001e58 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	4918      	ldr	r1, [pc, #96]	; (8001e64 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8001e04:	4818      	ldr	r0, [pc, #96]	; (8001e68 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8001e06:	f7fe fc5f 	bl	80006c8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
Stepper stepperJ4(&htim4, TIM_CHANNEL_3, DIR_4_GPIO_Port, DIR_4_Pin);
 8001e0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8001e12:	2208      	movs	r2, #8
 8001e14:	4915      	ldr	r1, [pc, #84]	; (8001e6c <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8001e16:	4816      	ldr	r0, [pc, #88]	; (8001e70 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001e18:	f7fe fc56 	bl	80006c8 <_ZN7StepperC1EP17TIM_HandleTypeDefmP12GPIO_TypeDefm>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d110      	bne.n	8001e44 <_Z41__static_initialization_and_destruction_0ii+0x88>
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d10b      	bne.n	8001e44 <_Z41__static_initialization_and_destruction_0ii+0x88>
 8001e2c:	4810      	ldr	r0, [pc, #64]	; (8001e70 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8001e2e:	f7fe fc8d 	bl	800074c <_ZN7StepperD1Ev>
Stepper stepperJ3(&htim3, TIM_CHANNEL_1, DIR_3_GPIO_Port, DIR_3_Pin);
 8001e32:	480d      	ldr	r0, [pc, #52]	; (8001e68 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8001e34:	f7fe fc8a 	bl	800074c <_ZN7StepperD1Ev>
Stepper stepperJ2(&htim2, TIM_CHANNEL_3, DIR_2_GPIO_Port, DIR_2_Pin);
 8001e38:	4809      	ldr	r0, [pc, #36]	; (8001e60 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8001e3a:	f7fe fc87 	bl	800074c <_ZN7StepperD1Ev>
Stepper stepperJ1(&htim1, TIM_CHANNEL_2, DIR_1_GPIO_Port, DIR_1_Pin);
 8001e3e:	4805      	ldr	r0, [pc, #20]	; (8001e54 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8001e40:	f7fe fc84 	bl	800074c <_ZN7StepperD1Ev>
}
 8001e44:	bf00      	nop
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	58021000 	.word	0x58021000
 8001e50:	240002a8 	.word	0x240002a8
 8001e54:	240008c4 	.word	0x240008c4
 8001e58:	58020400 	.word	0x58020400
 8001e5c:	240002f4 	.word	0x240002f4
 8001e60:	240008ec 	.word	0x240008ec
 8001e64:	24000340 	.word	0x24000340
 8001e68:	24000914 	.word	0x24000914
 8001e6c:	2400038c 	.word	0x2400038c
 8001e70:	2400093c 	.word	0x2400093c

08001e74 <_GLOBAL__sub_I_hcrc>:
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e7c:	2001      	movs	r0, #1
 8001e7e:	f7ff ff9d 	bl	8001dbc <_Z41__static_initialization_and_destruction_0ii>
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <_GLOBAL__sub_D_hcrc>:
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f7ff ff95 	bl	8001dbc <_Z41__static_initialization_and_destruction_0ii>
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <HAL_MspInit+0x30>)
 8001e9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001ea0:	4a08      	ldr	r2, [pc, #32]	; (8001ec4 <HAL_MspInit+0x30>)
 8001ea2:	f043 0302 	orr.w	r3, r3, #2
 8001ea6:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_MspInit+0x30>)
 8001eac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001eb8:	bf00      	nop
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	58024400 	.word	0x58024400

08001ec8 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0b      	ldr	r2, [pc, #44]	; (8001f04 <HAL_CRC_MspInit+0x3c>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d10e      	bne.n	8001ef8 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001eda:	4b0b      	ldr	r3, [pc, #44]	; (8001f08 <HAL_CRC_MspInit+0x40>)
 8001edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ee0:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <HAL_CRC_MspInit+0x40>)
 8001ee2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001eea:	4b07      	ldr	r3, [pc, #28]	; (8001f08 <HAL_CRC_MspInit+0x40>)
 8001eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ef0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ef4:	60fb      	str	r3, [r7, #12]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	58024c00 	.word	0x58024c00
 8001f08:	58024400 	.word	0x58024400

08001f0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b0b8      	sub	sp, #224	; 0xe0
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001f24:	f107 0310 	add.w	r3, r7, #16
 8001f28:	22bc      	movs	r2, #188	; 0xbc
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f009 f907 	bl	800b140 <memset>
  if(hspi->Instance==SPI3)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a25      	ldr	r2, [pc, #148]	; (8001fcc <HAL_SPI_MspInit+0xc0>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d142      	bne.n	8001fc2 <HAL_SPI_MspInit+0xb6>
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 8001f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f40:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8001f42:	2300      	movs	r3, #0
 8001f44:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f46:	f107 0310 	add.w	r3, r7, #16
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f004 fce4 	bl	8006918 <HAL_RCCEx_PeriphCLKConfig>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <HAL_SPI_MspInit+0x4e>
    {
      Error_Handler();
 8001f56:	f7ff ff17 	bl	8001d88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001f5a:	4b1d      	ldr	r3, [pc, #116]	; (8001fd0 <HAL_SPI_MspInit+0xc4>)
 8001f5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f60:	4a1b      	ldr	r2, [pc, #108]	; (8001fd0 <HAL_SPI_MspInit+0xc4>)
 8001f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f66:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001f6a:	4b19      	ldr	r3, [pc, #100]	; (8001fd0 <HAL_SPI_MspInit+0xc4>)
 8001f6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001f70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f74:	60fb      	str	r3, [r7, #12]
 8001f76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f78:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <HAL_SPI_MspInit+0xc4>)
 8001f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f7e:	4a14      	ldr	r2, [pc, #80]	; (8001fd0 <HAL_SPI_MspInit+0xc4>)
 8001f80:	f043 0304 	orr.w	r3, r3, #4
 8001f84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f88:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <HAL_SPI_MspInit+0xc4>)
 8001f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f8e:	f003 0304 	and.w	r3, r3, #4
 8001f92:	60bb      	str	r3, [r7, #8]
 8001f94:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001f96:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001f9a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001faa:	2300      	movs	r3, #0
 8001fac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001fb0:	2306      	movs	r3, #6
 8001fb2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fb6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <HAL_SPI_MspInit+0xc8>)
 8001fbe:	f003 fabb 	bl	8005538 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001fc2:	bf00      	nop
 8001fc4:	37e0      	adds	r7, #224	; 0xe0
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40003c00 	.word	0x40003c00
 8001fd0:	58024400 	.word	0x58024400
 8001fd4:	58020800 	.word	0x58020800

08001fd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08a      	sub	sp, #40	; 0x28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a51      	ldr	r2, [pc, #324]	; (800212c <HAL_TIM_Base_MspInit+0x154>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d10f      	bne.n	800200a <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001fea:	4b51      	ldr	r3, [pc, #324]	; (8002130 <HAL_TIM_Base_MspInit+0x158>)
 8001fec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001ff0:	4a4f      	ldr	r2, [pc, #316]	; (8002130 <HAL_TIM_Base_MspInit+0x158>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8001ffa:	4b4d      	ldr	r3, [pc, #308]	; (8002130 <HAL_TIM_Base_MspInit+0x158>)
 8001ffc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	627b      	str	r3, [r7, #36]	; 0x24
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8002008:	e08c      	b.n	8002124 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM2)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002012:	d10f      	bne.n	8002034 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002014:	4b46      	ldr	r3, [pc, #280]	; (8002130 <HAL_TIM_Base_MspInit+0x158>)
 8002016:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800201a:	4a45      	ldr	r2, [pc, #276]	; (8002130 <HAL_TIM_Base_MspInit+0x158>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002024:	4b42      	ldr	r3, [pc, #264]	; (8002130 <HAL_TIM_Base_MspInit+0x158>)
 8002026:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	623b      	str	r3, [r7, #32]
 8002030:	6a3b      	ldr	r3, [r7, #32]
}
 8002032:	e077      	b.n	8002124 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM3)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a3e      	ldr	r2, [pc, #248]	; (8002134 <HAL_TIM_Base_MspInit+0x15c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d10f      	bne.n	800205e <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800203e:	4b3c      	ldr	r3, [pc, #240]	; (8002130 <HAL_TIM_Base_MspInit+0x158>)
 8002040:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002044:	4a3a      	ldr	r2, [pc, #232]	; (8002130 <HAL_TIM_Base_MspInit+0x158>)
 8002046:	f043 0302 	orr.w	r3, r3, #2
 800204a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800204e:	4b38      	ldr	r3, [pc, #224]	; (8002130 <HAL_TIM_Base_MspInit+0x158>)
 8002050:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002054:	f003 0302 	and.w	r3, r3, #2
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	69fb      	ldr	r3, [r7, #28]
}
 800205c:	e062      	b.n	8002124 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM4)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a35      	ldr	r2, [pc, #212]	; (8002138 <HAL_TIM_Base_MspInit+0x160>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d10f      	bne.n	8002088 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002068:	4b31      	ldr	r3, [pc, #196]	; (8002130 <HAL_TIM_Base_MspInit+0x158>)
 800206a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800206e:	4a30      	ldr	r2, [pc, #192]	; (8002130 <HAL_TIM_Base_MspInit+0x158>)
 8002070:	f043 0304 	orr.w	r3, r3, #4
 8002074:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002078:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <HAL_TIM_Base_MspInit+0x158>)
 800207a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800207e:	f003 0304 	and.w	r3, r3, #4
 8002082:	61bb      	str	r3, [r7, #24]
 8002084:	69bb      	ldr	r3, [r7, #24]
}
 8002086:	e04d      	b.n	8002124 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM5)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a2b      	ldr	r2, [pc, #172]	; (800213c <HAL_TIM_Base_MspInit+0x164>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d117      	bne.n	80020c2 <HAL_TIM_Base_MspInit+0xea>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002092:	4b27      	ldr	r3, [pc, #156]	; (8002130 <HAL_TIM_Base_MspInit+0x158>)
 8002094:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002098:	4a25      	ldr	r2, [pc, #148]	; (8002130 <HAL_TIM_Base_MspInit+0x158>)
 800209a:	f043 0308 	orr.w	r3, r3, #8
 800209e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020a2:	4b23      	ldr	r3, [pc, #140]	; (8002130 <HAL_TIM_Base_MspInit+0x158>)
 80020a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80020b0:	2200      	movs	r2, #0
 80020b2:	2100      	movs	r1, #0
 80020b4:	2032      	movs	r0, #50	; 0x32
 80020b6:	f000 fefc 	bl	8002eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80020ba:	2032      	movs	r0, #50	; 0x32
 80020bc:	f000 ff13 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
}
 80020c0:	e030      	b.n	8002124 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM12)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a1e      	ldr	r2, [pc, #120]	; (8002140 <HAL_TIM_Base_MspInit+0x168>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d117      	bne.n	80020fc <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80020cc:	4b18      	ldr	r3, [pc, #96]	; (8002130 <HAL_TIM_Base_MspInit+0x158>)
 80020ce:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020d2:	4a17      	ldr	r2, [pc, #92]	; (8002130 <HAL_TIM_Base_MspInit+0x158>)
 80020d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80020d8:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80020dc:	4b14      	ldr	r3, [pc, #80]	; (8002130 <HAL_TIM_Base_MspInit+0x158>)
 80020de:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80020e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 80020ea:	2200      	movs	r2, #0
 80020ec:	2100      	movs	r1, #0
 80020ee:	202b      	movs	r0, #43	; 0x2b
 80020f0:	f000 fedf 	bl	8002eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 80020f4:	202b      	movs	r0, #43	; 0x2b
 80020f6:	f000 fef6 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
}
 80020fa:	e013      	b.n	8002124 <HAL_TIM_Base_MspInit+0x14c>
  else if(htim_base->Instance==TIM15)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a10      	ldr	r2, [pc, #64]	; (8002144 <HAL_TIM_Base_MspInit+0x16c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d10e      	bne.n	8002124 <HAL_TIM_Base_MspInit+0x14c>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002106:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <HAL_TIM_Base_MspInit+0x158>)
 8002108:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800210c:	4a08      	ldr	r2, [pc, #32]	; (8002130 <HAL_TIM_Base_MspInit+0x158>)
 800210e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002112:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <HAL_TIM_Base_MspInit+0x158>)
 8002118:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800211c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002120:	60fb      	str	r3, [r7, #12]
 8002122:	68fb      	ldr	r3, [r7, #12]
}
 8002124:	bf00      	nop
 8002126:	3728      	adds	r7, #40	; 0x28
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40010000 	.word	0x40010000
 8002130:	58024400 	.word	0x58024400
 8002134:	40000400 	.word	0x40000400
 8002138:	40000800 	.word	0x40000800
 800213c:	40000c00 	.word	0x40000c00
 8002140:	40001800 	.word	0x40001800
 8002144:	40014000 	.word	0x40014000

08002148 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08c      	sub	sp, #48	; 0x30
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 031c 	add.w	r3, r7, #28
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a5e      	ldr	r2, [pc, #376]	; (80022e0 <HAL_TIM_MspPostInit+0x198>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d120      	bne.n	80021ac <HAL_TIM_MspPostInit+0x64>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800216a:	4b5e      	ldr	r3, [pc, #376]	; (80022e4 <HAL_TIM_MspPostInit+0x19c>)
 800216c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002170:	4a5c      	ldr	r2, [pc, #368]	; (80022e4 <HAL_TIM_MspPostInit+0x19c>)
 8002172:	f043 0310 	orr.w	r3, r3, #16
 8002176:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800217a:	4b5a      	ldr	r3, [pc, #360]	; (80022e4 <HAL_TIM_MspPostInit+0x19c>)
 800217c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002180:	f003 0310 	and.w	r3, r3, #16
 8002184:	61bb      	str	r3, [r7, #24]
 8002186:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = STEP_1_Pin;
 8002188:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800218c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800218e:	2302      	movs	r3, #2
 8002190:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002192:	2300      	movs	r3, #0
 8002194:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002196:	2300      	movs	r3, #0
 8002198:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800219a:	2301      	movs	r3, #1
 800219c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_1_GPIO_Port, &GPIO_InitStruct);
 800219e:	f107 031c 	add.w	r3, r7, #28
 80021a2:	4619      	mov	r1, r3
 80021a4:	4850      	ldr	r0, [pc, #320]	; (80022e8 <HAL_TIM_MspPostInit+0x1a0>)
 80021a6:	f003 f9c7 	bl	8005538 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 80021aa:	e094      	b.n	80022d6 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b4:	d120      	bne.n	80021f8 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021b6:	4b4b      	ldr	r3, [pc, #300]	; (80022e4 <HAL_TIM_MspPostInit+0x19c>)
 80021b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021bc:	4a49      	ldr	r2, [pc, #292]	; (80022e4 <HAL_TIM_MspPostInit+0x19c>)
 80021be:	f043 0302 	orr.w	r3, r3, #2
 80021c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021c6:	4b47      	ldr	r3, [pc, #284]	; (80022e4 <HAL_TIM_MspPostInit+0x19c>)
 80021c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021cc:	f003 0302 	and.w	r3, r3, #2
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = STEP_2_Pin;
 80021d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021da:	2302      	movs	r3, #2
 80021dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021de:	2300      	movs	r3, #0
 80021e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021e2:	2300      	movs	r3, #0
 80021e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021e6:	2301      	movs	r3, #1
 80021e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_2_GPIO_Port, &GPIO_InitStruct);
 80021ea:	f107 031c 	add.w	r3, r7, #28
 80021ee:	4619      	mov	r1, r3
 80021f0:	483e      	ldr	r0, [pc, #248]	; (80022ec <HAL_TIM_MspPostInit+0x1a4>)
 80021f2:	f003 f9a1 	bl	8005538 <HAL_GPIO_Init>
}
 80021f6:	e06e      	b.n	80022d6 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM3)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a3c      	ldr	r2, [pc, #240]	; (80022f0 <HAL_TIM_MspPostInit+0x1a8>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d11f      	bne.n	8002242 <HAL_TIM_MspPostInit+0xfa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002202:	4b38      	ldr	r3, [pc, #224]	; (80022e4 <HAL_TIM_MspPostInit+0x19c>)
 8002204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002208:	4a36      	ldr	r2, [pc, #216]	; (80022e4 <HAL_TIM_MspPostInit+0x19c>)
 800220a:	f043 0301 	orr.w	r3, r3, #1
 800220e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002212:	4b34      	ldr	r3, [pc, #208]	; (80022e4 <HAL_TIM_MspPostInit+0x19c>)
 8002214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STEP_3_Pin;
 8002220:	2340      	movs	r3, #64	; 0x40
 8002222:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002224:	2302      	movs	r3, #2
 8002226:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800222c:	2300      	movs	r3, #0
 800222e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002230:	2302      	movs	r3, #2
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_3_GPIO_Port, &GPIO_InitStruct);
 8002234:	f107 031c 	add.w	r3, r7, #28
 8002238:	4619      	mov	r1, r3
 800223a:	482e      	ldr	r0, [pc, #184]	; (80022f4 <HAL_TIM_MspPostInit+0x1ac>)
 800223c:	f003 f97c 	bl	8005538 <HAL_GPIO_Init>
}
 8002240:	e049      	b.n	80022d6 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM4)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a2c      	ldr	r2, [pc, #176]	; (80022f8 <HAL_TIM_MspPostInit+0x1b0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d120      	bne.n	800228e <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224c:	4b25      	ldr	r3, [pc, #148]	; (80022e4 <HAL_TIM_MspPostInit+0x19c>)
 800224e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002252:	4a24      	ldr	r2, [pc, #144]	; (80022e4 <HAL_TIM_MspPostInit+0x19c>)
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800225c:	4b21      	ldr	r3, [pc, #132]	; (80022e4 <HAL_TIM_MspPostInit+0x19c>)
 800225e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STEP_4_Pin;
 800226a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800226e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002270:	2302      	movs	r3, #2
 8002272:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002274:	2300      	movs	r3, #0
 8002276:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002278:	2300      	movs	r3, #0
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800227c:	2302      	movs	r3, #2
 800227e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_4_GPIO_Port, &GPIO_InitStruct);
 8002280:	f107 031c 	add.w	r3, r7, #28
 8002284:	4619      	mov	r1, r3
 8002286:	4819      	ldr	r0, [pc, #100]	; (80022ec <HAL_TIM_MspPostInit+0x1a4>)
 8002288:	f003 f956 	bl	8005538 <HAL_GPIO_Init>
}
 800228c:	e023      	b.n	80022d6 <HAL_TIM_MspPostInit+0x18e>
  else if(htim->Instance==TIM15)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a1a      	ldr	r2, [pc, #104]	; (80022fc <HAL_TIM_MspPostInit+0x1b4>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d11e      	bne.n	80022d6 <HAL_TIM_MspPostInit+0x18e>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002298:	4b12      	ldr	r3, [pc, #72]	; (80022e4 <HAL_TIM_MspPostInit+0x19c>)
 800229a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800229e:	4a11      	ldr	r2, [pc, #68]	; (80022e4 <HAL_TIM_MspPostInit+0x19c>)
 80022a0:	f043 0310 	orr.w	r3, r3, #16
 80022a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80022a8:	4b0e      	ldr	r3, [pc, #56]	; (80022e4 <HAL_TIM_MspPostInit+0x19c>)
 80022aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = STEP_5_Pin;
 80022b6:	2340      	movs	r3, #64	; 0x40
 80022b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022ba:	2302      	movs	r3, #2
 80022bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c2:	2300      	movs	r3, #0
 80022c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM15;
 80022c6:	2304      	movs	r3, #4
 80022c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(STEP_5_GPIO_Port, &GPIO_InitStruct);
 80022ca:	f107 031c 	add.w	r3, r7, #28
 80022ce:	4619      	mov	r1, r3
 80022d0:	4805      	ldr	r0, [pc, #20]	; (80022e8 <HAL_TIM_MspPostInit+0x1a0>)
 80022d2:	f003 f931 	bl	8005538 <HAL_GPIO_Init>
}
 80022d6:	bf00      	nop
 80022d8:	3730      	adds	r7, #48	; 0x30
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40010000 	.word	0x40010000
 80022e4:	58024400 	.word	0x58024400
 80022e8:	58021000 	.word	0x58021000
 80022ec:	58020400 	.word	0x58020400
 80022f0:	40000400 	.word	0x40000400
 80022f4:	58020000 	.word	0x58020000
 80022f8:	40000800 	.word	0x40000800
 80022fc:	40014000 	.word	0x40014000

08002300 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b0bc      	sub	sp, #240	; 0xf0
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002308:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800230c:	2200      	movs	r2, #0
 800230e:	601a      	str	r2, [r3, #0]
 8002310:	605a      	str	r2, [r3, #4]
 8002312:	609a      	str	r2, [r3, #8]
 8002314:	60da      	str	r2, [r3, #12]
 8002316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002318:	f107 0320 	add.w	r3, r7, #32
 800231c:	22bc      	movs	r2, #188	; 0xbc
 800231e:	2100      	movs	r1, #0
 8002320:	4618      	mov	r0, r3
 8002322:	f008 ff0d 	bl	800b140 <memset>
  if(huart->Instance==UART4)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4aa1      	ldr	r2, [pc, #644]	; (80025b0 <HAL_UART_MspInit+0x2b0>)
 800232c:	4293      	cmp	r3, r2
 800232e:	f040 80b7 	bne.w	80024a0 <HAL_UART_MspInit+0x1a0>
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002332:	2302      	movs	r3, #2
 8002334:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002336:	2300      	movs	r3, #0
 8002338:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800233c:	f107 0320 	add.w	r3, r7, #32
 8002340:	4618      	mov	r0, r3
 8002342:	f004 fae9 	bl	8006918 <HAL_RCCEx_PeriphCLKConfig>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800234c:	f7ff fd1c 	bl	8001d88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002350:	4b98      	ldr	r3, [pc, #608]	; (80025b4 <HAL_UART_MspInit+0x2b4>)
 8002352:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002356:	4a97      	ldr	r2, [pc, #604]	; (80025b4 <HAL_UART_MspInit+0x2b4>)
 8002358:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800235c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002360:	4b94      	ldr	r3, [pc, #592]	; (80025b4 <HAL_UART_MspInit+0x2b4>)
 8002362:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002366:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800236a:	61fb      	str	r3, [r7, #28]
 800236c:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800236e:	4b91      	ldr	r3, [pc, #580]	; (80025b4 <HAL_UART_MspInit+0x2b4>)
 8002370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002374:	4a8f      	ldr	r2, [pc, #572]	; (80025b4 <HAL_UART_MspInit+0x2b4>)
 8002376:	f043 0308 	orr.w	r3, r3, #8
 800237a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800237e:	4b8d      	ldr	r3, [pc, #564]	; (80025b4 <HAL_UART_MspInit+0x2b4>)
 8002380:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	61bb      	str	r3, [r7, #24]
 800238a:	69bb      	ldr	r3, [r7, #24]
    /**UART4 GPIO Configuration
    PD0     ------> UART4_RX
    PD1     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800238c:	2303      	movs	r3, #3
 800238e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	2302      	movs	r3, #2
 8002394:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002398:	2300      	movs	r3, #0
 800239a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239e:	2300      	movs	r3, #0
 80023a0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80023a4:	2308      	movs	r3, #8
 80023a6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023aa:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80023ae:	4619      	mov	r1, r3
 80023b0:	4881      	ldr	r0, [pc, #516]	; (80025b8 <HAL_UART_MspInit+0x2b8>)
 80023b2:	f003 f8c1 	bl	8005538 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream3;
 80023b6:	4b81      	ldr	r3, [pc, #516]	; (80025bc <HAL_UART_MspInit+0x2bc>)
 80023b8:	4a81      	ldr	r2, [pc, #516]	; (80025c0 <HAL_UART_MspInit+0x2c0>)
 80023ba:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Request = DMA_REQUEST_UART4_RX;
 80023bc:	4b7f      	ldr	r3, [pc, #508]	; (80025bc <HAL_UART_MspInit+0x2bc>)
 80023be:	223f      	movs	r2, #63	; 0x3f
 80023c0:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023c2:	4b7e      	ldr	r3, [pc, #504]	; (80025bc <HAL_UART_MspInit+0x2bc>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80023c8:	4b7c      	ldr	r3, [pc, #496]	; (80025bc <HAL_UART_MspInit+0x2bc>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80023ce:	4b7b      	ldr	r3, [pc, #492]	; (80025bc <HAL_UART_MspInit+0x2bc>)
 80023d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023d4:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80023d6:	4b79      	ldr	r3, [pc, #484]	; (80025bc <HAL_UART_MspInit+0x2bc>)
 80023d8:	2200      	movs	r2, #0
 80023da:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80023dc:	4b77      	ldr	r3, [pc, #476]	; (80025bc <HAL_UART_MspInit+0x2bc>)
 80023de:	2200      	movs	r2, #0
 80023e0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 80023e2:	4b76      	ldr	r3, [pc, #472]	; (80025bc <HAL_UART_MspInit+0x2bc>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80023e8:	4b74      	ldr	r3, [pc, #464]	; (80025bc <HAL_UART_MspInit+0x2bc>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80023ee:	4b73      	ldr	r3, [pc, #460]	; (80025bc <HAL_UART_MspInit+0x2bc>)
 80023f0:	2204      	movs	r2, #4
 80023f2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80023f4:	4b71      	ldr	r3, [pc, #452]	; (80025bc <HAL_UART_MspInit+0x2bc>)
 80023f6:	2203      	movs	r2, #3
 80023f8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 80023fa:	4b70      	ldr	r3, [pc, #448]	; (80025bc <HAL_UART_MspInit+0x2bc>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002400:	4b6e      	ldr	r3, [pc, #440]	; (80025bc <HAL_UART_MspInit+0x2bc>)
 8002402:	2200      	movs	r2, #0
 8002404:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002406:	486d      	ldr	r0, [pc, #436]	; (80025bc <HAL_UART_MspInit+0x2bc>)
 8002408:	f000 fe72 	bl	80030f0 <HAL_DMA_Init>
 800240c:	4603      	mov	r3, r0
 800240e:	2b00      	cmp	r3, #0
 8002410:	d001      	beq.n	8002416 <HAL_UART_MspInit+0x116>
    {
      Error_Handler();
 8002412:	f7ff fcb9 	bl	8001d88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a68      	ldr	r2, [pc, #416]	; (80025bc <HAL_UART_MspInit+0x2bc>)
 800241a:	67da      	str	r2, [r3, #124]	; 0x7c
 800241c:	4a67      	ldr	r2, [pc, #412]	; (80025bc <HAL_UART_MspInit+0x2bc>)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8002422:	4b68      	ldr	r3, [pc, #416]	; (80025c4 <HAL_UART_MspInit+0x2c4>)
 8002424:	4a68      	ldr	r2, [pc, #416]	; (80025c8 <HAL_UART_MspInit+0x2c8>)
 8002426:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8002428:	4b66      	ldr	r3, [pc, #408]	; (80025c4 <HAL_UART_MspInit+0x2c4>)
 800242a:	2240      	movs	r2, #64	; 0x40
 800242c:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800242e:	4b65      	ldr	r3, [pc, #404]	; (80025c4 <HAL_UART_MspInit+0x2c4>)
 8002430:	2240      	movs	r2, #64	; 0x40
 8002432:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002434:	4b63      	ldr	r3, [pc, #396]	; (80025c4 <HAL_UART_MspInit+0x2c4>)
 8002436:	2200      	movs	r2, #0
 8002438:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800243a:	4b62      	ldr	r3, [pc, #392]	; (80025c4 <HAL_UART_MspInit+0x2c4>)
 800243c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002440:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002442:	4b60      	ldr	r3, [pc, #384]	; (80025c4 <HAL_UART_MspInit+0x2c4>)
 8002444:	2200      	movs	r2, #0
 8002446:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002448:	4b5e      	ldr	r3, [pc, #376]	; (80025c4 <HAL_UART_MspInit+0x2c4>)
 800244a:	2200      	movs	r2, #0
 800244c:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 800244e:	4b5d      	ldr	r3, [pc, #372]	; (80025c4 <HAL_UART_MspInit+0x2c4>)
 8002450:	2200      	movs	r2, #0
 8002452:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002454:	4b5b      	ldr	r3, [pc, #364]	; (80025c4 <HAL_UART_MspInit+0x2c4>)
 8002456:	2200      	movs	r2, #0
 8002458:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800245a:	4b5a      	ldr	r3, [pc, #360]	; (80025c4 <HAL_UART_MspInit+0x2c4>)
 800245c:	2204      	movs	r2, #4
 800245e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart4_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002460:	4b58      	ldr	r3, [pc, #352]	; (80025c4 <HAL_UART_MspInit+0x2c4>)
 8002462:	2203      	movs	r2, #3
 8002464:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart4_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002466:	4b57      	ldr	r3, [pc, #348]	; (80025c4 <HAL_UART_MspInit+0x2c4>)
 8002468:	2200      	movs	r2, #0
 800246a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart4_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800246c:	4b55      	ldr	r3, [pc, #340]	; (80025c4 <HAL_UART_MspInit+0x2c4>)
 800246e:	2200      	movs	r2, #0
 8002470:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002472:	4854      	ldr	r0, [pc, #336]	; (80025c4 <HAL_UART_MspInit+0x2c4>)
 8002474:	f000 fe3c 	bl	80030f0 <HAL_DMA_Init>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_UART_MspInit+0x182>
    {
      Error_Handler();
 800247e:	f7ff fc83 	bl	8001d88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4a4f      	ldr	r2, [pc, #316]	; (80025c4 <HAL_UART_MspInit+0x2c4>)
 8002486:	679a      	str	r2, [r3, #120]	; 0x78
 8002488:	4a4e      	ldr	r2, [pc, #312]	; (80025c4 <HAL_UART_MspInit+0x2c4>)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800248e:	2200      	movs	r2, #0
 8002490:	2100      	movs	r1, #0
 8002492:	2034      	movs	r0, #52	; 0x34
 8002494:	f000 fd0d 	bl	8002eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002498:	2034      	movs	r0, #52	; 0x34
 800249a:	f000 fd24 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800249e:	e154      	b.n	800274a <HAL_UART_MspInit+0x44a>
  else if(huart->Instance==UART7)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a49      	ldr	r2, [pc, #292]	; (80025cc <HAL_UART_MspInit+0x2cc>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	f040 8098 	bne.w	80025dc <HAL_UART_MspInit+0x2dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80024ac:	2302      	movs	r3, #2
 80024ae:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80024b6:	f107 0320 	add.w	r3, r7, #32
 80024ba:	4618      	mov	r0, r3
 80024bc:	f004 fa2c 	bl	8006918 <HAL_RCCEx_PeriphCLKConfig>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_UART_MspInit+0x1ca>
      Error_Handler();
 80024c6:	f7ff fc5f 	bl	8001d88 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80024ca:	4b3a      	ldr	r3, [pc, #232]	; (80025b4 <HAL_UART_MspInit+0x2b4>)
 80024cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024d0:	4a38      	ldr	r2, [pc, #224]	; (80025b4 <HAL_UART_MspInit+0x2b4>)
 80024d2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80024d6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80024da:	4b36      	ldr	r3, [pc, #216]	; (80025b4 <HAL_UART_MspInit+0x2b4>)
 80024dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80024e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80024e4:	617b      	str	r3, [r7, #20]
 80024e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024e8:	4b32      	ldr	r3, [pc, #200]	; (80025b4 <HAL_UART_MspInit+0x2b4>)
 80024ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024ee:	4a31      	ldr	r2, [pc, #196]	; (80025b4 <HAL_UART_MspInit+0x2b4>)
 80024f0:	f043 0310 	orr.w	r3, r3, #16
 80024f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80024f8:	4b2e      	ldr	r3, [pc, #184]	; (80025b4 <HAL_UART_MspInit+0x2b4>)
 80024fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	613b      	str	r3, [r7, #16]
 8002504:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002506:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800250a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250e:	2302      	movs	r3, #2
 8002510:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251a:	2300      	movs	r3, #0
 800251c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART7;
 8002520:	2307      	movs	r3, #7
 8002522:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002526:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800252a:	4619      	mov	r1, r3
 800252c:	4828      	ldr	r0, [pc, #160]	; (80025d0 <HAL_UART_MspInit+0x2d0>)
 800252e:	f003 f803 	bl	8005538 <HAL_GPIO_Init>
    hdma_uart7_tx.Instance = DMA1_Stream0;
 8002532:	4b28      	ldr	r3, [pc, #160]	; (80025d4 <HAL_UART_MspInit+0x2d4>)
 8002534:	4a28      	ldr	r2, [pc, #160]	; (80025d8 <HAL_UART_MspInit+0x2d8>)
 8002536:	601a      	str	r2, [r3, #0]
    hdma_uart7_tx.Init.Request = DMA_REQUEST_UART7_TX;
 8002538:	4b26      	ldr	r3, [pc, #152]	; (80025d4 <HAL_UART_MspInit+0x2d4>)
 800253a:	2250      	movs	r2, #80	; 0x50
 800253c:	605a      	str	r2, [r3, #4]
    hdma_uart7_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800253e:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <HAL_UART_MspInit+0x2d4>)
 8002540:	2240      	movs	r2, #64	; 0x40
 8002542:	609a      	str	r2, [r3, #8]
    hdma_uart7_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002544:	4b23      	ldr	r3, [pc, #140]	; (80025d4 <HAL_UART_MspInit+0x2d4>)
 8002546:	2200      	movs	r2, #0
 8002548:	60da      	str	r2, [r3, #12]
    hdma_uart7_tx.Init.MemInc = DMA_MINC_ENABLE;
 800254a:	4b22      	ldr	r3, [pc, #136]	; (80025d4 <HAL_UART_MspInit+0x2d4>)
 800254c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002550:	611a      	str	r2, [r3, #16]
    hdma_uart7_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002552:	4b20      	ldr	r3, [pc, #128]	; (80025d4 <HAL_UART_MspInit+0x2d4>)
 8002554:	2200      	movs	r2, #0
 8002556:	615a      	str	r2, [r3, #20]
    hdma_uart7_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002558:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <HAL_UART_MspInit+0x2d4>)
 800255a:	2200      	movs	r2, #0
 800255c:	619a      	str	r2, [r3, #24]
    hdma_uart7_tx.Init.Mode = DMA_NORMAL;
 800255e:	4b1d      	ldr	r3, [pc, #116]	; (80025d4 <HAL_UART_MspInit+0x2d4>)
 8002560:	2200      	movs	r2, #0
 8002562:	61da      	str	r2, [r3, #28]
    hdma_uart7_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002564:	4b1b      	ldr	r3, [pc, #108]	; (80025d4 <HAL_UART_MspInit+0x2d4>)
 8002566:	2200      	movs	r2, #0
 8002568:	621a      	str	r2, [r3, #32]
    hdma_uart7_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800256a:	4b1a      	ldr	r3, [pc, #104]	; (80025d4 <HAL_UART_MspInit+0x2d4>)
 800256c:	2204      	movs	r2, #4
 800256e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_uart7_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002570:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <HAL_UART_MspInit+0x2d4>)
 8002572:	2203      	movs	r2, #3
 8002574:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_uart7_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002576:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <HAL_UART_MspInit+0x2d4>)
 8002578:	2200      	movs	r2, #0
 800257a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_uart7_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800257c:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <HAL_UART_MspInit+0x2d4>)
 800257e:	2200      	movs	r2, #0
 8002580:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_uart7_tx) != HAL_OK)
 8002582:	4814      	ldr	r0, [pc, #80]	; (80025d4 <HAL_UART_MspInit+0x2d4>)
 8002584:	f000 fdb4 	bl	80030f0 <HAL_DMA_Init>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <HAL_UART_MspInit+0x292>
      Error_Handler();
 800258e:	f7ff fbfb 	bl	8001d88 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart7_tx);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a0f      	ldr	r2, [pc, #60]	; (80025d4 <HAL_UART_MspInit+0x2d4>)
 8002596:	679a      	str	r2, [r3, #120]	; 0x78
 8002598:	4a0e      	ldr	r2, [pc, #56]	; (80025d4 <HAL_UART_MspInit+0x2d4>)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART7_IRQn, 0, 0);
 800259e:	2200      	movs	r2, #0
 80025a0:	2100      	movs	r1, #0
 80025a2:	2052      	movs	r0, #82	; 0x52
 80025a4:	f000 fc85 	bl	8002eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80025a8:	2052      	movs	r0, #82	; 0x52
 80025aa:	f000 fc9c 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
}
 80025ae:	e0cc      	b.n	800274a <HAL_UART_MspInit+0x44a>
 80025b0:	40004c00 	.word	0x40004c00
 80025b4:	58024400 	.word	0x58024400
 80025b8:	58020c00 	.word	0x58020c00
 80025bc:	2400066c 	.word	0x2400066c
 80025c0:	40020058 	.word	0x40020058
 80025c4:	240006e4 	.word	0x240006e4
 80025c8:	40020070 	.word	0x40020070
 80025cc:	40007800 	.word	0x40007800
 80025d0:	58021000 	.word	0x58021000
 80025d4:	2400075c 	.word	0x2400075c
 80025d8:	40020010 	.word	0x40020010
  else if(huart->Instance==USART3)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a5c      	ldr	r2, [pc, #368]	; (8002754 <HAL_UART_MspInit+0x454>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	f040 80b1 	bne.w	800274a <HAL_UART_MspInit+0x44a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80025e8:	2302      	movs	r3, #2
 80025ea:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80025ec:	2300      	movs	r3, #0
 80025ee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025f2:	f107 0320 	add.w	r3, r7, #32
 80025f6:	4618      	mov	r0, r3
 80025f8:	f004 f98e 	bl	8006918 <HAL_RCCEx_PeriphCLKConfig>
 80025fc:	4603      	mov	r3, r0
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d001      	beq.n	8002606 <HAL_UART_MspInit+0x306>
      Error_Handler();
 8002602:	f7ff fbc1 	bl	8001d88 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002606:	4b54      	ldr	r3, [pc, #336]	; (8002758 <HAL_UART_MspInit+0x458>)
 8002608:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800260c:	4a52      	ldr	r2, [pc, #328]	; (8002758 <HAL_UART_MspInit+0x458>)
 800260e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002612:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002616:	4b50      	ldr	r3, [pc, #320]	; (8002758 <HAL_UART_MspInit+0x458>)
 8002618:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800261c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002624:	4b4c      	ldr	r3, [pc, #304]	; (8002758 <HAL_UART_MspInit+0x458>)
 8002626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800262a:	4a4b      	ldr	r2, [pc, #300]	; (8002758 <HAL_UART_MspInit+0x458>)
 800262c:	f043 0308 	orr.w	r3, r3, #8
 8002630:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002634:	4b48      	ldr	r3, [pc, #288]	; (8002758 <HAL_UART_MspInit+0x458>)
 8002636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	60bb      	str	r3, [r7, #8]
 8002640:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002642:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002646:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800264a:	2302      	movs	r3, #2
 800264c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002650:	2300      	movs	r3, #0
 8002652:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002656:	2300      	movs	r3, #0
 8002658:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800265c:	2307      	movs	r3, #7
 800265e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002662:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002666:	4619      	mov	r1, r3
 8002668:	483c      	ldr	r0, [pc, #240]	; (800275c <HAL_UART_MspInit+0x45c>)
 800266a:	f002 ff65 	bl	8005538 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800266e:	4b3c      	ldr	r3, [pc, #240]	; (8002760 <HAL_UART_MspInit+0x460>)
 8002670:	4a3c      	ldr	r2, [pc, #240]	; (8002764 <HAL_UART_MspInit+0x464>)
 8002672:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002674:	4b3a      	ldr	r3, [pc, #232]	; (8002760 <HAL_UART_MspInit+0x460>)
 8002676:	222d      	movs	r2, #45	; 0x2d
 8002678:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800267a:	4b39      	ldr	r3, [pc, #228]	; (8002760 <HAL_UART_MspInit+0x460>)
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002680:	4b37      	ldr	r3, [pc, #220]	; (8002760 <HAL_UART_MspInit+0x460>)
 8002682:	2200      	movs	r2, #0
 8002684:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002686:	4b36      	ldr	r3, [pc, #216]	; (8002760 <HAL_UART_MspInit+0x460>)
 8002688:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800268c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800268e:	4b34      	ldr	r3, [pc, #208]	; (8002760 <HAL_UART_MspInit+0x460>)
 8002690:	2200      	movs	r2, #0
 8002692:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002694:	4b32      	ldr	r3, [pc, #200]	; (8002760 <HAL_UART_MspInit+0x460>)
 8002696:	2200      	movs	r2, #0
 8002698:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800269a:	4b31      	ldr	r3, [pc, #196]	; (8002760 <HAL_UART_MspInit+0x460>)
 800269c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026a0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80026a2:	4b2f      	ldr	r3, [pc, #188]	; (8002760 <HAL_UART_MspInit+0x460>)
 80026a4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80026a8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026aa:	4b2d      	ldr	r3, [pc, #180]	; (8002760 <HAL_UART_MspInit+0x460>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80026b0:	482b      	ldr	r0, [pc, #172]	; (8002760 <HAL_UART_MspInit+0x460>)
 80026b2:	f000 fd1d 	bl	80030f0 <HAL_DMA_Init>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_UART_MspInit+0x3c0>
      Error_Handler();
 80026bc:	f7ff fb64 	bl	8001d88 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a27      	ldr	r2, [pc, #156]	; (8002760 <HAL_UART_MspInit+0x460>)
 80026c4:	67da      	str	r2, [r3, #124]	; 0x7c
 80026c6:	4a26      	ldr	r2, [pc, #152]	; (8002760 <HAL_UART_MspInit+0x460>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart3_tx.Instance = DMA1_Stream2;
 80026cc:	4b26      	ldr	r3, [pc, #152]	; (8002768 <HAL_UART_MspInit+0x468>)
 80026ce:	4a27      	ldr	r2, [pc, #156]	; (800276c <HAL_UART_MspInit+0x46c>)
 80026d0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80026d2:	4b25      	ldr	r3, [pc, #148]	; (8002768 <HAL_UART_MspInit+0x468>)
 80026d4:	222e      	movs	r2, #46	; 0x2e
 80026d6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026d8:	4b23      	ldr	r3, [pc, #140]	; (8002768 <HAL_UART_MspInit+0x468>)
 80026da:	2240      	movs	r2, #64	; 0x40
 80026dc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026de:	4b22      	ldr	r3, [pc, #136]	; (8002768 <HAL_UART_MspInit+0x468>)
 80026e0:	2200      	movs	r2, #0
 80026e2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026e4:	4b20      	ldr	r3, [pc, #128]	; (8002768 <HAL_UART_MspInit+0x468>)
 80026e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ea:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026ec:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <HAL_UART_MspInit+0x468>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026f2:	4b1d      	ldr	r3, [pc, #116]	; (8002768 <HAL_UART_MspInit+0x468>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80026f8:	4b1b      	ldr	r3, [pc, #108]	; (8002768 <HAL_UART_MspInit+0x468>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80026fe:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <HAL_UART_MspInit+0x468>)
 8002700:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002704:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002706:	4b18      	ldr	r3, [pc, #96]	; (8002768 <HAL_UART_MspInit+0x468>)
 8002708:	2204      	movs	r2, #4
 800270a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800270c:	4b16      	ldr	r3, [pc, #88]	; (8002768 <HAL_UART_MspInit+0x468>)
 800270e:	2203      	movs	r2, #3
 8002710:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8002712:	4b15      	ldr	r3, [pc, #84]	; (8002768 <HAL_UART_MspInit+0x468>)
 8002714:	2200      	movs	r2, #0
 8002716:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8002718:	4b13      	ldr	r3, [pc, #76]	; (8002768 <HAL_UART_MspInit+0x468>)
 800271a:	2200      	movs	r2, #0
 800271c:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800271e:	4812      	ldr	r0, [pc, #72]	; (8002768 <HAL_UART_MspInit+0x468>)
 8002720:	f000 fce6 	bl	80030f0 <HAL_DMA_Init>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_UART_MspInit+0x42e>
      Error_Handler();
 800272a:	f7ff fb2d 	bl	8001d88 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a0d      	ldr	r2, [pc, #52]	; (8002768 <HAL_UART_MspInit+0x468>)
 8002732:	679a      	str	r2, [r3, #120]	; 0x78
 8002734:	4a0c      	ldr	r2, [pc, #48]	; (8002768 <HAL_UART_MspInit+0x468>)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800273a:	2200      	movs	r2, #0
 800273c:	2100      	movs	r1, #0
 800273e:	2027      	movs	r0, #39	; 0x27
 8002740:	f000 fbb7 	bl	8002eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002744:	2027      	movs	r0, #39	; 0x27
 8002746:	f000 fbce 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
}
 800274a:	bf00      	nop
 800274c:	37f0      	adds	r7, #240	; 0xf0
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	40004800 	.word	0x40004800
 8002758:	58024400 	.word	0x58024400
 800275c:	58020c00 	.word	0x58020c00
 8002760:	240007d4 	.word	0x240007d4
 8002764:	40020028 	.word	0x40020028
 8002768:	2400084c 	.word	0x2400084c
 800276c:	40020040 	.word	0x40020040

08002770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002774:	e7fe      	b.n	8002774 <NMI_Handler+0x4>

08002776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800277a:	e7fe      	b.n	800277a <HardFault_Handler+0x4>

0800277c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002780:	e7fe      	b.n	8002780 <MemManage_Handler+0x4>

08002782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002786:	e7fe      	b.n	8002786 <BusFault_Handler+0x4>

08002788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002788:	b480      	push	{r7}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800278c:	e7fe      	b.n	800278c <UsageFault_Handler+0x4>

0800278e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800278e:	b480      	push	{r7}
 8002790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80027a0:	bf00      	nop
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr

080027aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80027aa:	b480      	push	{r7}
 80027ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027ae:	bf00      	nop
 80027b0:	46bd      	mov	sp, r7
 80027b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b6:	4770      	bx	lr

080027b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027bc:	f000 fa72 	bl	8002ca4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027c0:	bf00      	nop
 80027c2:	bd80      	pop	{r7, pc}

080027c4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_tx);
 80027c8:	4802      	ldr	r0, [pc, #8]	; (80027d4 <DMA1_Stream0_IRQHandler+0x10>)
 80027ca:	f001 fd4f 	bl	800426c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	2400075c 	.word	0x2400075c

080027d8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80027dc:	4802      	ldr	r0, [pc, #8]	; (80027e8 <DMA1_Stream1_IRQHandler+0x10>)
 80027de:	f001 fd45 	bl	800426c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	240007d4 	.word	0x240007d4

080027ec <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80027f0:	4802      	ldr	r0, [pc, #8]	; (80027fc <DMA1_Stream2_IRQHandler+0x10>)
 80027f2:	f001 fd3b 	bl	800426c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80027f6:	bf00      	nop
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	2400084c 	.word	0x2400084c

08002800 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002804:	4802      	ldr	r0, [pc, #8]	; (8002810 <DMA1_Stream3_IRQHandler+0x10>)
 8002806:	f001 fd31 	bl	800426c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	2400066c 	.word	0x2400066c

08002814 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002818:	4802      	ldr	r0, [pc, #8]	; (8002824 <DMA1_Stream4_IRQHandler+0x10>)
 800281a:	f001 fd27 	bl	800426c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800281e:	bf00      	nop
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	240006e4 	.word	0x240006e4

08002828 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(STEP_5_Pin);
 800282c:	2040      	movs	r0, #64	; 0x40
 800282e:	f003 f866 	bl	80058fe <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM3_Pin);
 8002832:	2080      	movs	r0, #128	; 0x80
 8002834:	f003 f863 	bl	80058fe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002838:	bf00      	nop
 800283a:	bd80      	pop	{r7, pc}

0800283c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002840:	4802      	ldr	r0, [pc, #8]	; (800284c <USART3_IRQHandler+0x10>)
 8002842:	f006 ffb5 	bl	80097b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002846:	bf00      	nop
 8002848:	bd80      	pop	{r7, pc}
 800284a:	bf00      	nop
 800284c:	240005dc 	.word	0x240005dc

08002850 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LM2_Pin);
 8002854:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002858:	f003 f851 	bl	80058fe <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(LM1_Pin);
 800285c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002860:	f003 f84d 	bl	80058fe <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Blue_Button_Pin_Pin);
 8002864:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002868:	f003 f849 	bl	80058fe <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(DIR_1_Pin);
 800286c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002870:	f003 f845 	bl	80058fe <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002874:	bf00      	nop
 8002876:	bd80      	pop	{r7, pc}

08002878 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 800287c:	4802      	ldr	r0, [pc, #8]	; (8002888 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 800287e:	f005 fe95 	bl	80085ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8002882:	bf00      	nop
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	24000424 	.word	0x24000424

0800288c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002890:	4802      	ldr	r0, [pc, #8]	; (800289c <TIM5_IRQHandler+0x10>)
 8002892:	f005 fe8b 	bl	80085ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	240003d8 	.word	0x240003d8

080028a0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80028a4:	4802      	ldr	r0, [pc, #8]	; (80028b0 <UART4_IRQHandler+0x10>)
 80028a6:	f006 ff83 	bl	80097b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	240004bc 	.word	0x240004bc

080028b4 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80028b8:	4802      	ldr	r0, [pc, #8]	; (80028c4 <UART7_IRQHandler+0x10>)
 80028ba:	f006 ff79 	bl	80097b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	2400054c 	.word	0x2400054c

080028c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
	return 1;
 80028cc:	2301      	movs	r3, #1
}
 80028ce:	4618      	mov	r0, r3
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <_kill>:

int _kill(int pid, int sig)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80028e2:	f008 fc03 	bl	800b0ec <__errno>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2216      	movs	r2, #22
 80028ea:	601a      	str	r2, [r3, #0]
	return -1;
 80028ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028f0:	4618      	mov	r0, r3
 80028f2:	3708      	adds	r7, #8
 80028f4:	46bd      	mov	sp, r7
 80028f6:	bd80      	pop	{r7, pc}

080028f8 <_exit>:

void _exit (int status)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002900:	f04f 31ff 	mov.w	r1, #4294967295
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff ffe7 	bl	80028d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800290a:	e7fe      	b.n	800290a <_exit+0x12>

0800290c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b086      	sub	sp, #24
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002918:	2300      	movs	r3, #0
 800291a:	617b      	str	r3, [r7, #20]
 800291c:	e00a      	b.n	8002934 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800291e:	f3af 8000 	nop.w
 8002922:	4601      	mov	r1, r0
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	1c5a      	adds	r2, r3, #1
 8002928:	60ba      	str	r2, [r7, #8]
 800292a:	b2ca      	uxtb	r2, r1
 800292c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	3301      	adds	r3, #1
 8002932:	617b      	str	r3, [r7, #20]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	429a      	cmp	r2, r3
 800293a:	dbf0      	blt.n	800291e <_read+0x12>
	}

return len;
 800293c:	687b      	ldr	r3, [r7, #4]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3718      	adds	r7, #24
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002946:	b580      	push	{r7, lr}
 8002948:	b086      	sub	sp, #24
 800294a:	af00      	add	r7, sp, #0
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002952:	2300      	movs	r3, #0
 8002954:	617b      	str	r3, [r7, #20]
 8002956:	e009      	b.n	800296c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	60ba      	str	r2, [r7, #8]
 800295e:	781b      	ldrb	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	3301      	adds	r3, #1
 800296a:	617b      	str	r3, [r7, #20]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	429a      	cmp	r2, r3
 8002972:	dbf1      	blt.n	8002958 <_write+0x12>
	}
	return len;
 8002974:	687b      	ldr	r3, [r7, #4]
}
 8002976:	4618      	mov	r0, r3
 8002978:	3718      	adds	r7, #24
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}

0800297e <_close>:

int _close(int file)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
	return -1;
 8002986:	f04f 33ff 	mov.w	r3, #4294967295
}
 800298a:	4618      	mov	r0, r3
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr

08002996 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002996:	b480      	push	{r7}
 8002998:	b083      	sub	sp, #12
 800299a:	af00      	add	r7, sp, #0
 800299c:	6078      	str	r0, [r7, #4]
 800299e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029a6:	605a      	str	r2, [r3, #4]
	return 0;
 80029a8:	2300      	movs	r3, #0
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <_isatty>:

int _isatty(int file)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
	return 1;
 80029be:	2301      	movs	r3, #1
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	370c      	adds	r7, #12
 80029c4:	46bd      	mov	sp, r7
 80029c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ca:	4770      	bx	lr

080029cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b085      	sub	sp, #20
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
	return 0;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3714      	adds	r7, #20
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b086      	sub	sp, #24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029f0:	4a14      	ldr	r2, [pc, #80]	; (8002a44 <_sbrk+0x5c>)
 80029f2:	4b15      	ldr	r3, [pc, #84]	; (8002a48 <_sbrk+0x60>)
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029fc:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <_sbrk+0x64>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d102      	bne.n	8002a0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a04:	4b11      	ldr	r3, [pc, #68]	; (8002a4c <_sbrk+0x64>)
 8002a06:	4a12      	ldr	r2, [pc, #72]	; (8002a50 <_sbrk+0x68>)
 8002a08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a0a:	4b10      	ldr	r3, [pc, #64]	; (8002a4c <_sbrk+0x64>)
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4413      	add	r3, r2
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d207      	bcs.n	8002a28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a18:	f008 fb68 	bl	800b0ec <__errno>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	220c      	movs	r2, #12
 8002a20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a22:	f04f 33ff 	mov.w	r3, #4294967295
 8002a26:	e009      	b.n	8002a3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a28:	4b08      	ldr	r3, [pc, #32]	; (8002a4c <_sbrk+0x64>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a2e:	4b07      	ldr	r3, [pc, #28]	; (8002a4c <_sbrk+0x64>)
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4413      	add	r3, r2
 8002a36:	4a05      	ldr	r2, [pc, #20]	; (8002a4c <_sbrk+0x64>)
 8002a38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	24000f88 	.word	0x24000f88
 8002a48:	00000400 	.word	0x00000400
 8002a4c:	24000964 	.word	0x24000964
 8002a50:	24000988 	.word	0x24000988

08002a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a58:	4b39      	ldr	r3, [pc, #228]	; (8002b40 <SystemInit+0xec>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5e:	4a38      	ldr	r2, [pc, #224]	; (8002b40 <SystemInit+0xec>)
 8002a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002a68:	4b36      	ldr	r3, [pc, #216]	; (8002b44 <SystemInit+0xf0>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 030f 	and.w	r3, r3, #15
 8002a70:	2b06      	cmp	r3, #6
 8002a72:	d807      	bhi.n	8002a84 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002a74:	4b33      	ldr	r3, [pc, #204]	; (8002b44 <SystemInit+0xf0>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f023 030f 	bic.w	r3, r3, #15
 8002a7c:	4a31      	ldr	r2, [pc, #196]	; (8002b44 <SystemInit+0xf0>)
 8002a7e:	f043 0307 	orr.w	r3, r3, #7
 8002a82:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002a84:	4b30      	ldr	r3, [pc, #192]	; (8002b48 <SystemInit+0xf4>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a2f      	ldr	r2, [pc, #188]	; (8002b48 <SystemInit+0xf4>)
 8002a8a:	f043 0301 	orr.w	r3, r3, #1
 8002a8e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002a90:	4b2d      	ldr	r3, [pc, #180]	; (8002b48 <SystemInit+0xf4>)
 8002a92:	2200      	movs	r2, #0
 8002a94:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002a96:	4b2c      	ldr	r3, [pc, #176]	; (8002b48 <SystemInit+0xf4>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	492b      	ldr	r1, [pc, #172]	; (8002b48 <SystemInit+0xf4>)
 8002a9c:	4b2b      	ldr	r3, [pc, #172]	; (8002b4c <SystemInit+0xf8>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002aa2:	4b28      	ldr	r3, [pc, #160]	; (8002b44 <SystemInit+0xf0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0308 	and.w	r3, r3, #8
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d007      	beq.n	8002abe <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002aae:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <SystemInit+0xf0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f023 030f 	bic.w	r3, r3, #15
 8002ab6:	4a23      	ldr	r2, [pc, #140]	; (8002b44 <SystemInit+0xf0>)
 8002ab8:	f043 0307 	orr.w	r3, r3, #7
 8002abc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8002abe:	4b22      	ldr	r3, [pc, #136]	; (8002b48 <SystemInit+0xf4>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002ac4:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <SystemInit+0xf4>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8002aca:	4b1f      	ldr	r3, [pc, #124]	; (8002b48 <SystemInit+0xf4>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <SystemInit+0xf4>)
 8002ad2:	4a1f      	ldr	r2, [pc, #124]	; (8002b50 <SystemInit+0xfc>)
 8002ad4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002ad6:	4b1c      	ldr	r3, [pc, #112]	; (8002b48 <SystemInit+0xf4>)
 8002ad8:	4a1e      	ldr	r2, [pc, #120]	; (8002b54 <SystemInit+0x100>)
 8002ada:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8002adc:	4b1a      	ldr	r3, [pc, #104]	; (8002b48 <SystemInit+0xf4>)
 8002ade:	4a1e      	ldr	r2, [pc, #120]	; (8002b58 <SystemInit+0x104>)
 8002ae0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002ae2:	4b19      	ldr	r3, [pc, #100]	; (8002b48 <SystemInit+0xf4>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002ae8:	4b17      	ldr	r3, [pc, #92]	; (8002b48 <SystemInit+0xf4>)
 8002aea:	4a1b      	ldr	r2, [pc, #108]	; (8002b58 <SystemInit+0x104>)
 8002aec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002aee:	4b16      	ldr	r3, [pc, #88]	; (8002b48 <SystemInit+0xf4>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002af4:	4b14      	ldr	r3, [pc, #80]	; (8002b48 <SystemInit+0xf4>)
 8002af6:	4a18      	ldr	r2, [pc, #96]	; (8002b58 <SystemInit+0x104>)
 8002af8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002afa:	4b13      	ldr	r3, [pc, #76]	; (8002b48 <SystemInit+0xf4>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002b00:	4b11      	ldr	r3, [pc, #68]	; (8002b48 <SystemInit+0xf4>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a10      	ldr	r2, [pc, #64]	; (8002b48 <SystemInit+0xf4>)
 8002b06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b0a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002b0c:	4b0e      	ldr	r3, [pc, #56]	; (8002b48 <SystemInit+0xf4>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002b12:	4b12      	ldr	r3, [pc, #72]	; (8002b5c <SystemInit+0x108>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4b12      	ldr	r3, [pc, #72]	; (8002b60 <SystemInit+0x10c>)
 8002b18:	4013      	ands	r3, r2
 8002b1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b1e:	d202      	bcs.n	8002b26 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002b20:	4b10      	ldr	r3, [pc, #64]	; (8002b64 <SystemInit+0x110>)
 8002b22:	2201      	movs	r2, #1
 8002b24:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8002b26:	4b10      	ldr	r3, [pc, #64]	; (8002b68 <SystemInit+0x114>)
 8002b28:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002b2c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b2e:	4b04      	ldr	r3, [pc, #16]	; (8002b40 <SystemInit+0xec>)
 8002b30:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b34:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8002b36:	bf00      	nop
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr
 8002b40:	e000ed00 	.word	0xe000ed00
 8002b44:	52002000 	.word	0x52002000
 8002b48:	58024400 	.word	0x58024400
 8002b4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002b50:	02020200 	.word	0x02020200
 8002b54:	01ff0000 	.word	0x01ff0000
 8002b58:	01010280 	.word	0x01010280
 8002b5c:	5c001000 	.word	0x5c001000
 8002b60:	ffff0000 	.word	0xffff0000
 8002b64:	51008108 	.word	0x51008108
 8002b68:	52004000 	.word	0x52004000

08002b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ba4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002b70:	f7ff ff70 	bl	8002a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b74:	480c      	ldr	r0, [pc, #48]	; (8002ba8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002b76:	490d      	ldr	r1, [pc, #52]	; (8002bac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002b78:	4a0d      	ldr	r2, [pc, #52]	; (8002bb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002b7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b7c:	e002      	b.n	8002b84 <LoopCopyDataInit>

08002b7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b82:	3304      	adds	r3, #4

08002b84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b88:	d3f9      	bcc.n	8002b7e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b8a:	4a0a      	ldr	r2, [pc, #40]	; (8002bb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002b8c:	4c0a      	ldr	r4, [pc, #40]	; (8002bb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002b8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b90:	e001      	b.n	8002b96 <LoopFillZerobss>

08002b92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b94:	3204      	adds	r2, #4

08002b96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b98:	d3fb      	bcc.n	8002b92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b9a:	f008 faad 	bl	800b0f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b9e:	f7fe f8c3 	bl	8000d28 <main>
  bx  lr
 8002ba2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002ba4:	24000f88 	.word	0x24000f88
  ldr r0, =_sdata
 8002ba8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002bac:	240001e0 	.word	0x240001e0
  ldr r2, =_sidata
 8002bb0:	0800de24 	.word	0x0800de24
  ldr r2, =_sbss
 8002bb4:	240001e0 	.word	0x240001e0
  ldr r4, =_ebss
 8002bb8:	24000984 	.word	0x24000984

08002bbc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bbc:	e7fe      	b.n	8002bbc <ADC3_IRQHandler>
	...

08002bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b082      	sub	sp, #8
 8002bc4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bc6:	2003      	movs	r0, #3
 8002bc8:	f000 f968 	bl	8002e9c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002bcc:	f003 fcce 	bl	800656c <HAL_RCC_GetSysClockFreq>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <HAL_Init+0x68>)
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	0a1b      	lsrs	r3, r3, #8
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	4913      	ldr	r1, [pc, #76]	; (8002c2c <HAL_Init+0x6c>)
 8002bde:	5ccb      	ldrb	r3, [r1, r3]
 8002be0:	f003 031f 	and.w	r3, r3, #31
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
 8002be8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bea:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <HAL_Init+0x68>)
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	4a0e      	ldr	r2, [pc, #56]	; (8002c2c <HAL_Init+0x6c>)
 8002bf4:	5cd3      	ldrb	r3, [r2, r3]
 8002bf6:	f003 031f 	and.w	r3, r3, #31
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8002c00:	4a0b      	ldr	r2, [pc, #44]	; (8002c30 <HAL_Init+0x70>)
 8002c02:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c04:	4a0b      	ldr	r2, [pc, #44]	; (8002c34 <HAL_Init+0x74>)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c0a:	2000      	movs	r0, #0
 8002c0c:	f000 f814 	bl	8002c38 <HAL_InitTick>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e002      	b.n	8002c20 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002c1a:	f7ff f93b 	bl	8001e94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	4618      	mov	r0, r3
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	58024400 	.word	0x58024400
 8002c2c:	0800d9e8 	.word	0x0800d9e8
 8002c30:	24000004 	.word	0x24000004
 8002c34:	24000000 	.word	0x24000000

08002c38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002c40:	4b15      	ldr	r3, [pc, #84]	; (8002c98 <HAL_InitTick+0x60>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d101      	bne.n	8002c4c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e021      	b.n	8002c90 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002c4c:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <HAL_InitTick+0x64>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	4b11      	ldr	r3, [pc, #68]	; (8002c98 <HAL_InitTick+0x60>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	4619      	mov	r1, r3
 8002c56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c62:	4618      	mov	r0, r3
 8002c64:	f000 f94d 	bl	8002f02 <HAL_SYSTICK_Config>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e00e      	b.n	8002c90 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b0f      	cmp	r3, #15
 8002c76:	d80a      	bhi.n	8002c8e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c78:	2200      	movs	r2, #0
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c80:	f000 f917 	bl	8002eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c84:	4a06      	ldr	r2, [pc, #24]	; (8002ca0 <HAL_InitTick+0x68>)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	e000      	b.n	8002c90 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3708      	adds	r7, #8
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	2400000c 	.word	0x2400000c
 8002c9c:	24000000 	.word	0x24000000
 8002ca0:	24000008 	.word	0x24000008

08002ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002ca8:	4b06      	ldr	r3, [pc, #24]	; (8002cc4 <HAL_IncTick+0x20>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <HAL_IncTick+0x24>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	4a04      	ldr	r2, [pc, #16]	; (8002cc8 <HAL_IncTick+0x24>)
 8002cb6:	6013      	str	r3, [r2, #0]
}
 8002cb8:	bf00      	nop
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	2400000c 	.word	0x2400000c
 8002cc8:	24000970 	.word	0x24000970

08002ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return uwTick;
 8002cd0:	4b03      	ldr	r3, [pc, #12]	; (8002ce0 <HAL_GetTick+0x14>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
 8002cde:	bf00      	nop
 8002ce0:	24000970 	.word	0x24000970

08002ce4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002ce8:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <HAL_GetREVID+0x14>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	0c1b      	lsrs	r3, r3, #16
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	5c001000 	.word	0x5c001000

08002cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d0c:	4b0b      	ldr	r3, [pc, #44]	; (8002d3c <__NVIC_SetPriorityGrouping+0x40>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d12:	68ba      	ldr	r2, [r7, #8]
 8002d14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <__NVIC_SetPriorityGrouping+0x44>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d2a:	4a04      	ldr	r2, [pc, #16]	; (8002d3c <__NVIC_SetPriorityGrouping+0x40>)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	60d3      	str	r3, [r2, #12]
}
 8002d30:	bf00      	nop
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	e000ed00 	.word	0xe000ed00
 8002d40:	05fa0000 	.word	0x05fa0000

08002d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d48:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <__NVIC_GetPriorityGrouping+0x18>)
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	0a1b      	lsrs	r3, r3, #8
 8002d4e:	f003 0307 	and.w	r3, r3, #7
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	e000ed00 	.word	0xe000ed00

08002d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d60:	b480      	push	{r7}
 8002d62:	b083      	sub	sp, #12
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002d6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	db0b      	blt.n	8002d8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d72:	88fb      	ldrh	r3, [r7, #6]
 8002d74:	f003 021f 	and.w	r2, r3, #31
 8002d78:	4907      	ldr	r1, [pc, #28]	; (8002d98 <__NVIC_EnableIRQ+0x38>)
 8002d7a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d7e:	095b      	lsrs	r3, r3, #5
 8002d80:	2001      	movs	r0, #1
 8002d82:	fa00 f202 	lsl.w	r2, r0, r2
 8002d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d8a:	bf00      	nop
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	e000e100 	.word	0xe000e100

08002d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	4603      	mov	r3, r0
 8002da4:	6039      	str	r1, [r7, #0]
 8002da6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002da8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	db0a      	blt.n	8002dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	b2da      	uxtb	r2, r3
 8002db4:	490c      	ldr	r1, [pc, #48]	; (8002de8 <__NVIC_SetPriority+0x4c>)
 8002db6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002dba:	0112      	lsls	r2, r2, #4
 8002dbc:	b2d2      	uxtb	r2, r2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc4:	e00a      	b.n	8002ddc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	b2da      	uxtb	r2, r3
 8002dca:	4908      	ldr	r1, [pc, #32]	; (8002dec <__NVIC_SetPriority+0x50>)
 8002dcc:	88fb      	ldrh	r3, [r7, #6]
 8002dce:	f003 030f 	and.w	r3, r3, #15
 8002dd2:	3b04      	subs	r3, #4
 8002dd4:	0112      	lsls	r2, r2, #4
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	440b      	add	r3, r1
 8002dda:	761a      	strb	r2, [r3, #24]
}
 8002ddc:	bf00      	nop
 8002dde:	370c      	adds	r7, #12
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	e000e100 	.word	0xe000e100
 8002dec:	e000ed00 	.word	0xe000ed00

08002df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b089      	sub	sp, #36	; 0x24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	60f8      	str	r0, [r7, #12]
 8002df8:	60b9      	str	r1, [r7, #8]
 8002dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f003 0307 	and.w	r3, r3, #7
 8002e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f1c3 0307 	rsb	r3, r3, #7
 8002e0a:	2b04      	cmp	r3, #4
 8002e0c:	bf28      	it	cs
 8002e0e:	2304      	movcs	r3, #4
 8002e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3304      	adds	r3, #4
 8002e16:	2b06      	cmp	r3, #6
 8002e18:	d902      	bls.n	8002e20 <NVIC_EncodePriority+0x30>
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	3b03      	subs	r3, #3
 8002e1e:	e000      	b.n	8002e22 <NVIC_EncodePriority+0x32>
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e24:	f04f 32ff 	mov.w	r2, #4294967295
 8002e28:	69bb      	ldr	r3, [r7, #24]
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43da      	mvns	r2, r3
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	401a      	ands	r2, r3
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e38:	f04f 31ff 	mov.w	r1, #4294967295
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e42:	43d9      	mvns	r1, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e48:	4313      	orrs	r3, r2
         );
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3724      	adds	r7, #36	; 0x24
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e54:	4770      	bx	lr
	...

08002e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	3b01      	subs	r3, #1
 8002e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e68:	d301      	bcc.n	8002e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e00f      	b.n	8002e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e6e:	4a0a      	ldr	r2, [pc, #40]	; (8002e98 <SysTick_Config+0x40>)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3b01      	subs	r3, #1
 8002e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e76:	210f      	movs	r1, #15
 8002e78:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7c:	f7ff ff8e 	bl	8002d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e80:	4b05      	ldr	r3, [pc, #20]	; (8002e98 <SysTick_Config+0x40>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e86:	4b04      	ldr	r3, [pc, #16]	; (8002e98 <SysTick_Config+0x40>)
 8002e88:	2207      	movs	r2, #7
 8002e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e8c:	2300      	movs	r3, #0
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	e000e010 	.word	0xe000e010

08002e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f7ff ff29 	bl	8002cfc <__NVIC_SetPriorityGrouping>
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b086      	sub	sp, #24
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	4603      	mov	r3, r0
 8002eba:	60b9      	str	r1, [r7, #8]
 8002ebc:	607a      	str	r2, [r7, #4]
 8002ebe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec0:	f7ff ff40 	bl	8002d44 <__NVIC_GetPriorityGrouping>
 8002ec4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	6978      	ldr	r0, [r7, #20]
 8002ecc:	f7ff ff90 	bl	8002df0 <NVIC_EncodePriority>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff5f 	bl	8002d9c <__NVIC_SetPriority>
}
 8002ede:	bf00      	nop
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	4603      	mov	r3, r0
 8002eee:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ef0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff33 	bl	8002d60 <__NVIC_EnableIRQ>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff ffa4 	bl	8002e58 <SysTick_Config>
 8002f10:	4603      	mov	r3, r0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d101      	bne.n	8002f2e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e054      	b.n	8002fd8 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	7f5b      	ldrb	r3, [r3, #29]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d105      	bne.n	8002f44 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7fe ffc2 	bl	8001ec8 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2202      	movs	r2, #2
 8002f48:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	791b      	ldrb	r3, [r3, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10c      	bne.n	8002f6c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a22      	ldr	r2, [pc, #136]	; (8002fe0 <HAL_CRC_Init+0xc4>)
 8002f58:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0218 	bic.w	r2, r2, #24
 8002f68:	609a      	str	r2, [r3, #8]
 8002f6a:	e00c      	b.n	8002f86 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6899      	ldr	r1, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	461a      	mov	r2, r3
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 f834 	bl	8002fe4 <HAL_CRCEx_Polynomial_Set>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e028      	b.n	8002fd8 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	795b      	ldrb	r3, [r3, #5]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d105      	bne.n	8002f9a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f04f 32ff 	mov.w	r2, #4294967295
 8002f96:	611a      	str	r2, [r3, #16]
 8002f98:	e004      	b.n	8002fa4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	687a      	ldr	r2, [r7, #4]
 8002fa0:	6912      	ldr	r2, [r2, #16]
 8002fa2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	699a      	ldr	r2, [r3, #24]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	430a      	orrs	r2, r1
 8002fce:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3708      	adds	r7, #8
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	bd80      	pop	{r7, pc}
 8002fe0:	04c11db7 	.word	0x04c11db7

08002fe4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8002ff4:	231f      	movs	r3, #31
 8002ff6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8002ff8:	bf00      	nop
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	1e5a      	subs	r2, r3, #1
 8002ffe:	613a      	str	r2, [r7, #16]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d009      	beq.n	8003018 <HAL_CRCEx_Polynomial_Set+0x34>
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	fa22 f303 	lsr.w	r3, r2, r3
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_CRCEx_Polynomial_Set+0x16>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b18      	cmp	r3, #24
 800301c:	d846      	bhi.n	80030ac <HAL_CRCEx_Polynomial_Set+0xc8>
 800301e:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <HAL_CRCEx_Polynomial_Set+0x40>)
 8003020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003024:	080030b3 	.word	0x080030b3
 8003028:	080030ad 	.word	0x080030ad
 800302c:	080030ad 	.word	0x080030ad
 8003030:	080030ad 	.word	0x080030ad
 8003034:	080030ad 	.word	0x080030ad
 8003038:	080030ad 	.word	0x080030ad
 800303c:	080030ad 	.word	0x080030ad
 8003040:	080030ad 	.word	0x080030ad
 8003044:	080030a1 	.word	0x080030a1
 8003048:	080030ad 	.word	0x080030ad
 800304c:	080030ad 	.word	0x080030ad
 8003050:	080030ad 	.word	0x080030ad
 8003054:	080030ad 	.word	0x080030ad
 8003058:	080030ad 	.word	0x080030ad
 800305c:	080030ad 	.word	0x080030ad
 8003060:	080030ad 	.word	0x080030ad
 8003064:	08003095 	.word	0x08003095
 8003068:	080030ad 	.word	0x080030ad
 800306c:	080030ad 	.word	0x080030ad
 8003070:	080030ad 	.word	0x080030ad
 8003074:	080030ad 	.word	0x080030ad
 8003078:	080030ad 	.word	0x080030ad
 800307c:	080030ad 	.word	0x080030ad
 8003080:	080030ad 	.word	0x080030ad
 8003084:	08003089 	.word	0x08003089
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	2b06      	cmp	r3, #6
 800308c:	d913      	bls.n	80030b6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8003092:	e010      	b.n	80030b6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	2b07      	cmp	r3, #7
 8003098:	d90f      	bls.n	80030ba <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800309e:	e00c      	b.n	80030ba <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	2b0f      	cmp	r3, #15
 80030a4:	d90b      	bls.n	80030be <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80030aa:	e008      	b.n	80030be <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	75fb      	strb	r3, [r7, #23]
      break;
 80030b0:	e006      	b.n	80030c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80030b2:	bf00      	nop
 80030b4:	e004      	b.n	80030c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80030b6:	bf00      	nop
 80030b8:	e002      	b.n	80030c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80030ba:	bf00      	nop
 80030bc:	e000      	b.n	80030c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80030be:	bf00      	nop
  }
  if (status == HAL_OK)
 80030c0:	7dfb      	ldrb	r3, [r7, #23]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d10d      	bne.n	80030e2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	68ba      	ldr	r2, [r7, #8]
 80030cc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	f023 0118 	bic.w	r1, r3, #24
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	430a      	orrs	r2, r1
 80030e0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80030e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	371c      	adds	r7, #28
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80030f8:	f7ff fde8 	bl	8002ccc <HAL_GetTick>
 80030fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d101      	bne.n	8003108 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e316      	b.n	8003736 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a66      	ldr	r2, [pc, #408]	; (80032a8 <HAL_DMA_Init+0x1b8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d04a      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a65      	ldr	r2, [pc, #404]	; (80032ac <HAL_DMA_Init+0x1bc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d045      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a63      	ldr	r2, [pc, #396]	; (80032b0 <HAL_DMA_Init+0x1c0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d040      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a62      	ldr	r2, [pc, #392]	; (80032b4 <HAL_DMA_Init+0x1c4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d03b      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a60      	ldr	r2, [pc, #384]	; (80032b8 <HAL_DMA_Init+0x1c8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d036      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a5f      	ldr	r2, [pc, #380]	; (80032bc <HAL_DMA_Init+0x1cc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d031      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a5d      	ldr	r2, [pc, #372]	; (80032c0 <HAL_DMA_Init+0x1d0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d02c      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a5c      	ldr	r2, [pc, #368]	; (80032c4 <HAL_DMA_Init+0x1d4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d027      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a5a      	ldr	r2, [pc, #360]	; (80032c8 <HAL_DMA_Init+0x1d8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d022      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a59      	ldr	r2, [pc, #356]	; (80032cc <HAL_DMA_Init+0x1dc>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d01d      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a57      	ldr	r2, [pc, #348]	; (80032d0 <HAL_DMA_Init+0x1e0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d018      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a56      	ldr	r2, [pc, #344]	; (80032d4 <HAL_DMA_Init+0x1e4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d013      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a54      	ldr	r2, [pc, #336]	; (80032d8 <HAL_DMA_Init+0x1e8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00e      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a53      	ldr	r2, [pc, #332]	; (80032dc <HAL_DMA_Init+0x1ec>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d009      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a51      	ldr	r2, [pc, #324]	; (80032e0 <HAL_DMA_Init+0x1f0>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d004      	beq.n	80031a8 <HAL_DMA_Init+0xb8>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a50      	ldr	r2, [pc, #320]	; (80032e4 <HAL_DMA_Init+0x1f4>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d101      	bne.n	80031ac <HAL_DMA_Init+0xbc>
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <HAL_DMA_Init+0xbe>
 80031ac:	2300      	movs	r3, #0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 813b 	beq.w	800342a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2202      	movs	r2, #2
 80031b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a37      	ldr	r2, [pc, #220]	; (80032a8 <HAL_DMA_Init+0x1b8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d04a      	beq.n	8003264 <HAL_DMA_Init+0x174>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a36      	ldr	r2, [pc, #216]	; (80032ac <HAL_DMA_Init+0x1bc>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d045      	beq.n	8003264 <HAL_DMA_Init+0x174>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a34      	ldr	r2, [pc, #208]	; (80032b0 <HAL_DMA_Init+0x1c0>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d040      	beq.n	8003264 <HAL_DMA_Init+0x174>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a33      	ldr	r2, [pc, #204]	; (80032b4 <HAL_DMA_Init+0x1c4>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d03b      	beq.n	8003264 <HAL_DMA_Init+0x174>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a31      	ldr	r2, [pc, #196]	; (80032b8 <HAL_DMA_Init+0x1c8>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d036      	beq.n	8003264 <HAL_DMA_Init+0x174>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a30      	ldr	r2, [pc, #192]	; (80032bc <HAL_DMA_Init+0x1cc>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d031      	beq.n	8003264 <HAL_DMA_Init+0x174>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a2e      	ldr	r2, [pc, #184]	; (80032c0 <HAL_DMA_Init+0x1d0>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d02c      	beq.n	8003264 <HAL_DMA_Init+0x174>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a2d      	ldr	r2, [pc, #180]	; (80032c4 <HAL_DMA_Init+0x1d4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d027      	beq.n	8003264 <HAL_DMA_Init+0x174>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a2b      	ldr	r2, [pc, #172]	; (80032c8 <HAL_DMA_Init+0x1d8>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d022      	beq.n	8003264 <HAL_DMA_Init+0x174>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a2a      	ldr	r2, [pc, #168]	; (80032cc <HAL_DMA_Init+0x1dc>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d01d      	beq.n	8003264 <HAL_DMA_Init+0x174>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a28      	ldr	r2, [pc, #160]	; (80032d0 <HAL_DMA_Init+0x1e0>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d018      	beq.n	8003264 <HAL_DMA_Init+0x174>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a27      	ldr	r2, [pc, #156]	; (80032d4 <HAL_DMA_Init+0x1e4>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d013      	beq.n	8003264 <HAL_DMA_Init+0x174>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a25      	ldr	r2, [pc, #148]	; (80032d8 <HAL_DMA_Init+0x1e8>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d00e      	beq.n	8003264 <HAL_DMA_Init+0x174>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a24      	ldr	r2, [pc, #144]	; (80032dc <HAL_DMA_Init+0x1ec>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d009      	beq.n	8003264 <HAL_DMA_Init+0x174>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a22      	ldr	r2, [pc, #136]	; (80032e0 <HAL_DMA_Init+0x1f0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d004      	beq.n	8003264 <HAL_DMA_Init+0x174>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a21      	ldr	r2, [pc, #132]	; (80032e4 <HAL_DMA_Init+0x1f4>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d108      	bne.n	8003276 <HAL_DMA_Init+0x186>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	e007      	b.n	8003286 <HAL_DMA_Init+0x196>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 0201 	bic.w	r2, r2, #1
 8003284:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003286:	e02f      	b.n	80032e8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003288:	f7ff fd20 	bl	8002ccc <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b05      	cmp	r3, #5
 8003294:	d928      	bls.n	80032e8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	2220      	movs	r2, #32
 800329a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2203      	movs	r2, #3
 80032a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e246      	b.n	8003736 <HAL_DMA_Init+0x646>
 80032a8:	40020010 	.word	0x40020010
 80032ac:	40020028 	.word	0x40020028
 80032b0:	40020040 	.word	0x40020040
 80032b4:	40020058 	.word	0x40020058
 80032b8:	40020070 	.word	0x40020070
 80032bc:	40020088 	.word	0x40020088
 80032c0:	400200a0 	.word	0x400200a0
 80032c4:	400200b8 	.word	0x400200b8
 80032c8:	40020410 	.word	0x40020410
 80032cc:	40020428 	.word	0x40020428
 80032d0:	40020440 	.word	0x40020440
 80032d4:	40020458 	.word	0x40020458
 80032d8:	40020470 	.word	0x40020470
 80032dc:	40020488 	.word	0x40020488
 80032e0:	400204a0 	.word	0x400204a0
 80032e4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0301 	and.w	r3, r3, #1
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1c8      	bne.n	8003288 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	4b83      	ldr	r3, [pc, #524]	; (8003510 <HAL_DMA_Init+0x420>)
 8003302:	4013      	ands	r3, r2
 8003304:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800330e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	691b      	ldr	r3, [r3, #16]
 8003314:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800331a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003326:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a1b      	ldr	r3, [r3, #32]
 800332c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4313      	orrs	r3, r2
 8003332:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003338:	2b04      	cmp	r3, #4
 800333a:	d107      	bne.n	800334c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003344:	4313      	orrs	r3, r2
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800334c:	4b71      	ldr	r3, [pc, #452]	; (8003514 <HAL_DMA_Init+0x424>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	4b71      	ldr	r3, [pc, #452]	; (8003518 <HAL_DMA_Init+0x428>)
 8003352:	4013      	ands	r3, r2
 8003354:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003358:	d328      	bcc.n	80033ac <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	2b28      	cmp	r3, #40	; 0x28
 8003360:	d903      	bls.n	800336a <HAL_DMA_Init+0x27a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b2e      	cmp	r3, #46	; 0x2e
 8003368:	d917      	bls.n	800339a <HAL_DMA_Init+0x2aa>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b3e      	cmp	r3, #62	; 0x3e
 8003370:	d903      	bls.n	800337a <HAL_DMA_Init+0x28a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	2b42      	cmp	r3, #66	; 0x42
 8003378:	d90f      	bls.n	800339a <HAL_DMA_Init+0x2aa>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b46      	cmp	r3, #70	; 0x46
 8003380:	d903      	bls.n	800338a <HAL_DMA_Init+0x29a>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b48      	cmp	r3, #72	; 0x48
 8003388:	d907      	bls.n	800339a <HAL_DMA_Init+0x2aa>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	2b4e      	cmp	r3, #78	; 0x4e
 8003390:	d905      	bls.n	800339e <HAL_DMA_Init+0x2ae>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b52      	cmp	r3, #82	; 0x52
 8003398:	d801      	bhi.n	800339e <HAL_DMA_Init+0x2ae>
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <HAL_DMA_Init+0x2b0>
 800339e:	2300      	movs	r3, #0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033aa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	697a      	ldr	r2, [r7, #20]
 80033b2:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	f023 0307 	bic.w	r3, r3, #7
 80033c2:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	697a      	ldr	r2, [r7, #20]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d117      	bne.n	8003406 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033da:	697a      	ldr	r2, [r7, #20]
 80033dc:	4313      	orrs	r3, r2
 80033de:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00e      	beq.n	8003406 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033e8:	6878      	ldr	r0, [r7, #4]
 80033ea:	f001 ff1b 	bl	8005224 <DMA_CheckFifoParam>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d008      	beq.n	8003406 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2240      	movs	r2, #64	; 0x40
 80033f8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e197      	b.n	8003736 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	697a      	ldr	r2, [r7, #20]
 800340c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f001 fe56 	bl	80050c0 <DMA_CalcBaseAndBitshift>
 8003414:	4603      	mov	r3, r0
 8003416:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341c:	f003 031f 	and.w	r3, r3, #31
 8003420:	223f      	movs	r2, #63	; 0x3f
 8003422:	409a      	lsls	r2, r3
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	609a      	str	r2, [r3, #8]
 8003428:	e0cd      	b.n	80035c6 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4a3b      	ldr	r2, [pc, #236]	; (800351c <HAL_DMA_Init+0x42c>)
 8003430:	4293      	cmp	r3, r2
 8003432:	d022      	beq.n	800347a <HAL_DMA_Init+0x38a>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a39      	ldr	r2, [pc, #228]	; (8003520 <HAL_DMA_Init+0x430>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d01d      	beq.n	800347a <HAL_DMA_Init+0x38a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a38      	ldr	r2, [pc, #224]	; (8003524 <HAL_DMA_Init+0x434>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d018      	beq.n	800347a <HAL_DMA_Init+0x38a>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a36      	ldr	r2, [pc, #216]	; (8003528 <HAL_DMA_Init+0x438>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d013      	beq.n	800347a <HAL_DMA_Init+0x38a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a35      	ldr	r2, [pc, #212]	; (800352c <HAL_DMA_Init+0x43c>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d00e      	beq.n	800347a <HAL_DMA_Init+0x38a>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a33      	ldr	r2, [pc, #204]	; (8003530 <HAL_DMA_Init+0x440>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d009      	beq.n	800347a <HAL_DMA_Init+0x38a>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a32      	ldr	r2, [pc, #200]	; (8003534 <HAL_DMA_Init+0x444>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d004      	beq.n	800347a <HAL_DMA_Init+0x38a>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a30      	ldr	r2, [pc, #192]	; (8003538 <HAL_DMA_Init+0x448>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d101      	bne.n	800347e <HAL_DMA_Init+0x38e>
 800347a:	2301      	movs	r3, #1
 800347c:	e000      	b.n	8003480 <HAL_DMA_Init+0x390>
 800347e:	2300      	movs	r3, #0
 8003480:	2b00      	cmp	r3, #0
 8003482:	f000 8097 	beq.w	80035b4 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a24      	ldr	r2, [pc, #144]	; (800351c <HAL_DMA_Init+0x42c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d021      	beq.n	80034d4 <HAL_DMA_Init+0x3e4>
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a22      	ldr	r2, [pc, #136]	; (8003520 <HAL_DMA_Init+0x430>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d01c      	beq.n	80034d4 <HAL_DMA_Init+0x3e4>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a21      	ldr	r2, [pc, #132]	; (8003524 <HAL_DMA_Init+0x434>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d017      	beq.n	80034d4 <HAL_DMA_Init+0x3e4>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a1f      	ldr	r2, [pc, #124]	; (8003528 <HAL_DMA_Init+0x438>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d012      	beq.n	80034d4 <HAL_DMA_Init+0x3e4>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a1e      	ldr	r2, [pc, #120]	; (800352c <HAL_DMA_Init+0x43c>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d00d      	beq.n	80034d4 <HAL_DMA_Init+0x3e4>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a1c      	ldr	r2, [pc, #112]	; (8003530 <HAL_DMA_Init+0x440>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d008      	beq.n	80034d4 <HAL_DMA_Init+0x3e4>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a1b      	ldr	r2, [pc, #108]	; (8003534 <HAL_DMA_Init+0x444>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d003      	beq.n	80034d4 <HAL_DMA_Init+0x3e4>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a19      	ldr	r2, [pc, #100]	; (8003538 <HAL_DMA_Init+0x448>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2202      	movs	r2, #2
 80034da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	4b12      	ldr	r3, [pc, #72]	; (800353c <HAL_DMA_Init+0x44c>)
 80034f2:	4013      	ands	r3, r2
 80034f4:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	2b40      	cmp	r3, #64	; 0x40
 80034fc:	d020      	beq.n	8003540 <HAL_DMA_Init+0x450>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	2b80      	cmp	r3, #128	; 0x80
 8003504:	d102      	bne.n	800350c <HAL_DMA_Init+0x41c>
 8003506:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800350a:	e01a      	b.n	8003542 <HAL_DMA_Init+0x452>
 800350c:	2300      	movs	r3, #0
 800350e:	e018      	b.n	8003542 <HAL_DMA_Init+0x452>
 8003510:	fe10803f 	.word	0xfe10803f
 8003514:	5c001000 	.word	0x5c001000
 8003518:	ffff0000 	.word	0xffff0000
 800351c:	58025408 	.word	0x58025408
 8003520:	5802541c 	.word	0x5802541c
 8003524:	58025430 	.word	0x58025430
 8003528:	58025444 	.word	0x58025444
 800352c:	58025458 	.word	0x58025458
 8003530:	5802546c 	.word	0x5802546c
 8003534:	58025480 	.word	0x58025480
 8003538:	58025494 	.word	0x58025494
 800353c:	fffe000f 	.word	0xfffe000f
 8003540:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	68d2      	ldr	r2, [r2, #12]
 8003546:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003548:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8003550:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	695b      	ldr	r3, [r3, #20]
 8003556:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8003558:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	699b      	ldr	r3, [r3, #24]
 800355e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8003560:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8003568:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6a1b      	ldr	r3, [r3, #32]
 800356e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003570:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	4313      	orrs	r3, r2
 8003576:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	461a      	mov	r2, r3
 8003586:	4b6e      	ldr	r3, [pc, #440]	; (8003740 <HAL_DMA_Init+0x650>)
 8003588:	4413      	add	r3, r2
 800358a:	4a6e      	ldr	r2, [pc, #440]	; (8003744 <HAL_DMA_Init+0x654>)
 800358c:	fba2 2303 	umull	r2, r3, r2, r3
 8003590:	091b      	lsrs	r3, r3, #4
 8003592:	009a      	lsls	r2, r3, #2
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f001 fd91 	bl	80050c0 <DMA_CalcBaseAndBitshift>
 800359e:	4603      	mov	r3, r0
 80035a0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a6:	f003 031f 	and.w	r3, r3, #31
 80035aa:	2201      	movs	r2, #1
 80035ac:	409a      	lsls	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	605a      	str	r2, [r3, #4]
 80035b2:	e008      	b.n	80035c6 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2240      	movs	r2, #64	; 0x40
 80035b8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2203      	movs	r2, #3
 80035be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	e0b7      	b.n	8003736 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a5f      	ldr	r2, [pc, #380]	; (8003748 <HAL_DMA_Init+0x658>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d072      	beq.n	80036b6 <HAL_DMA_Init+0x5c6>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a5d      	ldr	r2, [pc, #372]	; (800374c <HAL_DMA_Init+0x65c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d06d      	beq.n	80036b6 <HAL_DMA_Init+0x5c6>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a5c      	ldr	r2, [pc, #368]	; (8003750 <HAL_DMA_Init+0x660>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d068      	beq.n	80036b6 <HAL_DMA_Init+0x5c6>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a5a      	ldr	r2, [pc, #360]	; (8003754 <HAL_DMA_Init+0x664>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d063      	beq.n	80036b6 <HAL_DMA_Init+0x5c6>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a59      	ldr	r2, [pc, #356]	; (8003758 <HAL_DMA_Init+0x668>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d05e      	beq.n	80036b6 <HAL_DMA_Init+0x5c6>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a57      	ldr	r2, [pc, #348]	; (800375c <HAL_DMA_Init+0x66c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d059      	beq.n	80036b6 <HAL_DMA_Init+0x5c6>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a56      	ldr	r2, [pc, #344]	; (8003760 <HAL_DMA_Init+0x670>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d054      	beq.n	80036b6 <HAL_DMA_Init+0x5c6>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a54      	ldr	r2, [pc, #336]	; (8003764 <HAL_DMA_Init+0x674>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d04f      	beq.n	80036b6 <HAL_DMA_Init+0x5c6>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a53      	ldr	r2, [pc, #332]	; (8003768 <HAL_DMA_Init+0x678>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d04a      	beq.n	80036b6 <HAL_DMA_Init+0x5c6>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a51      	ldr	r2, [pc, #324]	; (800376c <HAL_DMA_Init+0x67c>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d045      	beq.n	80036b6 <HAL_DMA_Init+0x5c6>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a50      	ldr	r2, [pc, #320]	; (8003770 <HAL_DMA_Init+0x680>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d040      	beq.n	80036b6 <HAL_DMA_Init+0x5c6>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a4e      	ldr	r2, [pc, #312]	; (8003774 <HAL_DMA_Init+0x684>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d03b      	beq.n	80036b6 <HAL_DMA_Init+0x5c6>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a4d      	ldr	r2, [pc, #308]	; (8003778 <HAL_DMA_Init+0x688>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d036      	beq.n	80036b6 <HAL_DMA_Init+0x5c6>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a4b      	ldr	r2, [pc, #300]	; (800377c <HAL_DMA_Init+0x68c>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d031      	beq.n	80036b6 <HAL_DMA_Init+0x5c6>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a4a      	ldr	r2, [pc, #296]	; (8003780 <HAL_DMA_Init+0x690>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d02c      	beq.n	80036b6 <HAL_DMA_Init+0x5c6>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a48      	ldr	r2, [pc, #288]	; (8003784 <HAL_DMA_Init+0x694>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d027      	beq.n	80036b6 <HAL_DMA_Init+0x5c6>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a47      	ldr	r2, [pc, #284]	; (8003788 <HAL_DMA_Init+0x698>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d022      	beq.n	80036b6 <HAL_DMA_Init+0x5c6>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a45      	ldr	r2, [pc, #276]	; (800378c <HAL_DMA_Init+0x69c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d01d      	beq.n	80036b6 <HAL_DMA_Init+0x5c6>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a44      	ldr	r2, [pc, #272]	; (8003790 <HAL_DMA_Init+0x6a0>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d018      	beq.n	80036b6 <HAL_DMA_Init+0x5c6>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a42      	ldr	r2, [pc, #264]	; (8003794 <HAL_DMA_Init+0x6a4>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d013      	beq.n	80036b6 <HAL_DMA_Init+0x5c6>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a41      	ldr	r2, [pc, #260]	; (8003798 <HAL_DMA_Init+0x6a8>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d00e      	beq.n	80036b6 <HAL_DMA_Init+0x5c6>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a3f      	ldr	r2, [pc, #252]	; (800379c <HAL_DMA_Init+0x6ac>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d009      	beq.n	80036b6 <HAL_DMA_Init+0x5c6>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a3e      	ldr	r2, [pc, #248]	; (80037a0 <HAL_DMA_Init+0x6b0>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d004      	beq.n	80036b6 <HAL_DMA_Init+0x5c6>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a3c      	ldr	r2, [pc, #240]	; (80037a4 <HAL_DMA_Init+0x6b4>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d101      	bne.n	80036ba <HAL_DMA_Init+0x5ca>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <HAL_DMA_Init+0x5cc>
 80036ba:	2300      	movs	r3, #0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d032      	beq.n	8003726 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80036c0:	6878      	ldr	r0, [r7, #4]
 80036c2:	f001 fe2b 	bl	800531c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	2b80      	cmp	r3, #128	; 0x80
 80036cc:	d102      	bne.n	80036d4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80036e8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d010      	beq.n	8003714 <HAL_DMA_Init+0x624>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b08      	cmp	r3, #8
 80036f8:	d80c      	bhi.n	8003714 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f001 fea8 	bl	8005450 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003710:	605a      	str	r2, [r3, #4]
 8003712:	e008      	b.n	8003726 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2200      	movs	r2, #0
 800372a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2201      	movs	r2, #1
 8003730:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003734:	2300      	movs	r3, #0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3718      	adds	r7, #24
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	a7fdabf8 	.word	0xa7fdabf8
 8003744:	cccccccd 	.word	0xcccccccd
 8003748:	40020010 	.word	0x40020010
 800374c:	40020028 	.word	0x40020028
 8003750:	40020040 	.word	0x40020040
 8003754:	40020058 	.word	0x40020058
 8003758:	40020070 	.word	0x40020070
 800375c:	40020088 	.word	0x40020088
 8003760:	400200a0 	.word	0x400200a0
 8003764:	400200b8 	.word	0x400200b8
 8003768:	40020410 	.word	0x40020410
 800376c:	40020428 	.word	0x40020428
 8003770:	40020440 	.word	0x40020440
 8003774:	40020458 	.word	0x40020458
 8003778:	40020470 	.word	0x40020470
 800377c:	40020488 	.word	0x40020488
 8003780:	400204a0 	.word	0x400204a0
 8003784:	400204b8 	.word	0x400204b8
 8003788:	58025408 	.word	0x58025408
 800378c:	5802541c 	.word	0x5802541c
 8003790:	58025430 	.word	0x58025430
 8003794:	58025444 	.word	0x58025444
 8003798:	58025458 	.word	0x58025458
 800379c:	5802546c 	.word	0x5802546c
 80037a0:	58025480 	.word	0x58025480
 80037a4:	58025494 	.word	0x58025494

080037a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b086      	sub	sp, #24
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80037b0:	f7ff fa8c 	bl	8002ccc <HAL_GetTick>
 80037b4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d101      	bne.n	80037c0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	e2dc      	b.n	8003d7a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d008      	beq.n	80037de <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2280      	movs	r2, #128	; 0x80
 80037d0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e2cd      	b.n	8003d7a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a76      	ldr	r2, [pc, #472]	; (80039bc <HAL_DMA_Abort+0x214>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d04a      	beq.n	800387e <HAL_DMA_Abort+0xd6>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a74      	ldr	r2, [pc, #464]	; (80039c0 <HAL_DMA_Abort+0x218>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d045      	beq.n	800387e <HAL_DMA_Abort+0xd6>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a73      	ldr	r2, [pc, #460]	; (80039c4 <HAL_DMA_Abort+0x21c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d040      	beq.n	800387e <HAL_DMA_Abort+0xd6>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a71      	ldr	r2, [pc, #452]	; (80039c8 <HAL_DMA_Abort+0x220>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d03b      	beq.n	800387e <HAL_DMA_Abort+0xd6>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a70      	ldr	r2, [pc, #448]	; (80039cc <HAL_DMA_Abort+0x224>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d036      	beq.n	800387e <HAL_DMA_Abort+0xd6>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a6e      	ldr	r2, [pc, #440]	; (80039d0 <HAL_DMA_Abort+0x228>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d031      	beq.n	800387e <HAL_DMA_Abort+0xd6>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a6d      	ldr	r2, [pc, #436]	; (80039d4 <HAL_DMA_Abort+0x22c>)
 8003820:	4293      	cmp	r3, r2
 8003822:	d02c      	beq.n	800387e <HAL_DMA_Abort+0xd6>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a6b      	ldr	r2, [pc, #428]	; (80039d8 <HAL_DMA_Abort+0x230>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d027      	beq.n	800387e <HAL_DMA_Abort+0xd6>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a6a      	ldr	r2, [pc, #424]	; (80039dc <HAL_DMA_Abort+0x234>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d022      	beq.n	800387e <HAL_DMA_Abort+0xd6>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a68      	ldr	r2, [pc, #416]	; (80039e0 <HAL_DMA_Abort+0x238>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d01d      	beq.n	800387e <HAL_DMA_Abort+0xd6>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a67      	ldr	r2, [pc, #412]	; (80039e4 <HAL_DMA_Abort+0x23c>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d018      	beq.n	800387e <HAL_DMA_Abort+0xd6>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a65      	ldr	r2, [pc, #404]	; (80039e8 <HAL_DMA_Abort+0x240>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d013      	beq.n	800387e <HAL_DMA_Abort+0xd6>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a64      	ldr	r2, [pc, #400]	; (80039ec <HAL_DMA_Abort+0x244>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d00e      	beq.n	800387e <HAL_DMA_Abort+0xd6>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a62      	ldr	r2, [pc, #392]	; (80039f0 <HAL_DMA_Abort+0x248>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d009      	beq.n	800387e <HAL_DMA_Abort+0xd6>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	4a61      	ldr	r2, [pc, #388]	; (80039f4 <HAL_DMA_Abort+0x24c>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d004      	beq.n	800387e <HAL_DMA_Abort+0xd6>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a5f      	ldr	r2, [pc, #380]	; (80039f8 <HAL_DMA_Abort+0x250>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d101      	bne.n	8003882 <HAL_DMA_Abort+0xda>
 800387e:	2301      	movs	r3, #1
 8003880:	e000      	b.n	8003884 <HAL_DMA_Abort+0xdc>
 8003882:	2300      	movs	r3, #0
 8003884:	2b00      	cmp	r3, #0
 8003886:	d013      	beq.n	80038b0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f022 021e 	bic.w	r2, r2, #30
 8003896:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	695a      	ldr	r2, [r3, #20]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038a6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	617b      	str	r3, [r7, #20]
 80038ae:	e00a      	b.n	80038c6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 020e 	bic.w	r2, r2, #14
 80038be:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a3c      	ldr	r2, [pc, #240]	; (80039bc <HAL_DMA_Abort+0x214>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d072      	beq.n	80039b6 <HAL_DMA_Abort+0x20e>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a3a      	ldr	r2, [pc, #232]	; (80039c0 <HAL_DMA_Abort+0x218>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d06d      	beq.n	80039b6 <HAL_DMA_Abort+0x20e>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a39      	ldr	r2, [pc, #228]	; (80039c4 <HAL_DMA_Abort+0x21c>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d068      	beq.n	80039b6 <HAL_DMA_Abort+0x20e>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a37      	ldr	r2, [pc, #220]	; (80039c8 <HAL_DMA_Abort+0x220>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d063      	beq.n	80039b6 <HAL_DMA_Abort+0x20e>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a36      	ldr	r2, [pc, #216]	; (80039cc <HAL_DMA_Abort+0x224>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d05e      	beq.n	80039b6 <HAL_DMA_Abort+0x20e>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a34      	ldr	r2, [pc, #208]	; (80039d0 <HAL_DMA_Abort+0x228>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d059      	beq.n	80039b6 <HAL_DMA_Abort+0x20e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a33      	ldr	r2, [pc, #204]	; (80039d4 <HAL_DMA_Abort+0x22c>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d054      	beq.n	80039b6 <HAL_DMA_Abort+0x20e>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a31      	ldr	r2, [pc, #196]	; (80039d8 <HAL_DMA_Abort+0x230>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d04f      	beq.n	80039b6 <HAL_DMA_Abort+0x20e>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a30      	ldr	r2, [pc, #192]	; (80039dc <HAL_DMA_Abort+0x234>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d04a      	beq.n	80039b6 <HAL_DMA_Abort+0x20e>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a2e      	ldr	r2, [pc, #184]	; (80039e0 <HAL_DMA_Abort+0x238>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d045      	beq.n	80039b6 <HAL_DMA_Abort+0x20e>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a2d      	ldr	r2, [pc, #180]	; (80039e4 <HAL_DMA_Abort+0x23c>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d040      	beq.n	80039b6 <HAL_DMA_Abort+0x20e>
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a2b      	ldr	r2, [pc, #172]	; (80039e8 <HAL_DMA_Abort+0x240>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d03b      	beq.n	80039b6 <HAL_DMA_Abort+0x20e>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	4a2a      	ldr	r2, [pc, #168]	; (80039ec <HAL_DMA_Abort+0x244>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d036      	beq.n	80039b6 <HAL_DMA_Abort+0x20e>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a28      	ldr	r2, [pc, #160]	; (80039f0 <HAL_DMA_Abort+0x248>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d031      	beq.n	80039b6 <HAL_DMA_Abort+0x20e>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a27      	ldr	r2, [pc, #156]	; (80039f4 <HAL_DMA_Abort+0x24c>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d02c      	beq.n	80039b6 <HAL_DMA_Abort+0x20e>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a25      	ldr	r2, [pc, #148]	; (80039f8 <HAL_DMA_Abort+0x250>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d027      	beq.n	80039b6 <HAL_DMA_Abort+0x20e>
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a24      	ldr	r2, [pc, #144]	; (80039fc <HAL_DMA_Abort+0x254>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d022      	beq.n	80039b6 <HAL_DMA_Abort+0x20e>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a22      	ldr	r2, [pc, #136]	; (8003a00 <HAL_DMA_Abort+0x258>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d01d      	beq.n	80039b6 <HAL_DMA_Abort+0x20e>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a21      	ldr	r2, [pc, #132]	; (8003a04 <HAL_DMA_Abort+0x25c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d018      	beq.n	80039b6 <HAL_DMA_Abort+0x20e>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a1f      	ldr	r2, [pc, #124]	; (8003a08 <HAL_DMA_Abort+0x260>)
 800398a:	4293      	cmp	r3, r2
 800398c:	d013      	beq.n	80039b6 <HAL_DMA_Abort+0x20e>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a1e      	ldr	r2, [pc, #120]	; (8003a0c <HAL_DMA_Abort+0x264>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d00e      	beq.n	80039b6 <HAL_DMA_Abort+0x20e>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a1c      	ldr	r2, [pc, #112]	; (8003a10 <HAL_DMA_Abort+0x268>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d009      	beq.n	80039b6 <HAL_DMA_Abort+0x20e>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a1b      	ldr	r2, [pc, #108]	; (8003a14 <HAL_DMA_Abort+0x26c>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d004      	beq.n	80039b6 <HAL_DMA_Abort+0x20e>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a19      	ldr	r2, [pc, #100]	; (8003a18 <HAL_DMA_Abort+0x270>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d132      	bne.n	8003a1c <HAL_DMA_Abort+0x274>
 80039b6:	2301      	movs	r3, #1
 80039b8:	e031      	b.n	8003a1e <HAL_DMA_Abort+0x276>
 80039ba:	bf00      	nop
 80039bc:	40020010 	.word	0x40020010
 80039c0:	40020028 	.word	0x40020028
 80039c4:	40020040 	.word	0x40020040
 80039c8:	40020058 	.word	0x40020058
 80039cc:	40020070 	.word	0x40020070
 80039d0:	40020088 	.word	0x40020088
 80039d4:	400200a0 	.word	0x400200a0
 80039d8:	400200b8 	.word	0x400200b8
 80039dc:	40020410 	.word	0x40020410
 80039e0:	40020428 	.word	0x40020428
 80039e4:	40020440 	.word	0x40020440
 80039e8:	40020458 	.word	0x40020458
 80039ec:	40020470 	.word	0x40020470
 80039f0:	40020488 	.word	0x40020488
 80039f4:	400204a0 	.word	0x400204a0
 80039f8:	400204b8 	.word	0x400204b8
 80039fc:	58025408 	.word	0x58025408
 8003a00:	5802541c 	.word	0x5802541c
 8003a04:	58025430 	.word	0x58025430
 8003a08:	58025444 	.word	0x58025444
 8003a0c:	58025458 	.word	0x58025458
 8003a10:	5802546c 	.word	0x5802546c
 8003a14:	58025480 	.word	0x58025480
 8003a18:	58025494 	.word	0x58025494
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d007      	beq.n	8003a32 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a30:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a6d      	ldr	r2, [pc, #436]	; (8003bec <HAL_DMA_Abort+0x444>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d04a      	beq.n	8003ad2 <HAL_DMA_Abort+0x32a>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a6b      	ldr	r2, [pc, #428]	; (8003bf0 <HAL_DMA_Abort+0x448>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d045      	beq.n	8003ad2 <HAL_DMA_Abort+0x32a>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a6a      	ldr	r2, [pc, #424]	; (8003bf4 <HAL_DMA_Abort+0x44c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d040      	beq.n	8003ad2 <HAL_DMA_Abort+0x32a>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a68      	ldr	r2, [pc, #416]	; (8003bf8 <HAL_DMA_Abort+0x450>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d03b      	beq.n	8003ad2 <HAL_DMA_Abort+0x32a>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a67      	ldr	r2, [pc, #412]	; (8003bfc <HAL_DMA_Abort+0x454>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d036      	beq.n	8003ad2 <HAL_DMA_Abort+0x32a>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a65      	ldr	r2, [pc, #404]	; (8003c00 <HAL_DMA_Abort+0x458>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d031      	beq.n	8003ad2 <HAL_DMA_Abort+0x32a>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a64      	ldr	r2, [pc, #400]	; (8003c04 <HAL_DMA_Abort+0x45c>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d02c      	beq.n	8003ad2 <HAL_DMA_Abort+0x32a>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a62      	ldr	r2, [pc, #392]	; (8003c08 <HAL_DMA_Abort+0x460>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d027      	beq.n	8003ad2 <HAL_DMA_Abort+0x32a>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a61      	ldr	r2, [pc, #388]	; (8003c0c <HAL_DMA_Abort+0x464>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d022      	beq.n	8003ad2 <HAL_DMA_Abort+0x32a>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a5f      	ldr	r2, [pc, #380]	; (8003c10 <HAL_DMA_Abort+0x468>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d01d      	beq.n	8003ad2 <HAL_DMA_Abort+0x32a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a5e      	ldr	r2, [pc, #376]	; (8003c14 <HAL_DMA_Abort+0x46c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d018      	beq.n	8003ad2 <HAL_DMA_Abort+0x32a>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a5c      	ldr	r2, [pc, #368]	; (8003c18 <HAL_DMA_Abort+0x470>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d013      	beq.n	8003ad2 <HAL_DMA_Abort+0x32a>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a5b      	ldr	r2, [pc, #364]	; (8003c1c <HAL_DMA_Abort+0x474>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d00e      	beq.n	8003ad2 <HAL_DMA_Abort+0x32a>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a59      	ldr	r2, [pc, #356]	; (8003c20 <HAL_DMA_Abort+0x478>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d009      	beq.n	8003ad2 <HAL_DMA_Abort+0x32a>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a58      	ldr	r2, [pc, #352]	; (8003c24 <HAL_DMA_Abort+0x47c>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d004      	beq.n	8003ad2 <HAL_DMA_Abort+0x32a>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a56      	ldr	r2, [pc, #344]	; (8003c28 <HAL_DMA_Abort+0x480>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d108      	bne.n	8003ae4 <HAL_DMA_Abort+0x33c>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0201 	bic.w	r2, r2, #1
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	e007      	b.n	8003af4 <HAL_DMA_Abort+0x34c>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0201 	bic.w	r2, r2, #1
 8003af2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003af4:	e013      	b.n	8003b1e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003af6:	f7ff f8e9 	bl	8002ccc <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b05      	cmp	r3, #5
 8003b02:	d90c      	bls.n	8003b1e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2203      	movs	r2, #3
 8003b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e12d      	b.n	8003d7a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1e5      	bne.n	8003af6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	4a2f      	ldr	r2, [pc, #188]	; (8003bec <HAL_DMA_Abort+0x444>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d04a      	beq.n	8003bca <HAL_DMA_Abort+0x422>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a2d      	ldr	r2, [pc, #180]	; (8003bf0 <HAL_DMA_Abort+0x448>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d045      	beq.n	8003bca <HAL_DMA_Abort+0x422>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a2c      	ldr	r2, [pc, #176]	; (8003bf4 <HAL_DMA_Abort+0x44c>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d040      	beq.n	8003bca <HAL_DMA_Abort+0x422>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a2a      	ldr	r2, [pc, #168]	; (8003bf8 <HAL_DMA_Abort+0x450>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d03b      	beq.n	8003bca <HAL_DMA_Abort+0x422>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a29      	ldr	r2, [pc, #164]	; (8003bfc <HAL_DMA_Abort+0x454>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d036      	beq.n	8003bca <HAL_DMA_Abort+0x422>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4a27      	ldr	r2, [pc, #156]	; (8003c00 <HAL_DMA_Abort+0x458>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d031      	beq.n	8003bca <HAL_DMA_Abort+0x422>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a26      	ldr	r2, [pc, #152]	; (8003c04 <HAL_DMA_Abort+0x45c>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d02c      	beq.n	8003bca <HAL_DMA_Abort+0x422>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a24      	ldr	r2, [pc, #144]	; (8003c08 <HAL_DMA_Abort+0x460>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d027      	beq.n	8003bca <HAL_DMA_Abort+0x422>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a23      	ldr	r2, [pc, #140]	; (8003c0c <HAL_DMA_Abort+0x464>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d022      	beq.n	8003bca <HAL_DMA_Abort+0x422>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a21      	ldr	r2, [pc, #132]	; (8003c10 <HAL_DMA_Abort+0x468>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d01d      	beq.n	8003bca <HAL_DMA_Abort+0x422>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a20      	ldr	r2, [pc, #128]	; (8003c14 <HAL_DMA_Abort+0x46c>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d018      	beq.n	8003bca <HAL_DMA_Abort+0x422>
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a1e      	ldr	r2, [pc, #120]	; (8003c18 <HAL_DMA_Abort+0x470>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d013      	beq.n	8003bca <HAL_DMA_Abort+0x422>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a1d      	ldr	r2, [pc, #116]	; (8003c1c <HAL_DMA_Abort+0x474>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00e      	beq.n	8003bca <HAL_DMA_Abort+0x422>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a1b      	ldr	r2, [pc, #108]	; (8003c20 <HAL_DMA_Abort+0x478>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d009      	beq.n	8003bca <HAL_DMA_Abort+0x422>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a1a      	ldr	r2, [pc, #104]	; (8003c24 <HAL_DMA_Abort+0x47c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d004      	beq.n	8003bca <HAL_DMA_Abort+0x422>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <HAL_DMA_Abort+0x480>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d101      	bne.n	8003bce <HAL_DMA_Abort+0x426>
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e000      	b.n	8003bd0 <HAL_DMA_Abort+0x428>
 8003bce:	2300      	movs	r3, #0
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d02b      	beq.n	8003c2c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bd8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bde:	f003 031f 	and.w	r3, r3, #31
 8003be2:	223f      	movs	r2, #63	; 0x3f
 8003be4:	409a      	lsls	r2, r3
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	609a      	str	r2, [r3, #8]
 8003bea:	e02a      	b.n	8003c42 <HAL_DMA_Abort+0x49a>
 8003bec:	40020010 	.word	0x40020010
 8003bf0:	40020028 	.word	0x40020028
 8003bf4:	40020040 	.word	0x40020040
 8003bf8:	40020058 	.word	0x40020058
 8003bfc:	40020070 	.word	0x40020070
 8003c00:	40020088 	.word	0x40020088
 8003c04:	400200a0 	.word	0x400200a0
 8003c08:	400200b8 	.word	0x400200b8
 8003c0c:	40020410 	.word	0x40020410
 8003c10:	40020428 	.word	0x40020428
 8003c14:	40020440 	.word	0x40020440
 8003c18:	40020458 	.word	0x40020458
 8003c1c:	40020470 	.word	0x40020470
 8003c20:	40020488 	.word	0x40020488
 8003c24:	400204a0 	.word	0x400204a0
 8003c28:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c30:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c36:	f003 031f 	and.w	r3, r3, #31
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	409a      	lsls	r2, r3
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a4f      	ldr	r2, [pc, #316]	; (8003d84 <HAL_DMA_Abort+0x5dc>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d072      	beq.n	8003d32 <HAL_DMA_Abort+0x58a>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a4d      	ldr	r2, [pc, #308]	; (8003d88 <HAL_DMA_Abort+0x5e0>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d06d      	beq.n	8003d32 <HAL_DMA_Abort+0x58a>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a4c      	ldr	r2, [pc, #304]	; (8003d8c <HAL_DMA_Abort+0x5e4>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d068      	beq.n	8003d32 <HAL_DMA_Abort+0x58a>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a4a      	ldr	r2, [pc, #296]	; (8003d90 <HAL_DMA_Abort+0x5e8>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d063      	beq.n	8003d32 <HAL_DMA_Abort+0x58a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a49      	ldr	r2, [pc, #292]	; (8003d94 <HAL_DMA_Abort+0x5ec>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d05e      	beq.n	8003d32 <HAL_DMA_Abort+0x58a>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a47      	ldr	r2, [pc, #284]	; (8003d98 <HAL_DMA_Abort+0x5f0>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d059      	beq.n	8003d32 <HAL_DMA_Abort+0x58a>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a46      	ldr	r2, [pc, #280]	; (8003d9c <HAL_DMA_Abort+0x5f4>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d054      	beq.n	8003d32 <HAL_DMA_Abort+0x58a>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a44      	ldr	r2, [pc, #272]	; (8003da0 <HAL_DMA_Abort+0x5f8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d04f      	beq.n	8003d32 <HAL_DMA_Abort+0x58a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a43      	ldr	r2, [pc, #268]	; (8003da4 <HAL_DMA_Abort+0x5fc>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d04a      	beq.n	8003d32 <HAL_DMA_Abort+0x58a>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a41      	ldr	r2, [pc, #260]	; (8003da8 <HAL_DMA_Abort+0x600>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d045      	beq.n	8003d32 <HAL_DMA_Abort+0x58a>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a40      	ldr	r2, [pc, #256]	; (8003dac <HAL_DMA_Abort+0x604>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d040      	beq.n	8003d32 <HAL_DMA_Abort+0x58a>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a3e      	ldr	r2, [pc, #248]	; (8003db0 <HAL_DMA_Abort+0x608>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d03b      	beq.n	8003d32 <HAL_DMA_Abort+0x58a>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a3d      	ldr	r2, [pc, #244]	; (8003db4 <HAL_DMA_Abort+0x60c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d036      	beq.n	8003d32 <HAL_DMA_Abort+0x58a>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a3b      	ldr	r2, [pc, #236]	; (8003db8 <HAL_DMA_Abort+0x610>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d031      	beq.n	8003d32 <HAL_DMA_Abort+0x58a>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a3a      	ldr	r2, [pc, #232]	; (8003dbc <HAL_DMA_Abort+0x614>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d02c      	beq.n	8003d32 <HAL_DMA_Abort+0x58a>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a38      	ldr	r2, [pc, #224]	; (8003dc0 <HAL_DMA_Abort+0x618>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d027      	beq.n	8003d32 <HAL_DMA_Abort+0x58a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a37      	ldr	r2, [pc, #220]	; (8003dc4 <HAL_DMA_Abort+0x61c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d022      	beq.n	8003d32 <HAL_DMA_Abort+0x58a>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a35      	ldr	r2, [pc, #212]	; (8003dc8 <HAL_DMA_Abort+0x620>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d01d      	beq.n	8003d32 <HAL_DMA_Abort+0x58a>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a34      	ldr	r2, [pc, #208]	; (8003dcc <HAL_DMA_Abort+0x624>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d018      	beq.n	8003d32 <HAL_DMA_Abort+0x58a>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a32      	ldr	r2, [pc, #200]	; (8003dd0 <HAL_DMA_Abort+0x628>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d013      	beq.n	8003d32 <HAL_DMA_Abort+0x58a>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a31      	ldr	r2, [pc, #196]	; (8003dd4 <HAL_DMA_Abort+0x62c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d00e      	beq.n	8003d32 <HAL_DMA_Abort+0x58a>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a2f      	ldr	r2, [pc, #188]	; (8003dd8 <HAL_DMA_Abort+0x630>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d009      	beq.n	8003d32 <HAL_DMA_Abort+0x58a>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a2e      	ldr	r2, [pc, #184]	; (8003ddc <HAL_DMA_Abort+0x634>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d004      	beq.n	8003d32 <HAL_DMA_Abort+0x58a>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a2c      	ldr	r2, [pc, #176]	; (8003de0 <HAL_DMA_Abort+0x638>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d101      	bne.n	8003d36 <HAL_DMA_Abort+0x58e>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <HAL_DMA_Abort+0x590>
 8003d36:	2300      	movs	r3, #0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d015      	beq.n	8003d68 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003d44:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00c      	beq.n	8003d68 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d58:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003d5c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003d66:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003d78:	2300      	movs	r3, #0
}
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	40020010 	.word	0x40020010
 8003d88:	40020028 	.word	0x40020028
 8003d8c:	40020040 	.word	0x40020040
 8003d90:	40020058 	.word	0x40020058
 8003d94:	40020070 	.word	0x40020070
 8003d98:	40020088 	.word	0x40020088
 8003d9c:	400200a0 	.word	0x400200a0
 8003da0:	400200b8 	.word	0x400200b8
 8003da4:	40020410 	.word	0x40020410
 8003da8:	40020428 	.word	0x40020428
 8003dac:	40020440 	.word	0x40020440
 8003db0:	40020458 	.word	0x40020458
 8003db4:	40020470 	.word	0x40020470
 8003db8:	40020488 	.word	0x40020488
 8003dbc:	400204a0 	.word	0x400204a0
 8003dc0:	400204b8 	.word	0x400204b8
 8003dc4:	58025408 	.word	0x58025408
 8003dc8:	5802541c 	.word	0x5802541c
 8003dcc:	58025430 	.word	0x58025430
 8003dd0:	58025444 	.word	0x58025444
 8003dd4:	58025458 	.word	0x58025458
 8003dd8:	5802546c 	.word	0x5802546c
 8003ddc:	58025480 	.word	0x58025480
 8003de0:	58025494 	.word	0x58025494

08003de4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d101      	bne.n	8003df6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e205      	b.n	8004202 <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003dfc:	b2db      	uxtb	r3, r3
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d004      	beq.n	8003e0c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2280      	movs	r2, #128	; 0x80
 8003e06:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e1fa      	b.n	8004202 <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a8c      	ldr	r2, [pc, #560]	; (8004044 <HAL_DMA_Abort_IT+0x260>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d04a      	beq.n	8003eac <HAL_DMA_Abort_IT+0xc8>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a8b      	ldr	r2, [pc, #556]	; (8004048 <HAL_DMA_Abort_IT+0x264>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d045      	beq.n	8003eac <HAL_DMA_Abort_IT+0xc8>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a89      	ldr	r2, [pc, #548]	; (800404c <HAL_DMA_Abort_IT+0x268>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d040      	beq.n	8003eac <HAL_DMA_Abort_IT+0xc8>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a88      	ldr	r2, [pc, #544]	; (8004050 <HAL_DMA_Abort_IT+0x26c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d03b      	beq.n	8003eac <HAL_DMA_Abort_IT+0xc8>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a86      	ldr	r2, [pc, #536]	; (8004054 <HAL_DMA_Abort_IT+0x270>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d036      	beq.n	8003eac <HAL_DMA_Abort_IT+0xc8>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a85      	ldr	r2, [pc, #532]	; (8004058 <HAL_DMA_Abort_IT+0x274>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d031      	beq.n	8003eac <HAL_DMA_Abort_IT+0xc8>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a83      	ldr	r2, [pc, #524]	; (800405c <HAL_DMA_Abort_IT+0x278>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d02c      	beq.n	8003eac <HAL_DMA_Abort_IT+0xc8>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a82      	ldr	r2, [pc, #520]	; (8004060 <HAL_DMA_Abort_IT+0x27c>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d027      	beq.n	8003eac <HAL_DMA_Abort_IT+0xc8>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a80      	ldr	r2, [pc, #512]	; (8004064 <HAL_DMA_Abort_IT+0x280>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d022      	beq.n	8003eac <HAL_DMA_Abort_IT+0xc8>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a7f      	ldr	r2, [pc, #508]	; (8004068 <HAL_DMA_Abort_IT+0x284>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d01d      	beq.n	8003eac <HAL_DMA_Abort_IT+0xc8>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a7d      	ldr	r2, [pc, #500]	; (800406c <HAL_DMA_Abort_IT+0x288>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d018      	beq.n	8003eac <HAL_DMA_Abort_IT+0xc8>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a7c      	ldr	r2, [pc, #496]	; (8004070 <HAL_DMA_Abort_IT+0x28c>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d013      	beq.n	8003eac <HAL_DMA_Abort_IT+0xc8>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a7a      	ldr	r2, [pc, #488]	; (8004074 <HAL_DMA_Abort_IT+0x290>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d00e      	beq.n	8003eac <HAL_DMA_Abort_IT+0xc8>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a79      	ldr	r2, [pc, #484]	; (8004078 <HAL_DMA_Abort_IT+0x294>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d009      	beq.n	8003eac <HAL_DMA_Abort_IT+0xc8>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a77      	ldr	r2, [pc, #476]	; (800407c <HAL_DMA_Abort_IT+0x298>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d004      	beq.n	8003eac <HAL_DMA_Abort_IT+0xc8>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a76      	ldr	r2, [pc, #472]	; (8004080 <HAL_DMA_Abort_IT+0x29c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d101      	bne.n	8003eb0 <HAL_DMA_Abort_IT+0xcc>
 8003eac:	2301      	movs	r3, #1
 8003eae:	e000      	b.n	8003eb2 <HAL_DMA_Abort_IT+0xce>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d065      	beq.n	8003f82 <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2204      	movs	r2, #4
 8003eba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a60      	ldr	r2, [pc, #384]	; (8004044 <HAL_DMA_Abort_IT+0x260>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d04a      	beq.n	8003f5e <HAL_DMA_Abort_IT+0x17a>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a5e      	ldr	r2, [pc, #376]	; (8004048 <HAL_DMA_Abort_IT+0x264>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d045      	beq.n	8003f5e <HAL_DMA_Abort_IT+0x17a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a5d      	ldr	r2, [pc, #372]	; (800404c <HAL_DMA_Abort_IT+0x268>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d040      	beq.n	8003f5e <HAL_DMA_Abort_IT+0x17a>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a5b      	ldr	r2, [pc, #364]	; (8004050 <HAL_DMA_Abort_IT+0x26c>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d03b      	beq.n	8003f5e <HAL_DMA_Abort_IT+0x17a>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a5a      	ldr	r2, [pc, #360]	; (8004054 <HAL_DMA_Abort_IT+0x270>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d036      	beq.n	8003f5e <HAL_DMA_Abort_IT+0x17a>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a58      	ldr	r2, [pc, #352]	; (8004058 <HAL_DMA_Abort_IT+0x274>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d031      	beq.n	8003f5e <HAL_DMA_Abort_IT+0x17a>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a57      	ldr	r2, [pc, #348]	; (800405c <HAL_DMA_Abort_IT+0x278>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d02c      	beq.n	8003f5e <HAL_DMA_Abort_IT+0x17a>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a55      	ldr	r2, [pc, #340]	; (8004060 <HAL_DMA_Abort_IT+0x27c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d027      	beq.n	8003f5e <HAL_DMA_Abort_IT+0x17a>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4a54      	ldr	r2, [pc, #336]	; (8004064 <HAL_DMA_Abort_IT+0x280>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d022      	beq.n	8003f5e <HAL_DMA_Abort_IT+0x17a>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a52      	ldr	r2, [pc, #328]	; (8004068 <HAL_DMA_Abort_IT+0x284>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d01d      	beq.n	8003f5e <HAL_DMA_Abort_IT+0x17a>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a51      	ldr	r2, [pc, #324]	; (800406c <HAL_DMA_Abort_IT+0x288>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d018      	beq.n	8003f5e <HAL_DMA_Abort_IT+0x17a>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a4f      	ldr	r2, [pc, #316]	; (8004070 <HAL_DMA_Abort_IT+0x28c>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d013      	beq.n	8003f5e <HAL_DMA_Abort_IT+0x17a>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	4a4e      	ldr	r2, [pc, #312]	; (8004074 <HAL_DMA_Abort_IT+0x290>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d00e      	beq.n	8003f5e <HAL_DMA_Abort_IT+0x17a>
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a4c      	ldr	r2, [pc, #304]	; (8004078 <HAL_DMA_Abort_IT+0x294>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d009      	beq.n	8003f5e <HAL_DMA_Abort_IT+0x17a>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a4b      	ldr	r2, [pc, #300]	; (800407c <HAL_DMA_Abort_IT+0x298>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d004      	beq.n	8003f5e <HAL_DMA_Abort_IT+0x17a>
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a49      	ldr	r2, [pc, #292]	; (8004080 <HAL_DMA_Abort_IT+0x29c>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d108      	bne.n	8003f70 <HAL_DMA_Abort_IT+0x18c>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	681a      	ldr	r2, [r3, #0]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f022 0201 	bic.w	r2, r2, #1
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	e147      	b.n	8004200 <HAL_DMA_Abort_IT+0x41c>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f022 0201 	bic.w	r2, r2, #1
 8003f7e:	601a      	str	r2, [r3, #0]
 8003f80:	e13e      	b.n	8004200 <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f022 020e 	bic.w	r2, r2, #14
 8003f90:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a2b      	ldr	r2, [pc, #172]	; (8004044 <HAL_DMA_Abort_IT+0x260>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d04a      	beq.n	8004032 <HAL_DMA_Abort_IT+0x24e>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a29      	ldr	r2, [pc, #164]	; (8004048 <HAL_DMA_Abort_IT+0x264>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d045      	beq.n	8004032 <HAL_DMA_Abort_IT+0x24e>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a28      	ldr	r2, [pc, #160]	; (800404c <HAL_DMA_Abort_IT+0x268>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d040      	beq.n	8004032 <HAL_DMA_Abort_IT+0x24e>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a26      	ldr	r2, [pc, #152]	; (8004050 <HAL_DMA_Abort_IT+0x26c>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d03b      	beq.n	8004032 <HAL_DMA_Abort_IT+0x24e>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a25      	ldr	r2, [pc, #148]	; (8004054 <HAL_DMA_Abort_IT+0x270>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d036      	beq.n	8004032 <HAL_DMA_Abort_IT+0x24e>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a23      	ldr	r2, [pc, #140]	; (8004058 <HAL_DMA_Abort_IT+0x274>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d031      	beq.n	8004032 <HAL_DMA_Abort_IT+0x24e>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a22      	ldr	r2, [pc, #136]	; (800405c <HAL_DMA_Abort_IT+0x278>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d02c      	beq.n	8004032 <HAL_DMA_Abort_IT+0x24e>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a20      	ldr	r2, [pc, #128]	; (8004060 <HAL_DMA_Abort_IT+0x27c>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d027      	beq.n	8004032 <HAL_DMA_Abort_IT+0x24e>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1f      	ldr	r2, [pc, #124]	; (8004064 <HAL_DMA_Abort_IT+0x280>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d022      	beq.n	8004032 <HAL_DMA_Abort_IT+0x24e>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a1d      	ldr	r2, [pc, #116]	; (8004068 <HAL_DMA_Abort_IT+0x284>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d01d      	beq.n	8004032 <HAL_DMA_Abort_IT+0x24e>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a1c      	ldr	r2, [pc, #112]	; (800406c <HAL_DMA_Abort_IT+0x288>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d018      	beq.n	8004032 <HAL_DMA_Abort_IT+0x24e>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a1a      	ldr	r2, [pc, #104]	; (8004070 <HAL_DMA_Abort_IT+0x28c>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <HAL_DMA_Abort_IT+0x24e>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a19      	ldr	r2, [pc, #100]	; (8004074 <HAL_DMA_Abort_IT+0x290>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d00e      	beq.n	8004032 <HAL_DMA_Abort_IT+0x24e>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a17      	ldr	r2, [pc, #92]	; (8004078 <HAL_DMA_Abort_IT+0x294>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d009      	beq.n	8004032 <HAL_DMA_Abort_IT+0x24e>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a16      	ldr	r2, [pc, #88]	; (800407c <HAL_DMA_Abort_IT+0x298>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d004      	beq.n	8004032 <HAL_DMA_Abort_IT+0x24e>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a14      	ldr	r2, [pc, #80]	; (8004080 <HAL_DMA_Abort_IT+0x29c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d128      	bne.n	8004084 <HAL_DMA_Abort_IT+0x2a0>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f022 0201 	bic.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	e027      	b.n	8004094 <HAL_DMA_Abort_IT+0x2b0>
 8004044:	40020010 	.word	0x40020010
 8004048:	40020028 	.word	0x40020028
 800404c:	40020040 	.word	0x40020040
 8004050:	40020058 	.word	0x40020058
 8004054:	40020070 	.word	0x40020070
 8004058:	40020088 	.word	0x40020088
 800405c:	400200a0 	.word	0x400200a0
 8004060:	400200b8 	.word	0x400200b8
 8004064:	40020410 	.word	0x40020410
 8004068:	40020428 	.word	0x40020428
 800406c:	40020440 	.word	0x40020440
 8004070:	40020458 	.word	0x40020458
 8004074:	40020470 	.word	0x40020470
 8004078:	40020488 	.word	0x40020488
 800407c:	400204a0 	.word	0x400204a0
 8004080:	400204b8 	.word	0x400204b8
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f022 0201 	bic.w	r2, r2, #1
 8004092:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a5c      	ldr	r2, [pc, #368]	; (800420c <HAL_DMA_Abort_IT+0x428>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d072      	beq.n	8004184 <HAL_DMA_Abort_IT+0x3a0>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a5b      	ldr	r2, [pc, #364]	; (8004210 <HAL_DMA_Abort_IT+0x42c>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d06d      	beq.n	8004184 <HAL_DMA_Abort_IT+0x3a0>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a59      	ldr	r2, [pc, #356]	; (8004214 <HAL_DMA_Abort_IT+0x430>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d068      	beq.n	8004184 <HAL_DMA_Abort_IT+0x3a0>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	4a58      	ldr	r2, [pc, #352]	; (8004218 <HAL_DMA_Abort_IT+0x434>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d063      	beq.n	8004184 <HAL_DMA_Abort_IT+0x3a0>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a56      	ldr	r2, [pc, #344]	; (800421c <HAL_DMA_Abort_IT+0x438>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d05e      	beq.n	8004184 <HAL_DMA_Abort_IT+0x3a0>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a55      	ldr	r2, [pc, #340]	; (8004220 <HAL_DMA_Abort_IT+0x43c>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d059      	beq.n	8004184 <HAL_DMA_Abort_IT+0x3a0>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a53      	ldr	r2, [pc, #332]	; (8004224 <HAL_DMA_Abort_IT+0x440>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d054      	beq.n	8004184 <HAL_DMA_Abort_IT+0x3a0>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a52      	ldr	r2, [pc, #328]	; (8004228 <HAL_DMA_Abort_IT+0x444>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d04f      	beq.n	8004184 <HAL_DMA_Abort_IT+0x3a0>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a50      	ldr	r2, [pc, #320]	; (800422c <HAL_DMA_Abort_IT+0x448>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d04a      	beq.n	8004184 <HAL_DMA_Abort_IT+0x3a0>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a4f      	ldr	r2, [pc, #316]	; (8004230 <HAL_DMA_Abort_IT+0x44c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d045      	beq.n	8004184 <HAL_DMA_Abort_IT+0x3a0>
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a4d      	ldr	r2, [pc, #308]	; (8004234 <HAL_DMA_Abort_IT+0x450>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d040      	beq.n	8004184 <HAL_DMA_Abort_IT+0x3a0>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a4c      	ldr	r2, [pc, #304]	; (8004238 <HAL_DMA_Abort_IT+0x454>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d03b      	beq.n	8004184 <HAL_DMA_Abort_IT+0x3a0>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a4a      	ldr	r2, [pc, #296]	; (800423c <HAL_DMA_Abort_IT+0x458>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d036      	beq.n	8004184 <HAL_DMA_Abort_IT+0x3a0>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a49      	ldr	r2, [pc, #292]	; (8004240 <HAL_DMA_Abort_IT+0x45c>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d031      	beq.n	8004184 <HAL_DMA_Abort_IT+0x3a0>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a47      	ldr	r2, [pc, #284]	; (8004244 <HAL_DMA_Abort_IT+0x460>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d02c      	beq.n	8004184 <HAL_DMA_Abort_IT+0x3a0>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a46      	ldr	r2, [pc, #280]	; (8004248 <HAL_DMA_Abort_IT+0x464>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d027      	beq.n	8004184 <HAL_DMA_Abort_IT+0x3a0>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a44      	ldr	r2, [pc, #272]	; (800424c <HAL_DMA_Abort_IT+0x468>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d022      	beq.n	8004184 <HAL_DMA_Abort_IT+0x3a0>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a43      	ldr	r2, [pc, #268]	; (8004250 <HAL_DMA_Abort_IT+0x46c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d01d      	beq.n	8004184 <HAL_DMA_Abort_IT+0x3a0>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a41      	ldr	r2, [pc, #260]	; (8004254 <HAL_DMA_Abort_IT+0x470>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d018      	beq.n	8004184 <HAL_DMA_Abort_IT+0x3a0>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a40      	ldr	r2, [pc, #256]	; (8004258 <HAL_DMA_Abort_IT+0x474>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d013      	beq.n	8004184 <HAL_DMA_Abort_IT+0x3a0>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a3e      	ldr	r2, [pc, #248]	; (800425c <HAL_DMA_Abort_IT+0x478>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d00e      	beq.n	8004184 <HAL_DMA_Abort_IT+0x3a0>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a3d      	ldr	r2, [pc, #244]	; (8004260 <HAL_DMA_Abort_IT+0x47c>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d009      	beq.n	8004184 <HAL_DMA_Abort_IT+0x3a0>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a3b      	ldr	r2, [pc, #236]	; (8004264 <HAL_DMA_Abort_IT+0x480>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d004      	beq.n	8004184 <HAL_DMA_Abort_IT+0x3a0>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a3a      	ldr	r2, [pc, #232]	; (8004268 <HAL_DMA_Abort_IT+0x484>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d101      	bne.n	8004188 <HAL_DMA_Abort_IT+0x3a4>
 8004184:	2301      	movs	r3, #1
 8004186:	e000      	b.n	800418a <HAL_DMA_Abort_IT+0x3a6>
 8004188:	2300      	movs	r3, #0
 800418a:	2b00      	cmp	r3, #0
 800418c:	d028      	beq.n	80041e0 <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004198:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800419c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041a2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a8:	f003 031f 	and.w	r3, r3, #31
 80041ac:	2201      	movs	r2, #1
 80041ae:	409a      	lsls	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041b8:	687a      	ldr	r2, [r7, #4]
 80041ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80041bc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d00c      	beq.n	80041e0 <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041d4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80041de:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8004200:	2300      	movs	r3, #0
}
 8004202:	4618      	mov	r0, r3
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}
 800420a:	bf00      	nop
 800420c:	40020010 	.word	0x40020010
 8004210:	40020028 	.word	0x40020028
 8004214:	40020040 	.word	0x40020040
 8004218:	40020058 	.word	0x40020058
 800421c:	40020070 	.word	0x40020070
 8004220:	40020088 	.word	0x40020088
 8004224:	400200a0 	.word	0x400200a0
 8004228:	400200b8 	.word	0x400200b8
 800422c:	40020410 	.word	0x40020410
 8004230:	40020428 	.word	0x40020428
 8004234:	40020440 	.word	0x40020440
 8004238:	40020458 	.word	0x40020458
 800423c:	40020470 	.word	0x40020470
 8004240:	40020488 	.word	0x40020488
 8004244:	400204a0 	.word	0x400204a0
 8004248:	400204b8 	.word	0x400204b8
 800424c:	58025408 	.word	0x58025408
 8004250:	5802541c 	.word	0x5802541c
 8004254:	58025430 	.word	0x58025430
 8004258:	58025444 	.word	0x58025444
 800425c:	58025458 	.word	0x58025458
 8004260:	5802546c 	.word	0x5802546c
 8004264:	58025480 	.word	0x58025480
 8004268:	58025494 	.word	0x58025494

0800426c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b08a      	sub	sp, #40	; 0x28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004278:	4b67      	ldr	r3, [pc, #412]	; (8004418 <HAL_DMA_IRQHandler+0x1ac>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a67      	ldr	r2, [pc, #412]	; (800441c <HAL_DMA_IRQHandler+0x1b0>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	0a9b      	lsrs	r3, r3, #10
 8004284:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004290:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004292:	6a3b      	ldr	r3, [r7, #32]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a5f      	ldr	r2, [pc, #380]	; (8004420 <HAL_DMA_IRQHandler+0x1b4>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d04a      	beq.n	800433e <HAL_DMA_IRQHandler+0xd2>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a5d      	ldr	r2, [pc, #372]	; (8004424 <HAL_DMA_IRQHandler+0x1b8>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d045      	beq.n	800433e <HAL_DMA_IRQHandler+0xd2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a5c      	ldr	r2, [pc, #368]	; (8004428 <HAL_DMA_IRQHandler+0x1bc>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d040      	beq.n	800433e <HAL_DMA_IRQHandler+0xd2>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a5a      	ldr	r2, [pc, #360]	; (800442c <HAL_DMA_IRQHandler+0x1c0>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d03b      	beq.n	800433e <HAL_DMA_IRQHandler+0xd2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a59      	ldr	r2, [pc, #356]	; (8004430 <HAL_DMA_IRQHandler+0x1c4>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d036      	beq.n	800433e <HAL_DMA_IRQHandler+0xd2>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a57      	ldr	r2, [pc, #348]	; (8004434 <HAL_DMA_IRQHandler+0x1c8>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d031      	beq.n	800433e <HAL_DMA_IRQHandler+0xd2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a56      	ldr	r2, [pc, #344]	; (8004438 <HAL_DMA_IRQHandler+0x1cc>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d02c      	beq.n	800433e <HAL_DMA_IRQHandler+0xd2>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a54      	ldr	r2, [pc, #336]	; (800443c <HAL_DMA_IRQHandler+0x1d0>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d027      	beq.n	800433e <HAL_DMA_IRQHandler+0xd2>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a53      	ldr	r2, [pc, #332]	; (8004440 <HAL_DMA_IRQHandler+0x1d4>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d022      	beq.n	800433e <HAL_DMA_IRQHandler+0xd2>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a51      	ldr	r2, [pc, #324]	; (8004444 <HAL_DMA_IRQHandler+0x1d8>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d01d      	beq.n	800433e <HAL_DMA_IRQHandler+0xd2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a50      	ldr	r2, [pc, #320]	; (8004448 <HAL_DMA_IRQHandler+0x1dc>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d018      	beq.n	800433e <HAL_DMA_IRQHandler+0xd2>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a4e      	ldr	r2, [pc, #312]	; (800444c <HAL_DMA_IRQHandler+0x1e0>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d013      	beq.n	800433e <HAL_DMA_IRQHandler+0xd2>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a4d      	ldr	r2, [pc, #308]	; (8004450 <HAL_DMA_IRQHandler+0x1e4>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d00e      	beq.n	800433e <HAL_DMA_IRQHandler+0xd2>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a4b      	ldr	r2, [pc, #300]	; (8004454 <HAL_DMA_IRQHandler+0x1e8>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d009      	beq.n	800433e <HAL_DMA_IRQHandler+0xd2>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a4a      	ldr	r2, [pc, #296]	; (8004458 <HAL_DMA_IRQHandler+0x1ec>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d004      	beq.n	800433e <HAL_DMA_IRQHandler+0xd2>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a48      	ldr	r2, [pc, #288]	; (800445c <HAL_DMA_IRQHandler+0x1f0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d101      	bne.n	8004342 <HAL_DMA_IRQHandler+0xd6>
 800433e:	2301      	movs	r3, #1
 8004340:	e000      	b.n	8004344 <HAL_DMA_IRQHandler+0xd8>
 8004342:	2300      	movs	r3, #0
 8004344:	2b00      	cmp	r3, #0
 8004346:	f000 842b 	beq.w	8004ba0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434e:	f003 031f 	and.w	r3, r3, #31
 8004352:	2208      	movs	r2, #8
 8004354:	409a      	lsls	r2, r3
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	4013      	ands	r3, r2
 800435a:	2b00      	cmp	r3, #0
 800435c:	f000 80a2 	beq.w	80044a4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a2e      	ldr	r2, [pc, #184]	; (8004420 <HAL_DMA_IRQHandler+0x1b4>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d04a      	beq.n	8004400 <HAL_DMA_IRQHandler+0x194>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a2d      	ldr	r2, [pc, #180]	; (8004424 <HAL_DMA_IRQHandler+0x1b8>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d045      	beq.n	8004400 <HAL_DMA_IRQHandler+0x194>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a2b      	ldr	r2, [pc, #172]	; (8004428 <HAL_DMA_IRQHandler+0x1bc>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d040      	beq.n	8004400 <HAL_DMA_IRQHandler+0x194>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a2a      	ldr	r2, [pc, #168]	; (800442c <HAL_DMA_IRQHandler+0x1c0>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d03b      	beq.n	8004400 <HAL_DMA_IRQHandler+0x194>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a28      	ldr	r2, [pc, #160]	; (8004430 <HAL_DMA_IRQHandler+0x1c4>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d036      	beq.n	8004400 <HAL_DMA_IRQHandler+0x194>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a27      	ldr	r2, [pc, #156]	; (8004434 <HAL_DMA_IRQHandler+0x1c8>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d031      	beq.n	8004400 <HAL_DMA_IRQHandler+0x194>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a25      	ldr	r2, [pc, #148]	; (8004438 <HAL_DMA_IRQHandler+0x1cc>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d02c      	beq.n	8004400 <HAL_DMA_IRQHandler+0x194>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a24      	ldr	r2, [pc, #144]	; (800443c <HAL_DMA_IRQHandler+0x1d0>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d027      	beq.n	8004400 <HAL_DMA_IRQHandler+0x194>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a22      	ldr	r2, [pc, #136]	; (8004440 <HAL_DMA_IRQHandler+0x1d4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d022      	beq.n	8004400 <HAL_DMA_IRQHandler+0x194>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a21      	ldr	r2, [pc, #132]	; (8004444 <HAL_DMA_IRQHandler+0x1d8>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d01d      	beq.n	8004400 <HAL_DMA_IRQHandler+0x194>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a1f      	ldr	r2, [pc, #124]	; (8004448 <HAL_DMA_IRQHandler+0x1dc>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d018      	beq.n	8004400 <HAL_DMA_IRQHandler+0x194>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a1e      	ldr	r2, [pc, #120]	; (800444c <HAL_DMA_IRQHandler+0x1e0>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d013      	beq.n	8004400 <HAL_DMA_IRQHandler+0x194>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a1c      	ldr	r2, [pc, #112]	; (8004450 <HAL_DMA_IRQHandler+0x1e4>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00e      	beq.n	8004400 <HAL_DMA_IRQHandler+0x194>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a1b      	ldr	r2, [pc, #108]	; (8004454 <HAL_DMA_IRQHandler+0x1e8>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d009      	beq.n	8004400 <HAL_DMA_IRQHandler+0x194>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a19      	ldr	r2, [pc, #100]	; (8004458 <HAL_DMA_IRQHandler+0x1ec>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d004      	beq.n	8004400 <HAL_DMA_IRQHandler+0x194>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a18      	ldr	r2, [pc, #96]	; (800445c <HAL_DMA_IRQHandler+0x1f0>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d12f      	bne.n	8004460 <HAL_DMA_IRQHandler+0x1f4>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	2b00      	cmp	r3, #0
 800440c:	bf14      	ite	ne
 800440e:	2301      	movne	r3, #1
 8004410:	2300      	moveq	r3, #0
 8004412:	b2db      	uxtb	r3, r3
 8004414:	e02e      	b.n	8004474 <HAL_DMA_IRQHandler+0x208>
 8004416:	bf00      	nop
 8004418:	24000000 	.word	0x24000000
 800441c:	1b4e81b5 	.word	0x1b4e81b5
 8004420:	40020010 	.word	0x40020010
 8004424:	40020028 	.word	0x40020028
 8004428:	40020040 	.word	0x40020040
 800442c:	40020058 	.word	0x40020058
 8004430:	40020070 	.word	0x40020070
 8004434:	40020088 	.word	0x40020088
 8004438:	400200a0 	.word	0x400200a0
 800443c:	400200b8 	.word	0x400200b8
 8004440:	40020410 	.word	0x40020410
 8004444:	40020428 	.word	0x40020428
 8004448:	40020440 	.word	0x40020440
 800444c:	40020458 	.word	0x40020458
 8004450:	40020470 	.word	0x40020470
 8004454:	40020488 	.word	0x40020488
 8004458:	400204a0 	.word	0x400204a0
 800445c:	400204b8 	.word	0x400204b8
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	bf14      	ite	ne
 800446e:	2301      	movne	r3, #1
 8004470:	2300      	moveq	r3, #0
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b00      	cmp	r3, #0
 8004476:	d015      	beq.n	80044a4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0204 	bic.w	r2, r2, #4
 8004486:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800448c:	f003 031f 	and.w	r3, r3, #31
 8004490:	2208      	movs	r2, #8
 8004492:	409a      	lsls	r2, r3
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800449c:	f043 0201 	orr.w	r2, r3, #1
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a8:	f003 031f 	and.w	r3, r3, #31
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	fa22 f303 	lsr.w	r3, r2, r3
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d06e      	beq.n	8004598 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a69      	ldr	r2, [pc, #420]	; (8004664 <HAL_DMA_IRQHandler+0x3f8>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d04a      	beq.n	800455a <HAL_DMA_IRQHandler+0x2ee>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a67      	ldr	r2, [pc, #412]	; (8004668 <HAL_DMA_IRQHandler+0x3fc>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d045      	beq.n	800455a <HAL_DMA_IRQHandler+0x2ee>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4a66      	ldr	r2, [pc, #408]	; (800466c <HAL_DMA_IRQHandler+0x400>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d040      	beq.n	800455a <HAL_DMA_IRQHandler+0x2ee>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a64      	ldr	r2, [pc, #400]	; (8004670 <HAL_DMA_IRQHandler+0x404>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d03b      	beq.n	800455a <HAL_DMA_IRQHandler+0x2ee>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a63      	ldr	r2, [pc, #396]	; (8004674 <HAL_DMA_IRQHandler+0x408>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d036      	beq.n	800455a <HAL_DMA_IRQHandler+0x2ee>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a61      	ldr	r2, [pc, #388]	; (8004678 <HAL_DMA_IRQHandler+0x40c>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d031      	beq.n	800455a <HAL_DMA_IRQHandler+0x2ee>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a60      	ldr	r2, [pc, #384]	; (800467c <HAL_DMA_IRQHandler+0x410>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d02c      	beq.n	800455a <HAL_DMA_IRQHandler+0x2ee>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a5e      	ldr	r2, [pc, #376]	; (8004680 <HAL_DMA_IRQHandler+0x414>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d027      	beq.n	800455a <HAL_DMA_IRQHandler+0x2ee>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a5d      	ldr	r2, [pc, #372]	; (8004684 <HAL_DMA_IRQHandler+0x418>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d022      	beq.n	800455a <HAL_DMA_IRQHandler+0x2ee>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a5b      	ldr	r2, [pc, #364]	; (8004688 <HAL_DMA_IRQHandler+0x41c>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d01d      	beq.n	800455a <HAL_DMA_IRQHandler+0x2ee>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a5a      	ldr	r2, [pc, #360]	; (800468c <HAL_DMA_IRQHandler+0x420>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d018      	beq.n	800455a <HAL_DMA_IRQHandler+0x2ee>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a58      	ldr	r2, [pc, #352]	; (8004690 <HAL_DMA_IRQHandler+0x424>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d013      	beq.n	800455a <HAL_DMA_IRQHandler+0x2ee>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a57      	ldr	r2, [pc, #348]	; (8004694 <HAL_DMA_IRQHandler+0x428>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d00e      	beq.n	800455a <HAL_DMA_IRQHandler+0x2ee>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a55      	ldr	r2, [pc, #340]	; (8004698 <HAL_DMA_IRQHandler+0x42c>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d009      	beq.n	800455a <HAL_DMA_IRQHandler+0x2ee>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4a54      	ldr	r2, [pc, #336]	; (800469c <HAL_DMA_IRQHandler+0x430>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d004      	beq.n	800455a <HAL_DMA_IRQHandler+0x2ee>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a52      	ldr	r2, [pc, #328]	; (80046a0 <HAL_DMA_IRQHandler+0x434>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d10a      	bne.n	8004570 <HAL_DMA_IRQHandler+0x304>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695b      	ldr	r3, [r3, #20]
 8004560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004564:	2b00      	cmp	r3, #0
 8004566:	bf14      	ite	ne
 8004568:	2301      	movne	r3, #1
 800456a:	2300      	moveq	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	e003      	b.n	8004578 <HAL_DMA_IRQHandler+0x30c>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2300      	movs	r3, #0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d00d      	beq.n	8004598 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004580:	f003 031f 	and.w	r3, r3, #31
 8004584:	2201      	movs	r2, #1
 8004586:	409a      	lsls	r2, r3
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004590:	f043 0202 	orr.w	r2, r3, #2
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459c:	f003 031f 	and.w	r3, r3, #31
 80045a0:	2204      	movs	r2, #4
 80045a2:	409a      	lsls	r2, r3
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	4013      	ands	r3, r2
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	f000 808f 	beq.w	80046cc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a2c      	ldr	r2, [pc, #176]	; (8004664 <HAL_DMA_IRQHandler+0x3f8>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d04a      	beq.n	800464e <HAL_DMA_IRQHandler+0x3e2>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a2a      	ldr	r2, [pc, #168]	; (8004668 <HAL_DMA_IRQHandler+0x3fc>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d045      	beq.n	800464e <HAL_DMA_IRQHandler+0x3e2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	4a29      	ldr	r2, [pc, #164]	; (800466c <HAL_DMA_IRQHandler+0x400>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d040      	beq.n	800464e <HAL_DMA_IRQHandler+0x3e2>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a27      	ldr	r2, [pc, #156]	; (8004670 <HAL_DMA_IRQHandler+0x404>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d03b      	beq.n	800464e <HAL_DMA_IRQHandler+0x3e2>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a26      	ldr	r2, [pc, #152]	; (8004674 <HAL_DMA_IRQHandler+0x408>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d036      	beq.n	800464e <HAL_DMA_IRQHandler+0x3e2>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a24      	ldr	r2, [pc, #144]	; (8004678 <HAL_DMA_IRQHandler+0x40c>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d031      	beq.n	800464e <HAL_DMA_IRQHandler+0x3e2>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a23      	ldr	r2, [pc, #140]	; (800467c <HAL_DMA_IRQHandler+0x410>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d02c      	beq.n	800464e <HAL_DMA_IRQHandler+0x3e2>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a21      	ldr	r2, [pc, #132]	; (8004680 <HAL_DMA_IRQHandler+0x414>)
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d027      	beq.n	800464e <HAL_DMA_IRQHandler+0x3e2>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a20      	ldr	r2, [pc, #128]	; (8004684 <HAL_DMA_IRQHandler+0x418>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d022      	beq.n	800464e <HAL_DMA_IRQHandler+0x3e2>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a1e      	ldr	r2, [pc, #120]	; (8004688 <HAL_DMA_IRQHandler+0x41c>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d01d      	beq.n	800464e <HAL_DMA_IRQHandler+0x3e2>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a1d      	ldr	r2, [pc, #116]	; (800468c <HAL_DMA_IRQHandler+0x420>)
 8004618:	4293      	cmp	r3, r2
 800461a:	d018      	beq.n	800464e <HAL_DMA_IRQHandler+0x3e2>
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a1b      	ldr	r2, [pc, #108]	; (8004690 <HAL_DMA_IRQHandler+0x424>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d013      	beq.n	800464e <HAL_DMA_IRQHandler+0x3e2>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a1a      	ldr	r2, [pc, #104]	; (8004694 <HAL_DMA_IRQHandler+0x428>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d00e      	beq.n	800464e <HAL_DMA_IRQHandler+0x3e2>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a18      	ldr	r2, [pc, #96]	; (8004698 <HAL_DMA_IRQHandler+0x42c>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d009      	beq.n	800464e <HAL_DMA_IRQHandler+0x3e2>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a17      	ldr	r2, [pc, #92]	; (800469c <HAL_DMA_IRQHandler+0x430>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d004      	beq.n	800464e <HAL_DMA_IRQHandler+0x3e2>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a15      	ldr	r2, [pc, #84]	; (80046a0 <HAL_DMA_IRQHandler+0x434>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d12a      	bne.n	80046a4 <HAL_DMA_IRQHandler+0x438>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	bf14      	ite	ne
 800465c:	2301      	movne	r3, #1
 800465e:	2300      	moveq	r3, #0
 8004660:	b2db      	uxtb	r3, r3
 8004662:	e023      	b.n	80046ac <HAL_DMA_IRQHandler+0x440>
 8004664:	40020010 	.word	0x40020010
 8004668:	40020028 	.word	0x40020028
 800466c:	40020040 	.word	0x40020040
 8004670:	40020058 	.word	0x40020058
 8004674:	40020070 	.word	0x40020070
 8004678:	40020088 	.word	0x40020088
 800467c:	400200a0 	.word	0x400200a0
 8004680:	400200b8 	.word	0x400200b8
 8004684:	40020410 	.word	0x40020410
 8004688:	40020428 	.word	0x40020428
 800468c:	40020440 	.word	0x40020440
 8004690:	40020458 	.word	0x40020458
 8004694:	40020470 	.word	0x40020470
 8004698:	40020488 	.word	0x40020488
 800469c:	400204a0 	.word	0x400204a0
 80046a0:	400204b8 	.word	0x400204b8
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	2300      	movs	r3, #0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00d      	beq.n	80046cc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b4:	f003 031f 	and.w	r3, r3, #31
 80046b8:	2204      	movs	r2, #4
 80046ba:	409a      	lsls	r2, r3
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c4:	f043 0204 	orr.w	r2, r3, #4
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d0:	f003 031f 	and.w	r3, r3, #31
 80046d4:	2210      	movs	r2, #16
 80046d6:	409a      	lsls	r2, r3
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	4013      	ands	r3, r2
 80046dc:	2b00      	cmp	r3, #0
 80046de:	f000 80a6 	beq.w	800482e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4a85      	ldr	r2, [pc, #532]	; (80048fc <HAL_DMA_IRQHandler+0x690>)
 80046e8:	4293      	cmp	r3, r2
 80046ea:	d04a      	beq.n	8004782 <HAL_DMA_IRQHandler+0x516>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4a83      	ldr	r2, [pc, #524]	; (8004900 <HAL_DMA_IRQHandler+0x694>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d045      	beq.n	8004782 <HAL_DMA_IRQHandler+0x516>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	4a82      	ldr	r2, [pc, #520]	; (8004904 <HAL_DMA_IRQHandler+0x698>)
 80046fc:	4293      	cmp	r3, r2
 80046fe:	d040      	beq.n	8004782 <HAL_DMA_IRQHandler+0x516>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a80      	ldr	r2, [pc, #512]	; (8004908 <HAL_DMA_IRQHandler+0x69c>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d03b      	beq.n	8004782 <HAL_DMA_IRQHandler+0x516>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a7f      	ldr	r2, [pc, #508]	; (800490c <HAL_DMA_IRQHandler+0x6a0>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d036      	beq.n	8004782 <HAL_DMA_IRQHandler+0x516>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a7d      	ldr	r2, [pc, #500]	; (8004910 <HAL_DMA_IRQHandler+0x6a4>)
 800471a:	4293      	cmp	r3, r2
 800471c:	d031      	beq.n	8004782 <HAL_DMA_IRQHandler+0x516>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a7c      	ldr	r2, [pc, #496]	; (8004914 <HAL_DMA_IRQHandler+0x6a8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d02c      	beq.n	8004782 <HAL_DMA_IRQHandler+0x516>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4a7a      	ldr	r2, [pc, #488]	; (8004918 <HAL_DMA_IRQHandler+0x6ac>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d027      	beq.n	8004782 <HAL_DMA_IRQHandler+0x516>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4a79      	ldr	r2, [pc, #484]	; (800491c <HAL_DMA_IRQHandler+0x6b0>)
 8004738:	4293      	cmp	r3, r2
 800473a:	d022      	beq.n	8004782 <HAL_DMA_IRQHandler+0x516>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a77      	ldr	r2, [pc, #476]	; (8004920 <HAL_DMA_IRQHandler+0x6b4>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d01d      	beq.n	8004782 <HAL_DMA_IRQHandler+0x516>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4a76      	ldr	r2, [pc, #472]	; (8004924 <HAL_DMA_IRQHandler+0x6b8>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d018      	beq.n	8004782 <HAL_DMA_IRQHandler+0x516>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	4a74      	ldr	r2, [pc, #464]	; (8004928 <HAL_DMA_IRQHandler+0x6bc>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d013      	beq.n	8004782 <HAL_DMA_IRQHandler+0x516>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a73      	ldr	r2, [pc, #460]	; (800492c <HAL_DMA_IRQHandler+0x6c0>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d00e      	beq.n	8004782 <HAL_DMA_IRQHandler+0x516>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4a71      	ldr	r2, [pc, #452]	; (8004930 <HAL_DMA_IRQHandler+0x6c4>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d009      	beq.n	8004782 <HAL_DMA_IRQHandler+0x516>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a70      	ldr	r2, [pc, #448]	; (8004934 <HAL_DMA_IRQHandler+0x6c8>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d004      	beq.n	8004782 <HAL_DMA_IRQHandler+0x516>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a6e      	ldr	r2, [pc, #440]	; (8004938 <HAL_DMA_IRQHandler+0x6cc>)
 800477e:	4293      	cmp	r3, r2
 8004780:	d10a      	bne.n	8004798 <HAL_DMA_IRQHandler+0x52c>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0308 	and.w	r3, r3, #8
 800478c:	2b00      	cmp	r3, #0
 800478e:	bf14      	ite	ne
 8004790:	2301      	movne	r3, #1
 8004792:	2300      	moveq	r3, #0
 8004794:	b2db      	uxtb	r3, r3
 8004796:	e009      	b.n	80047ac <HAL_DMA_IRQHandler+0x540>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0304 	and.w	r3, r3, #4
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	bf14      	ite	ne
 80047a6:	2301      	movne	r3, #1
 80047a8:	2300      	moveq	r3, #0
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d03e      	beq.n	800482e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b4:	f003 031f 	and.w	r3, r3, #31
 80047b8:	2210      	movs	r2, #16
 80047ba:	409a      	lsls	r2, r3
 80047bc:	6a3b      	ldr	r3, [r7, #32]
 80047be:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d018      	beq.n	8004800 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d108      	bne.n	80047ee <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d024      	beq.n	800482e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e8:	6878      	ldr	r0, [r7, #4]
 80047ea:	4798      	blx	r3
 80047ec:	e01f      	b.n	800482e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d01b      	beq.n	800482e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	4798      	blx	r3
 80047fe:	e016      	b.n	800482e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480a:	2b00      	cmp	r3, #0
 800480c:	d107      	bne.n	800481e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f022 0208 	bic.w	r2, r2, #8
 800481c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	2220      	movs	r2, #32
 8004838:	409a      	lsls	r2, r3
 800483a:	69bb      	ldr	r3, [r7, #24]
 800483c:	4013      	ands	r3, r2
 800483e:	2b00      	cmp	r3, #0
 8004840:	f000 8110 	beq.w	8004a64 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a2c      	ldr	r2, [pc, #176]	; (80048fc <HAL_DMA_IRQHandler+0x690>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d04a      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x678>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a2b      	ldr	r2, [pc, #172]	; (8004900 <HAL_DMA_IRQHandler+0x694>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d045      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x678>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a29      	ldr	r2, [pc, #164]	; (8004904 <HAL_DMA_IRQHandler+0x698>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d040      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x678>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a28      	ldr	r2, [pc, #160]	; (8004908 <HAL_DMA_IRQHandler+0x69c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d03b      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x678>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a26      	ldr	r2, [pc, #152]	; (800490c <HAL_DMA_IRQHandler+0x6a0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d036      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x678>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a25      	ldr	r2, [pc, #148]	; (8004910 <HAL_DMA_IRQHandler+0x6a4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d031      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x678>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a23      	ldr	r2, [pc, #140]	; (8004914 <HAL_DMA_IRQHandler+0x6a8>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d02c      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x678>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a22      	ldr	r2, [pc, #136]	; (8004918 <HAL_DMA_IRQHandler+0x6ac>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d027      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x678>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a20      	ldr	r2, [pc, #128]	; (800491c <HAL_DMA_IRQHandler+0x6b0>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d022      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x678>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a1f      	ldr	r2, [pc, #124]	; (8004920 <HAL_DMA_IRQHandler+0x6b4>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d01d      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x678>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a1d      	ldr	r2, [pc, #116]	; (8004924 <HAL_DMA_IRQHandler+0x6b8>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d018      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x678>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a1c      	ldr	r2, [pc, #112]	; (8004928 <HAL_DMA_IRQHandler+0x6bc>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d013      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x678>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a1a      	ldr	r2, [pc, #104]	; (800492c <HAL_DMA_IRQHandler+0x6c0>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d00e      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x678>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a19      	ldr	r2, [pc, #100]	; (8004930 <HAL_DMA_IRQHandler+0x6c4>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d009      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x678>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a17      	ldr	r2, [pc, #92]	; (8004934 <HAL_DMA_IRQHandler+0x6c8>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d004      	beq.n	80048e4 <HAL_DMA_IRQHandler+0x678>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a16      	ldr	r2, [pc, #88]	; (8004938 <HAL_DMA_IRQHandler+0x6cc>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d12b      	bne.n	800493c <HAL_DMA_IRQHandler+0x6d0>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0310 	and.w	r3, r3, #16
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	bf14      	ite	ne
 80048f2:	2301      	movne	r3, #1
 80048f4:	2300      	moveq	r3, #0
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	e02a      	b.n	8004950 <HAL_DMA_IRQHandler+0x6e4>
 80048fa:	bf00      	nop
 80048fc:	40020010 	.word	0x40020010
 8004900:	40020028 	.word	0x40020028
 8004904:	40020040 	.word	0x40020040
 8004908:	40020058 	.word	0x40020058
 800490c:	40020070 	.word	0x40020070
 8004910:	40020088 	.word	0x40020088
 8004914:	400200a0 	.word	0x400200a0
 8004918:	400200b8 	.word	0x400200b8
 800491c:	40020410 	.word	0x40020410
 8004920:	40020428 	.word	0x40020428
 8004924:	40020440 	.word	0x40020440
 8004928:	40020458 	.word	0x40020458
 800492c:	40020470 	.word	0x40020470
 8004930:	40020488 	.word	0x40020488
 8004934:	400204a0 	.word	0x400204a0
 8004938:	400204b8 	.word	0x400204b8
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	bf14      	ite	ne
 800494a:	2301      	movne	r3, #1
 800494c:	2300      	moveq	r3, #0
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 8087 	beq.w	8004a64 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800495a:	f003 031f 	and.w	r3, r3, #31
 800495e:	2220      	movs	r2, #32
 8004960:	409a      	lsls	r2, r3
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b04      	cmp	r3, #4
 8004970:	d139      	bne.n	80049e6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0216 	bic.w	r2, r2, #22
 8004980:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	695a      	ldr	r2, [r3, #20]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004990:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	2b00      	cmp	r3, #0
 8004998:	d103      	bne.n	80049a2 <HAL_DMA_IRQHandler+0x736>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d007      	beq.n	80049b2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f022 0208 	bic.w	r2, r2, #8
 80049b0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b6:	f003 031f 	and.w	r3, r3, #31
 80049ba:	223f      	movs	r2, #63	; 0x3f
 80049bc:	409a      	lsls	r2, r3
 80049be:	6a3b      	ldr	r3, [r7, #32]
 80049c0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f000 834a 	beq.w	8005070 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	4798      	blx	r3
          }
          return;
 80049e4:	e344      	b.n	8005070 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d018      	beq.n	8004a26 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d108      	bne.n	8004a14 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d02c      	beq.n	8004a64 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	4798      	blx	r3
 8004a12:	e027      	b.n	8004a64 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d023      	beq.n	8004a64 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	4798      	blx	r3
 8004a24:	e01e      	b.n	8004a64 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10f      	bne.n	8004a54 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f022 0210 	bic.w	r2, r2, #16
 8004a42:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d003      	beq.n	8004a64 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 8306 	beq.w	800507a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a72:	f003 0301 	and.w	r3, r3, #1
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	f000 8088 	beq.w	8004b8c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2204      	movs	r2, #4
 8004a80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a7a      	ldr	r2, [pc, #488]	; (8004c74 <HAL_DMA_IRQHandler+0xa08>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d04a      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x8b8>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a79      	ldr	r2, [pc, #484]	; (8004c78 <HAL_DMA_IRQHandler+0xa0c>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d045      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x8b8>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a77      	ldr	r2, [pc, #476]	; (8004c7c <HAL_DMA_IRQHandler+0xa10>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d040      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x8b8>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a76      	ldr	r2, [pc, #472]	; (8004c80 <HAL_DMA_IRQHandler+0xa14>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d03b      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x8b8>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a74      	ldr	r2, [pc, #464]	; (8004c84 <HAL_DMA_IRQHandler+0xa18>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d036      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x8b8>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4a73      	ldr	r2, [pc, #460]	; (8004c88 <HAL_DMA_IRQHandler+0xa1c>)
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d031      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x8b8>
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a71      	ldr	r2, [pc, #452]	; (8004c8c <HAL_DMA_IRQHandler+0xa20>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d02c      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x8b8>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a70      	ldr	r2, [pc, #448]	; (8004c90 <HAL_DMA_IRQHandler+0xa24>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d027      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x8b8>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a6e      	ldr	r2, [pc, #440]	; (8004c94 <HAL_DMA_IRQHandler+0xa28>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d022      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x8b8>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a6d      	ldr	r2, [pc, #436]	; (8004c98 <HAL_DMA_IRQHandler+0xa2c>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	d01d      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x8b8>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a6b      	ldr	r2, [pc, #428]	; (8004c9c <HAL_DMA_IRQHandler+0xa30>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d018      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x8b8>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a6a      	ldr	r2, [pc, #424]	; (8004ca0 <HAL_DMA_IRQHandler+0xa34>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d013      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x8b8>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a68      	ldr	r2, [pc, #416]	; (8004ca4 <HAL_DMA_IRQHandler+0xa38>)
 8004b02:	4293      	cmp	r3, r2
 8004b04:	d00e      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x8b8>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a67      	ldr	r2, [pc, #412]	; (8004ca8 <HAL_DMA_IRQHandler+0xa3c>)
 8004b0c:	4293      	cmp	r3, r2
 8004b0e:	d009      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x8b8>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4a65      	ldr	r2, [pc, #404]	; (8004cac <HAL_DMA_IRQHandler+0xa40>)
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d004      	beq.n	8004b24 <HAL_DMA_IRQHandler+0x8b8>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4a64      	ldr	r2, [pc, #400]	; (8004cb0 <HAL_DMA_IRQHandler+0xa44>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d108      	bne.n	8004b36 <HAL_DMA_IRQHandler+0x8ca>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f022 0201 	bic.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]
 8004b34:	e007      	b.n	8004b46 <HAL_DMA_IRQHandler+0x8da>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f022 0201 	bic.w	r2, r2, #1
 8004b44:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d307      	bcc.n	8004b62 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d1f2      	bne.n	8004b46 <HAL_DMA_IRQHandler+0x8da>
 8004b60:	e000      	b.n	8004b64 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004b62:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d004      	beq.n	8004b7c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2203      	movs	r2, #3
 8004b76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004b7a:	e003      	b.n	8004b84 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 8272 	beq.w	800507a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	4798      	blx	r3
 8004b9e:	e26c      	b.n	800507a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a43      	ldr	r2, [pc, #268]	; (8004cb4 <HAL_DMA_IRQHandler+0xa48>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d022      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0x984>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a42      	ldr	r2, [pc, #264]	; (8004cb8 <HAL_DMA_IRQHandler+0xa4c>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d01d      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0x984>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a40      	ldr	r2, [pc, #256]	; (8004cbc <HAL_DMA_IRQHandler+0xa50>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d018      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0x984>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a3f      	ldr	r2, [pc, #252]	; (8004cc0 <HAL_DMA_IRQHandler+0xa54>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d013      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0x984>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a3d      	ldr	r2, [pc, #244]	; (8004cc4 <HAL_DMA_IRQHandler+0xa58>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d00e      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0x984>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a3c      	ldr	r2, [pc, #240]	; (8004cc8 <HAL_DMA_IRQHandler+0xa5c>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d009      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0x984>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a3a      	ldr	r2, [pc, #232]	; (8004ccc <HAL_DMA_IRQHandler+0xa60>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d004      	beq.n	8004bf0 <HAL_DMA_IRQHandler+0x984>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a39      	ldr	r2, [pc, #228]	; (8004cd0 <HAL_DMA_IRQHandler+0xa64>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d101      	bne.n	8004bf4 <HAL_DMA_IRQHandler+0x988>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <HAL_DMA_IRQHandler+0x98a>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	f000 823f 	beq.w	800507a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c08:	f003 031f 	and.w	r3, r3, #31
 8004c0c:	2204      	movs	r2, #4
 8004c0e:	409a      	lsls	r2, r3
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	4013      	ands	r3, r2
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	f000 80cd 	beq.w	8004db4 <HAL_DMA_IRQHandler+0xb48>
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	f003 0304 	and.w	r3, r3, #4
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	f000 80c7 	beq.w	8004db4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c2a:	f003 031f 	and.w	r3, r3, #31
 8004c2e:	2204      	movs	r2, #4
 8004c30:	409a      	lsls	r2, r3
 8004c32:	69fb      	ldr	r3, [r7, #28]
 8004c34:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c36:	693b      	ldr	r3, [r7, #16]
 8004c38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d049      	beq.n	8004cd4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d109      	bne.n	8004c5e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 8210 	beq.w	8005074 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c58:	6878      	ldr	r0, [r7, #4]
 8004c5a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c5c:	e20a      	b.n	8005074 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f000 8206 	beq.w	8005074 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004c70:	e200      	b.n	8005074 <HAL_DMA_IRQHandler+0xe08>
 8004c72:	bf00      	nop
 8004c74:	40020010 	.word	0x40020010
 8004c78:	40020028 	.word	0x40020028
 8004c7c:	40020040 	.word	0x40020040
 8004c80:	40020058 	.word	0x40020058
 8004c84:	40020070 	.word	0x40020070
 8004c88:	40020088 	.word	0x40020088
 8004c8c:	400200a0 	.word	0x400200a0
 8004c90:	400200b8 	.word	0x400200b8
 8004c94:	40020410 	.word	0x40020410
 8004c98:	40020428 	.word	0x40020428
 8004c9c:	40020440 	.word	0x40020440
 8004ca0:	40020458 	.word	0x40020458
 8004ca4:	40020470 	.word	0x40020470
 8004ca8:	40020488 	.word	0x40020488
 8004cac:	400204a0 	.word	0x400204a0
 8004cb0:	400204b8 	.word	0x400204b8
 8004cb4:	58025408 	.word	0x58025408
 8004cb8:	5802541c 	.word	0x5802541c
 8004cbc:	58025430 	.word	0x58025430
 8004cc0:	58025444 	.word	0x58025444
 8004cc4:	58025458 	.word	0x58025458
 8004cc8:	5802546c 	.word	0x5802546c
 8004ccc:	58025480 	.word	0x58025480
 8004cd0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	f003 0320 	and.w	r3, r3, #32
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d160      	bne.n	8004da0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a8c      	ldr	r2, [pc, #560]	; (8004f14 <HAL_DMA_IRQHandler+0xca8>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d04a      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xb12>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a8a      	ldr	r2, [pc, #552]	; (8004f18 <HAL_DMA_IRQHandler+0xcac>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d045      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xb12>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4a89      	ldr	r2, [pc, #548]	; (8004f1c <HAL_DMA_IRQHandler+0xcb0>)
 8004cf8:	4293      	cmp	r3, r2
 8004cfa:	d040      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xb12>
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a87      	ldr	r2, [pc, #540]	; (8004f20 <HAL_DMA_IRQHandler+0xcb4>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d03b      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xb12>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a86      	ldr	r2, [pc, #536]	; (8004f24 <HAL_DMA_IRQHandler+0xcb8>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d036      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xb12>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	4a84      	ldr	r2, [pc, #528]	; (8004f28 <HAL_DMA_IRQHandler+0xcbc>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d031      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xb12>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a83      	ldr	r2, [pc, #524]	; (8004f2c <HAL_DMA_IRQHandler+0xcc0>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d02c      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xb12>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a81      	ldr	r2, [pc, #516]	; (8004f30 <HAL_DMA_IRQHandler+0xcc4>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d027      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xb12>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a80      	ldr	r2, [pc, #512]	; (8004f34 <HAL_DMA_IRQHandler+0xcc8>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d022      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xb12>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a7e      	ldr	r2, [pc, #504]	; (8004f38 <HAL_DMA_IRQHandler+0xccc>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d01d      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xb12>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a7d      	ldr	r2, [pc, #500]	; (8004f3c <HAL_DMA_IRQHandler+0xcd0>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d018      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xb12>
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a7b      	ldr	r2, [pc, #492]	; (8004f40 <HAL_DMA_IRQHandler+0xcd4>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d013      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xb12>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a7a      	ldr	r2, [pc, #488]	; (8004f44 <HAL_DMA_IRQHandler+0xcd8>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00e      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xb12>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a78      	ldr	r2, [pc, #480]	; (8004f48 <HAL_DMA_IRQHandler+0xcdc>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d009      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xb12>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a77      	ldr	r2, [pc, #476]	; (8004f4c <HAL_DMA_IRQHandler+0xce0>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d004      	beq.n	8004d7e <HAL_DMA_IRQHandler+0xb12>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a75      	ldr	r2, [pc, #468]	; (8004f50 <HAL_DMA_IRQHandler+0xce4>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d108      	bne.n	8004d90 <HAL_DMA_IRQHandler+0xb24>
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0208 	bic.w	r2, r2, #8
 8004d8c:	601a      	str	r2, [r3, #0]
 8004d8e:	e007      	b.n	8004da0 <HAL_DMA_IRQHandler+0xb34>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0204 	bic.w	r2, r2, #4
 8004d9e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 8165 	beq.w	8005074 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004db2:	e15f      	b.n	8005074 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004db8:	f003 031f 	and.w	r3, r3, #31
 8004dbc:	2202      	movs	r2, #2
 8004dbe:	409a      	lsls	r2, r3
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	4013      	ands	r3, r2
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 80c5 	beq.w	8004f54 <HAL_DMA_IRQHandler+0xce8>
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	f000 80bf 	beq.w	8004f54 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dda:	f003 031f 	and.w	r3, r3, #31
 8004dde:	2202      	movs	r2, #2
 8004de0:	409a      	lsls	r2, r3
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d018      	beq.n	8004e22 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d109      	bne.n	8004e0e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	f000 813a 	beq.w	8005078 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e08:	6878      	ldr	r0, [r7, #4]
 8004e0a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e0c:	e134      	b.n	8005078 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	f000 8130 	beq.w	8005078 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004e20:	e12a      	b.n	8005078 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f003 0320 	and.w	r3, r3, #32
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d168      	bne.n	8004efe <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a38      	ldr	r2, [pc, #224]	; (8004f14 <HAL_DMA_IRQHandler+0xca8>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d04a      	beq.n	8004ecc <HAL_DMA_IRQHandler+0xc60>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a37      	ldr	r2, [pc, #220]	; (8004f18 <HAL_DMA_IRQHandler+0xcac>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d045      	beq.n	8004ecc <HAL_DMA_IRQHandler+0xc60>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a35      	ldr	r2, [pc, #212]	; (8004f1c <HAL_DMA_IRQHandler+0xcb0>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d040      	beq.n	8004ecc <HAL_DMA_IRQHandler+0xc60>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a34      	ldr	r2, [pc, #208]	; (8004f20 <HAL_DMA_IRQHandler+0xcb4>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d03b      	beq.n	8004ecc <HAL_DMA_IRQHandler+0xc60>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a32      	ldr	r2, [pc, #200]	; (8004f24 <HAL_DMA_IRQHandler+0xcb8>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d036      	beq.n	8004ecc <HAL_DMA_IRQHandler+0xc60>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a31      	ldr	r2, [pc, #196]	; (8004f28 <HAL_DMA_IRQHandler+0xcbc>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d031      	beq.n	8004ecc <HAL_DMA_IRQHandler+0xc60>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a2f      	ldr	r2, [pc, #188]	; (8004f2c <HAL_DMA_IRQHandler+0xcc0>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d02c      	beq.n	8004ecc <HAL_DMA_IRQHandler+0xc60>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a2e      	ldr	r2, [pc, #184]	; (8004f30 <HAL_DMA_IRQHandler+0xcc4>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d027      	beq.n	8004ecc <HAL_DMA_IRQHandler+0xc60>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a2c      	ldr	r2, [pc, #176]	; (8004f34 <HAL_DMA_IRQHandler+0xcc8>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d022      	beq.n	8004ecc <HAL_DMA_IRQHandler+0xc60>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a2b      	ldr	r2, [pc, #172]	; (8004f38 <HAL_DMA_IRQHandler+0xccc>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d01d      	beq.n	8004ecc <HAL_DMA_IRQHandler+0xc60>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a29      	ldr	r2, [pc, #164]	; (8004f3c <HAL_DMA_IRQHandler+0xcd0>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d018      	beq.n	8004ecc <HAL_DMA_IRQHandler+0xc60>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a28      	ldr	r2, [pc, #160]	; (8004f40 <HAL_DMA_IRQHandler+0xcd4>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d013      	beq.n	8004ecc <HAL_DMA_IRQHandler+0xc60>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a26      	ldr	r2, [pc, #152]	; (8004f44 <HAL_DMA_IRQHandler+0xcd8>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d00e      	beq.n	8004ecc <HAL_DMA_IRQHandler+0xc60>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a25      	ldr	r2, [pc, #148]	; (8004f48 <HAL_DMA_IRQHandler+0xcdc>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d009      	beq.n	8004ecc <HAL_DMA_IRQHandler+0xc60>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a23      	ldr	r2, [pc, #140]	; (8004f4c <HAL_DMA_IRQHandler+0xce0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d004      	beq.n	8004ecc <HAL_DMA_IRQHandler+0xc60>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a22      	ldr	r2, [pc, #136]	; (8004f50 <HAL_DMA_IRQHandler+0xce4>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d108      	bne.n	8004ede <HAL_DMA_IRQHandler+0xc72>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0214 	bic.w	r2, r2, #20
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	e007      	b.n	8004eee <HAL_DMA_IRQHandler+0xc82>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681a      	ldr	r2, [r3, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f022 020a 	bic.w	r2, r2, #10
 8004eec:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	f000 80b8 	beq.w	8005078 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f10:	e0b2      	b.n	8005078 <HAL_DMA_IRQHandler+0xe0c>
 8004f12:	bf00      	nop
 8004f14:	40020010 	.word	0x40020010
 8004f18:	40020028 	.word	0x40020028
 8004f1c:	40020040 	.word	0x40020040
 8004f20:	40020058 	.word	0x40020058
 8004f24:	40020070 	.word	0x40020070
 8004f28:	40020088 	.word	0x40020088
 8004f2c:	400200a0 	.word	0x400200a0
 8004f30:	400200b8 	.word	0x400200b8
 8004f34:	40020410 	.word	0x40020410
 8004f38:	40020428 	.word	0x40020428
 8004f3c:	40020440 	.word	0x40020440
 8004f40:	40020458 	.word	0x40020458
 8004f44:	40020470 	.word	0x40020470
 8004f48:	40020488 	.word	0x40020488
 8004f4c:	400204a0 	.word	0x400204a0
 8004f50:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f58:	f003 031f 	and.w	r3, r3, #31
 8004f5c:	2208      	movs	r2, #8
 8004f5e:	409a      	lsls	r2, r3
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	4013      	ands	r3, r2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	f000 8088 	beq.w	800507a <HAL_DMA_IRQHandler+0xe0e>
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f003 0308 	and.w	r3, r3, #8
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 8082 	beq.w	800507a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a41      	ldr	r2, [pc, #260]	; (8005080 <HAL_DMA_IRQHandler+0xe14>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d04a      	beq.n	8005016 <HAL_DMA_IRQHandler+0xdaa>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a3f      	ldr	r2, [pc, #252]	; (8005084 <HAL_DMA_IRQHandler+0xe18>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d045      	beq.n	8005016 <HAL_DMA_IRQHandler+0xdaa>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a3e      	ldr	r2, [pc, #248]	; (8005088 <HAL_DMA_IRQHandler+0xe1c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d040      	beq.n	8005016 <HAL_DMA_IRQHandler+0xdaa>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a3c      	ldr	r2, [pc, #240]	; (800508c <HAL_DMA_IRQHandler+0xe20>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d03b      	beq.n	8005016 <HAL_DMA_IRQHandler+0xdaa>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a3b      	ldr	r2, [pc, #236]	; (8005090 <HAL_DMA_IRQHandler+0xe24>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d036      	beq.n	8005016 <HAL_DMA_IRQHandler+0xdaa>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	4a39      	ldr	r2, [pc, #228]	; (8005094 <HAL_DMA_IRQHandler+0xe28>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d031      	beq.n	8005016 <HAL_DMA_IRQHandler+0xdaa>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a38      	ldr	r2, [pc, #224]	; (8005098 <HAL_DMA_IRQHandler+0xe2c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d02c      	beq.n	8005016 <HAL_DMA_IRQHandler+0xdaa>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a36      	ldr	r2, [pc, #216]	; (800509c <HAL_DMA_IRQHandler+0xe30>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d027      	beq.n	8005016 <HAL_DMA_IRQHandler+0xdaa>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4a35      	ldr	r2, [pc, #212]	; (80050a0 <HAL_DMA_IRQHandler+0xe34>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d022      	beq.n	8005016 <HAL_DMA_IRQHandler+0xdaa>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a33      	ldr	r2, [pc, #204]	; (80050a4 <HAL_DMA_IRQHandler+0xe38>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d01d      	beq.n	8005016 <HAL_DMA_IRQHandler+0xdaa>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a32      	ldr	r2, [pc, #200]	; (80050a8 <HAL_DMA_IRQHandler+0xe3c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d018      	beq.n	8005016 <HAL_DMA_IRQHandler+0xdaa>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a30      	ldr	r2, [pc, #192]	; (80050ac <HAL_DMA_IRQHandler+0xe40>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d013      	beq.n	8005016 <HAL_DMA_IRQHandler+0xdaa>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a2f      	ldr	r2, [pc, #188]	; (80050b0 <HAL_DMA_IRQHandler+0xe44>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d00e      	beq.n	8005016 <HAL_DMA_IRQHandler+0xdaa>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a2d      	ldr	r2, [pc, #180]	; (80050b4 <HAL_DMA_IRQHandler+0xe48>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d009      	beq.n	8005016 <HAL_DMA_IRQHandler+0xdaa>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a2c      	ldr	r2, [pc, #176]	; (80050b8 <HAL_DMA_IRQHandler+0xe4c>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d004      	beq.n	8005016 <HAL_DMA_IRQHandler+0xdaa>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a2a      	ldr	r2, [pc, #168]	; (80050bc <HAL_DMA_IRQHandler+0xe50>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d108      	bne.n	8005028 <HAL_DMA_IRQHandler+0xdbc>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f022 021c 	bic.w	r2, r2, #28
 8005024:	601a      	str	r2, [r3, #0]
 8005026:	e007      	b.n	8005038 <HAL_DMA_IRQHandler+0xdcc>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 020e 	bic.w	r2, r2, #14
 8005036:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800503c:	f003 031f 	and.w	r3, r3, #31
 8005040:	2201      	movs	r2, #1
 8005042:	409a      	lsls	r2, r3
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2201      	movs	r2, #1
 800504c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005062:	2b00      	cmp	r3, #0
 8005064:	d009      	beq.n	800507a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	4798      	blx	r3
 800506e:	e004      	b.n	800507a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005070:	bf00      	nop
 8005072:	e002      	b.n	800507a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005074:	bf00      	nop
 8005076:	e000      	b.n	800507a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005078:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800507a:	3728      	adds	r7, #40	; 0x28
 800507c:	46bd      	mov	sp, r7
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40020010 	.word	0x40020010
 8005084:	40020028 	.word	0x40020028
 8005088:	40020040 	.word	0x40020040
 800508c:	40020058 	.word	0x40020058
 8005090:	40020070 	.word	0x40020070
 8005094:	40020088 	.word	0x40020088
 8005098:	400200a0 	.word	0x400200a0
 800509c:	400200b8 	.word	0x400200b8
 80050a0:	40020410 	.word	0x40020410
 80050a4:	40020428 	.word	0x40020428
 80050a8:	40020440 	.word	0x40020440
 80050ac:	40020458 	.word	0x40020458
 80050b0:	40020470 	.word	0x40020470
 80050b4:	40020488 	.word	0x40020488
 80050b8:	400204a0 	.word	0x400204a0
 80050bc:	400204b8 	.word	0x400204b8

080050c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b085      	sub	sp, #20
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a42      	ldr	r2, [pc, #264]	; (80051d8 <DMA_CalcBaseAndBitshift+0x118>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d04a      	beq.n	8005168 <DMA_CalcBaseAndBitshift+0xa8>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a41      	ldr	r2, [pc, #260]	; (80051dc <DMA_CalcBaseAndBitshift+0x11c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d045      	beq.n	8005168 <DMA_CalcBaseAndBitshift+0xa8>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a3f      	ldr	r2, [pc, #252]	; (80051e0 <DMA_CalcBaseAndBitshift+0x120>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d040      	beq.n	8005168 <DMA_CalcBaseAndBitshift+0xa8>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a3e      	ldr	r2, [pc, #248]	; (80051e4 <DMA_CalcBaseAndBitshift+0x124>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d03b      	beq.n	8005168 <DMA_CalcBaseAndBitshift+0xa8>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a3c      	ldr	r2, [pc, #240]	; (80051e8 <DMA_CalcBaseAndBitshift+0x128>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d036      	beq.n	8005168 <DMA_CalcBaseAndBitshift+0xa8>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a3b      	ldr	r2, [pc, #236]	; (80051ec <DMA_CalcBaseAndBitshift+0x12c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d031      	beq.n	8005168 <DMA_CalcBaseAndBitshift+0xa8>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a39      	ldr	r2, [pc, #228]	; (80051f0 <DMA_CalcBaseAndBitshift+0x130>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d02c      	beq.n	8005168 <DMA_CalcBaseAndBitshift+0xa8>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a38      	ldr	r2, [pc, #224]	; (80051f4 <DMA_CalcBaseAndBitshift+0x134>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d027      	beq.n	8005168 <DMA_CalcBaseAndBitshift+0xa8>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a36      	ldr	r2, [pc, #216]	; (80051f8 <DMA_CalcBaseAndBitshift+0x138>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d022      	beq.n	8005168 <DMA_CalcBaseAndBitshift+0xa8>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a35      	ldr	r2, [pc, #212]	; (80051fc <DMA_CalcBaseAndBitshift+0x13c>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d01d      	beq.n	8005168 <DMA_CalcBaseAndBitshift+0xa8>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a33      	ldr	r2, [pc, #204]	; (8005200 <DMA_CalcBaseAndBitshift+0x140>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d018      	beq.n	8005168 <DMA_CalcBaseAndBitshift+0xa8>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a32      	ldr	r2, [pc, #200]	; (8005204 <DMA_CalcBaseAndBitshift+0x144>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d013      	beq.n	8005168 <DMA_CalcBaseAndBitshift+0xa8>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a30      	ldr	r2, [pc, #192]	; (8005208 <DMA_CalcBaseAndBitshift+0x148>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d00e      	beq.n	8005168 <DMA_CalcBaseAndBitshift+0xa8>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a2f      	ldr	r2, [pc, #188]	; (800520c <DMA_CalcBaseAndBitshift+0x14c>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d009      	beq.n	8005168 <DMA_CalcBaseAndBitshift+0xa8>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a2d      	ldr	r2, [pc, #180]	; (8005210 <DMA_CalcBaseAndBitshift+0x150>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d004      	beq.n	8005168 <DMA_CalcBaseAndBitshift+0xa8>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a2c      	ldr	r2, [pc, #176]	; (8005214 <DMA_CalcBaseAndBitshift+0x154>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d101      	bne.n	800516c <DMA_CalcBaseAndBitshift+0xac>
 8005168:	2301      	movs	r3, #1
 800516a:	e000      	b.n	800516e <DMA_CalcBaseAndBitshift+0xae>
 800516c:	2300      	movs	r3, #0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d024      	beq.n	80051bc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	b2db      	uxtb	r3, r3
 8005178:	3b10      	subs	r3, #16
 800517a:	4a27      	ldr	r2, [pc, #156]	; (8005218 <DMA_CalcBaseAndBitshift+0x158>)
 800517c:	fba2 2303 	umull	r2, r3, r2, r3
 8005180:	091b      	lsrs	r3, r3, #4
 8005182:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	4a24      	ldr	r2, [pc, #144]	; (800521c <DMA_CalcBaseAndBitshift+0x15c>)
 800518c:	5cd3      	ldrb	r3, [r2, r3]
 800518e:	461a      	mov	r2, r3
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2b03      	cmp	r3, #3
 8005198:	d908      	bls.n	80051ac <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	461a      	mov	r2, r3
 80051a0:	4b1f      	ldr	r3, [pc, #124]	; (8005220 <DMA_CalcBaseAndBitshift+0x160>)
 80051a2:	4013      	ands	r3, r2
 80051a4:	1d1a      	adds	r2, r3, #4
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	659a      	str	r2, [r3, #88]	; 0x58
 80051aa:	e00d      	b.n	80051c8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	461a      	mov	r2, r3
 80051b2:	4b1b      	ldr	r3, [pc, #108]	; (8005220 <DMA_CalcBaseAndBitshift+0x160>)
 80051b4:	4013      	ands	r3, r2
 80051b6:	687a      	ldr	r2, [r7, #4]
 80051b8:	6593      	str	r3, [r2, #88]	; 0x58
 80051ba:	e005      	b.n	80051c8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	40020010 	.word	0x40020010
 80051dc:	40020028 	.word	0x40020028
 80051e0:	40020040 	.word	0x40020040
 80051e4:	40020058 	.word	0x40020058
 80051e8:	40020070 	.word	0x40020070
 80051ec:	40020088 	.word	0x40020088
 80051f0:	400200a0 	.word	0x400200a0
 80051f4:	400200b8 	.word	0x400200b8
 80051f8:	40020410 	.word	0x40020410
 80051fc:	40020428 	.word	0x40020428
 8005200:	40020440 	.word	0x40020440
 8005204:	40020458 	.word	0x40020458
 8005208:	40020470 	.word	0x40020470
 800520c:	40020488 	.word	0x40020488
 8005210:	400204a0 	.word	0x400204a0
 8005214:	400204b8 	.word	0x400204b8
 8005218:	aaaaaaab 	.word	0xaaaaaaab
 800521c:	0800d9f8 	.word	0x0800d9f8
 8005220:	fffffc00 	.word	0xfffffc00

08005224 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800522c:	2300      	movs	r3, #0
 800522e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d120      	bne.n	800527a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523c:	2b03      	cmp	r3, #3
 800523e:	d858      	bhi.n	80052f2 <DMA_CheckFifoParam+0xce>
 8005240:	a201      	add	r2, pc, #4	; (adr r2, 8005248 <DMA_CheckFifoParam+0x24>)
 8005242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005246:	bf00      	nop
 8005248:	08005259 	.word	0x08005259
 800524c:	0800526b 	.word	0x0800526b
 8005250:	08005259 	.word	0x08005259
 8005254:	080052f3 	.word	0x080052f3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800525c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d048      	beq.n	80052f6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005268:	e045      	b.n	80052f6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005272:	d142      	bne.n	80052fa <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005274:	2301      	movs	r3, #1
 8005276:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005278:	e03f      	b.n	80052fa <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	699b      	ldr	r3, [r3, #24]
 800527e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005282:	d123      	bne.n	80052cc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005288:	2b03      	cmp	r3, #3
 800528a:	d838      	bhi.n	80052fe <DMA_CheckFifoParam+0xda>
 800528c:	a201      	add	r2, pc, #4	; (adr r2, 8005294 <DMA_CheckFifoParam+0x70>)
 800528e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005292:	bf00      	nop
 8005294:	080052a5 	.word	0x080052a5
 8005298:	080052ab 	.word	0x080052ab
 800529c:	080052a5 	.word	0x080052a5
 80052a0:	080052bd 	.word	0x080052bd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	73fb      	strb	r3, [r7, #15]
        break;
 80052a8:	e030      	b.n	800530c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d025      	beq.n	8005302 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052ba:	e022      	b.n	8005302 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80052c4:	d11f      	bne.n	8005306 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80052c6:	2301      	movs	r3, #1
 80052c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80052ca:	e01c      	b.n	8005306 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d0:	2b02      	cmp	r3, #2
 80052d2:	d902      	bls.n	80052da <DMA_CheckFifoParam+0xb6>
 80052d4:	2b03      	cmp	r3, #3
 80052d6:	d003      	beq.n	80052e0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80052d8:	e018      	b.n	800530c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	73fb      	strb	r3, [r7, #15]
        break;
 80052de:	e015      	b.n	800530c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00e      	beq.n	800530a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	73fb      	strb	r3, [r7, #15]
    break;
 80052f0:	e00b      	b.n	800530a <DMA_CheckFifoParam+0xe6>
        break;
 80052f2:	bf00      	nop
 80052f4:	e00a      	b.n	800530c <DMA_CheckFifoParam+0xe8>
        break;
 80052f6:	bf00      	nop
 80052f8:	e008      	b.n	800530c <DMA_CheckFifoParam+0xe8>
        break;
 80052fa:	bf00      	nop
 80052fc:	e006      	b.n	800530c <DMA_CheckFifoParam+0xe8>
        break;
 80052fe:	bf00      	nop
 8005300:	e004      	b.n	800530c <DMA_CheckFifoParam+0xe8>
        break;
 8005302:	bf00      	nop
 8005304:	e002      	b.n	800530c <DMA_CheckFifoParam+0xe8>
        break;
 8005306:	bf00      	nop
 8005308:	e000      	b.n	800530c <DMA_CheckFifoParam+0xe8>
    break;
 800530a:	bf00      	nop
    }
  }

  return status;
 800530c:	7bfb      	ldrb	r3, [r7, #15]
}
 800530e:	4618      	mov	r0, r3
 8005310:	3714      	adds	r7, #20
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr
 800531a:	bf00      	nop

0800531c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a38      	ldr	r2, [pc, #224]	; (8005410 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d022      	beq.n	800537a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a36      	ldr	r2, [pc, #216]	; (8005414 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d01d      	beq.n	800537a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a35      	ldr	r2, [pc, #212]	; (8005418 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d018      	beq.n	800537a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a33      	ldr	r2, [pc, #204]	; (800541c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d013      	beq.n	800537a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a32      	ldr	r2, [pc, #200]	; (8005420 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d00e      	beq.n	800537a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a30      	ldr	r2, [pc, #192]	; (8005424 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d009      	beq.n	800537a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a2f      	ldr	r2, [pc, #188]	; (8005428 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d004      	beq.n	800537a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a2d      	ldr	r2, [pc, #180]	; (800542c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d101      	bne.n	800537e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800537a:	2301      	movs	r3, #1
 800537c:	e000      	b.n	8005380 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800537e:	2300      	movs	r3, #0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d01a      	beq.n	80053ba <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	b2db      	uxtb	r3, r3
 800538a:	3b08      	subs	r3, #8
 800538c:	4a28      	ldr	r2, [pc, #160]	; (8005430 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800538e:	fba2 2303 	umull	r2, r3, r2, r3
 8005392:	091b      	lsrs	r3, r3, #4
 8005394:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005396:	68fa      	ldr	r2, [r7, #12]
 8005398:	4b26      	ldr	r3, [pc, #152]	; (8005434 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800539a:	4413      	add	r3, r2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	461a      	mov	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a24      	ldr	r2, [pc, #144]	; (8005438 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80053a8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	f003 031f 	and.w	r3, r3, #31
 80053b0:	2201      	movs	r2, #1
 80053b2:	409a      	lsls	r2, r3
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80053b8:	e024      	b.n	8005404 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	3b10      	subs	r3, #16
 80053c2:	4a1e      	ldr	r2, [pc, #120]	; (800543c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80053c4:	fba2 2303 	umull	r2, r3, r2, r3
 80053c8:	091b      	lsrs	r3, r3, #4
 80053ca:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	4a1c      	ldr	r2, [pc, #112]	; (8005440 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d806      	bhi.n	80053e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	4a1b      	ldr	r2, [pc, #108]	; (8005444 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d902      	bls.n	80053e2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	3308      	adds	r3, #8
 80053e0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80053e2:	68fa      	ldr	r2, [r7, #12]
 80053e4:	4b18      	ldr	r3, [pc, #96]	; (8005448 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80053e6:	4413      	add	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	461a      	mov	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a16      	ldr	r2, [pc, #88]	; (800544c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80053f4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f003 031f 	and.w	r3, r3, #31
 80053fc:	2201      	movs	r2, #1
 80053fe:	409a      	lsls	r2, r3
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005404:	bf00      	nop
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	58025408 	.word	0x58025408
 8005414:	5802541c 	.word	0x5802541c
 8005418:	58025430 	.word	0x58025430
 800541c:	58025444 	.word	0x58025444
 8005420:	58025458 	.word	0x58025458
 8005424:	5802546c 	.word	0x5802546c
 8005428:	58025480 	.word	0x58025480
 800542c:	58025494 	.word	0x58025494
 8005430:	cccccccd 	.word	0xcccccccd
 8005434:	16009600 	.word	0x16009600
 8005438:	58025880 	.word	0x58025880
 800543c:	aaaaaaab 	.word	0xaaaaaaab
 8005440:	400204b8 	.word	0x400204b8
 8005444:	4002040f 	.word	0x4002040f
 8005448:	10008200 	.word	0x10008200
 800544c:	40020880 	.word	0x40020880

08005450 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005450:	b480      	push	{r7}
 8005452:	b085      	sub	sp, #20
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	b2db      	uxtb	r3, r3
 800545e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d04a      	beq.n	80054fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b08      	cmp	r3, #8
 800546a:	d847      	bhi.n	80054fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a25      	ldr	r2, [pc, #148]	; (8005508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d022      	beq.n	80054bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a24      	ldr	r2, [pc, #144]	; (800550c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d01d      	beq.n	80054bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a22      	ldr	r2, [pc, #136]	; (8005510 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d018      	beq.n	80054bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a21      	ldr	r2, [pc, #132]	; (8005514 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d013      	beq.n	80054bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a1f      	ldr	r2, [pc, #124]	; (8005518 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d00e      	beq.n	80054bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a1e      	ldr	r2, [pc, #120]	; (800551c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d009      	beq.n	80054bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	4a1c      	ldr	r2, [pc, #112]	; (8005520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d004      	beq.n	80054bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	4a1b      	ldr	r2, [pc, #108]	; (8005524 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d101      	bne.n	80054c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80054bc:	2301      	movs	r3, #1
 80054be:	e000      	b.n	80054c2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80054c0:	2300      	movs	r3, #0
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	4b17      	ldr	r3, [pc, #92]	; (8005528 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80054ca:	4413      	add	r3, r2
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	461a      	mov	r2, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a15      	ldr	r2, [pc, #84]	; (800552c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80054d8:	671a      	str	r2, [r3, #112]	; 0x70
 80054da:	e009      	b.n	80054f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	4b14      	ldr	r3, [pc, #80]	; (8005530 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80054e0:	4413      	add	r3, r2
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	461a      	mov	r2, r3
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	4a11      	ldr	r2, [pc, #68]	; (8005534 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80054ee:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	3b01      	subs	r3, #1
 80054f4:	2201      	movs	r2, #1
 80054f6:	409a      	lsls	r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80054fc:	bf00      	nop
 80054fe:	3714      	adds	r7, #20
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr
 8005508:	58025408 	.word	0x58025408
 800550c:	5802541c 	.word	0x5802541c
 8005510:	58025430 	.word	0x58025430
 8005514:	58025444 	.word	0x58025444
 8005518:	58025458 	.word	0x58025458
 800551c:	5802546c 	.word	0x5802546c
 8005520:	58025480 	.word	0x58025480
 8005524:	58025494 	.word	0x58025494
 8005528:	1600963f 	.word	0x1600963f
 800552c:	58025940 	.word	0x58025940
 8005530:	1000823f 	.word	0x1000823f
 8005534:	40020940 	.word	0x40020940

08005538 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005538:	b480      	push	{r7}
 800553a:	b089      	sub	sp, #36	; 0x24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005542:	2300      	movs	r3, #0
 8005544:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005546:	4b89      	ldr	r3, [pc, #548]	; (800576c <HAL_GPIO_Init+0x234>)
 8005548:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800554a:	e194      	b.n	8005876 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	2101      	movs	r1, #1
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	fa01 f303 	lsl.w	r3, r1, r3
 8005558:	4013      	ands	r3, r2
 800555a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 8186 	beq.w	8005870 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	f003 0303 	and.w	r3, r3, #3
 800556c:	2b01      	cmp	r3, #1
 800556e:	d005      	beq.n	800557c <HAL_GPIO_Init+0x44>
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f003 0303 	and.w	r3, r3, #3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d130      	bne.n	80055de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	005b      	lsls	r3, r3, #1
 8005586:	2203      	movs	r2, #3
 8005588:	fa02 f303 	lsl.w	r3, r2, r3
 800558c:	43db      	mvns	r3, r3
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	4013      	ands	r3, r2
 8005592:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	68da      	ldr	r2, [r3, #12]
 8005598:	69fb      	ldr	r3, [r7, #28]
 800559a:	005b      	lsls	r3, r3, #1
 800559c:	fa02 f303 	lsl.w	r3, r2, r3
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	69ba      	ldr	r2, [r7, #24]
 80055aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80055b2:	2201      	movs	r2, #1
 80055b4:	69fb      	ldr	r3, [r7, #28]
 80055b6:	fa02 f303 	lsl.w	r3, r2, r3
 80055ba:	43db      	mvns	r3, r3
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4013      	ands	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	091b      	lsrs	r3, r3, #4
 80055c8:	f003 0201 	and.w	r2, r3, #1
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	fa02 f303 	lsl.w	r3, r2, r3
 80055d2:	69ba      	ldr	r2, [r7, #24]
 80055d4:	4313      	orrs	r3, r2
 80055d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	69ba      	ldr	r2, [r7, #24]
 80055dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	2b03      	cmp	r3, #3
 80055e8:	d017      	beq.n	800561a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	005b      	lsls	r3, r3, #1
 80055f4:	2203      	movs	r2, #3
 80055f6:	fa02 f303 	lsl.w	r3, r2, r3
 80055fa:	43db      	mvns	r3, r3
 80055fc:	69ba      	ldr	r2, [r7, #24]
 80055fe:	4013      	ands	r3, r2
 8005600:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	69fb      	ldr	r3, [r7, #28]
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	fa02 f303 	lsl.w	r3, r2, r3
 800560e:	69ba      	ldr	r2, [r7, #24]
 8005610:	4313      	orrs	r3, r2
 8005612:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	69ba      	ldr	r2, [r7, #24]
 8005618:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	f003 0303 	and.w	r3, r3, #3
 8005622:	2b02      	cmp	r3, #2
 8005624:	d123      	bne.n	800566e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	08da      	lsrs	r2, r3, #3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	3208      	adds	r2, #8
 800562e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005632:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	f003 0307 	and.w	r3, r3, #7
 800563a:	009b      	lsls	r3, r3, #2
 800563c:	220f      	movs	r2, #15
 800563e:	fa02 f303 	lsl.w	r3, r2, r3
 8005642:	43db      	mvns	r3, r3
 8005644:	69ba      	ldr	r2, [r7, #24]
 8005646:	4013      	ands	r3, r2
 8005648:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	691a      	ldr	r2, [r3, #16]
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	f003 0307 	and.w	r3, r3, #7
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	fa02 f303 	lsl.w	r3, r2, r3
 800565a:	69ba      	ldr	r2, [r7, #24]
 800565c:	4313      	orrs	r3, r2
 800565e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	08da      	lsrs	r2, r3, #3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	3208      	adds	r2, #8
 8005668:	69b9      	ldr	r1, [r7, #24]
 800566a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	005b      	lsls	r3, r3, #1
 8005678:	2203      	movs	r2, #3
 800567a:	fa02 f303 	lsl.w	r3, r2, r3
 800567e:	43db      	mvns	r3, r3
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	4013      	ands	r3, r2
 8005684:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	f003 0203 	and.w	r2, r3, #3
 800568e:	69fb      	ldr	r3, [r7, #28]
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	fa02 f303 	lsl.w	r3, r2, r3
 8005696:	69ba      	ldr	r2, [r7, #24]
 8005698:	4313      	orrs	r3, r2
 800569a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	69ba      	ldr	r2, [r7, #24]
 80056a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	f000 80e0 	beq.w	8005870 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056b0:	4b2f      	ldr	r3, [pc, #188]	; (8005770 <HAL_GPIO_Init+0x238>)
 80056b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056b6:	4a2e      	ldr	r2, [pc, #184]	; (8005770 <HAL_GPIO_Init+0x238>)
 80056b8:	f043 0302 	orr.w	r3, r3, #2
 80056bc:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80056c0:	4b2b      	ldr	r3, [pc, #172]	; (8005770 <HAL_GPIO_Init+0x238>)
 80056c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	60fb      	str	r3, [r7, #12]
 80056cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80056ce:	4a29      	ldr	r2, [pc, #164]	; (8005774 <HAL_GPIO_Init+0x23c>)
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	089b      	lsrs	r3, r3, #2
 80056d4:	3302      	adds	r3, #2
 80056d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	220f      	movs	r2, #15
 80056e6:	fa02 f303 	lsl.w	r3, r2, r3
 80056ea:	43db      	mvns	r3, r3
 80056ec:	69ba      	ldr	r2, [r7, #24]
 80056ee:	4013      	ands	r3, r2
 80056f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a20      	ldr	r2, [pc, #128]	; (8005778 <HAL_GPIO_Init+0x240>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d052      	beq.n	80057a0 <HAL_GPIO_Init+0x268>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a1f      	ldr	r2, [pc, #124]	; (800577c <HAL_GPIO_Init+0x244>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d031      	beq.n	8005766 <HAL_GPIO_Init+0x22e>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a1e      	ldr	r2, [pc, #120]	; (8005780 <HAL_GPIO_Init+0x248>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d02b      	beq.n	8005762 <HAL_GPIO_Init+0x22a>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	4a1d      	ldr	r2, [pc, #116]	; (8005784 <HAL_GPIO_Init+0x24c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d025      	beq.n	800575e <HAL_GPIO_Init+0x226>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4a1c      	ldr	r2, [pc, #112]	; (8005788 <HAL_GPIO_Init+0x250>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d01f      	beq.n	800575a <HAL_GPIO_Init+0x222>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4a1b      	ldr	r2, [pc, #108]	; (800578c <HAL_GPIO_Init+0x254>)
 800571e:	4293      	cmp	r3, r2
 8005720:	d019      	beq.n	8005756 <HAL_GPIO_Init+0x21e>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a1a      	ldr	r2, [pc, #104]	; (8005790 <HAL_GPIO_Init+0x258>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d013      	beq.n	8005752 <HAL_GPIO_Init+0x21a>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4a19      	ldr	r2, [pc, #100]	; (8005794 <HAL_GPIO_Init+0x25c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d00d      	beq.n	800574e <HAL_GPIO_Init+0x216>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	4a18      	ldr	r2, [pc, #96]	; (8005798 <HAL_GPIO_Init+0x260>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d007      	beq.n	800574a <HAL_GPIO_Init+0x212>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	4a17      	ldr	r2, [pc, #92]	; (800579c <HAL_GPIO_Init+0x264>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d101      	bne.n	8005746 <HAL_GPIO_Init+0x20e>
 8005742:	2309      	movs	r3, #9
 8005744:	e02d      	b.n	80057a2 <HAL_GPIO_Init+0x26a>
 8005746:	230a      	movs	r3, #10
 8005748:	e02b      	b.n	80057a2 <HAL_GPIO_Init+0x26a>
 800574a:	2308      	movs	r3, #8
 800574c:	e029      	b.n	80057a2 <HAL_GPIO_Init+0x26a>
 800574e:	2307      	movs	r3, #7
 8005750:	e027      	b.n	80057a2 <HAL_GPIO_Init+0x26a>
 8005752:	2306      	movs	r3, #6
 8005754:	e025      	b.n	80057a2 <HAL_GPIO_Init+0x26a>
 8005756:	2305      	movs	r3, #5
 8005758:	e023      	b.n	80057a2 <HAL_GPIO_Init+0x26a>
 800575a:	2304      	movs	r3, #4
 800575c:	e021      	b.n	80057a2 <HAL_GPIO_Init+0x26a>
 800575e:	2303      	movs	r3, #3
 8005760:	e01f      	b.n	80057a2 <HAL_GPIO_Init+0x26a>
 8005762:	2302      	movs	r3, #2
 8005764:	e01d      	b.n	80057a2 <HAL_GPIO_Init+0x26a>
 8005766:	2301      	movs	r3, #1
 8005768:	e01b      	b.n	80057a2 <HAL_GPIO_Init+0x26a>
 800576a:	bf00      	nop
 800576c:	58000080 	.word	0x58000080
 8005770:	58024400 	.word	0x58024400
 8005774:	58000400 	.word	0x58000400
 8005778:	58020000 	.word	0x58020000
 800577c:	58020400 	.word	0x58020400
 8005780:	58020800 	.word	0x58020800
 8005784:	58020c00 	.word	0x58020c00
 8005788:	58021000 	.word	0x58021000
 800578c:	58021400 	.word	0x58021400
 8005790:	58021800 	.word	0x58021800
 8005794:	58021c00 	.word	0x58021c00
 8005798:	58022000 	.word	0x58022000
 800579c:	58022400 	.word	0x58022400
 80057a0:	2300      	movs	r3, #0
 80057a2:	69fa      	ldr	r2, [r7, #28]
 80057a4:	f002 0203 	and.w	r2, r2, #3
 80057a8:	0092      	lsls	r2, r2, #2
 80057aa:	4093      	lsls	r3, r2
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80057b2:	4938      	ldr	r1, [pc, #224]	; (8005894 <HAL_GPIO_Init+0x35c>)
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	089b      	lsrs	r3, r3, #2
 80057b8:	3302      	adds	r3, #2
 80057ba:	69ba      	ldr	r2, [r7, #24]
 80057bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80057c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	43db      	mvns	r3, r3
 80057cc:	69ba      	ldr	r2, [r7, #24]
 80057ce:	4013      	ands	r3, r2
 80057d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80057de:	69ba      	ldr	r2, [r7, #24]
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	4313      	orrs	r3, r2
 80057e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80057e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80057ee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	43db      	mvns	r3, r3
 80057fa:	69ba      	ldr	r2, [r7, #24]
 80057fc:	4013      	ands	r3, r2
 80057fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d003      	beq.n	8005814 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800580c:	69ba      	ldr	r2, [r7, #24]
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	4313      	orrs	r3, r2
 8005812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8005814:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	43db      	mvns	r3, r3
 8005826:	69ba      	ldr	r2, [r7, #24]
 8005828:	4013      	ands	r3, r2
 800582a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685b      	ldr	r3, [r3, #4]
 8005830:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005834:	2b00      	cmp	r3, #0
 8005836:	d003      	beq.n	8005840 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	4313      	orrs	r3, r2
 800583e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	69ba      	ldr	r2, [r7, #24]
 8005844:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	43db      	mvns	r3, r3
 8005850:	69ba      	ldr	r2, [r7, #24]
 8005852:	4013      	ands	r3, r2
 8005854:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d003      	beq.n	800586a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8005862:	69ba      	ldr	r2, [r7, #24]
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	4313      	orrs	r3, r2
 8005868:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	3301      	adds	r3, #1
 8005874:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	fa22 f303 	lsr.w	r3, r2, r3
 8005880:	2b00      	cmp	r3, #0
 8005882:	f47f ae63 	bne.w	800554c <HAL_GPIO_Init+0x14>
  }
}
 8005886:	bf00      	nop
 8005888:	bf00      	nop
 800588a:	3724      	adds	r7, #36	; 0x24
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr
 8005894:	58000400 	.word	0x58000400

08005898 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	460b      	mov	r3, r1
 80058a2:	807b      	strh	r3, [r7, #2]
 80058a4:	4613      	mov	r3, r2
 80058a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80058a8:	787b      	ldrb	r3, [r7, #1]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80058ae:	887a      	ldrh	r2, [r7, #2]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80058b4:	e003      	b.n	80058be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80058b6:	887b      	ldrh	r3, [r7, #2]
 80058b8:	041a      	lsls	r2, r3, #16
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	619a      	str	r2, [r3, #24]
}
 80058be:	bf00      	nop
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b085      	sub	sp, #20
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
 80058d2:	460b      	mov	r3, r1
 80058d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80058dc:	887a      	ldrh	r2, [r7, #2]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4013      	ands	r3, r2
 80058e2:	041a      	lsls	r2, r3, #16
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	43d9      	mvns	r1, r3
 80058e8:	887b      	ldrh	r3, [r7, #2]
 80058ea:	400b      	ands	r3, r1
 80058ec:	431a      	orrs	r2, r3
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	619a      	str	r2, [r3, #24]
}
 80058f2:	bf00      	nop
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80058fe:	b580      	push	{r7, lr}
 8005900:	b082      	sub	sp, #8
 8005902:	af00      	add	r7, sp, #0
 8005904:	4603      	mov	r3, r0
 8005906:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8005908:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800590c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8005910:	88fb      	ldrh	r3, [r7, #6]
 8005912:	4013      	ands	r3, r2
 8005914:	2b00      	cmp	r3, #0
 8005916:	d008      	beq.n	800592a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005918:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800591c:	88fb      	ldrh	r3, [r7, #6]
 800591e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005922:	88fb      	ldrh	r3, [r7, #6]
 8005924:	4618      	mov	r0, r3
 8005926:	f7fc fa0f 	bl	8001d48 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800592a:	bf00      	nop
 800592c:	3708      	adds	r7, #8
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
	...

08005934 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800593c:	4b19      	ldr	r3, [pc, #100]	; (80059a4 <HAL_PWREx_ConfigSupply+0x70>)
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	f003 0304 	and.w	r3, r3, #4
 8005944:	2b04      	cmp	r3, #4
 8005946:	d00a      	beq.n	800595e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005948:	4b16      	ldr	r3, [pc, #88]	; (80059a4 <HAL_PWREx_ConfigSupply+0x70>)
 800594a:	68db      	ldr	r3, [r3, #12]
 800594c:	f003 0307 	and.w	r3, r3, #7
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	429a      	cmp	r2, r3
 8005954:	d001      	beq.n	800595a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e01f      	b.n	800599a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800595a:	2300      	movs	r3, #0
 800595c:	e01d      	b.n	800599a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800595e:	4b11      	ldr	r3, [pc, #68]	; (80059a4 <HAL_PWREx_ConfigSupply+0x70>)
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f023 0207 	bic.w	r2, r3, #7
 8005966:	490f      	ldr	r1, [pc, #60]	; (80059a4 <HAL_PWREx_ConfigSupply+0x70>)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4313      	orrs	r3, r2
 800596c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800596e:	f7fd f9ad 	bl	8002ccc <HAL_GetTick>
 8005972:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005974:	e009      	b.n	800598a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005976:	f7fd f9a9 	bl	8002ccc <HAL_GetTick>
 800597a:	4602      	mov	r2, r0
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005984:	d901      	bls.n	800598a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e007      	b.n	800599a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800598a:	4b06      	ldr	r3, [pc, #24]	; (80059a4 <HAL_PWREx_ConfigSupply+0x70>)
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005992:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005996:	d1ee      	bne.n	8005976 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	3710      	adds	r7, #16
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}
 80059a2:	bf00      	nop
 80059a4:	58024800 	.word	0x58024800

080059a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b08c      	sub	sp, #48	; 0x30
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d102      	bne.n	80059bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	f000 bc1c 	b.w	80061f4 <HAL_RCC_OscConfig+0x84c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0301 	and.w	r3, r3, #1
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 8087 	beq.w	8005ad8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059ca:	4b9e      	ldr	r3, [pc, #632]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 80059cc:	691b      	ldr	r3, [r3, #16]
 80059ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80059d4:	4b9b      	ldr	r3, [pc, #620]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 80059d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059d8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80059da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059dc:	2b10      	cmp	r3, #16
 80059de:	d007      	beq.n	80059f0 <HAL_RCC_OscConfig+0x48>
 80059e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059e2:	2b18      	cmp	r3, #24
 80059e4:	d110      	bne.n	8005a08 <HAL_RCC_OscConfig+0x60>
 80059e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e8:	f003 0303 	and.w	r3, r3, #3
 80059ec:	2b02      	cmp	r3, #2
 80059ee:	d10b      	bne.n	8005a08 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80059f0:	4b94      	ldr	r3, [pc, #592]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d06c      	beq.n	8005ad6 <HAL_RCC_OscConfig+0x12e>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d168      	bne.n	8005ad6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e3f5      	b.n	80061f4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a10:	d106      	bne.n	8005a20 <HAL_RCC_OscConfig+0x78>
 8005a12:	4b8c      	ldr	r3, [pc, #560]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a8b      	ldr	r2, [pc, #556]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a1c:	6013      	str	r3, [r2, #0]
 8005a1e:	e02e      	b.n	8005a7e <HAL_RCC_OscConfig+0xd6>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10c      	bne.n	8005a42 <HAL_RCC_OscConfig+0x9a>
 8005a28:	4b86      	ldr	r3, [pc, #536]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a85      	ldr	r2, [pc, #532]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a32:	6013      	str	r3, [r2, #0]
 8005a34:	4b83      	ldr	r3, [pc, #524]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a82      	ldr	r2, [pc, #520]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005a3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a3e:	6013      	str	r3, [r2, #0]
 8005a40:	e01d      	b.n	8005a7e <HAL_RCC_OscConfig+0xd6>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005a4a:	d10c      	bne.n	8005a66 <HAL_RCC_OscConfig+0xbe>
 8005a4c:	4b7d      	ldr	r3, [pc, #500]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a7c      	ldr	r2, [pc, #496]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005a52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a56:	6013      	str	r3, [r2, #0]
 8005a58:	4b7a      	ldr	r3, [pc, #488]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a79      	ldr	r2, [pc, #484]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a62:	6013      	str	r3, [r2, #0]
 8005a64:	e00b      	b.n	8005a7e <HAL_RCC_OscConfig+0xd6>
 8005a66:	4b77      	ldr	r3, [pc, #476]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4a76      	ldr	r2, [pc, #472]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005a6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a70:	6013      	str	r3, [r2, #0]
 8005a72:	4b74      	ldr	r3, [pc, #464]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a73      	ldr	r2, [pc, #460]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005a78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005a7c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d013      	beq.n	8005aae <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a86:	f7fd f921 	bl	8002ccc <HAL_GetTick>
 8005a8a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a8c:	e008      	b.n	8005aa0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005a8e:	f7fd f91d 	bl	8002ccc <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b64      	cmp	r3, #100	; 0x64
 8005a9a:	d901      	bls.n	8005aa0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e3a9      	b.n	80061f4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005aa0:	4b68      	ldr	r3, [pc, #416]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d0f0      	beq.n	8005a8e <HAL_RCC_OscConfig+0xe6>
 8005aac:	e014      	b.n	8005ad8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005aae:	f7fd f90d 	bl	8002ccc <HAL_GetTick>
 8005ab2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ab4:	e008      	b.n	8005ac8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ab6:	f7fd f909 	bl	8002ccc <HAL_GetTick>
 8005aba:	4602      	mov	r2, r0
 8005abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	2b64      	cmp	r3, #100	; 0x64
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e395      	b.n	80061f4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005ac8:	4b5e      	ldr	r3, [pc, #376]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d1f0      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x10e>
 8005ad4:	e000      	b.n	8005ad8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ad6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0302 	and.w	r3, r3, #2
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 80ca 	beq.w	8005c7a <HAL_RCC_OscConfig+0x2d2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005ae6:	4b57      	ldr	r3, [pc, #348]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005ae8:	691b      	ldr	r3, [r3, #16]
 8005aea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005aee:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005af0:	4b54      	ldr	r3, [pc, #336]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005af4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005af6:	6a3b      	ldr	r3, [r7, #32]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d007      	beq.n	8005b0c <HAL_RCC_OscConfig+0x164>
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	2b18      	cmp	r3, #24
 8005b00:	d156      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x208>
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	f003 0303 	and.w	r3, r3, #3
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d151      	bne.n	8005bb0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b0c:	4b4d      	ldr	r3, [pc, #308]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0304 	and.w	r3, r3, #4
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d005      	beq.n	8005b24 <HAL_RCC_OscConfig+0x17c>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d101      	bne.n	8005b24 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005b20:	2301      	movs	r3, #1
 8005b22:	e367      	b.n	80061f4 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005b24:	4b47      	ldr	r3, [pc, #284]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f023 0219 	bic.w	r2, r3, #25
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	4944      	ldr	r1, [pc, #272]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005b32:	4313      	orrs	r3, r2
 8005b34:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b36:	f7fd f8c9 	bl	8002ccc <HAL_GetTick>
 8005b3a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b3c:	e008      	b.n	8005b50 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005b3e:	f7fd f8c5 	bl	8002ccc <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	2b02      	cmp	r3, #2
 8005b4a:	d901      	bls.n	8005b50 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8005b4c:	2303      	movs	r3, #3
 8005b4e:	e351      	b.n	80061f4 <HAL_RCC_OscConfig+0x84c>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005b50:	4b3c      	ldr	r3, [pc, #240]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d0f0      	beq.n	8005b3e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b5c:	f7fd f8c2 	bl	8002ce4 <HAL_GetREVID>
 8005b60:	4603      	mov	r3, r0
 8005b62:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d817      	bhi.n	8005b9a <HAL_RCC_OscConfig+0x1f2>
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	2b40      	cmp	r3, #64	; 0x40
 8005b70:	d108      	bne.n	8005b84 <HAL_RCC_OscConfig+0x1dc>
 8005b72:	4b34      	ldr	r3, [pc, #208]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005b7a:	4a32      	ldr	r2, [pc, #200]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b80:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b82:	e07a      	b.n	8005c7a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b84:	4b2f      	ldr	r3, [pc, #188]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	691b      	ldr	r3, [r3, #16]
 8005b90:	031b      	lsls	r3, r3, #12
 8005b92:	492c      	ldr	r1, [pc, #176]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b98:	e06f      	b.n	8005c7a <HAL_RCC_OscConfig+0x2d2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b9a:	4b2a      	ldr	r3, [pc, #168]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	061b      	lsls	r3, r3, #24
 8005ba8:	4926      	ldr	r1, [pc, #152]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005bae:	e064      	b.n	8005c7a <HAL_RCC_OscConfig+0x2d2>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d047      	beq.n	8005c48 <HAL_RCC_OscConfig+0x2a0>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005bb8:	4b22      	ldr	r3, [pc, #136]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f023 0219 	bic.w	r2, r3, #25
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	491f      	ldr	r1, [pc, #124]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bca:	f7fd f87f 	bl	8002ccc <HAL_GetTick>
 8005bce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005bd0:	e008      	b.n	8005be4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bd2:	f7fd f87b 	bl	8002ccc <HAL_GetTick>
 8005bd6:	4602      	mov	r2, r0
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bda:	1ad3      	subs	r3, r2, r3
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d901      	bls.n	8005be4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005be0:	2303      	movs	r3, #3
 8005be2:	e307      	b.n	80061f4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005be4:	4b17      	ldr	r3, [pc, #92]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d0f0      	beq.n	8005bd2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bf0:	f7fd f878 	bl	8002ce4 <HAL_GetREVID>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	f241 0203 	movw	r2, #4099	; 0x1003
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d817      	bhi.n	8005c2e <HAL_RCC_OscConfig+0x286>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	2b40      	cmp	r3, #64	; 0x40
 8005c04:	d108      	bne.n	8005c18 <HAL_RCC_OscConfig+0x270>
 8005c06:	4b0f      	ldr	r3, [pc, #60]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005c08:	685b      	ldr	r3, [r3, #4]
 8005c0a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005c0e:	4a0d      	ldr	r2, [pc, #52]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005c10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c14:	6053      	str	r3, [r2, #4]
 8005c16:	e030      	b.n	8005c7a <HAL_RCC_OscConfig+0x2d2>
 8005c18:	4b0a      	ldr	r3, [pc, #40]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	031b      	lsls	r3, r3, #12
 8005c26:	4907      	ldr	r1, [pc, #28]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005c28:	4313      	orrs	r3, r2
 8005c2a:	604b      	str	r3, [r1, #4]
 8005c2c:	e025      	b.n	8005c7a <HAL_RCC_OscConfig+0x2d2>
 8005c2e:	4b05      	ldr	r3, [pc, #20]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005c30:	685b      	ldr	r3, [r3, #4]
 8005c32:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	691b      	ldr	r3, [r3, #16]
 8005c3a:	061b      	lsls	r3, r3, #24
 8005c3c:	4901      	ldr	r1, [pc, #4]	; (8005c44 <HAL_RCC_OscConfig+0x29c>)
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	604b      	str	r3, [r1, #4]
 8005c42:	e01a      	b.n	8005c7a <HAL_RCC_OscConfig+0x2d2>
 8005c44:	58024400 	.word	0x58024400
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c48:	4b9e      	ldr	r3, [pc, #632]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a9d      	ldr	r2, [pc, #628]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005c4e:	f023 0301 	bic.w	r3, r3, #1
 8005c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c54:	f7fd f83a 	bl	8002ccc <HAL_GetTick>
 8005c58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c5a:	e008      	b.n	8005c6e <HAL_RCC_OscConfig+0x2c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c5c:	f7fd f836 	bl	8002ccc <HAL_GetTick>
 8005c60:	4602      	mov	r2, r0
 8005c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c64:	1ad3      	subs	r3, r2, r3
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d901      	bls.n	8005c6e <HAL_RCC_OscConfig+0x2c6>
          {
            return HAL_TIMEOUT;
 8005c6a:	2303      	movs	r3, #3
 8005c6c:	e2c2      	b.n	80061f4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c6e:	4b95      	ldr	r3, [pc, #596]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f003 0304 	and.w	r3, r3, #4
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d1f0      	bne.n	8005c5c <HAL_RCC_OscConfig+0x2b4>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f003 0310 	and.w	r3, r3, #16
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	f000 80a9 	beq.w	8005dda <HAL_RCC_OscConfig+0x432>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c88:	4b8e      	ldr	r3, [pc, #568]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c90:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005c92:	4b8c      	ldr	r3, [pc, #560]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c96:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	2b08      	cmp	r3, #8
 8005c9c:	d007      	beq.n	8005cae <HAL_RCC_OscConfig+0x306>
 8005c9e:	69bb      	ldr	r3, [r7, #24]
 8005ca0:	2b18      	cmp	r3, #24
 8005ca2:	d13a      	bne.n	8005d1a <HAL_RCC_OscConfig+0x372>
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f003 0303 	and.w	r3, r3, #3
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d135      	bne.n	8005d1a <HAL_RCC_OscConfig+0x372>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005cae:	4b85      	ldr	r3, [pc, #532]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d005      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x31e>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	69db      	ldr	r3, [r3, #28]
 8005cbe:	2b80      	cmp	r3, #128	; 0x80
 8005cc0:	d001      	beq.n	8005cc6 <HAL_RCC_OscConfig+0x31e>
      {
        return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e296      	b.n	80061f4 <HAL_RCC_OscConfig+0x84c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005cc6:	f7fd f80d 	bl	8002ce4 <HAL_GetREVID>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	f241 0203 	movw	r2, #4099	; 0x1003
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d817      	bhi.n	8005d04 <HAL_RCC_OscConfig+0x35c>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	2b20      	cmp	r3, #32
 8005cda:	d108      	bne.n	8005cee <HAL_RCC_OscConfig+0x346>
 8005cdc:	4b79      	ldr	r3, [pc, #484]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005ce4:	4a77      	ldr	r2, [pc, #476]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005ce6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cea:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005cec:	e075      	b.n	8005dda <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005cee:	4b75      	ldr	r3, [pc, #468]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	069b      	lsls	r3, r3, #26
 8005cfc:	4971      	ldr	r1, [pc, #452]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005cfe:	4313      	orrs	r3, r2
 8005d00:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d02:	e06a      	b.n	8005dda <HAL_RCC_OscConfig+0x432>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d04:	4b6f      	ldr	r3, [pc, #444]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6a1b      	ldr	r3, [r3, #32]
 8005d10:	061b      	lsls	r3, r3, #24
 8005d12:	496c      	ldr	r1, [pc, #432]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005d18:	e05f      	b.n	8005dda <HAL_RCC_OscConfig+0x432>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	69db      	ldr	r3, [r3, #28]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d042      	beq.n	8005da8 <HAL_RCC_OscConfig+0x400>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005d22:	4b68      	ldr	r3, [pc, #416]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a67      	ldr	r2, [pc, #412]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d2e:	f7fc ffcd 	bl	8002ccc <HAL_GetTick>
 8005d32:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d34:	e008      	b.n	8005d48 <HAL_RCC_OscConfig+0x3a0>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005d36:	f7fc ffc9 	bl	8002ccc <HAL_GetTick>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3e:	1ad3      	subs	r3, r2, r3
 8005d40:	2b02      	cmp	r3, #2
 8005d42:	d901      	bls.n	8005d48 <HAL_RCC_OscConfig+0x3a0>
          {
            return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e255      	b.n	80061f4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d48:	4b5e      	ldr	r3, [pc, #376]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d0f0      	beq.n	8005d36 <HAL_RCC_OscConfig+0x38e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005d54:	f7fc ffc6 	bl	8002ce4 <HAL_GetREVID>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	f241 0203 	movw	r2, #4099	; 0x1003
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d817      	bhi.n	8005d92 <HAL_RCC_OscConfig+0x3ea>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a1b      	ldr	r3, [r3, #32]
 8005d66:	2b20      	cmp	r3, #32
 8005d68:	d108      	bne.n	8005d7c <HAL_RCC_OscConfig+0x3d4>
 8005d6a:	4b56      	ldr	r3, [pc, #344]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005d6c:	685b      	ldr	r3, [r3, #4]
 8005d6e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005d72:	4a54      	ldr	r2, [pc, #336]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005d74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d78:	6053      	str	r3, [r2, #4]
 8005d7a:	e02e      	b.n	8005dda <HAL_RCC_OscConfig+0x432>
 8005d7c:	4b51      	ldr	r3, [pc, #324]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a1b      	ldr	r3, [r3, #32]
 8005d88:	069b      	lsls	r3, r3, #26
 8005d8a:	494e      	ldr	r1, [pc, #312]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	604b      	str	r3, [r1, #4]
 8005d90:	e023      	b.n	8005dda <HAL_RCC_OscConfig+0x432>
 8005d92:	4b4c      	ldr	r3, [pc, #304]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6a1b      	ldr	r3, [r3, #32]
 8005d9e:	061b      	lsls	r3, r3, #24
 8005da0:	4948      	ldr	r1, [pc, #288]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	60cb      	str	r3, [r1, #12]
 8005da6:	e018      	b.n	8005dda <HAL_RCC_OscConfig+0x432>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005da8:	4b46      	ldr	r3, [pc, #280]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a45      	ldr	r2, [pc, #276]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005dae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db4:	f7fc ff8a 	bl	8002ccc <HAL_GetTick>
 8005db8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005dba:	e008      	b.n	8005dce <HAL_RCC_OscConfig+0x426>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005dbc:	f7fc ff86 	bl	8002ccc <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_OscConfig+0x426>
          {
            return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e212      	b.n	80061f4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005dce:	4b3d      	ldr	r3, [pc, #244]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1f0      	bne.n	8005dbc <HAL_RCC_OscConfig+0x414>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f003 0308 	and.w	r3, r3, #8
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d036      	beq.n	8005e54 <HAL_RCC_OscConfig+0x4ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d019      	beq.n	8005e22 <HAL_RCC_OscConfig+0x47a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dee:	4b35      	ldr	r3, [pc, #212]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005df0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005df2:	4a34      	ldr	r2, [pc, #208]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005df4:	f043 0301 	orr.w	r3, r3, #1
 8005df8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dfa:	f7fc ff67 	bl	8002ccc <HAL_GetTick>
 8005dfe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e00:	e008      	b.n	8005e14 <HAL_RCC_OscConfig+0x46c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e02:	f7fc ff63 	bl	8002ccc <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	2b02      	cmp	r3, #2
 8005e0e:	d901      	bls.n	8005e14 <HAL_RCC_OscConfig+0x46c>
        {
          return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e1ef      	b.n	80061f4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e14:	4b2b      	ldr	r3, [pc, #172]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e18:	f003 0302 	and.w	r3, r3, #2
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d0f0      	beq.n	8005e02 <HAL_RCC_OscConfig+0x45a>
 8005e20:	e018      	b.n	8005e54 <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e22:	4b28      	ldr	r3, [pc, #160]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e26:	4a27      	ldr	r2, [pc, #156]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005e28:	f023 0301 	bic.w	r3, r3, #1
 8005e2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e2e:	f7fc ff4d 	bl	8002ccc <HAL_GetTick>
 8005e32:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e34:	e008      	b.n	8005e48 <HAL_RCC_OscConfig+0x4a0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e36:	f7fc ff49 	bl	8002ccc <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d901      	bls.n	8005e48 <HAL_RCC_OscConfig+0x4a0>
        {
          return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e1d5      	b.n	80061f4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e48:	4b1e      	ldr	r3, [pc, #120]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1f0      	bne.n	8005e36 <HAL_RCC_OscConfig+0x48e>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f003 0320 	and.w	r3, r3, #32
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d039      	beq.n	8005ed4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	699b      	ldr	r3, [r3, #24]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d019      	beq.n	8005e9c <HAL_RCC_OscConfig+0x4f4>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e68:	4b16      	ldr	r3, [pc, #88]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a15      	ldr	r2, [pc, #84]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005e6e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005e72:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005e74:	f7fc ff2a 	bl	8002ccc <HAL_GetTick>
 8005e78:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e7a:	e008      	b.n	8005e8e <HAL_RCC_OscConfig+0x4e6>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005e7c:	f7fc ff26 	bl	8002ccc <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_OscConfig+0x4e6>
        {
          return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e1b2      	b.n	80061f4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005e8e:	4b0d      	ldr	r3, [pc, #52]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d0f0      	beq.n	8005e7c <HAL_RCC_OscConfig+0x4d4>
 8005e9a:	e01b      	b.n	8005ed4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e9c:	4b09      	ldr	r3, [pc, #36]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a08      	ldr	r2, [pc, #32]	; (8005ec4 <HAL_RCC_OscConfig+0x51c>)
 8005ea2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ea6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ea8:	f7fc ff10 	bl	8002ccc <HAL_GetTick>
 8005eac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005eae:	e00b      	b.n	8005ec8 <HAL_RCC_OscConfig+0x520>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005eb0:	f7fc ff0c 	bl	8002ccc <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d904      	bls.n	8005ec8 <HAL_RCC_OscConfig+0x520>
        {
          return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e198      	b.n	80061f4 <HAL_RCC_OscConfig+0x84c>
 8005ec2:	bf00      	nop
 8005ec4:	58024400 	.word	0x58024400
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ec8:	4ba3      	ldr	r3, [pc, #652]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1ed      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x508>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0304 	and.w	r3, r3, #4
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 8081 	beq.w	8005fe4 <HAL_RCC_OscConfig+0x63c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005ee2:	4b9e      	ldr	r3, [pc, #632]	; (800615c <HAL_RCC_OscConfig+0x7b4>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a9d      	ldr	r2, [pc, #628]	; (800615c <HAL_RCC_OscConfig+0x7b4>)
 8005ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005eee:	f7fc feed 	bl	8002ccc <HAL_GetTick>
 8005ef2:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ef4:	e008      	b.n	8005f08 <HAL_RCC_OscConfig+0x560>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ef6:	f7fc fee9 	bl	8002ccc <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	2b64      	cmp	r3, #100	; 0x64
 8005f02:	d901      	bls.n	8005f08 <HAL_RCC_OscConfig+0x560>
      {
        return HAL_TIMEOUT;
 8005f04:	2303      	movs	r3, #3
 8005f06:	e175      	b.n	80061f4 <HAL_RCC_OscConfig+0x84c>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f08:	4b94      	ldr	r3, [pc, #592]	; (800615c <HAL_RCC_OscConfig+0x7b4>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d0f0      	beq.n	8005ef6 <HAL_RCC_OscConfig+0x54e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d106      	bne.n	8005f2a <HAL_RCC_OscConfig+0x582>
 8005f1c:	4b8e      	ldr	r3, [pc, #568]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 8005f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f20:	4a8d      	ldr	r2, [pc, #564]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 8005f22:	f043 0301 	orr.w	r3, r3, #1
 8005f26:	6713      	str	r3, [r2, #112]	; 0x70
 8005f28:	e02d      	b.n	8005f86 <HAL_RCC_OscConfig+0x5de>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d10c      	bne.n	8005f4c <HAL_RCC_OscConfig+0x5a4>
 8005f32:	4b89      	ldr	r3, [pc, #548]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 8005f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f36:	4a88      	ldr	r2, [pc, #544]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 8005f38:	f023 0301 	bic.w	r3, r3, #1
 8005f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f3e:	4b86      	ldr	r3, [pc, #536]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 8005f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f42:	4a85      	ldr	r2, [pc, #532]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 8005f44:	f023 0304 	bic.w	r3, r3, #4
 8005f48:	6713      	str	r3, [r2, #112]	; 0x70
 8005f4a:	e01c      	b.n	8005f86 <HAL_RCC_OscConfig+0x5de>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	689b      	ldr	r3, [r3, #8]
 8005f50:	2b05      	cmp	r3, #5
 8005f52:	d10c      	bne.n	8005f6e <HAL_RCC_OscConfig+0x5c6>
 8005f54:	4b80      	ldr	r3, [pc, #512]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 8005f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f58:	4a7f      	ldr	r2, [pc, #508]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 8005f5a:	f043 0304 	orr.w	r3, r3, #4
 8005f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f60:	4b7d      	ldr	r3, [pc, #500]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 8005f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f64:	4a7c      	ldr	r2, [pc, #496]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 8005f66:	f043 0301 	orr.w	r3, r3, #1
 8005f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f6c:	e00b      	b.n	8005f86 <HAL_RCC_OscConfig+0x5de>
 8005f6e:	4b7a      	ldr	r3, [pc, #488]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 8005f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f72:	4a79      	ldr	r2, [pc, #484]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 8005f74:	f023 0301 	bic.w	r3, r3, #1
 8005f78:	6713      	str	r3, [r2, #112]	; 0x70
 8005f7a:	4b77      	ldr	r3, [pc, #476]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 8005f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f7e:	4a76      	ldr	r2, [pc, #472]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 8005f80:	f023 0304 	bic.w	r3, r3, #4
 8005f84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	689b      	ldr	r3, [r3, #8]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d015      	beq.n	8005fba <HAL_RCC_OscConfig+0x612>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f8e:	f7fc fe9d 	bl	8002ccc <HAL_GetTick>
 8005f92:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f94:	e00a      	b.n	8005fac <HAL_RCC_OscConfig+0x604>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f96:	f7fc fe99 	bl	8002ccc <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d901      	bls.n	8005fac <HAL_RCC_OscConfig+0x604>
        {
          return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e123      	b.n	80061f4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005fac:	4b6a      	ldr	r3, [pc, #424]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 8005fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb0:	f003 0302 	and.w	r3, r3, #2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d0ee      	beq.n	8005f96 <HAL_RCC_OscConfig+0x5ee>
 8005fb8:	e014      	b.n	8005fe4 <HAL_RCC_OscConfig+0x63c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fba:	f7fc fe87 	bl	8002ccc <HAL_GetTick>
 8005fbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005fc0:	e00a      	b.n	8005fd8 <HAL_RCC_OscConfig+0x630>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fc2:	f7fc fe83 	bl	8002ccc <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d901      	bls.n	8005fd8 <HAL_RCC_OscConfig+0x630>
        {
          return HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	e10d      	b.n	80061f4 <HAL_RCC_OscConfig+0x84c>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005fd8:	4b5f      	ldr	r3, [pc, #380]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 8005fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fdc:	f003 0302 	and.w	r3, r3, #2
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d1ee      	bne.n	8005fc2 <HAL_RCC_OscConfig+0x61a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f000 8102 	beq.w	80061f2 <HAL_RCC_OscConfig+0x84a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005fee:	4b5a      	ldr	r3, [pc, #360]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ff6:	2b18      	cmp	r3, #24
 8005ff8:	f000 80bd 	beq.w	8006176 <HAL_RCC_OscConfig+0x7ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	2b02      	cmp	r3, #2
 8006002:	f040 8095 	bne.w	8006130 <HAL_RCC_OscConfig+0x788>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006006:	4b54      	ldr	r3, [pc, #336]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a53      	ldr	r2, [pc, #332]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 800600c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006012:	f7fc fe5b 	bl	8002ccc <HAL_GetTick>
 8006016:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006018:	e008      	b.n	800602c <HAL_RCC_OscConfig+0x684>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800601a:	f7fc fe57 	bl	8002ccc <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	2b02      	cmp	r3, #2
 8006026:	d901      	bls.n	800602c <HAL_RCC_OscConfig+0x684>
          {
            return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e0e3      	b.n	80061f4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800602c:	4b4a      	ldr	r3, [pc, #296]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1f0      	bne.n	800601a <HAL_RCC_OscConfig+0x672>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006038:	4b47      	ldr	r3, [pc, #284]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 800603a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800603c:	4b48      	ldr	r3, [pc, #288]	; (8006160 <HAL_RCC_OscConfig+0x7b8>)
 800603e:	4013      	ands	r3, r2
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006048:	0112      	lsls	r2, r2, #4
 800604a:	430a      	orrs	r2, r1
 800604c:	4942      	ldr	r1, [pc, #264]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 800604e:	4313      	orrs	r3, r2
 8006050:	628b      	str	r3, [r1, #40]	; 0x28
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006056:	3b01      	subs	r3, #1
 8006058:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006060:	3b01      	subs	r3, #1
 8006062:	025b      	lsls	r3, r3, #9
 8006064:	b29b      	uxth	r3, r3
 8006066:	431a      	orrs	r2, r3
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606c:	3b01      	subs	r3, #1
 800606e:	041b      	lsls	r3, r3, #16
 8006070:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006074:	431a      	orrs	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800607a:	3b01      	subs	r3, #1
 800607c:	061b      	lsls	r3, r3, #24
 800607e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006082:	4935      	ldr	r1, [pc, #212]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 8006084:	4313      	orrs	r3, r2
 8006086:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006088:	4b33      	ldr	r3, [pc, #204]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 800608a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800608c:	4a32      	ldr	r2, [pc, #200]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 800608e:	f023 0301 	bic.w	r3, r3, #1
 8006092:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006094:	4b30      	ldr	r3, [pc, #192]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 8006096:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006098:	4b32      	ldr	r3, [pc, #200]	; (8006164 <HAL_RCC_OscConfig+0x7bc>)
 800609a:	4013      	ands	r3, r2
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80060a0:	00d2      	lsls	r2, r2, #3
 80060a2:	492d      	ldr	r1, [pc, #180]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80060a8:	4b2b      	ldr	r3, [pc, #172]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 80060aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ac:	f023 020c 	bic.w	r2, r3, #12
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060b4:	4928      	ldr	r1, [pc, #160]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80060ba:	4b27      	ldr	r3, [pc, #156]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 80060bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060be:	f023 0202 	bic.w	r2, r3, #2
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c6:	4924      	ldr	r1, [pc, #144]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 80060c8:	4313      	orrs	r3, r2
 80060ca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80060cc:	4b22      	ldr	r3, [pc, #136]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 80060ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d0:	4a21      	ldr	r2, [pc, #132]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 80060d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060d8:	4b1f      	ldr	r3, [pc, #124]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 80060da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060dc:	4a1e      	ldr	r2, [pc, #120]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 80060de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80060e4:	4b1c      	ldr	r3, [pc, #112]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	4a1b      	ldr	r2, [pc, #108]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 80060ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80060ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80060f0:	4b19      	ldr	r3, [pc, #100]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 80060f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060f4:	4a18      	ldr	r2, [pc, #96]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 80060f6:	f043 0301 	orr.w	r3, r3, #1
 80060fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060fc:	4b16      	ldr	r3, [pc, #88]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a15      	ldr	r2, [pc, #84]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 8006102:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006106:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006108:	f7fc fde0 	bl	8002ccc <HAL_GetTick>
 800610c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800610e:	e008      	b.n	8006122 <HAL_RCC_OscConfig+0x77a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006110:	f7fc fddc 	bl	8002ccc <HAL_GetTick>
 8006114:	4602      	mov	r2, r0
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	2b02      	cmp	r3, #2
 800611c:	d901      	bls.n	8006122 <HAL_RCC_OscConfig+0x77a>
          {
            return HAL_TIMEOUT;
 800611e:	2303      	movs	r3, #3
 8006120:	e068      	b.n	80061f4 <HAL_RCC_OscConfig+0x84c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006122:	4b0d      	ldr	r3, [pc, #52]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800612a:	2b00      	cmp	r3, #0
 800612c:	d0f0      	beq.n	8006110 <HAL_RCC_OscConfig+0x768>
 800612e:	e060      	b.n	80061f2 <HAL_RCC_OscConfig+0x84a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006130:	4b09      	ldr	r3, [pc, #36]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a08      	ldr	r2, [pc, #32]	; (8006158 <HAL_RCC_OscConfig+0x7b0>)
 8006136:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800613a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800613c:	f7fc fdc6 	bl	8002ccc <HAL_GetTick>
 8006140:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006142:	e011      	b.n	8006168 <HAL_RCC_OscConfig+0x7c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006144:	f7fc fdc2 	bl	8002ccc <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800614c:	1ad3      	subs	r3, r2, r3
 800614e:	2b02      	cmp	r3, #2
 8006150:	d90a      	bls.n	8006168 <HAL_RCC_OscConfig+0x7c0>
          {
            return HAL_TIMEOUT;
 8006152:	2303      	movs	r3, #3
 8006154:	e04e      	b.n	80061f4 <HAL_RCC_OscConfig+0x84c>
 8006156:	bf00      	nop
 8006158:	58024400 	.word	0x58024400
 800615c:	58024800 	.word	0x58024800
 8006160:	fffffc0c 	.word	0xfffffc0c
 8006164:	ffff0007 	.word	0xffff0007
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006168:	4b24      	ldr	r3, [pc, #144]	; (80061fc <HAL_RCC_OscConfig+0x854>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e7      	bne.n	8006144 <HAL_RCC_OscConfig+0x79c>
 8006174:	e03d      	b.n	80061f2 <HAL_RCC_OscConfig+0x84a>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006176:	4b21      	ldr	r3, [pc, #132]	; (80061fc <HAL_RCC_OscConfig+0x854>)
 8006178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617a:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800617c:	4b1f      	ldr	r3, [pc, #124]	; (80061fc <HAL_RCC_OscConfig+0x854>)
 800617e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006180:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006186:	2b01      	cmp	r3, #1
 8006188:	d031      	beq.n	80061ee <HAL_RCC_OscConfig+0x846>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f003 0203 	and.w	r2, r3, #3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006194:	429a      	cmp	r2, r3
 8006196:	d12a      	bne.n	80061ee <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	091b      	lsrs	r3, r3, #4
 800619c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d122      	bne.n	80061ee <HAL_RCC_OscConfig+0x846>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b2:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d11a      	bne.n	80061ee <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	0a5b      	lsrs	r3, r3, #9
 80061bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c4:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d111      	bne.n	80061ee <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	0c1b      	lsrs	r3, r3, #16
 80061ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80061d8:	429a      	cmp	r2, r3
 80061da:	d108      	bne.n	80061ee <HAL_RCC_OscConfig+0x846>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	0e1b      	lsrs	r3, r3, #24
 80061e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d001      	beq.n	80061f2 <HAL_RCC_OscConfig+0x84a>
      {
        return HAL_ERROR;
 80061ee:	2301      	movs	r3, #1
 80061f0:	e000      	b.n	80061f4 <HAL_RCC_OscConfig+0x84c>
      }
    }
  }
  return HAL_OK;
 80061f2:	2300      	movs	r3, #0
}
 80061f4:	4618      	mov	r0, r3
 80061f6:	3730      	adds	r7, #48	; 0x30
 80061f8:	46bd      	mov	sp, r7
 80061fa:	bd80      	pop	{r7, pc}
 80061fc:	58024400 	.word	0x58024400

08006200 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d101      	bne.n	8006214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006210:	2301      	movs	r3, #1
 8006212:	e19c      	b.n	800654e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006214:	4b8a      	ldr	r3, [pc, #552]	; (8006440 <HAL_RCC_ClockConfig+0x240>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f003 030f 	and.w	r3, r3, #15
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	d910      	bls.n	8006244 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006222:	4b87      	ldr	r3, [pc, #540]	; (8006440 <HAL_RCC_ClockConfig+0x240>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f023 020f 	bic.w	r2, r3, #15
 800622a:	4985      	ldr	r1, [pc, #532]	; (8006440 <HAL_RCC_ClockConfig+0x240>)
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	4313      	orrs	r3, r2
 8006230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006232:	4b83      	ldr	r3, [pc, #524]	; (8006440 <HAL_RCC_ClockConfig+0x240>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f003 030f 	and.w	r3, r3, #15
 800623a:	683a      	ldr	r2, [r7, #0]
 800623c:	429a      	cmp	r2, r3
 800623e:	d001      	beq.n	8006244 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006240:	2301      	movs	r3, #1
 8006242:	e184      	b.n	800654e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0304 	and.w	r3, r3, #4
 800624c:	2b00      	cmp	r3, #0
 800624e:	d010      	beq.n	8006272 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	691a      	ldr	r2, [r3, #16]
 8006254:	4b7b      	ldr	r3, [pc, #492]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800625c:	429a      	cmp	r2, r3
 800625e:	d908      	bls.n	8006272 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006260:	4b78      	ldr	r3, [pc, #480]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	691b      	ldr	r3, [r3, #16]
 800626c:	4975      	ldr	r1, [pc, #468]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 800626e:	4313      	orrs	r3, r2
 8006270:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f003 0308 	and.w	r3, r3, #8
 800627a:	2b00      	cmp	r3, #0
 800627c:	d010      	beq.n	80062a0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	695a      	ldr	r2, [r3, #20]
 8006282:	4b70      	ldr	r3, [pc, #448]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 8006284:	69db      	ldr	r3, [r3, #28]
 8006286:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800628a:	429a      	cmp	r2, r3
 800628c:	d908      	bls.n	80062a0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800628e:	4b6d      	ldr	r3, [pc, #436]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	695b      	ldr	r3, [r3, #20]
 800629a:	496a      	ldr	r1, [pc, #424]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 800629c:	4313      	orrs	r3, r2
 800629e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0310 	and.w	r3, r3, #16
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d010      	beq.n	80062ce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	699a      	ldr	r2, [r3, #24]
 80062b0:	4b64      	ldr	r3, [pc, #400]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 80062b2:	69db      	ldr	r3, [r3, #28]
 80062b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d908      	bls.n	80062ce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80062bc:	4b61      	ldr	r3, [pc, #388]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 80062be:	69db      	ldr	r3, [r3, #28]
 80062c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	495e      	ldr	r1, [pc, #376]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 80062ca:	4313      	orrs	r3, r2
 80062cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f003 0320 	and.w	r3, r3, #32
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d010      	beq.n	80062fc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	69da      	ldr	r2, [r3, #28]
 80062de:	4b59      	ldr	r3, [pc, #356]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d908      	bls.n	80062fc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80062ea:	4b56      	ldr	r3, [pc, #344]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	4953      	ldr	r1, [pc, #332]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 80062f8:	4313      	orrs	r3, r2
 80062fa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0302 	and.w	r3, r3, #2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d010      	beq.n	800632a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68da      	ldr	r2, [r3, #12]
 800630c:	4b4d      	ldr	r3, [pc, #308]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	f003 030f 	and.w	r3, r3, #15
 8006314:	429a      	cmp	r2, r3
 8006316:	d908      	bls.n	800632a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006318:	4b4a      	ldr	r3, [pc, #296]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	f023 020f 	bic.w	r2, r3, #15
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	4947      	ldr	r1, [pc, #284]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 8006326:	4313      	orrs	r3, r2
 8006328:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f003 0301 	and.w	r3, r3, #1
 8006332:	2b00      	cmp	r3, #0
 8006334:	d055      	beq.n	80063e2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8006336:	4b43      	ldr	r3, [pc, #268]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 8006338:	699b      	ldr	r3, [r3, #24]
 800633a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	689b      	ldr	r3, [r3, #8]
 8006342:	4940      	ldr	r1, [pc, #256]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 8006344:	4313      	orrs	r3, r2
 8006346:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	2b02      	cmp	r3, #2
 800634e:	d107      	bne.n	8006360 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006350:	4b3c      	ldr	r3, [pc, #240]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d121      	bne.n	80063a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800635c:	2301      	movs	r3, #1
 800635e:	e0f6      	b.n	800654e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	685b      	ldr	r3, [r3, #4]
 8006364:	2b03      	cmp	r3, #3
 8006366:	d107      	bne.n	8006378 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006368:	4b36      	ldr	r3, [pc, #216]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d115      	bne.n	80063a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006374:	2301      	movs	r3, #1
 8006376:	e0ea      	b.n	800654e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685b      	ldr	r3, [r3, #4]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d107      	bne.n	8006390 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006380:	4b30      	ldr	r3, [pc, #192]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006388:	2b00      	cmp	r3, #0
 800638a:	d109      	bne.n	80063a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e0de      	b.n	800654e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006390:	4b2c      	ldr	r3, [pc, #176]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0304 	and.w	r3, r3, #4
 8006398:	2b00      	cmp	r3, #0
 800639a:	d101      	bne.n	80063a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800639c:	2301      	movs	r3, #1
 800639e:	e0d6      	b.n	800654e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80063a0:	4b28      	ldr	r3, [pc, #160]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 80063a2:	691b      	ldr	r3, [r3, #16]
 80063a4:	f023 0207 	bic.w	r2, r3, #7
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	4925      	ldr	r1, [pc, #148]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 80063ae:	4313      	orrs	r3, r2
 80063b0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063b2:	f7fc fc8b 	bl	8002ccc <HAL_GetTick>
 80063b6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063b8:	e00a      	b.n	80063d0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063ba:	f7fc fc87 	bl	8002ccc <HAL_GetTick>
 80063be:	4602      	mov	r2, r0
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	1ad3      	subs	r3, r2, r3
 80063c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d901      	bls.n	80063d0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80063cc:	2303      	movs	r3, #3
 80063ce:	e0be      	b.n	800654e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063d0:	4b1c      	ldr	r3, [pc, #112]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	00db      	lsls	r3, r3, #3
 80063de:	429a      	cmp	r2, r3
 80063e0:	d1eb      	bne.n	80063ba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f003 0302 	and.w	r3, r3, #2
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d010      	beq.n	8006410 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68da      	ldr	r2, [r3, #12]
 80063f2:	4b14      	ldr	r3, [pc, #80]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	f003 030f 	and.w	r3, r3, #15
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d208      	bcs.n	8006410 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063fe:	4b11      	ldr	r3, [pc, #68]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 8006400:	699b      	ldr	r3, [r3, #24]
 8006402:	f023 020f 	bic.w	r2, r3, #15
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	490e      	ldr	r1, [pc, #56]	; (8006444 <HAL_RCC_ClockConfig+0x244>)
 800640c:	4313      	orrs	r3, r2
 800640e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006410:	4b0b      	ldr	r3, [pc, #44]	; (8006440 <HAL_RCC_ClockConfig+0x240>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 030f 	and.w	r3, r3, #15
 8006418:	683a      	ldr	r2, [r7, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	d214      	bcs.n	8006448 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800641e:	4b08      	ldr	r3, [pc, #32]	; (8006440 <HAL_RCC_ClockConfig+0x240>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f023 020f 	bic.w	r2, r3, #15
 8006426:	4906      	ldr	r1, [pc, #24]	; (8006440 <HAL_RCC_ClockConfig+0x240>)
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	4313      	orrs	r3, r2
 800642c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800642e:	4b04      	ldr	r3, [pc, #16]	; (8006440 <HAL_RCC_ClockConfig+0x240>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f003 030f 	and.w	r3, r3, #15
 8006436:	683a      	ldr	r2, [r7, #0]
 8006438:	429a      	cmp	r2, r3
 800643a:	d005      	beq.n	8006448 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800643c:	2301      	movs	r3, #1
 800643e:	e086      	b.n	800654e <HAL_RCC_ClockConfig+0x34e>
 8006440:	52002000 	.word	0x52002000
 8006444:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f003 0304 	and.w	r3, r3, #4
 8006450:	2b00      	cmp	r3, #0
 8006452:	d010      	beq.n	8006476 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	691a      	ldr	r2, [r3, #16]
 8006458:	4b3f      	ldr	r3, [pc, #252]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006460:	429a      	cmp	r2, r3
 8006462:	d208      	bcs.n	8006476 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006464:	4b3c      	ldr	r3, [pc, #240]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 8006466:	699b      	ldr	r3, [r3, #24]
 8006468:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	4939      	ldr	r1, [pc, #228]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 8006472:	4313      	orrs	r3, r2
 8006474:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f003 0308 	and.w	r3, r3, #8
 800647e:	2b00      	cmp	r3, #0
 8006480:	d010      	beq.n	80064a4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	695a      	ldr	r2, [r3, #20]
 8006486:	4b34      	ldr	r3, [pc, #208]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 8006488:	69db      	ldr	r3, [r3, #28]
 800648a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800648e:	429a      	cmp	r2, r3
 8006490:	d208      	bcs.n	80064a4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006492:	4b31      	ldr	r3, [pc, #196]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 8006494:	69db      	ldr	r3, [r3, #28]
 8006496:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	695b      	ldr	r3, [r3, #20]
 800649e:	492e      	ldr	r1, [pc, #184]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0310 	and.w	r3, r3, #16
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d010      	beq.n	80064d2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	699a      	ldr	r2, [r3, #24]
 80064b4:	4b28      	ldr	r3, [pc, #160]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 80064b6:	69db      	ldr	r3, [r3, #28]
 80064b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064bc:	429a      	cmp	r2, r3
 80064be:	d208      	bcs.n	80064d2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80064c0:	4b25      	ldr	r3, [pc, #148]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 80064c2:	69db      	ldr	r3, [r3, #28]
 80064c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	4922      	ldr	r1, [pc, #136]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 80064ce:	4313      	orrs	r3, r2
 80064d0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f003 0320 	and.w	r3, r3, #32
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d010      	beq.n	8006500 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	69da      	ldr	r2, [r3, #28]
 80064e2:	4b1d      	ldr	r3, [pc, #116]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 80064e4:	6a1b      	ldr	r3, [r3, #32]
 80064e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80064ea:	429a      	cmp	r2, r3
 80064ec:	d208      	bcs.n	8006500 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80064ee:	4b1a      	ldr	r3, [pc, #104]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 80064f0:	6a1b      	ldr	r3, [r3, #32]
 80064f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	4917      	ldr	r1, [pc, #92]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 80064fc:	4313      	orrs	r3, r2
 80064fe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006500:	f000 f834 	bl	800656c <HAL_RCC_GetSysClockFreq>
 8006504:	4602      	mov	r2, r0
 8006506:	4b14      	ldr	r3, [pc, #80]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	0a1b      	lsrs	r3, r3, #8
 800650c:	f003 030f 	and.w	r3, r3, #15
 8006510:	4912      	ldr	r1, [pc, #72]	; (800655c <HAL_RCC_ClockConfig+0x35c>)
 8006512:	5ccb      	ldrb	r3, [r1, r3]
 8006514:	f003 031f 	and.w	r3, r3, #31
 8006518:	fa22 f303 	lsr.w	r3, r2, r3
 800651c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800651e:	4b0e      	ldr	r3, [pc, #56]	; (8006558 <HAL_RCC_ClockConfig+0x358>)
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	f003 030f 	and.w	r3, r3, #15
 8006526:	4a0d      	ldr	r2, [pc, #52]	; (800655c <HAL_RCC_ClockConfig+0x35c>)
 8006528:	5cd3      	ldrb	r3, [r2, r3]
 800652a:	f003 031f 	and.w	r3, r3, #31
 800652e:	693a      	ldr	r2, [r7, #16]
 8006530:	fa22 f303 	lsr.w	r3, r2, r3
 8006534:	4a0a      	ldr	r2, [pc, #40]	; (8006560 <HAL_RCC_ClockConfig+0x360>)
 8006536:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006538:	4a0a      	ldr	r2, [pc, #40]	; (8006564 <HAL_RCC_ClockConfig+0x364>)
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800653e:	4b0a      	ldr	r3, [pc, #40]	; (8006568 <HAL_RCC_ClockConfig+0x368>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	4618      	mov	r0, r3
 8006544:	f7fc fb78 	bl	8002c38 <HAL_InitTick>
 8006548:	4603      	mov	r3, r0
 800654a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800654c:	7bfb      	ldrb	r3, [r7, #15]
}
 800654e:	4618      	mov	r0, r3
 8006550:	3718      	adds	r7, #24
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	58024400 	.word	0x58024400
 800655c:	0800d9e8 	.word	0x0800d9e8
 8006560:	24000004 	.word	0x24000004
 8006564:	24000000 	.word	0x24000000
 8006568:	24000008 	.word	0x24000008

0800656c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800656c:	b480      	push	{r7}
 800656e:	b089      	sub	sp, #36	; 0x24
 8006570:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006572:	4bb3      	ldr	r3, [pc, #716]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800657a:	2b18      	cmp	r3, #24
 800657c:	f200 8155 	bhi.w	800682a <HAL_RCC_GetSysClockFreq+0x2be>
 8006580:	a201      	add	r2, pc, #4	; (adr r2, 8006588 <HAL_RCC_GetSysClockFreq+0x1c>)
 8006582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006586:	bf00      	nop
 8006588:	080065ed 	.word	0x080065ed
 800658c:	0800682b 	.word	0x0800682b
 8006590:	0800682b 	.word	0x0800682b
 8006594:	0800682b 	.word	0x0800682b
 8006598:	0800682b 	.word	0x0800682b
 800659c:	0800682b 	.word	0x0800682b
 80065a0:	0800682b 	.word	0x0800682b
 80065a4:	0800682b 	.word	0x0800682b
 80065a8:	08006613 	.word	0x08006613
 80065ac:	0800682b 	.word	0x0800682b
 80065b0:	0800682b 	.word	0x0800682b
 80065b4:	0800682b 	.word	0x0800682b
 80065b8:	0800682b 	.word	0x0800682b
 80065bc:	0800682b 	.word	0x0800682b
 80065c0:	0800682b 	.word	0x0800682b
 80065c4:	0800682b 	.word	0x0800682b
 80065c8:	08006619 	.word	0x08006619
 80065cc:	0800682b 	.word	0x0800682b
 80065d0:	0800682b 	.word	0x0800682b
 80065d4:	0800682b 	.word	0x0800682b
 80065d8:	0800682b 	.word	0x0800682b
 80065dc:	0800682b 	.word	0x0800682b
 80065e0:	0800682b 	.word	0x0800682b
 80065e4:	0800682b 	.word	0x0800682b
 80065e8:	0800661f 	.word	0x0800661f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065ec:	4b94      	ldr	r3, [pc, #592]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f003 0320 	and.w	r3, r3, #32
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d009      	beq.n	800660c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80065f8:	4b91      	ldr	r3, [pc, #580]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	08db      	lsrs	r3, r3, #3
 80065fe:	f003 0303 	and.w	r3, r3, #3
 8006602:	4a90      	ldr	r2, [pc, #576]	; (8006844 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006604:	fa22 f303 	lsr.w	r3, r2, r3
 8006608:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800660a:	e111      	b.n	8006830 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800660c:	4b8d      	ldr	r3, [pc, #564]	; (8006844 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800660e:	61bb      	str	r3, [r7, #24]
    break;
 8006610:	e10e      	b.n	8006830 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006612:	4b8d      	ldr	r3, [pc, #564]	; (8006848 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006614:	61bb      	str	r3, [r7, #24]
    break;
 8006616:	e10b      	b.n	8006830 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8006618:	4b8c      	ldr	r3, [pc, #560]	; (800684c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800661a:	61bb      	str	r3, [r7, #24]
    break;
 800661c:	e108      	b.n	8006830 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800661e:	4b88      	ldr	r3, [pc, #544]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006622:	f003 0303 	and.w	r3, r3, #3
 8006626:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8006628:	4b85      	ldr	r3, [pc, #532]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800662a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800662c:	091b      	lsrs	r3, r3, #4
 800662e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006632:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006634:	4b82      	ldr	r3, [pc, #520]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006638:	f003 0301 	and.w	r3, r3, #1
 800663c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800663e:	4b80      	ldr	r3, [pc, #512]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006642:	08db      	lsrs	r3, r3, #3
 8006644:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006648:	68fa      	ldr	r2, [r7, #12]
 800664a:	fb02 f303 	mul.w	r3, r2, r3
 800664e:	ee07 3a90 	vmov	s15, r3
 8006652:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006656:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 80e1 	beq.w	8006824 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	2b02      	cmp	r3, #2
 8006666:	f000 8083 	beq.w	8006770 <HAL_RCC_GetSysClockFreq+0x204>
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2b02      	cmp	r3, #2
 800666e:	f200 80a1 	bhi.w	80067b4 <HAL_RCC_GetSysClockFreq+0x248>
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d003      	beq.n	8006680 <HAL_RCC_GetSysClockFreq+0x114>
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d056      	beq.n	800672c <HAL_RCC_GetSysClockFreq+0x1c0>
 800667e:	e099      	b.n	80067b4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006680:	4b6f      	ldr	r3, [pc, #444]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f003 0320 	and.w	r3, r3, #32
 8006688:	2b00      	cmp	r3, #0
 800668a:	d02d      	beq.n	80066e8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800668c:	4b6c      	ldr	r3, [pc, #432]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	08db      	lsrs	r3, r3, #3
 8006692:	f003 0303 	and.w	r3, r3, #3
 8006696:	4a6b      	ldr	r2, [pc, #428]	; (8006844 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006698:	fa22 f303 	lsr.w	r3, r2, r3
 800669c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	ee07 3a90 	vmov	s15, r3
 80066a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	ee07 3a90 	vmov	s15, r3
 80066ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066b6:	4b62      	ldr	r3, [pc, #392]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80066be:	ee07 3a90 	vmov	s15, r3
 80066c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80066c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80066ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006850 <HAL_RCC_GetSysClockFreq+0x2e4>
 80066ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80066d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80066d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80066da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80066de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80066e6:	e087      	b.n	80067f8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	ee07 3a90 	vmov	s15, r3
 80066ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006854 <HAL_RCC_GetSysClockFreq+0x2e8>
 80066f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80066fa:	4b51      	ldr	r3, [pc, #324]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80066fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006702:	ee07 3a90 	vmov	s15, r3
 8006706:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800670a:	ed97 6a02 	vldr	s12, [r7, #8]
 800670e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006850 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006712:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006716:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800671a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800671e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800672a:	e065      	b.n	80067f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	ee07 3a90 	vmov	s15, r3
 8006732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006736:	eddf 6a48 	vldr	s13, [pc, #288]	; 8006858 <HAL_RCC_GetSysClockFreq+0x2ec>
 800673a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800673e:	4b40      	ldr	r3, [pc, #256]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006742:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006746:	ee07 3a90 	vmov	s15, r3
 800674a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800674e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006752:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006850 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006756:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800675a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800675e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006762:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006766:	ee67 7a27 	vmul.f32	s15, s14, s15
 800676a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800676e:	e043      	b.n	80067f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	ee07 3a90 	vmov	s15, r3
 8006776:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800677a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800685c <HAL_RCC_GetSysClockFreq+0x2f0>
 800677e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006782:	4b2f      	ldr	r3, [pc, #188]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800678a:	ee07 3a90 	vmov	s15, r3
 800678e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006792:	ed97 6a02 	vldr	s12, [r7, #8]
 8006796:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006850 <HAL_RCC_GetSysClockFreq+0x2e4>
 800679a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800679e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067b2:	e021      	b.n	80067f8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	ee07 3a90 	vmov	s15, r3
 80067ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067be:	eddf 6a26 	vldr	s13, [pc, #152]	; 8006858 <HAL_RCC_GetSysClockFreq+0x2ec>
 80067c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067c6:	4b1e      	ldr	r3, [pc, #120]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067ce:	ee07 3a90 	vmov	s15, r3
 80067d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80067da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006850 <HAL_RCC_GetSysClockFreq+0x2e4>
 80067de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067f6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80067f8:	4b11      	ldr	r3, [pc, #68]	; (8006840 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80067fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067fc:	0a5b      	lsrs	r3, r3, #9
 80067fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006802:	3301      	adds	r3, #1
 8006804:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	ee07 3a90 	vmov	s15, r3
 800680c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006810:	edd7 6a07 	vldr	s13, [r7, #28]
 8006814:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006818:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800681c:	ee17 3a90 	vmov	r3, s15
 8006820:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006822:	e005      	b.n	8006830 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	61bb      	str	r3, [r7, #24]
    break;
 8006828:	e002      	b.n	8006830 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800682a:	4b07      	ldr	r3, [pc, #28]	; (8006848 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800682c:	61bb      	str	r3, [r7, #24]
    break;
 800682e:	bf00      	nop
  }

  return sysclockfreq;
 8006830:	69bb      	ldr	r3, [r7, #24]
}
 8006832:	4618      	mov	r0, r3
 8006834:	3724      	adds	r7, #36	; 0x24
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	58024400 	.word	0x58024400
 8006844:	03d09000 	.word	0x03d09000
 8006848:	003d0900 	.word	0x003d0900
 800684c:	02dc6c00 	.word	0x02dc6c00
 8006850:	46000000 	.word	0x46000000
 8006854:	4c742400 	.word	0x4c742400
 8006858:	4a742400 	.word	0x4a742400
 800685c:	4c371b00 	.word	0x4c371b00

08006860 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b082      	sub	sp, #8
 8006864:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8006866:	f7ff fe81 	bl	800656c <HAL_RCC_GetSysClockFreq>
 800686a:	4602      	mov	r2, r0
 800686c:	4b10      	ldr	r3, [pc, #64]	; (80068b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800686e:	699b      	ldr	r3, [r3, #24]
 8006870:	0a1b      	lsrs	r3, r3, #8
 8006872:	f003 030f 	and.w	r3, r3, #15
 8006876:	490f      	ldr	r1, [pc, #60]	; (80068b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8006878:	5ccb      	ldrb	r3, [r1, r3]
 800687a:	f003 031f 	and.w	r3, r3, #31
 800687e:	fa22 f303 	lsr.w	r3, r2, r3
 8006882:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006884:	4b0a      	ldr	r3, [pc, #40]	; (80068b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	f003 030f 	and.w	r3, r3, #15
 800688c:	4a09      	ldr	r2, [pc, #36]	; (80068b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800688e:	5cd3      	ldrb	r3, [r2, r3]
 8006890:	f003 031f 	and.w	r3, r3, #31
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	fa22 f303 	lsr.w	r3, r2, r3
 800689a:	4a07      	ldr	r2, [pc, #28]	; (80068b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800689c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800689e:	4a07      	ldr	r2, [pc, #28]	; (80068bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80068a4:	4b04      	ldr	r3, [pc, #16]	; (80068b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80068a6:	681b      	ldr	r3, [r3, #0]
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	3708      	adds	r7, #8
 80068ac:	46bd      	mov	sp, r7
 80068ae:	bd80      	pop	{r7, pc}
 80068b0:	58024400 	.word	0x58024400
 80068b4:	0800d9e8 	.word	0x0800d9e8
 80068b8:	24000004 	.word	0x24000004
 80068bc:	24000000 	.word	0x24000000

080068c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80068c4:	f7ff ffcc 	bl	8006860 <HAL_RCC_GetHCLKFreq>
 80068c8:	4602      	mov	r2, r0
 80068ca:	4b06      	ldr	r3, [pc, #24]	; (80068e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	091b      	lsrs	r3, r3, #4
 80068d0:	f003 0307 	and.w	r3, r3, #7
 80068d4:	4904      	ldr	r1, [pc, #16]	; (80068e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80068d6:	5ccb      	ldrb	r3, [r1, r3]
 80068d8:	f003 031f 	and.w	r3, r3, #31
 80068dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80068e0:	4618      	mov	r0, r3
 80068e2:	bd80      	pop	{r7, pc}
 80068e4:	58024400 	.word	0x58024400
 80068e8:	0800d9e8 	.word	0x0800d9e8

080068ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80068f0:	f7ff ffb6 	bl	8006860 <HAL_RCC_GetHCLKFreq>
 80068f4:	4602      	mov	r2, r0
 80068f6:	4b06      	ldr	r3, [pc, #24]	; (8006910 <HAL_RCC_GetPCLK2Freq+0x24>)
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	0a1b      	lsrs	r3, r3, #8
 80068fc:	f003 0307 	and.w	r3, r3, #7
 8006900:	4904      	ldr	r1, [pc, #16]	; (8006914 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006902:	5ccb      	ldrb	r3, [r1, r3]
 8006904:	f003 031f 	and.w	r3, r3, #31
 8006908:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800690c:	4618      	mov	r0, r3
 800690e:	bd80      	pop	{r7, pc}
 8006910:	58024400 	.word	0x58024400
 8006914:	0800d9e8 	.word	0x0800d9e8

08006918 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b086      	sub	sp, #24
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006920:	2300      	movs	r3, #0
 8006922:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006924:	2300      	movs	r3, #0
 8006926:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006930:	2b00      	cmp	r3, #0
 8006932:	d03f      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006938:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800693c:	d02a      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800693e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006942:	d824      	bhi.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006944:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006948:	d018      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800694a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800694e:	d81e      	bhi.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006950:	2b00      	cmp	r3, #0
 8006952:	d003      	beq.n	800695c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006958:	d007      	beq.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800695a:	e018      	b.n	800698e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800695c:	4bab      	ldr	r3, [pc, #684]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800695e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006960:	4aaa      	ldr	r2, [pc, #680]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006962:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006966:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006968:	e015      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	3304      	adds	r3, #4
 800696e:	2102      	movs	r1, #2
 8006970:	4618      	mov	r0, r3
 8006972:	f001 f9cf 	bl	8007d14 <RCCEx_PLL2_Config>
 8006976:	4603      	mov	r3, r0
 8006978:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800697a:	e00c      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	3324      	adds	r3, #36	; 0x24
 8006980:	2102      	movs	r1, #2
 8006982:	4618      	mov	r0, r3
 8006984:	f001 fa78 	bl	8007e78 <RCCEx_PLL3_Config>
 8006988:	4603      	mov	r3, r0
 800698a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800698c:	e003      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	75fb      	strb	r3, [r7, #23]
      break;
 8006992:	e000      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006996:	7dfb      	ldrb	r3, [r7, #23]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d109      	bne.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800699c:	4b9b      	ldr	r3, [pc, #620]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800699e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069a8:	4998      	ldr	r1, [pc, #608]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	650b      	str	r3, [r1, #80]	; 0x50
 80069ae:	e001      	b.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b0:	7dfb      	ldrb	r3, [r7, #23]
 80069b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d03d      	beq.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80069c4:	2b04      	cmp	r3, #4
 80069c6:	d826      	bhi.n	8006a16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80069c8:	a201      	add	r2, pc, #4	; (adr r2, 80069d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80069ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ce:	bf00      	nop
 80069d0:	080069e5 	.word	0x080069e5
 80069d4:	080069f3 	.word	0x080069f3
 80069d8:	08006a05 	.word	0x08006a05
 80069dc:	08006a1d 	.word	0x08006a1d
 80069e0:	08006a1d 	.word	0x08006a1d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069e4:	4b89      	ldr	r3, [pc, #548]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e8:	4a88      	ldr	r2, [pc, #544]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80069ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80069f0:	e015      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	3304      	adds	r3, #4
 80069f6:	2100      	movs	r1, #0
 80069f8:	4618      	mov	r0, r3
 80069fa:	f001 f98b 	bl	8007d14 <RCCEx_PLL2_Config>
 80069fe:	4603      	mov	r3, r0
 8006a00:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a02:	e00c      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	3324      	adds	r3, #36	; 0x24
 8006a08:	2100      	movs	r1, #0
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f001 fa34 	bl	8007e78 <RCCEx_PLL3_Config>
 8006a10:	4603      	mov	r3, r0
 8006a12:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006a14:	e003      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a16:	2301      	movs	r3, #1
 8006a18:	75fb      	strb	r3, [r7, #23]
      break;
 8006a1a:	e000      	b.n	8006a1e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006a1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a1e:	7dfb      	ldrb	r3, [r7, #23]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d109      	bne.n	8006a38 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006a24:	4b79      	ldr	r3, [pc, #484]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a28:	f023 0207 	bic.w	r2, r3, #7
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a30:	4976      	ldr	r1, [pc, #472]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a32:	4313      	orrs	r3, r2
 8006a34:	650b      	str	r3, [r1, #80]	; 0x50
 8006a36:	e001      	b.n	8006a3c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a38:	7dfb      	ldrb	r3, [r7, #23]
 8006a3a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d042      	beq.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a50:	d02b      	beq.n	8006aaa <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a56:	d825      	bhi.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006a58:	2bc0      	cmp	r3, #192	; 0xc0
 8006a5a:	d028      	beq.n	8006aae <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006a5c:	2bc0      	cmp	r3, #192	; 0xc0
 8006a5e:	d821      	bhi.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006a60:	2b80      	cmp	r3, #128	; 0x80
 8006a62:	d016      	beq.n	8006a92 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006a64:	2b80      	cmp	r3, #128	; 0x80
 8006a66:	d81d      	bhi.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d002      	beq.n	8006a72 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006a6c:	2b40      	cmp	r3, #64	; 0x40
 8006a6e:	d007      	beq.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006a70:	e018      	b.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a72:	4b66      	ldr	r3, [pc, #408]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a76:	4a65      	ldr	r2, [pc, #404]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006a7e:	e017      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	3304      	adds	r3, #4
 8006a84:	2100      	movs	r1, #0
 8006a86:	4618      	mov	r0, r3
 8006a88:	f001 f944 	bl	8007d14 <RCCEx_PLL2_Config>
 8006a8c:	4603      	mov	r3, r0
 8006a8e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006a90:	e00e      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	3324      	adds	r3, #36	; 0x24
 8006a96:	2100      	movs	r1, #0
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f001 f9ed 	bl	8007e78 <RCCEx_PLL3_Config>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006aa2:	e005      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006aa4:	2301      	movs	r3, #1
 8006aa6:	75fb      	strb	r3, [r7, #23]
      break;
 8006aa8:	e002      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006aaa:	bf00      	nop
 8006aac:	e000      	b.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006aae:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ab0:	7dfb      	ldrb	r3, [r7, #23]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d109      	bne.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006ab6:	4b55      	ldr	r3, [pc, #340]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ab8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aba:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac2:	4952      	ldr	r1, [pc, #328]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	650b      	str	r3, [r1, #80]	; 0x50
 8006ac8:	e001      	b.n	8006ace <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aca:	7dfb      	ldrb	r3, [r7, #23]
 8006acc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d049      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006ae0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006ae4:	d030      	beq.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8006ae6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006aea:	d82a      	bhi.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006aec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006af0:	d02c      	beq.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006af2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006af6:	d824      	bhi.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006af8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006afc:	d018      	beq.n	8006b30 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006afe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006b02:	d81e      	bhi.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d003      	beq.n	8006b10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8006b08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006b0c:	d007      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006b0e:	e018      	b.n	8006b42 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b10:	4b3e      	ldr	r3, [pc, #248]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b14:	4a3d      	ldr	r2, [pc, #244]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b1c:	e017      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	3304      	adds	r3, #4
 8006b22:	2100      	movs	r1, #0
 8006b24:	4618      	mov	r0, r3
 8006b26:	f001 f8f5 	bl	8007d14 <RCCEx_PLL2_Config>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006b2e:	e00e      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	3324      	adds	r3, #36	; 0x24
 8006b34:	2100      	movs	r1, #0
 8006b36:	4618      	mov	r0, r3
 8006b38:	f001 f99e 	bl	8007e78 <RCCEx_PLL3_Config>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006b40:	e005      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	75fb      	strb	r3, [r7, #23]
      break;
 8006b46:	e002      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006b48:	bf00      	nop
 8006b4a:	e000      	b.n	8006b4e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006b4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b4e:	7dfb      	ldrb	r3, [r7, #23]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10a      	bne.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006b54:	4b2d      	ldr	r3, [pc, #180]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b58:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006b62:	492a      	ldr	r1, [pc, #168]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006b64:	4313      	orrs	r3, r2
 8006b66:	658b      	str	r3, [r1, #88]	; 0x58
 8006b68:	e001      	b.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b6a:	7dfb      	ldrb	r3, [r7, #23]
 8006b6c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d04c      	beq.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006b80:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b84:	d030      	beq.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8006b86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006b8a:	d82a      	bhi.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006b8c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b90:	d02c      	beq.n	8006bec <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8006b92:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006b96:	d824      	bhi.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006b98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006b9c:	d018      	beq.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006b9e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006ba2:	d81e      	bhi.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d003      	beq.n	8006bb0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8006ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bac:	d007      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006bae:	e018      	b.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bb0:	4b16      	ldr	r3, [pc, #88]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb4:	4a15      	ldr	r2, [pc, #84]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006bbc:	e017      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f001 f8a5 	bl	8007d14 <RCCEx_PLL2_Config>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006bce:	e00e      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3324      	adds	r3, #36	; 0x24
 8006bd4:	2100      	movs	r1, #0
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f001 f94e 	bl	8007e78 <RCCEx_PLL3_Config>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006be0:	e005      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	75fb      	strb	r3, [r7, #23]
      break;
 8006be6:	e002      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006be8:	bf00      	nop
 8006bea:	e000      	b.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8006bec:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bee:	7dfb      	ldrb	r3, [r7, #23]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d10d      	bne.n	8006c10 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006bf4:	4b05      	ldr	r3, [pc, #20]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006c02:	4902      	ldr	r1, [pc, #8]	; (8006c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8006c04:	4313      	orrs	r3, r2
 8006c06:	658b      	str	r3, [r1, #88]	; 0x58
 8006c08:	e004      	b.n	8006c14 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8006c0a:	bf00      	nop
 8006c0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c10:	7dfb      	ldrb	r3, [r7, #23]
 8006c12:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d032      	beq.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c24:	2b30      	cmp	r3, #48	; 0x30
 8006c26:	d01c      	beq.n	8006c62 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8006c28:	2b30      	cmp	r3, #48	; 0x30
 8006c2a:	d817      	bhi.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006c2c:	2b20      	cmp	r3, #32
 8006c2e:	d00c      	beq.n	8006c4a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8006c30:	2b20      	cmp	r3, #32
 8006c32:	d813      	bhi.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x344>
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d016      	beq.n	8006c66 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006c38:	2b10      	cmp	r3, #16
 8006c3a:	d10f      	bne.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c3c:	4baf      	ldr	r3, [pc, #700]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c40:	4aae      	ldr	r2, [pc, #696]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c46:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006c48:	e00e      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	2102      	movs	r1, #2
 8006c50:	4618      	mov	r0, r3
 8006c52:	f001 f85f 	bl	8007d14 <RCCEx_PLL2_Config>
 8006c56:	4603      	mov	r3, r0
 8006c58:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006c5a:	e005      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	75fb      	strb	r3, [r7, #23]
      break;
 8006c60:	e002      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006c62:	bf00      	nop
 8006c64:	e000      	b.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8006c66:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c68:	7dfb      	ldrb	r3, [r7, #23]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d109      	bne.n	8006c82 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006c6e:	4ba3      	ldr	r3, [pc, #652]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c72:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006c7a:	49a0      	ldr	r1, [pc, #640]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006c80:	e001      	b.n	8006c86 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c82:	7dfb      	ldrb	r3, [r7, #23]
 8006c84:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d047      	beq.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c96:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006c9a:	d030      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8006c9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006ca0:	d82a      	bhi.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006ca2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006ca6:	d02c      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8006ca8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006cac:	d824      	bhi.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb2:	d018      	beq.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8006cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cb8:	d81e      	bhi.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d003      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006cbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cc2:	d007      	beq.n	8006cd4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006cc4:	e018      	b.n	8006cf8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cc6:	4b8d      	ldr	r3, [pc, #564]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cca:	4a8c      	ldr	r2, [pc, #560]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cd0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006cd2:	e017      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	3304      	adds	r3, #4
 8006cd8:	2100      	movs	r1, #0
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f001 f81a 	bl	8007d14 <RCCEx_PLL2_Config>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006ce4:	e00e      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	3324      	adds	r3, #36	; 0x24
 8006cea:	2100      	movs	r1, #0
 8006cec:	4618      	mov	r0, r3
 8006cee:	f001 f8c3 	bl	8007e78 <RCCEx_PLL3_Config>
 8006cf2:	4603      	mov	r3, r0
 8006cf4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006cf6:	e005      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cf8:	2301      	movs	r3, #1
 8006cfa:	75fb      	strb	r3, [r7, #23]
      break;
 8006cfc:	e002      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006cfe:	bf00      	nop
 8006d00:	e000      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 8006d02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d04:	7dfb      	ldrb	r3, [r7, #23]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d109      	bne.n	8006d1e <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006d0a:	4b7c      	ldr	r3, [pc, #496]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d0e:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d16:	4979      	ldr	r1, [pc, #484]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	650b      	str	r3, [r1, #80]	; 0x50
 8006d1c:	e001      	b.n	8006d22 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d1e:	7dfb      	ldrb	r3, [r7, #23]
 8006d20:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d049      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d36:	d02e      	beq.n	8006d96 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 8006d38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d3c:	d828      	bhi.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006d3e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d42:	d02a      	beq.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x482>
 8006d44:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006d48:	d822      	bhi.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006d4a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d4e:	d026      	beq.n	8006d9e <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006d50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d54:	d81c      	bhi.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006d56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d5a:	d010      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x466>
 8006d5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006d60:	d816      	bhi.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d01d      	beq.n	8006da2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8006d66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d6a:	d111      	bne.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	3304      	adds	r3, #4
 8006d70:	2101      	movs	r1, #1
 8006d72:	4618      	mov	r0, r3
 8006d74:	f000 ffce 	bl	8007d14 <RCCEx_PLL2_Config>
 8006d78:	4603      	mov	r3, r0
 8006d7a:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006d7c:	e012      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	3324      	adds	r3, #36	; 0x24
 8006d82:	2101      	movs	r1, #1
 8006d84:	4618      	mov	r0, r3
 8006d86:	f001 f877 	bl	8007e78 <RCCEx_PLL3_Config>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006d8e:	e009      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d90:	2301      	movs	r3, #1
 8006d92:	75fb      	strb	r3, [r7, #23]
      break;
 8006d94:	e006      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006d96:	bf00      	nop
 8006d98:	e004      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006d9a:	bf00      	nop
 8006d9c:	e002      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006d9e:	bf00      	nop
 8006da0:	e000      	b.n	8006da4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8006da2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d109      	bne.n	8006dbe <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006daa:	4b54      	ldr	r3, [pc, #336]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dae:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006db6:	4951      	ldr	r1, [pc, #324]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006db8:	4313      	orrs	r3, r2
 8006dba:	650b      	str	r3, [r1, #80]	; 0x50
 8006dbc:	e001      	b.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006dbe:	7dfb      	ldrb	r3, [r7, #23]
 8006dc0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d04b      	beq.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006dd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006dd8:	d02e      	beq.n	8006e38 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8006dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006dde:	d828      	bhi.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006de0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de4:	d02a      	beq.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8006de6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006dea:	d822      	bhi.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006dec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006df0:	d026      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x528>
 8006df2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006df6:	d81c      	bhi.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006df8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006dfc:	d010      	beq.n	8006e20 <HAL_RCCEx_PeriphCLKConfig+0x508>
 8006dfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e02:	d816      	bhi.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d01d      	beq.n	8006e44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006e08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e0c:	d111      	bne.n	8006e32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3304      	adds	r3, #4
 8006e12:	2101      	movs	r1, #1
 8006e14:	4618      	mov	r0, r3
 8006e16:	f000 ff7d 	bl	8007d14 <RCCEx_PLL2_Config>
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006e1e:	e012      	b.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	3324      	adds	r3, #36	; 0x24
 8006e24:	2101      	movs	r1, #1
 8006e26:	4618      	mov	r0, r3
 8006e28:	f001 f826 	bl	8007e78 <RCCEx_PLL3_Config>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006e30:	e009      	b.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	75fb      	strb	r3, [r7, #23]
      break;
 8006e36:	e006      	b.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006e38:	bf00      	nop
 8006e3a:	e004      	b.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006e3c:	bf00      	nop
 8006e3e:	e002      	b.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006e40:	bf00      	nop
 8006e42:	e000      	b.n	8006e46 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 8006e44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e46:	7dfb      	ldrb	r3, [r7, #23]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10a      	bne.n	8006e62 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006e4c:	4b2b      	ldr	r3, [pc, #172]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e50:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006e5a:	4928      	ldr	r1, [pc, #160]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	658b      	str	r3, [r1, #88]	; 0x58
 8006e60:	e001      	b.n	8006e66 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e62:	7dfb      	ldrb	r3, [r7, #23]
 8006e64:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d02f      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e7a:	d00e      	beq.n	8006e9a <HAL_RCCEx_PeriphCLKConfig+0x582>
 8006e7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e80:	d814      	bhi.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x594>
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d015      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8006e86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e8a:	d10f      	bne.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006e8c:	4b1b      	ldr	r3, [pc, #108]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e90:	4a1a      	ldr	r2, [pc, #104]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e96:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006e98:	e00c      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	2101      	movs	r1, #1
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f000 ff37 	bl	8007d14 <RCCEx_PLL2_Config>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006eaa:	e003      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006eac:	2301      	movs	r3, #1
 8006eae:	75fb      	strb	r3, [r7, #23]
      break;
 8006eb0:	e000      	b.n	8006eb4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8006eb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006eb4:	7dfb      	ldrb	r3, [r7, #23]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d109      	bne.n	8006ece <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006eba:	4b10      	ldr	r3, [pc, #64]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ebe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ec6:	490d      	ldr	r1, [pc, #52]	; (8006efc <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	650b      	str	r3, [r1, #80]	; 0x50
 8006ecc:	e001      	b.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ece:	7dfb      	ldrb	r3, [r7, #23]
 8006ed0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d033      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee2:	2b03      	cmp	r3, #3
 8006ee4:	d81c      	bhi.n	8006f20 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006ee6:	a201      	add	r2, pc, #4	; (adr r2, 8006eec <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8006ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eec:	08006f27 	.word	0x08006f27
 8006ef0:	08006f01 	.word	0x08006f01
 8006ef4:	08006f0f 	.word	0x08006f0f
 8006ef8:	08006f27 	.word	0x08006f27
 8006efc:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f00:	4bb8      	ldr	r3, [pc, #736]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f04:	4ab7      	ldr	r2, [pc, #732]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006f0c:	e00c      	b.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	3304      	adds	r3, #4
 8006f12:	2102      	movs	r1, #2
 8006f14:	4618      	mov	r0, r3
 8006f16:	f000 fefd 	bl	8007d14 <RCCEx_PLL2_Config>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006f1e:	e003      	b.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006f20:	2301      	movs	r3, #1
 8006f22:	75fb      	strb	r3, [r7, #23]
      break;
 8006f24:	e000      	b.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006f26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d109      	bne.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006f2e:	4bad      	ldr	r3, [pc, #692]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f32:	f023 0203 	bic.w	r2, r3, #3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f3a:	49aa      	ldr	r1, [pc, #680]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006f3c:	4313      	orrs	r3, r2
 8006f3e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f40:	e001      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f42:	7dfb      	ldrb	r3, [r7, #23]
 8006f44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	f000 8086 	beq.w	8007060 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006f54:	4ba4      	ldr	r3, [pc, #656]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	4aa3      	ldr	r2, [pc, #652]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006f5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006f60:	f7fb feb4 	bl	8002ccc <HAL_GetTick>
 8006f64:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f66:	e009      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f68:	f7fb feb0 	bl	8002ccc <HAL_GetTick>
 8006f6c:	4602      	mov	r2, r0
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	1ad3      	subs	r3, r2, r3
 8006f72:	2b64      	cmp	r3, #100	; 0x64
 8006f74:	d902      	bls.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	75fb      	strb	r3, [r7, #23]
        break;
 8006f7a:	e005      	b.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006f7c:	4b9a      	ldr	r3, [pc, #616]	; (80071e8 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d0ef      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006f88:	7dfb      	ldrb	r3, [r7, #23]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d166      	bne.n	800705c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006f8e:	4b95      	ldr	r3, [pc, #596]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006f90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006f98:	4053      	eors	r3, r2
 8006f9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d013      	beq.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006fa2:	4b90      	ldr	r3, [pc, #576]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006faa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006fac:	4b8d      	ldr	r3, [pc, #564]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fb0:	4a8c      	ldr	r2, [pc, #560]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006fb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fb6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006fb8:	4b8a      	ldr	r3, [pc, #552]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fbc:	4a89      	ldr	r2, [pc, #548]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006fbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fc2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006fc4:	4a87      	ldr	r2, [pc, #540]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006fd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fd4:	d115      	bne.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fd6:	f7fb fe79 	bl	8002ccc <HAL_GetTick>
 8006fda:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006fdc:	e00b      	b.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fde:	f7fb fe75 	bl	8002ccc <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d902      	bls.n	8006ff6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	75fb      	strb	r3, [r7, #23]
            break;
 8006ff4:	e005      	b.n	8007002 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ff6:	4b7b      	ldr	r3, [pc, #492]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8006ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ffa:	f003 0302 	and.w	r3, r3, #2
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d0ed      	beq.n	8006fde <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007002:	7dfb      	ldrb	r3, [r7, #23]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d126      	bne.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800700e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007012:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007016:	d10d      	bne.n	8007034 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007018:	4b72      	ldr	r3, [pc, #456]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007026:	0919      	lsrs	r1, r3, #4
 8007028:	4b70      	ldr	r3, [pc, #448]	; (80071ec <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 800702a:	400b      	ands	r3, r1
 800702c:	496d      	ldr	r1, [pc, #436]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800702e:	4313      	orrs	r3, r2
 8007030:	610b      	str	r3, [r1, #16]
 8007032:	e005      	b.n	8007040 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007034:	4b6b      	ldr	r3, [pc, #428]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	4a6a      	ldr	r2, [pc, #424]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800703a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800703e:	6113      	str	r3, [r2, #16]
 8007040:	4b68      	ldr	r3, [pc, #416]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007042:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800704a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800704e:	4965      	ldr	r1, [pc, #404]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007050:	4313      	orrs	r3, r2
 8007052:	670b      	str	r3, [r1, #112]	; 0x70
 8007054:	e004      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007056:	7dfb      	ldrb	r3, [r7, #23]
 8007058:	75bb      	strb	r3, [r7, #22]
 800705a:	e001      	b.n	8007060 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800705c:	7dfb      	ldrb	r3, [r7, #23]
 800705e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b00      	cmp	r3, #0
 800706a:	d07e      	beq.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007070:	2b28      	cmp	r3, #40	; 0x28
 8007072:	d867      	bhi.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007074:	a201      	add	r2, pc, #4	; (adr r2, 800707c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800707a:	bf00      	nop
 800707c:	0800714b 	.word	0x0800714b
 8007080:	08007145 	.word	0x08007145
 8007084:	08007145 	.word	0x08007145
 8007088:	08007145 	.word	0x08007145
 800708c:	08007145 	.word	0x08007145
 8007090:	08007145 	.word	0x08007145
 8007094:	08007145 	.word	0x08007145
 8007098:	08007145 	.word	0x08007145
 800709c:	08007121 	.word	0x08007121
 80070a0:	08007145 	.word	0x08007145
 80070a4:	08007145 	.word	0x08007145
 80070a8:	08007145 	.word	0x08007145
 80070ac:	08007145 	.word	0x08007145
 80070b0:	08007145 	.word	0x08007145
 80070b4:	08007145 	.word	0x08007145
 80070b8:	08007145 	.word	0x08007145
 80070bc:	08007133 	.word	0x08007133
 80070c0:	08007145 	.word	0x08007145
 80070c4:	08007145 	.word	0x08007145
 80070c8:	08007145 	.word	0x08007145
 80070cc:	08007145 	.word	0x08007145
 80070d0:	08007145 	.word	0x08007145
 80070d4:	08007145 	.word	0x08007145
 80070d8:	08007145 	.word	0x08007145
 80070dc:	0800714b 	.word	0x0800714b
 80070e0:	08007145 	.word	0x08007145
 80070e4:	08007145 	.word	0x08007145
 80070e8:	08007145 	.word	0x08007145
 80070ec:	08007145 	.word	0x08007145
 80070f0:	08007145 	.word	0x08007145
 80070f4:	08007145 	.word	0x08007145
 80070f8:	08007145 	.word	0x08007145
 80070fc:	0800714b 	.word	0x0800714b
 8007100:	08007145 	.word	0x08007145
 8007104:	08007145 	.word	0x08007145
 8007108:	08007145 	.word	0x08007145
 800710c:	08007145 	.word	0x08007145
 8007110:	08007145 	.word	0x08007145
 8007114:	08007145 	.word	0x08007145
 8007118:	08007145 	.word	0x08007145
 800711c:	0800714b 	.word	0x0800714b
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	3304      	adds	r3, #4
 8007124:	2101      	movs	r1, #1
 8007126:	4618      	mov	r0, r3
 8007128:	f000 fdf4 	bl	8007d14 <RCCEx_PLL2_Config>
 800712c:	4603      	mov	r3, r0
 800712e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007130:	e00c      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	3324      	adds	r3, #36	; 0x24
 8007136:	2101      	movs	r1, #1
 8007138:	4618      	mov	r0, r3
 800713a:	f000 fe9d 	bl	8007e78 <RCCEx_PLL3_Config>
 800713e:	4603      	mov	r3, r0
 8007140:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007142:	e003      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007144:	2301      	movs	r3, #1
 8007146:	75fb      	strb	r3, [r7, #23]
      break;
 8007148:	e000      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 800714a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800714c:	7dfb      	ldrb	r3, [r7, #23]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d109      	bne.n	8007166 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007152:	4b24      	ldr	r3, [pc, #144]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007156:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800715e:	4921      	ldr	r1, [pc, #132]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8007160:	4313      	orrs	r3, r2
 8007162:	654b      	str	r3, [r1, #84]	; 0x54
 8007164:	e001      	b.n	800716a <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007166:	7dfb      	ldrb	r3, [r7, #23]
 8007168:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f003 0302 	and.w	r3, r3, #2
 8007172:	2b00      	cmp	r3, #0
 8007174:	d03e      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800717a:	2b05      	cmp	r3, #5
 800717c:	d820      	bhi.n	80071c0 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 800717e:	a201      	add	r2, pc, #4	; (adr r2, 8007184 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8007180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007184:	080071c7 	.word	0x080071c7
 8007188:	0800719d 	.word	0x0800719d
 800718c:	080071af 	.word	0x080071af
 8007190:	080071c7 	.word	0x080071c7
 8007194:	080071c7 	.word	0x080071c7
 8007198:	080071c7 	.word	0x080071c7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	3304      	adds	r3, #4
 80071a0:	2101      	movs	r1, #1
 80071a2:	4618      	mov	r0, r3
 80071a4:	f000 fdb6 	bl	8007d14 <RCCEx_PLL2_Config>
 80071a8:	4603      	mov	r3, r0
 80071aa:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80071ac:	e00c      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	3324      	adds	r3, #36	; 0x24
 80071b2:	2101      	movs	r1, #1
 80071b4:	4618      	mov	r0, r3
 80071b6:	f000 fe5f 	bl	8007e78 <RCCEx_PLL3_Config>
 80071ba:	4603      	mov	r3, r0
 80071bc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80071be:	e003      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	75fb      	strb	r3, [r7, #23]
      break;
 80071c4:	e000      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 80071c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071c8:	7dfb      	ldrb	r3, [r7, #23]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d110      	bne.n	80071f0 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80071ce:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80071d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d2:	f023 0207 	bic.w	r2, r3, #7
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071da:	4902      	ldr	r1, [pc, #8]	; (80071e4 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	654b      	str	r3, [r1, #84]	; 0x54
 80071e0:	e008      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 80071e2:	bf00      	nop
 80071e4:	58024400 	.word	0x58024400
 80071e8:	58024800 	.word	0x58024800
 80071ec:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071f0:	7dfb      	ldrb	r3, [r7, #23]
 80071f2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f003 0304 	and.w	r3, r3, #4
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d039      	beq.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007206:	2b05      	cmp	r3, #5
 8007208:	d820      	bhi.n	800724c <HAL_RCCEx_PeriphCLKConfig+0x934>
 800720a:	a201      	add	r2, pc, #4	; (adr r2, 8007210 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 800720c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007210:	08007253 	.word	0x08007253
 8007214:	08007229 	.word	0x08007229
 8007218:	0800723b 	.word	0x0800723b
 800721c:	08007253 	.word	0x08007253
 8007220:	08007253 	.word	0x08007253
 8007224:	08007253 	.word	0x08007253
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	3304      	adds	r3, #4
 800722c:	2101      	movs	r1, #1
 800722e:	4618      	mov	r0, r3
 8007230:	f000 fd70 	bl	8007d14 <RCCEx_PLL2_Config>
 8007234:	4603      	mov	r3, r0
 8007236:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007238:	e00c      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	3324      	adds	r3, #36	; 0x24
 800723e:	2101      	movs	r1, #1
 8007240:	4618      	mov	r0, r3
 8007242:	f000 fe19 	bl	8007e78 <RCCEx_PLL3_Config>
 8007246:	4603      	mov	r3, r0
 8007248:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800724a:	e003      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	75fb      	strb	r3, [r7, #23]
      break;
 8007250:	e000      	b.n	8007254 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8007252:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007254:	7dfb      	ldrb	r3, [r7, #23]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d10a      	bne.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800725a:	4bb7      	ldr	r3, [pc, #732]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800725c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800725e:	f023 0207 	bic.w	r2, r3, #7
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007268:	49b3      	ldr	r1, [pc, #716]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800726a:	4313      	orrs	r3, r2
 800726c:	658b      	str	r3, [r1, #88]	; 0x58
 800726e:	e001      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007270:	7dfb      	ldrb	r3, [r7, #23]
 8007272:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f003 0320 	and.w	r3, r3, #32
 800727c:	2b00      	cmp	r3, #0
 800727e:	d04b      	beq.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007286:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800728a:	d02e      	beq.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 800728c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007290:	d828      	bhi.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8007292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007296:	d02a      	beq.n	80072ee <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800729c:	d822      	bhi.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800729e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072a2:	d026      	beq.n	80072f2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80072a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80072a8:	d81c      	bhi.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80072aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072ae:	d010      	beq.n	80072d2 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 80072b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072b4:	d816      	bhi.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d01d      	beq.n	80072f6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80072ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072be:	d111      	bne.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	3304      	adds	r3, #4
 80072c4:	2100      	movs	r1, #0
 80072c6:	4618      	mov	r0, r3
 80072c8:	f000 fd24 	bl	8007d14 <RCCEx_PLL2_Config>
 80072cc:	4603      	mov	r3, r0
 80072ce:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80072d0:	e012      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	3324      	adds	r3, #36	; 0x24
 80072d6:	2102      	movs	r1, #2
 80072d8:	4618      	mov	r0, r3
 80072da:	f000 fdcd 	bl	8007e78 <RCCEx_PLL3_Config>
 80072de:	4603      	mov	r3, r0
 80072e0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80072e2:	e009      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	75fb      	strb	r3, [r7, #23]
      break;
 80072e8:	e006      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80072ea:	bf00      	nop
 80072ec:	e004      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80072ee:	bf00      	nop
 80072f0:	e002      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80072f2:	bf00      	nop
 80072f4:	e000      	b.n	80072f8 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80072f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072f8:	7dfb      	ldrb	r3, [r7, #23]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10a      	bne.n	8007314 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80072fe:	4b8e      	ldr	r3, [pc, #568]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007302:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800730c:	498a      	ldr	r1, [pc, #552]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800730e:	4313      	orrs	r3, r2
 8007310:	654b      	str	r3, [r1, #84]	; 0x54
 8007312:	e001      	b.n	8007318 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007314:	7dfb      	ldrb	r3, [r7, #23]
 8007316:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007320:	2b00      	cmp	r3, #0
 8007322:	d04b      	beq.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800732a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800732e:	d02e      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0xa76>
 8007330:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8007334:	d828      	bhi.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800733a:	d02a      	beq.n	8007392 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800733c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007340:	d822      	bhi.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8007342:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007346:	d026      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8007348:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800734c:	d81c      	bhi.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800734e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007352:	d010      	beq.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8007354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007358:	d816      	bhi.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800735a:	2b00      	cmp	r3, #0
 800735c:	d01d      	beq.n	800739a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800735e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007362:	d111      	bne.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	3304      	adds	r3, #4
 8007368:	2100      	movs	r1, #0
 800736a:	4618      	mov	r0, r3
 800736c:	f000 fcd2 	bl	8007d14 <RCCEx_PLL2_Config>
 8007370:	4603      	mov	r3, r0
 8007372:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007374:	e012      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	3324      	adds	r3, #36	; 0x24
 800737a:	2102      	movs	r1, #2
 800737c:	4618      	mov	r0, r3
 800737e:	f000 fd7b 	bl	8007e78 <RCCEx_PLL3_Config>
 8007382:	4603      	mov	r3, r0
 8007384:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8007386:	e009      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007388:	2301      	movs	r3, #1
 800738a:	75fb      	strb	r3, [r7, #23]
      break;
 800738c:	e006      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800738e:	bf00      	nop
 8007390:	e004      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007392:	bf00      	nop
 8007394:	e002      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8007396:	bf00      	nop
 8007398:	e000      	b.n	800739c <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800739a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800739c:	7dfb      	ldrb	r3, [r7, #23]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d10a      	bne.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80073a2:	4b65      	ldr	r3, [pc, #404]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80073a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80073a6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80073b0:	4961      	ldr	r1, [pc, #388]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	658b      	str	r3, [r1, #88]	; 0x58
 80073b6:	e001      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d04b      	beq.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80073ce:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80073d2:	d02e      	beq.n	8007432 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 80073d4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80073d8:	d828      	bhi.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80073da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073de:	d02a      	beq.n	8007436 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 80073e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073e4:	d822      	bhi.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80073e6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80073ea:	d026      	beq.n	800743a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80073ec:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80073f0:	d81c      	bhi.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80073f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073f6:	d010      	beq.n	800741a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80073f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073fc:	d816      	bhi.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d01d      	beq.n	800743e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8007402:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007406:	d111      	bne.n	800742c <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	3304      	adds	r3, #4
 800740c:	2100      	movs	r1, #0
 800740e:	4618      	mov	r0, r3
 8007410:	f000 fc80 	bl	8007d14 <RCCEx_PLL2_Config>
 8007414:	4603      	mov	r3, r0
 8007416:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007418:	e012      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	3324      	adds	r3, #36	; 0x24
 800741e:	2102      	movs	r1, #2
 8007420:	4618      	mov	r0, r3
 8007422:	f000 fd29 	bl	8007e78 <RCCEx_PLL3_Config>
 8007426:	4603      	mov	r3, r0
 8007428:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800742a:	e009      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	75fb      	strb	r3, [r7, #23]
      break;
 8007430:	e006      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007432:	bf00      	nop
 8007434:	e004      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 8007436:	bf00      	nop
 8007438:	e002      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800743a:	bf00      	nop
 800743c:	e000      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 800743e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007440:	7dfb      	ldrb	r3, [r7, #23]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10a      	bne.n	800745c <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007446:	4b3c      	ldr	r3, [pc, #240]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800744a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007454:	4938      	ldr	r1, [pc, #224]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007456:	4313      	orrs	r3, r2
 8007458:	658b      	str	r3, [r1, #88]	; 0x58
 800745a:	e001      	b.n	8007460 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800745c:	7dfb      	ldrb	r3, [r7, #23]
 800745e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0308 	and.w	r3, r3, #8
 8007468:	2b00      	cmp	r3, #0
 800746a:	d01a      	beq.n	80074a2 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007476:	d10a      	bne.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	3324      	adds	r3, #36	; 0x24
 800747c:	2102      	movs	r1, #2
 800747e:	4618      	mov	r0, r3
 8007480:	f000 fcfa 	bl	8007e78 <RCCEx_PLL3_Config>
 8007484:	4603      	mov	r3, r0
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800748e:	4b2a      	ldr	r3, [pc, #168]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8007490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007492:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800749c:	4926      	ldr	r1, [pc, #152]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800749e:	4313      	orrs	r3, r2
 80074a0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 0310 	and.w	r3, r3, #16
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d01a      	beq.n	80074e4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074b8:	d10a      	bne.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	3324      	adds	r3, #36	; 0x24
 80074be:	2102      	movs	r1, #2
 80074c0:	4618      	mov	r0, r3
 80074c2:	f000 fcd9 	bl	8007e78 <RCCEx_PLL3_Config>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d001      	beq.n	80074d0 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80074d0:	4b19      	ldr	r3, [pc, #100]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80074d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80074de:	4916      	ldr	r1, [pc, #88]	; (8007538 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d036      	beq.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80074f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80074fa:	d01f      	beq.n	800753c <HAL_RCCEx_PeriphCLKConfig+0xc24>
 80074fc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007500:	d817      	bhi.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8007502:	2b00      	cmp	r3, #0
 8007504:	d003      	beq.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8007506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800750a:	d009      	beq.n	8007520 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 800750c:	e011      	b.n	8007532 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	3304      	adds	r3, #4
 8007512:	2100      	movs	r1, #0
 8007514:	4618      	mov	r0, r3
 8007516:	f000 fbfd 	bl	8007d14 <RCCEx_PLL2_Config>
 800751a:	4603      	mov	r3, r0
 800751c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800751e:	e00e      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	3324      	adds	r3, #36	; 0x24
 8007524:	2102      	movs	r1, #2
 8007526:	4618      	mov	r0, r3
 8007528:	f000 fca6 	bl	8007e78 <RCCEx_PLL3_Config>
 800752c:	4603      	mov	r3, r0
 800752e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8007530:	e005      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	75fb      	strb	r3, [r7, #23]
      break;
 8007536:	e002      	b.n	800753e <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8007538:	58024400 	.word	0x58024400
      break;
 800753c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800753e:	7dfb      	ldrb	r3, [r7, #23]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d10a      	bne.n	800755a <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007544:	4b93      	ldr	r3, [pc, #588]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007548:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007552:	4990      	ldr	r1, [pc, #576]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007554:	4313      	orrs	r3, r2
 8007556:	658b      	str	r3, [r1, #88]	; 0x58
 8007558:	e001      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800755a:	7dfb      	ldrb	r3, [r7, #23]
 800755c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007566:	2b00      	cmp	r3, #0
 8007568:	d033      	beq.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007570:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007574:	d01c      	beq.n	80075b0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8007576:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800757a:	d816      	bhi.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xc92>
 800757c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007580:	d003      	beq.n	800758a <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8007582:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007586:	d007      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8007588:	e00f      	b.n	80075aa <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800758a:	4b82      	ldr	r3, [pc, #520]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800758c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758e:	4a81      	ldr	r2, [pc, #516]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007590:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007594:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8007596:	e00c      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	3324      	adds	r3, #36	; 0x24
 800759c:	2101      	movs	r1, #1
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 fc6a 	bl	8007e78 <RCCEx_PLL3_Config>
 80075a4:	4603      	mov	r3, r0
 80075a6:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80075a8:	e003      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	75fb      	strb	r3, [r7, #23]
      break;
 80075ae:	e000      	b.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 80075b0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80075b2:	7dfb      	ldrb	r3, [r7, #23]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10a      	bne.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80075b8:	4b76      	ldr	r3, [pc, #472]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075bc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075c6:	4973      	ldr	r1, [pc, #460]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	654b      	str	r3, [r1, #84]	; 0x54
 80075cc:	e001      	b.n	80075d2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075ce:	7dfb      	ldrb	r3, [r7, #23]
 80075d0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d029      	beq.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d003      	beq.n	80075ee <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 80075e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075ea:	d007      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0xce4>
 80075ec:	e00f      	b.n	800760e <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80075ee:	4b69      	ldr	r3, [pc, #420]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f2:	4a68      	ldr	r2, [pc, #416]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80075f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80075f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80075fa:	e00b      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	3304      	adds	r3, #4
 8007600:	2102      	movs	r1, #2
 8007602:	4618      	mov	r0, r3
 8007604:	f000 fb86 	bl	8007d14 <RCCEx_PLL2_Config>
 8007608:	4603      	mov	r3, r0
 800760a:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800760c:	e002      	b.n	8007614 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 800760e:	2301      	movs	r3, #1
 8007610:	75fb      	strb	r3, [r7, #23]
      break;
 8007612:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007614:	7dfb      	ldrb	r3, [r7, #23]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d109      	bne.n	800762e <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800761a:	4b5e      	ldr	r3, [pc, #376]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800761c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800761e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007626:	495b      	ldr	r1, [pc, #364]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007628:	4313      	orrs	r3, r2
 800762a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800762c:	e001      	b.n	8007632 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800762e:	7dfb      	ldrb	r3, [r7, #23]
 8007630:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800763a:	2b00      	cmp	r3, #0
 800763c:	d00a      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	3324      	adds	r3, #36	; 0x24
 8007642:	2102      	movs	r1, #2
 8007644:	4618      	mov	r0, r3
 8007646:	f000 fc17 	bl	8007e78 <RCCEx_PLL3_Config>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d001      	beq.n	8007654 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800765c:	2b00      	cmp	r3, #0
 800765e:	d030      	beq.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007664:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007668:	d017      	beq.n	800769a <HAL_RCCEx_PeriphCLKConfig+0xd82>
 800766a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800766e:	d811      	bhi.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8007670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007674:	d013      	beq.n	800769e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800767a:	d80b      	bhi.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 800767c:	2b00      	cmp	r3, #0
 800767e:	d010      	beq.n	80076a2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8007680:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007684:	d106      	bne.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007686:	4b43      	ldr	r3, [pc, #268]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800768a:	4a42      	ldr	r2, [pc, #264]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800768c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007690:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8007692:	e007      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007694:	2301      	movs	r3, #1
 8007696:	75fb      	strb	r3, [r7, #23]
      break;
 8007698:	e004      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800769a:	bf00      	nop
 800769c:	e002      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 800769e:	bf00      	nop
 80076a0:	e000      	b.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 80076a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80076a4:	7dfb      	ldrb	r3, [r7, #23]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d109      	bne.n	80076be <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80076aa:	4b3a      	ldr	r3, [pc, #232]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80076ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076b6:	4937      	ldr	r1, [pc, #220]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80076b8:	4313      	orrs	r3, r2
 80076ba:	654b      	str	r3, [r1, #84]	; 0x54
 80076bc:	e001      	b.n	80076c2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076be:	7dfb      	ldrb	r3, [r7, #23]
 80076c0:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d008      	beq.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80076ce:	4b31      	ldr	r3, [pc, #196]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80076d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076d2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076da:	492e      	ldr	r1, [pc, #184]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80076dc:	4313      	orrs	r3, r2
 80076de:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d009      	beq.n	8007700 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80076ec:	4b29      	ldr	r3, [pc, #164]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80076ee:	691b      	ldr	r3, [r3, #16]
 80076f0:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80076fa:	4926      	ldr	r1, [pc, #152]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 80076fc:	4313      	orrs	r3, r2
 80076fe:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007708:	2b00      	cmp	r3, #0
 800770a:	d008      	beq.n	800771e <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800770c:	4b21      	ldr	r3, [pc, #132]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800770e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007710:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007718:	491e      	ldr	r1, [pc, #120]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800771a:	4313      	orrs	r3, r2
 800771c:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00d      	beq.n	8007746 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800772a:	4b1a      	ldr	r3, [pc, #104]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	4a19      	ldr	r2, [pc, #100]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007730:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007734:	6113      	str	r3, [r2, #16]
 8007736:	4b17      	ldr	r3, [pc, #92]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007738:	691a      	ldr	r2, [r3, #16]
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007740:	4914      	ldr	r1, [pc, #80]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007742:	4313      	orrs	r3, r2
 8007744:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	2b00      	cmp	r3, #0
 800774c:	da08      	bge.n	8007760 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800774e:	4b11      	ldr	r3, [pc, #68]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8007750:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007752:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800775a:	490e      	ldr	r1, [pc, #56]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800775c:	4313      	orrs	r3, r2
 800775e:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d009      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800776c:	4b09      	ldr	r3, [pc, #36]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800776e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007770:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800777a:	4906      	ldr	r1, [pc, #24]	; (8007794 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 800777c:	4313      	orrs	r3, r2
 800777e:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8007780:	7dbb      	ldrb	r3, [r7, #22]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d101      	bne.n	800778a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	e000      	b.n	800778c <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 800778a:	2301      	movs	r3, #1
}
 800778c:	4618      	mov	r0, r3
 800778e:	3718      	adds	r7, #24
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	58024400 	.word	0x58024400

08007798 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800779c:	f7ff f860 	bl	8006860 <HAL_RCC_GetHCLKFreq>
 80077a0:	4602      	mov	r2, r0
 80077a2:	4b06      	ldr	r3, [pc, #24]	; (80077bc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80077a4:	6a1b      	ldr	r3, [r3, #32]
 80077a6:	091b      	lsrs	r3, r3, #4
 80077a8:	f003 0307 	and.w	r3, r3, #7
 80077ac:	4904      	ldr	r1, [pc, #16]	; (80077c0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80077ae:	5ccb      	ldrb	r3, [r1, r3]
 80077b0:	f003 031f 	and.w	r3, r3, #31
 80077b4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	58024400 	.word	0x58024400
 80077c0:	0800d9e8 	.word	0x0800d9e8

080077c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b089      	sub	sp, #36	; 0x24
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077cc:	4ba1      	ldr	r3, [pc, #644]	; (8007a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d0:	f003 0303 	and.w	r3, r3, #3
 80077d4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80077d6:	4b9f      	ldr	r3, [pc, #636]	; (8007a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077da:	0b1b      	lsrs	r3, r3, #12
 80077dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077e0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80077e2:	4b9c      	ldr	r3, [pc, #624]	; (8007a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e6:	091b      	lsrs	r3, r3, #4
 80077e8:	f003 0301 	and.w	r3, r3, #1
 80077ec:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80077ee:	4b99      	ldr	r3, [pc, #612]	; (8007a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077f2:	08db      	lsrs	r3, r3, #3
 80077f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077f8:	693a      	ldr	r2, [r7, #16]
 80077fa:	fb02 f303 	mul.w	r3, r2, r3
 80077fe:	ee07 3a90 	vmov	s15, r3
 8007802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007806:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 8111 	beq.w	8007a34 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	2b02      	cmp	r3, #2
 8007816:	f000 8083 	beq.w	8007920 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800781a:	69bb      	ldr	r3, [r7, #24]
 800781c:	2b02      	cmp	r3, #2
 800781e:	f200 80a1 	bhi.w	8007964 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d003      	beq.n	8007830 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	2b01      	cmp	r3, #1
 800782c:	d056      	beq.n	80078dc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800782e:	e099      	b.n	8007964 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007830:	4b88      	ldr	r3, [pc, #544]	; (8007a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0320 	and.w	r3, r3, #32
 8007838:	2b00      	cmp	r3, #0
 800783a:	d02d      	beq.n	8007898 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800783c:	4b85      	ldr	r3, [pc, #532]	; (8007a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	08db      	lsrs	r3, r3, #3
 8007842:	f003 0303 	and.w	r3, r3, #3
 8007846:	4a84      	ldr	r2, [pc, #528]	; (8007a58 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007848:	fa22 f303 	lsr.w	r3, r2, r3
 800784c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	ee07 3a90 	vmov	s15, r3
 8007854:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	ee07 3a90 	vmov	s15, r3
 800785e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007866:	4b7b      	ldr	r3, [pc, #492]	; (8007a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800786a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800786e:	ee07 3a90 	vmov	s15, r3
 8007872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007876:	ed97 6a03 	vldr	s12, [r7, #12]
 800787a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007a5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800787e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800788a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800788e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007892:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007896:	e087      	b.n	80079a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	ee07 3a90 	vmov	s15, r3
 800789e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007a60 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80078a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078aa:	4b6a      	ldr	r3, [pc, #424]	; (8007a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078b2:	ee07 3a90 	vmov	s15, r3
 80078b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80078be:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007a5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80078c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078da:	e065      	b.n	80079a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	ee07 3a90 	vmov	s15, r3
 80078e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078e6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80078ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ee:	4b59      	ldr	r3, [pc, #356]	; (8007a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80078f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f6:	ee07 3a90 	vmov	s15, r3
 80078fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007902:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007a5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007906:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800790a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800790e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007912:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007916:	ee67 7a27 	vmul.f32	s15, s14, s15
 800791a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800791e:	e043      	b.n	80079a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	ee07 3a90 	vmov	s15, r3
 8007926:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800792a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007a68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800792e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007932:	4b48      	ldr	r3, [pc, #288]	; (8007a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007936:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800793a:	ee07 3a90 	vmov	s15, r3
 800793e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007942:	ed97 6a03 	vldr	s12, [r7, #12]
 8007946:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007a5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800794a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800794e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007952:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800795a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800795e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007962:	e021      	b.n	80079a8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	ee07 3a90 	vmov	s15, r3
 800796a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800796e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007a64 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007972:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007976:	4b37      	ldr	r3, [pc, #220]	; (8007a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800797a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800797e:	ee07 3a90 	vmov	s15, r3
 8007982:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007986:	ed97 6a03 	vldr	s12, [r7, #12]
 800798a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007a5c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800798e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007992:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007996:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800799a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800799e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079a2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079a6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80079a8:	4b2a      	ldr	r3, [pc, #168]	; (8007a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ac:	0a5b      	lsrs	r3, r3, #9
 80079ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079b2:	ee07 3a90 	vmov	s15, r3
 80079b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80079c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079ce:	ee17 2a90 	vmov	r2, s15
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80079d6:	4b1f      	ldr	r3, [pc, #124]	; (8007a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80079d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079da:	0c1b      	lsrs	r3, r3, #16
 80079dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079e0:	ee07 3a90 	vmov	s15, r3
 80079e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079f0:	edd7 6a07 	vldr	s13, [r7, #28]
 80079f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079fc:	ee17 2a90 	vmov	r2, s15
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007a04:	4b13      	ldr	r3, [pc, #76]	; (8007a54 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a08:	0e1b      	lsrs	r3, r3, #24
 8007a0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a0e:	ee07 3a90 	vmov	s15, r3
 8007a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a16:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a2a:	ee17 2a90 	vmov	r2, s15
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007a32:	e008      	b.n	8007a46 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	609a      	str	r2, [r3, #8]
}
 8007a46:	bf00      	nop
 8007a48:	3724      	adds	r7, #36	; 0x24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	58024400 	.word	0x58024400
 8007a58:	03d09000 	.word	0x03d09000
 8007a5c:	46000000 	.word	0x46000000
 8007a60:	4c742400 	.word	0x4c742400
 8007a64:	4a742400 	.word	0x4a742400
 8007a68:	4c371b00 	.word	0x4c371b00

08007a6c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b089      	sub	sp, #36	; 0x24
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007a74:	4ba1      	ldr	r3, [pc, #644]	; (8007cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a78:	f003 0303 	and.w	r3, r3, #3
 8007a7c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007a7e:	4b9f      	ldr	r3, [pc, #636]	; (8007cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a82:	0d1b      	lsrs	r3, r3, #20
 8007a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a88:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007a8a:	4b9c      	ldr	r3, [pc, #624]	; (8007cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8e:	0a1b      	lsrs	r3, r3, #8
 8007a90:	f003 0301 	and.w	r3, r3, #1
 8007a94:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007a96:	4b99      	ldr	r3, [pc, #612]	; (8007cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a9a:	08db      	lsrs	r3, r3, #3
 8007a9c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	fb02 f303 	mul.w	r3, r2, r3
 8007aa6:	ee07 3a90 	vmov	s15, r3
 8007aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	f000 8111 	beq.w	8007cdc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	f000 8083 	beq.w	8007bc8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	2b02      	cmp	r3, #2
 8007ac6:	f200 80a1 	bhi.w	8007c0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d003      	beq.n	8007ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d056      	beq.n	8007b84 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007ad6:	e099      	b.n	8007c0c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007ad8:	4b88      	ldr	r3, [pc, #544]	; (8007cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f003 0320 	and.w	r3, r3, #32
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d02d      	beq.n	8007b40 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007ae4:	4b85      	ldr	r3, [pc, #532]	; (8007cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	08db      	lsrs	r3, r3, #3
 8007aea:	f003 0303 	and.w	r3, r3, #3
 8007aee:	4a84      	ldr	r2, [pc, #528]	; (8007d00 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007af0:	fa22 f303 	lsr.w	r3, r2, r3
 8007af4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	ee07 3a90 	vmov	s15, r3
 8007afc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	ee07 3a90 	vmov	s15, r3
 8007b06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b0e:	4b7b      	ldr	r3, [pc, #492]	; (8007cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b16:	ee07 3a90 	vmov	s15, r3
 8007b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b22:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007d04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b3a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007b3e:	e087      	b.n	8007c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	ee07 3a90 	vmov	s15, r3
 8007b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b4a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007d08 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8007b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b52:	4b6a      	ldr	r3, [pc, #424]	; (8007cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b5a:	ee07 3a90 	vmov	s15, r3
 8007b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8007b66:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007d04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007b82:	e065      	b.n	8007c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007b84:	697b      	ldr	r3, [r7, #20]
 8007b86:	ee07 3a90 	vmov	s15, r3
 8007b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b8e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007d0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007b92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b96:	4b59      	ldr	r3, [pc, #356]	; (8007cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b9e:	ee07 3a90 	vmov	s15, r3
 8007ba2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007ba6:	ed97 6a03 	vldr	s12, [r7, #12]
 8007baa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007d04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bc2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007bc6:	e043      	b.n	8007c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007bc8:	697b      	ldr	r3, [r7, #20]
 8007bca:	ee07 3a90 	vmov	s15, r3
 8007bce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bd2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007d10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007bd6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007bda:	4b48      	ldr	r3, [pc, #288]	; (8007cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007be2:	ee07 3a90 	vmov	s15, r3
 8007be6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bea:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bee:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007d04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007bf2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bf6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bfa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bfe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c06:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c0a:	e021      	b.n	8007c50 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	ee07 3a90 	vmov	s15, r3
 8007c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c16:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007d0c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007c1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c1e:	4b37      	ldr	r3, [pc, #220]	; (8007cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c26:	ee07 3a90 	vmov	s15, r3
 8007c2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c32:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007d04 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007c36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c3e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c4a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c4e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007c50:	4b2a      	ldr	r3, [pc, #168]	; (8007cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c54:	0a5b      	lsrs	r3, r3, #9
 8007c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c5a:	ee07 3a90 	vmov	s15, r3
 8007c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c62:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c76:	ee17 2a90 	vmov	r2, s15
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007c7e:	4b1f      	ldr	r3, [pc, #124]	; (8007cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c82:	0c1b      	lsrs	r3, r3, #16
 8007c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c88:	ee07 3a90 	vmov	s15, r3
 8007c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c94:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007c98:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007ca4:	ee17 2a90 	vmov	r2, s15
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007cac:	4b13      	ldr	r3, [pc, #76]	; (8007cfc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb0:	0e1b      	lsrs	r3, r3, #24
 8007cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cb6:	ee07 3a90 	vmov	s15, r3
 8007cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cd2:	ee17 2a90 	vmov	r2, s15
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007cda:	e008      	b.n	8007cee <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	609a      	str	r2, [r3, #8]
}
 8007cee:	bf00      	nop
 8007cf0:	3724      	adds	r7, #36	; 0x24
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf8:	4770      	bx	lr
 8007cfa:	bf00      	nop
 8007cfc:	58024400 	.word	0x58024400
 8007d00:	03d09000 	.word	0x03d09000
 8007d04:	46000000 	.word	0x46000000
 8007d08:	4c742400 	.word	0x4c742400
 8007d0c:	4a742400 	.word	0x4a742400
 8007d10:	4c371b00 	.word	0x4c371b00

08007d14 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d1e:	2300      	movs	r3, #0
 8007d20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007d22:	4b53      	ldr	r3, [pc, #332]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d26:	f003 0303 	and.w	r3, r3, #3
 8007d2a:	2b03      	cmp	r3, #3
 8007d2c:	d101      	bne.n	8007d32 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	e099      	b.n	8007e66 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007d32:	4b4f      	ldr	r3, [pc, #316]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a4e      	ldr	r2, [pc, #312]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007d38:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007d3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d3e:	f7fa ffc5 	bl	8002ccc <HAL_GetTick>
 8007d42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d44:	e008      	b.n	8007d58 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007d46:	f7fa ffc1 	bl	8002ccc <HAL_GetTick>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	1ad3      	subs	r3, r2, r3
 8007d50:	2b02      	cmp	r3, #2
 8007d52:	d901      	bls.n	8007d58 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007d54:	2303      	movs	r3, #3
 8007d56:	e086      	b.n	8007e66 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007d58:	4b45      	ldr	r3, [pc, #276]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d1f0      	bne.n	8007d46 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007d64:	4b42      	ldr	r3, [pc, #264]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d68:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	031b      	lsls	r3, r3, #12
 8007d72:	493f      	ldr	r1, [pc, #252]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007d74:	4313      	orrs	r3, r2
 8007d76:	628b      	str	r3, [r1, #40]	; 0x28
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	3b01      	subs	r3, #1
 8007d7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	689b      	ldr	r3, [r3, #8]
 8007d86:	3b01      	subs	r3, #1
 8007d88:	025b      	lsls	r3, r3, #9
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	431a      	orrs	r2, r3
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	68db      	ldr	r3, [r3, #12]
 8007d92:	3b01      	subs	r3, #1
 8007d94:	041b      	lsls	r3, r3, #16
 8007d96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007d9a:	431a      	orrs	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	3b01      	subs	r3, #1
 8007da2:	061b      	lsls	r3, r3, #24
 8007da4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007da8:	4931      	ldr	r1, [pc, #196]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007daa:	4313      	orrs	r3, r2
 8007dac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007dae:	4b30      	ldr	r3, [pc, #192]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	492d      	ldr	r1, [pc, #180]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007dc0:	4b2b      	ldr	r3, [pc, #172]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc4:	f023 0220 	bic.w	r2, r3, #32
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	699b      	ldr	r3, [r3, #24]
 8007dcc:	4928      	ldr	r1, [pc, #160]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007dce:	4313      	orrs	r3, r2
 8007dd0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007dd2:	4b27      	ldr	r3, [pc, #156]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd6:	4a26      	ldr	r2, [pc, #152]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007dd8:	f023 0310 	bic.w	r3, r3, #16
 8007ddc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007dde:	4b24      	ldr	r3, [pc, #144]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007de0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007de2:	4b24      	ldr	r3, [pc, #144]	; (8007e74 <RCCEx_PLL2_Config+0x160>)
 8007de4:	4013      	ands	r3, r2
 8007de6:	687a      	ldr	r2, [r7, #4]
 8007de8:	69d2      	ldr	r2, [r2, #28]
 8007dea:	00d2      	lsls	r2, r2, #3
 8007dec:	4920      	ldr	r1, [pc, #128]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007dee:	4313      	orrs	r3, r2
 8007df0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007df2:	4b1f      	ldr	r3, [pc, #124]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007df6:	4a1e      	ldr	r2, [pc, #120]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007df8:	f043 0310 	orr.w	r3, r3, #16
 8007dfc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d106      	bne.n	8007e12 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007e04:	4b1a      	ldr	r3, [pc, #104]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e08:	4a19      	ldr	r2, [pc, #100]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007e0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e10:	e00f      	b.n	8007e32 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	d106      	bne.n	8007e26 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007e18:	4b15      	ldr	r3, [pc, #84]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e1c:	4a14      	ldr	r2, [pc, #80]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007e1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007e22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e24:	e005      	b.n	8007e32 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007e26:	4b12      	ldr	r3, [pc, #72]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2a:	4a11      	ldr	r2, [pc, #68]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007e2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007e30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007e32:	4b0f      	ldr	r3, [pc, #60]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4a0e      	ldr	r2, [pc, #56]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007e38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007e3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e3e:	f7fa ff45 	bl	8002ccc <HAL_GetTick>
 8007e42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e44:	e008      	b.n	8007e58 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007e46:	f7fa ff41 	bl	8002ccc <HAL_GetTick>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	2b02      	cmp	r3, #2
 8007e52:	d901      	bls.n	8007e58 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007e54:	2303      	movs	r3, #3
 8007e56:	e006      	b.n	8007e66 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007e58:	4b05      	ldr	r3, [pc, #20]	; (8007e70 <RCCEx_PLL2_Config+0x15c>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d0f0      	beq.n	8007e46 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3710      	adds	r7, #16
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	bd80      	pop	{r7, pc}
 8007e6e:	bf00      	nop
 8007e70:	58024400 	.word	0x58024400
 8007e74:	ffff0007 	.word	0xffff0007

08007e78 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007e86:	4b53      	ldr	r3, [pc, #332]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8a:	f003 0303 	and.w	r3, r3, #3
 8007e8e:	2b03      	cmp	r3, #3
 8007e90:	d101      	bne.n	8007e96 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007e92:	2301      	movs	r3, #1
 8007e94:	e099      	b.n	8007fca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007e96:	4b4f      	ldr	r3, [pc, #316]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a4e      	ldr	r2, [pc, #312]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007e9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ea0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ea2:	f7fa ff13 	bl	8002ccc <HAL_GetTick>
 8007ea6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ea8:	e008      	b.n	8007ebc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007eaa:	f7fa ff0f 	bl	8002ccc <HAL_GetTick>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	68bb      	ldr	r3, [r7, #8]
 8007eb2:	1ad3      	subs	r3, r2, r3
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	d901      	bls.n	8007ebc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007eb8:	2303      	movs	r3, #3
 8007eba:	e086      	b.n	8007fca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ebc:	4b45      	ldr	r3, [pc, #276]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d1f0      	bne.n	8007eaa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007ec8:	4b42      	ldr	r3, [pc, #264]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ecc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	051b      	lsls	r3, r3, #20
 8007ed6:	493f      	ldr	r1, [pc, #252]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007ed8:	4313      	orrs	r3, r2
 8007eda:	628b      	str	r3, [r1, #40]	; 0x28
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	3b01      	subs	r3, #1
 8007ee2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	3b01      	subs	r3, #1
 8007eec:	025b      	lsls	r3, r3, #9
 8007eee:	b29b      	uxth	r3, r3
 8007ef0:	431a      	orrs	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	68db      	ldr	r3, [r3, #12]
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	041b      	lsls	r3, r3, #16
 8007efa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007efe:	431a      	orrs	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	691b      	ldr	r3, [r3, #16]
 8007f04:	3b01      	subs	r3, #1
 8007f06:	061b      	lsls	r3, r3, #24
 8007f08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007f0c:	4931      	ldr	r1, [pc, #196]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007f12:	4b30      	ldr	r3, [pc, #192]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	492d      	ldr	r1, [pc, #180]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007f20:	4313      	orrs	r3, r2
 8007f22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007f24:	4b2b      	ldr	r3, [pc, #172]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f28:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	699b      	ldr	r3, [r3, #24]
 8007f30:	4928      	ldr	r1, [pc, #160]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007f32:	4313      	orrs	r3, r2
 8007f34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007f36:	4b27      	ldr	r3, [pc, #156]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f3a:	4a26      	ldr	r2, [pc, #152]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007f3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007f42:	4b24      	ldr	r3, [pc, #144]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f46:	4b24      	ldr	r3, [pc, #144]	; (8007fd8 <RCCEx_PLL3_Config+0x160>)
 8007f48:	4013      	ands	r3, r2
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	69d2      	ldr	r2, [r2, #28]
 8007f4e:	00d2      	lsls	r2, r2, #3
 8007f50:	4920      	ldr	r1, [pc, #128]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007f56:	4b1f      	ldr	r3, [pc, #124]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5a:	4a1e      	ldr	r2, [pc, #120]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d106      	bne.n	8007f76 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007f68:	4b1a      	ldr	r3, [pc, #104]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f6c:	4a19      	ldr	r2, [pc, #100]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007f6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007f72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f74:	e00f      	b.n	8007f96 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d106      	bne.n	8007f8a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007f7c:	4b15      	ldr	r3, [pc, #84]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f80:	4a14      	ldr	r2, [pc, #80]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007f82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007f86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007f88:	e005      	b.n	8007f96 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007f8a:	4b12      	ldr	r3, [pc, #72]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f8e:	4a11      	ldr	r2, [pc, #68]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007f90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007f96:	4b0f      	ldr	r3, [pc, #60]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a0e      	ldr	r2, [pc, #56]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007fa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fa2:	f7fa fe93 	bl	8002ccc <HAL_GetTick>
 8007fa6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007fa8:	e008      	b.n	8007fbc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007faa:	f7fa fe8f 	bl	8002ccc <HAL_GetTick>
 8007fae:	4602      	mov	r2, r0
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	1ad3      	subs	r3, r2, r3
 8007fb4:	2b02      	cmp	r3, #2
 8007fb6:	d901      	bls.n	8007fbc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007fb8:	2303      	movs	r3, #3
 8007fba:	e006      	b.n	8007fca <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007fbc:	4b05      	ldr	r3, [pc, #20]	; (8007fd4 <RCCEx_PLL3_Config+0x15c>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d0f0      	beq.n	8007faa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}
 8007fd2:	bf00      	nop
 8007fd4:	58024400 	.word	0x58024400
 8007fd8:	ffff0007 	.word	0xffff0007

08007fdc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b084      	sub	sp, #16
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d101      	bne.n	8007fee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e0f1      	b.n	80081d2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a78      	ldr	r2, [pc, #480]	; (80081dc <HAL_SPI_Init+0x200>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d00f      	beq.n	800801e <HAL_SPI_Init+0x42>
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	4a77      	ldr	r2, [pc, #476]	; (80081e0 <HAL_SPI_Init+0x204>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d00a      	beq.n	800801e <HAL_SPI_Init+0x42>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	4a75      	ldr	r2, [pc, #468]	; (80081e4 <HAL_SPI_Init+0x208>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d005      	beq.n	800801e <HAL_SPI_Init+0x42>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	2b0f      	cmp	r3, #15
 8008018:	d901      	bls.n	800801e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800801a:	2301      	movs	r3, #1
 800801c:	e0d9      	b.n	80081d2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f8e2 	bl	80081e8 <SPI_GetPacketSize>
 8008024:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a6c      	ldr	r2, [pc, #432]	; (80081dc <HAL_SPI_Init+0x200>)
 800802c:	4293      	cmp	r3, r2
 800802e:	d00c      	beq.n	800804a <HAL_SPI_Init+0x6e>
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a6a      	ldr	r2, [pc, #424]	; (80081e0 <HAL_SPI_Init+0x204>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d007      	beq.n	800804a <HAL_SPI_Init+0x6e>
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	4a69      	ldr	r2, [pc, #420]	; (80081e4 <HAL_SPI_Init+0x208>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d002      	beq.n	800804a <HAL_SPI_Init+0x6e>
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2b08      	cmp	r3, #8
 8008048:	d811      	bhi.n	800806e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800804e:	4a63      	ldr	r2, [pc, #396]	; (80081dc <HAL_SPI_Init+0x200>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d009      	beq.n	8008068 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a61      	ldr	r2, [pc, #388]	; (80081e0 <HAL_SPI_Init+0x204>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d004      	beq.n	8008068 <HAL_SPI_Init+0x8c>
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	4a60      	ldr	r2, [pc, #384]	; (80081e4 <HAL_SPI_Init+0x208>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d104      	bne.n	8008072 <HAL_SPI_Init+0x96>
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	2b10      	cmp	r3, #16
 800806c:	d901      	bls.n	8008072 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800806e:	2301      	movs	r3, #1
 8008070:	e0af      	b.n	80081d2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008078:	b2db      	uxtb	r3, r3
 800807a:	2b00      	cmp	r3, #0
 800807c:	d106      	bne.n	800808c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f7f9 ff40 	bl	8001f0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2202      	movs	r2, #2
 8008090:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f022 0201 	bic.w	r2, r2, #1
 80080a2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	689b      	ldr	r3, [r3, #8]
 80080aa:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80080ae:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	699b      	ldr	r3, [r3, #24]
 80080b4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80080b8:	d119      	bne.n	80080ee <HAL_SPI_Init+0x112>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80080c2:	d103      	bne.n	80080cc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d008      	beq.n	80080de <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d10c      	bne.n	80080ee <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80080d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80080dc:	d107      	bne.n	80080ee <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80080ec:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	69da      	ldr	r2, [r3, #28]
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080f6:	431a      	orrs	r2, r3
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	431a      	orrs	r2, r3
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008100:	ea42 0103 	orr.w	r1, r2, r3
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	68da      	ldr	r2, [r3, #12]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	430a      	orrs	r2, r1
 800810e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008118:	431a      	orrs	r2, r3
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800811e:	431a      	orrs	r2, r3
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	699b      	ldr	r3, [r3, #24]
 8008124:	431a      	orrs	r2, r3
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	691b      	ldr	r3, [r3, #16]
 800812a:	431a      	orrs	r2, r3
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	695b      	ldr	r3, [r3, #20]
 8008130:	431a      	orrs	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a1b      	ldr	r3, [r3, #32]
 8008136:	431a      	orrs	r2, r3
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	431a      	orrs	r2, r3
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008142:	431a      	orrs	r2, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	431a      	orrs	r2, r3
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800814e:	ea42 0103 	orr.w	r1, r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	430a      	orrs	r2, r1
 800815c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d113      	bne.n	800818e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008178:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800818c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f022 0201 	bic.w	r2, r2, #1
 800819c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d00a      	beq.n	80081c0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68db      	ldr	r3, [r3, #12]
 80081b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	430a      	orrs	r2, r1
 80081be:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80081d0:	2300      	movs	r3, #0
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop
 80081dc:	40013000 	.word	0x40013000
 80081e0:	40003800 	.word	0x40003800
 80081e4:	40003c00 	.word	0x40003c00

080081e8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80081e8:	b480      	push	{r7}
 80081ea:	b085      	sub	sp, #20
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f4:	095b      	lsrs	r3, r3, #5
 80081f6:	3301      	adds	r3, #1
 80081f8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	68db      	ldr	r3, [r3, #12]
 80081fe:	3301      	adds	r3, #1
 8008200:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	3307      	adds	r3, #7
 8008206:	08db      	lsrs	r3, r3, #3
 8008208:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800820a:	68bb      	ldr	r3, [r7, #8]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008212:	4618      	mov	r0, r3
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b082      	sub	sp, #8
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d101      	bne.n	8008230 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800822c:	2301      	movs	r3, #1
 800822e:	e049      	b.n	80082c4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008236:	b2db      	uxtb	r3, r3
 8008238:	2b00      	cmp	r3, #0
 800823a:	d106      	bne.n	800824a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f7f9 fec7 	bl	8001fd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2202      	movs	r2, #2
 800824e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	3304      	adds	r3, #4
 800825a:	4619      	mov	r1, r3
 800825c:	4610      	mov	r0, r2
 800825e:	f000 fcf9 	bl	8008c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2201      	movs	r2, #1
 800826e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2201      	movs	r2, #1
 8008276:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2201      	movs	r2, #1
 800827e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	2201      	movs	r2, #1
 8008286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2201      	movs	r2, #1
 800828e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2201      	movs	r2, #1
 800829e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2201      	movs	r2, #1
 80082be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	4618      	mov	r0, r3
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d101      	bne.n	80082de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80082da:	2301      	movs	r3, #1
 80082dc:	e049      	b.n	8008372 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d106      	bne.n	80082f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 f841 	bl	800837a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2202      	movs	r2, #2
 80082fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	3304      	adds	r3, #4
 8008308:	4619      	mov	r1, r3
 800830a:	4610      	mov	r0, r2
 800830c:	f000 fca2 	bl	8008c54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2201      	movs	r2, #1
 8008314:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2201      	movs	r2, #1
 800831c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	2201      	movs	r2, #1
 800833c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2201      	movs	r2, #1
 800834c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2201      	movs	r2, #1
 8008364:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2201      	movs	r2, #1
 800836c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008370:	2300      	movs	r3, #0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800837a:	b480      	push	{r7}
 800837c:	b083      	sub	sp, #12
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008382:	bf00      	nop
 8008384:	370c      	adds	r7, #12
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr
	...

08008390 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b084      	sub	sp, #16
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d109      	bne.n	80083b4 <HAL_TIM_PWM_Start+0x24>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	2b01      	cmp	r3, #1
 80083aa:	bf14      	ite	ne
 80083ac:	2301      	movne	r3, #1
 80083ae:	2300      	moveq	r3, #0
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	e03c      	b.n	800842e <HAL_TIM_PWM_Start+0x9e>
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	2b04      	cmp	r3, #4
 80083b8:	d109      	bne.n	80083ce <HAL_TIM_PWM_Start+0x3e>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b01      	cmp	r3, #1
 80083c4:	bf14      	ite	ne
 80083c6:	2301      	movne	r3, #1
 80083c8:	2300      	moveq	r3, #0
 80083ca:	b2db      	uxtb	r3, r3
 80083cc:	e02f      	b.n	800842e <HAL_TIM_PWM_Start+0x9e>
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	2b08      	cmp	r3, #8
 80083d2:	d109      	bne.n	80083e8 <HAL_TIM_PWM_Start+0x58>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	2b01      	cmp	r3, #1
 80083de:	bf14      	ite	ne
 80083e0:	2301      	movne	r3, #1
 80083e2:	2300      	moveq	r3, #0
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	e022      	b.n	800842e <HAL_TIM_PWM_Start+0x9e>
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	2b0c      	cmp	r3, #12
 80083ec:	d109      	bne.n	8008402 <HAL_TIM_PWM_Start+0x72>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b01      	cmp	r3, #1
 80083f8:	bf14      	ite	ne
 80083fa:	2301      	movne	r3, #1
 80083fc:	2300      	moveq	r3, #0
 80083fe:	b2db      	uxtb	r3, r3
 8008400:	e015      	b.n	800842e <HAL_TIM_PWM_Start+0x9e>
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	2b10      	cmp	r3, #16
 8008406:	d109      	bne.n	800841c <HAL_TIM_PWM_Start+0x8c>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800840e:	b2db      	uxtb	r3, r3
 8008410:	2b01      	cmp	r3, #1
 8008412:	bf14      	ite	ne
 8008414:	2301      	movne	r3, #1
 8008416:	2300      	moveq	r3, #0
 8008418:	b2db      	uxtb	r3, r3
 800841a:	e008      	b.n	800842e <HAL_TIM_PWM_Start+0x9e>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008422:	b2db      	uxtb	r3, r3
 8008424:	2b01      	cmp	r3, #1
 8008426:	bf14      	ite	ne
 8008428:	2301      	movne	r3, #1
 800842a:	2300      	moveq	r3, #0
 800842c:	b2db      	uxtb	r3, r3
 800842e:	2b00      	cmp	r3, #0
 8008430:	d001      	beq.n	8008436 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8008432:	2301      	movs	r3, #1
 8008434:	e0a1      	b.n	800857a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d104      	bne.n	8008446 <HAL_TIM_PWM_Start+0xb6>
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2202      	movs	r2, #2
 8008440:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008444:	e023      	b.n	800848e <HAL_TIM_PWM_Start+0xfe>
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	2b04      	cmp	r3, #4
 800844a:	d104      	bne.n	8008456 <HAL_TIM_PWM_Start+0xc6>
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2202      	movs	r2, #2
 8008450:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008454:	e01b      	b.n	800848e <HAL_TIM_PWM_Start+0xfe>
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	2b08      	cmp	r3, #8
 800845a:	d104      	bne.n	8008466 <HAL_TIM_PWM_Start+0xd6>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2202      	movs	r2, #2
 8008460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008464:	e013      	b.n	800848e <HAL_TIM_PWM_Start+0xfe>
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	2b0c      	cmp	r3, #12
 800846a:	d104      	bne.n	8008476 <HAL_TIM_PWM_Start+0xe6>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2202      	movs	r2, #2
 8008470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008474:	e00b      	b.n	800848e <HAL_TIM_PWM_Start+0xfe>
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	2b10      	cmp	r3, #16
 800847a:	d104      	bne.n	8008486 <HAL_TIM_PWM_Start+0xf6>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2202      	movs	r2, #2
 8008480:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008484:	e003      	b.n	800848e <HAL_TIM_PWM_Start+0xfe>
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2202      	movs	r2, #2
 800848a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	2201      	movs	r2, #1
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	4618      	mov	r0, r3
 8008498:	f000 ffea 	bl	8009470 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	4a38      	ldr	r2, [pc, #224]	; (8008584 <HAL_TIM_PWM_Start+0x1f4>)
 80084a2:	4293      	cmp	r3, r2
 80084a4:	d013      	beq.n	80084ce <HAL_TIM_PWM_Start+0x13e>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a37      	ldr	r2, [pc, #220]	; (8008588 <HAL_TIM_PWM_Start+0x1f8>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d00e      	beq.n	80084ce <HAL_TIM_PWM_Start+0x13e>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4a35      	ldr	r2, [pc, #212]	; (800858c <HAL_TIM_PWM_Start+0x1fc>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d009      	beq.n	80084ce <HAL_TIM_PWM_Start+0x13e>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	4a34      	ldr	r2, [pc, #208]	; (8008590 <HAL_TIM_PWM_Start+0x200>)
 80084c0:	4293      	cmp	r3, r2
 80084c2:	d004      	beq.n	80084ce <HAL_TIM_PWM_Start+0x13e>
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a32      	ldr	r2, [pc, #200]	; (8008594 <HAL_TIM_PWM_Start+0x204>)
 80084ca:	4293      	cmp	r3, r2
 80084cc:	d101      	bne.n	80084d2 <HAL_TIM_PWM_Start+0x142>
 80084ce:	2301      	movs	r3, #1
 80084d0:	e000      	b.n	80084d4 <HAL_TIM_PWM_Start+0x144>
 80084d2:	2300      	movs	r3, #0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d007      	beq.n	80084e8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80084e6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a25      	ldr	r2, [pc, #148]	; (8008584 <HAL_TIM_PWM_Start+0x1f4>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d022      	beq.n	8008538 <HAL_TIM_PWM_Start+0x1a8>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084fa:	d01d      	beq.n	8008538 <HAL_TIM_PWM_Start+0x1a8>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a25      	ldr	r2, [pc, #148]	; (8008598 <HAL_TIM_PWM_Start+0x208>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d018      	beq.n	8008538 <HAL_TIM_PWM_Start+0x1a8>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a24      	ldr	r2, [pc, #144]	; (800859c <HAL_TIM_PWM_Start+0x20c>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d013      	beq.n	8008538 <HAL_TIM_PWM_Start+0x1a8>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a22      	ldr	r2, [pc, #136]	; (80085a0 <HAL_TIM_PWM_Start+0x210>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d00e      	beq.n	8008538 <HAL_TIM_PWM_Start+0x1a8>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	4a1a      	ldr	r2, [pc, #104]	; (8008588 <HAL_TIM_PWM_Start+0x1f8>)
 8008520:	4293      	cmp	r3, r2
 8008522:	d009      	beq.n	8008538 <HAL_TIM_PWM_Start+0x1a8>
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a1e      	ldr	r2, [pc, #120]	; (80085a4 <HAL_TIM_PWM_Start+0x214>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d004      	beq.n	8008538 <HAL_TIM_PWM_Start+0x1a8>
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	4a16      	ldr	r2, [pc, #88]	; (800858c <HAL_TIM_PWM_Start+0x1fc>)
 8008534:	4293      	cmp	r3, r2
 8008536:	d115      	bne.n	8008564 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	689a      	ldr	r2, [r3, #8]
 800853e:	4b1a      	ldr	r3, [pc, #104]	; (80085a8 <HAL_TIM_PWM_Start+0x218>)
 8008540:	4013      	ands	r3, r2
 8008542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2b06      	cmp	r3, #6
 8008548:	d015      	beq.n	8008576 <HAL_TIM_PWM_Start+0x1e6>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008550:	d011      	beq.n	8008576 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	681a      	ldr	r2, [r3, #0]
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f042 0201 	orr.w	r2, r2, #1
 8008560:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008562:	e008      	b.n	8008576 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	681a      	ldr	r2, [r3, #0]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f042 0201 	orr.w	r2, r2, #1
 8008572:	601a      	str	r2, [r3, #0]
 8008574:	e000      	b.n	8008578 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008576:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008578:	2300      	movs	r3, #0
}
 800857a:	4618      	mov	r0, r3
 800857c:	3710      	adds	r7, #16
 800857e:	46bd      	mov	sp, r7
 8008580:	bd80      	pop	{r7, pc}
 8008582:	bf00      	nop
 8008584:	40010000 	.word	0x40010000
 8008588:	40010400 	.word	0x40010400
 800858c:	40014000 	.word	0x40014000
 8008590:	40014400 	.word	0x40014400
 8008594:	40014800 	.word	0x40014800
 8008598:	40000400 	.word	0x40000400
 800859c:	40000800 	.word	0x40000800
 80085a0:	40000c00 	.word	0x40000c00
 80085a4:	40001800 	.word	0x40001800
 80085a8:	00010007 	.word	0x00010007

080085ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80085ac:	b580      	push	{r7, lr}
 80085ae:	b082      	sub	sp, #8
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	f003 0302 	and.w	r3, r3, #2
 80085be:	2b02      	cmp	r3, #2
 80085c0:	d122      	bne.n	8008608 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	f003 0302 	and.w	r3, r3, #2
 80085cc:	2b02      	cmp	r3, #2
 80085ce:	d11b      	bne.n	8008608 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f06f 0202 	mvn.w	r2, #2
 80085d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	f003 0303 	and.w	r3, r3, #3
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d003      	beq.n	80085f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 fb12 	bl	8008c18 <HAL_TIM_IC_CaptureCallback>
 80085f4:	e005      	b.n	8008602 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fb04 	bl	8008c04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fb15 	bl	8008c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2200      	movs	r2, #0
 8008606:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	691b      	ldr	r3, [r3, #16]
 800860e:	f003 0304 	and.w	r3, r3, #4
 8008612:	2b04      	cmp	r3, #4
 8008614:	d122      	bne.n	800865c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	68db      	ldr	r3, [r3, #12]
 800861c:	f003 0304 	and.w	r3, r3, #4
 8008620:	2b04      	cmp	r3, #4
 8008622:	d11b      	bne.n	800865c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f06f 0204 	mvn.w	r2, #4
 800862c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2202      	movs	r2, #2
 8008632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	699b      	ldr	r3, [r3, #24]
 800863a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800863e:	2b00      	cmp	r3, #0
 8008640:	d003      	beq.n	800864a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f000 fae8 	bl	8008c18 <HAL_TIM_IC_CaptureCallback>
 8008648:	e005      	b.n	8008656 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 fada 	bl	8008c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f000 faeb 	bl	8008c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	691b      	ldr	r3, [r3, #16]
 8008662:	f003 0308 	and.w	r3, r3, #8
 8008666:	2b08      	cmp	r3, #8
 8008668:	d122      	bne.n	80086b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	68db      	ldr	r3, [r3, #12]
 8008670:	f003 0308 	and.w	r3, r3, #8
 8008674:	2b08      	cmp	r3, #8
 8008676:	d11b      	bne.n	80086b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	f06f 0208 	mvn.w	r2, #8
 8008680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2204      	movs	r2, #4
 8008686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	69db      	ldr	r3, [r3, #28]
 800868e:	f003 0303 	and.w	r3, r3, #3
 8008692:	2b00      	cmp	r3, #0
 8008694:	d003      	beq.n	800869e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008696:	6878      	ldr	r0, [r7, #4]
 8008698:	f000 fabe 	bl	8008c18 <HAL_TIM_IC_CaptureCallback>
 800869c:	e005      	b.n	80086aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f000 fab0 	bl	8008c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086a4:	6878      	ldr	r0, [r7, #4]
 80086a6:	f000 fac1 	bl	8008c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	2200      	movs	r2, #0
 80086ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	691b      	ldr	r3, [r3, #16]
 80086b6:	f003 0310 	and.w	r3, r3, #16
 80086ba:	2b10      	cmp	r3, #16
 80086bc:	d122      	bne.n	8008704 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	f003 0310 	and.w	r3, r3, #16
 80086c8:	2b10      	cmp	r3, #16
 80086ca:	d11b      	bne.n	8008704 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f06f 0210 	mvn.w	r2, #16
 80086d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2208      	movs	r2, #8
 80086da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	69db      	ldr	r3, [r3, #28]
 80086e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d003      	beq.n	80086f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fa94 	bl	8008c18 <HAL_TIM_IC_CaptureCallback>
 80086f0:	e005      	b.n	80086fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fa86 	bl	8008c04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 fa97 	bl	8008c2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	2200      	movs	r2, #0
 8008702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	691b      	ldr	r3, [r3, #16]
 800870a:	f003 0301 	and.w	r3, r3, #1
 800870e:	2b01      	cmp	r3, #1
 8008710:	d10e      	bne.n	8008730 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	68db      	ldr	r3, [r3, #12]
 8008718:	f003 0301 	and.w	r3, r3, #1
 800871c:	2b01      	cmp	r3, #1
 800871e:	d107      	bne.n	8008730 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f06f 0201 	mvn.w	r2, #1
 8008728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f7f9 fb18 	bl	8001d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800873a:	2b80      	cmp	r3, #128	; 0x80
 800873c:	d10e      	bne.n	800875c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	68db      	ldr	r3, [r3, #12]
 8008744:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008748:	2b80      	cmp	r3, #128	; 0x80
 800874a:	d107      	bne.n	800875c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008754:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 ffc6 	bl	80096e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008766:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800876a:	d10e      	bne.n	800878a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68db      	ldr	r3, [r3, #12]
 8008772:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008776:	2b80      	cmp	r3, #128	; 0x80
 8008778:	d107      	bne.n	800878a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008784:	6878      	ldr	r0, [r7, #4]
 8008786:	f000 ffb9 	bl	80096fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	691b      	ldr	r3, [r3, #16]
 8008790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008794:	2b40      	cmp	r3, #64	; 0x40
 8008796:	d10e      	bne.n	80087b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087a2:	2b40      	cmp	r3, #64	; 0x40
 80087a4:	d107      	bne.n	80087b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80087ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 fa45 	bl	8008c40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	691b      	ldr	r3, [r3, #16]
 80087bc:	f003 0320 	and.w	r3, r3, #32
 80087c0:	2b20      	cmp	r3, #32
 80087c2:	d10e      	bne.n	80087e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	f003 0320 	and.w	r3, r3, #32
 80087ce:	2b20      	cmp	r3, #32
 80087d0:	d107      	bne.n	80087e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f06f 0220 	mvn.w	r2, #32
 80087da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f000 ff79 	bl	80096d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80087e2:	bf00      	nop
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
	...

080087ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b086      	sub	sp, #24
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	60f8      	str	r0, [r7, #12]
 80087f4:	60b9      	str	r1, [r7, #8]
 80087f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087f8:	2300      	movs	r3, #0
 80087fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008802:	2b01      	cmp	r3, #1
 8008804:	d101      	bne.n	800880a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008806:	2302      	movs	r3, #2
 8008808:	e0ff      	b.n	8008a0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2201      	movs	r2, #1
 800880e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2b14      	cmp	r3, #20
 8008816:	f200 80f0 	bhi.w	80089fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800881a:	a201      	add	r2, pc, #4	; (adr r2, 8008820 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800881c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008820:	08008875 	.word	0x08008875
 8008824:	080089fb 	.word	0x080089fb
 8008828:	080089fb 	.word	0x080089fb
 800882c:	080089fb 	.word	0x080089fb
 8008830:	080088b5 	.word	0x080088b5
 8008834:	080089fb 	.word	0x080089fb
 8008838:	080089fb 	.word	0x080089fb
 800883c:	080089fb 	.word	0x080089fb
 8008840:	080088f7 	.word	0x080088f7
 8008844:	080089fb 	.word	0x080089fb
 8008848:	080089fb 	.word	0x080089fb
 800884c:	080089fb 	.word	0x080089fb
 8008850:	08008937 	.word	0x08008937
 8008854:	080089fb 	.word	0x080089fb
 8008858:	080089fb 	.word	0x080089fb
 800885c:	080089fb 	.word	0x080089fb
 8008860:	08008979 	.word	0x08008979
 8008864:	080089fb 	.word	0x080089fb
 8008868:	080089fb 	.word	0x080089fb
 800886c:	080089fb 	.word	0x080089fb
 8008870:	080089b9 	.word	0x080089b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	68b9      	ldr	r1, [r7, #8]
 800887a:	4618      	mov	r0, r3
 800887c:	f000 fa84 	bl	8008d88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	699a      	ldr	r2, [r3, #24]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f042 0208 	orr.w	r2, r2, #8
 800888e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	699a      	ldr	r2, [r3, #24]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f022 0204 	bic.w	r2, r2, #4
 800889e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	6999      	ldr	r1, [r3, #24]
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	691a      	ldr	r2, [r3, #16]
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	430a      	orrs	r2, r1
 80088b0:	619a      	str	r2, [r3, #24]
      break;
 80088b2:	e0a5      	b.n	8008a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	68b9      	ldr	r1, [r7, #8]
 80088ba:	4618      	mov	r0, r3
 80088bc:	f000 faf4 	bl	8008ea8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	699a      	ldr	r2, [r3, #24]
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80088ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	699a      	ldr	r2, [r3, #24]
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80088de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	6999      	ldr	r1, [r3, #24]
 80088e6:	68bb      	ldr	r3, [r7, #8]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	021a      	lsls	r2, r3, #8
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	430a      	orrs	r2, r1
 80088f2:	619a      	str	r2, [r3, #24]
      break;
 80088f4:	e084      	b.n	8008a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68b9      	ldr	r1, [r7, #8]
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 fb5d 	bl	8008fbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	69da      	ldr	r2, [r3, #28]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f042 0208 	orr.w	r2, r2, #8
 8008910:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	69da      	ldr	r2, [r3, #28]
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	f022 0204 	bic.w	r2, r2, #4
 8008920:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	69d9      	ldr	r1, [r3, #28]
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	691a      	ldr	r2, [r3, #16]
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	430a      	orrs	r2, r1
 8008932:	61da      	str	r2, [r3, #28]
      break;
 8008934:	e064      	b.n	8008a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	68b9      	ldr	r1, [r7, #8]
 800893c:	4618      	mov	r0, r3
 800893e:	f000 fbc5 	bl	80090cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	69da      	ldr	r2, [r3, #28]
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008950:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	69da      	ldr	r2, [r3, #28]
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008960:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	69d9      	ldr	r1, [r3, #28]
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	691b      	ldr	r3, [r3, #16]
 800896c:	021a      	lsls	r2, r3, #8
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	430a      	orrs	r2, r1
 8008974:	61da      	str	r2, [r3, #28]
      break;
 8008976:	e043      	b.n	8008a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68b9      	ldr	r1, [r7, #8]
 800897e:	4618      	mov	r0, r3
 8008980:	f000 fc0e 	bl	80091a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f042 0208 	orr.w	r2, r2, #8
 8008992:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	f022 0204 	bic.w	r2, r2, #4
 80089a2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	691a      	ldr	r2, [r3, #16]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	430a      	orrs	r2, r1
 80089b4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80089b6:	e023      	b.n	8008a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	68b9      	ldr	r1, [r7, #8]
 80089be:	4618      	mov	r0, r3
 80089c0:	f000 fc52 	bl	8009268 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089d2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089e2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	021a      	lsls	r2, r3, #8
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	430a      	orrs	r2, r1
 80089f6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80089f8:	e002      	b.n	8008a00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	75fb      	strb	r3, [r7, #23]
      break;
 80089fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3718      	adds	r7, #24
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop

08008a14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d101      	bne.n	8008a30 <HAL_TIM_ConfigClockSource+0x1c>
 8008a2c:	2302      	movs	r3, #2
 8008a2e:	e0dc      	b.n	8008bea <HAL_TIM_ConfigClockSource+0x1d6>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a48:	68ba      	ldr	r2, [r7, #8]
 8008a4a:	4b6a      	ldr	r3, [pc, #424]	; (8008bf4 <HAL_TIM_ConfigClockSource+0x1e0>)
 8008a4c:	4013      	ands	r3, r2
 8008a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a50:	68bb      	ldr	r3, [r7, #8]
 8008a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008a56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68ba      	ldr	r2, [r7, #8]
 8008a5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a64      	ldr	r2, [pc, #400]	; (8008bf8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	f000 80a9 	beq.w	8008bbe <HAL_TIM_ConfigClockSource+0x1aa>
 8008a6c:	4a62      	ldr	r2, [pc, #392]	; (8008bf8 <HAL_TIM_ConfigClockSource+0x1e4>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	f200 80ae 	bhi.w	8008bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a74:	4a61      	ldr	r2, [pc, #388]	; (8008bfc <HAL_TIM_ConfigClockSource+0x1e8>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	f000 80a1 	beq.w	8008bbe <HAL_TIM_ConfigClockSource+0x1aa>
 8008a7c:	4a5f      	ldr	r2, [pc, #380]	; (8008bfc <HAL_TIM_ConfigClockSource+0x1e8>)
 8008a7e:	4293      	cmp	r3, r2
 8008a80:	f200 80a6 	bhi.w	8008bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a84:	4a5e      	ldr	r2, [pc, #376]	; (8008c00 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008a86:	4293      	cmp	r3, r2
 8008a88:	f000 8099 	beq.w	8008bbe <HAL_TIM_ConfigClockSource+0x1aa>
 8008a8c:	4a5c      	ldr	r2, [pc, #368]	; (8008c00 <HAL_TIM_ConfigClockSource+0x1ec>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	f200 809e 	bhi.w	8008bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008a94:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008a98:	f000 8091 	beq.w	8008bbe <HAL_TIM_ConfigClockSource+0x1aa>
 8008a9c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8008aa0:	f200 8096 	bhi.w	8008bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008aa4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008aa8:	f000 8089 	beq.w	8008bbe <HAL_TIM_ConfigClockSource+0x1aa>
 8008aac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ab0:	f200 808e 	bhi.w	8008bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ab8:	d03e      	beq.n	8008b38 <HAL_TIM_ConfigClockSource+0x124>
 8008aba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008abe:	f200 8087 	bhi.w	8008bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ac6:	f000 8086 	beq.w	8008bd6 <HAL_TIM_ConfigClockSource+0x1c2>
 8008aca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ace:	d87f      	bhi.n	8008bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ad0:	2b70      	cmp	r3, #112	; 0x70
 8008ad2:	d01a      	beq.n	8008b0a <HAL_TIM_ConfigClockSource+0xf6>
 8008ad4:	2b70      	cmp	r3, #112	; 0x70
 8008ad6:	d87b      	bhi.n	8008bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ad8:	2b60      	cmp	r3, #96	; 0x60
 8008ada:	d050      	beq.n	8008b7e <HAL_TIM_ConfigClockSource+0x16a>
 8008adc:	2b60      	cmp	r3, #96	; 0x60
 8008ade:	d877      	bhi.n	8008bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ae0:	2b50      	cmp	r3, #80	; 0x50
 8008ae2:	d03c      	beq.n	8008b5e <HAL_TIM_ConfigClockSource+0x14a>
 8008ae4:	2b50      	cmp	r3, #80	; 0x50
 8008ae6:	d873      	bhi.n	8008bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008ae8:	2b40      	cmp	r3, #64	; 0x40
 8008aea:	d058      	beq.n	8008b9e <HAL_TIM_ConfigClockSource+0x18a>
 8008aec:	2b40      	cmp	r3, #64	; 0x40
 8008aee:	d86f      	bhi.n	8008bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008af0:	2b30      	cmp	r3, #48	; 0x30
 8008af2:	d064      	beq.n	8008bbe <HAL_TIM_ConfigClockSource+0x1aa>
 8008af4:	2b30      	cmp	r3, #48	; 0x30
 8008af6:	d86b      	bhi.n	8008bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008af8:	2b20      	cmp	r3, #32
 8008afa:	d060      	beq.n	8008bbe <HAL_TIM_ConfigClockSource+0x1aa>
 8008afc:	2b20      	cmp	r3, #32
 8008afe:	d867      	bhi.n	8008bd0 <HAL_TIM_ConfigClockSource+0x1bc>
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d05c      	beq.n	8008bbe <HAL_TIM_ConfigClockSource+0x1aa>
 8008b04:	2b10      	cmp	r3, #16
 8008b06:	d05a      	beq.n	8008bbe <HAL_TIM_ConfigClockSource+0x1aa>
 8008b08:	e062      	b.n	8008bd0 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6818      	ldr	r0, [r3, #0]
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	6899      	ldr	r1, [r3, #8]
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	685a      	ldr	r2, [r3, #4]
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	68db      	ldr	r3, [r3, #12]
 8008b1a:	f000 fc89 	bl	8009430 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	689b      	ldr	r3, [r3, #8]
 8008b24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	68ba      	ldr	r2, [r7, #8]
 8008b34:	609a      	str	r2, [r3, #8]
      break;
 8008b36:	e04f      	b.n	8008bd8 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6818      	ldr	r0, [r3, #0]
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	6899      	ldr	r1, [r3, #8]
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	685a      	ldr	r2, [r3, #4]
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	68db      	ldr	r3, [r3, #12]
 8008b48:	f000 fc72 	bl	8009430 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	689a      	ldr	r2, [r3, #8]
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008b5a:	609a      	str	r2, [r3, #8]
      break;
 8008b5c:	e03c      	b.n	8008bd8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6818      	ldr	r0, [r3, #0]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	6859      	ldr	r1, [r3, #4]
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	68db      	ldr	r3, [r3, #12]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	f000 fbe2 	bl	8009334 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2150      	movs	r1, #80	; 0x50
 8008b76:	4618      	mov	r0, r3
 8008b78:	f000 fc3c 	bl	80093f4 <TIM_ITRx_SetConfig>
      break;
 8008b7c:	e02c      	b.n	8008bd8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	6818      	ldr	r0, [r3, #0]
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	6859      	ldr	r1, [r3, #4]
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	461a      	mov	r2, r3
 8008b8c:	f000 fc01 	bl	8009392 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	2160      	movs	r1, #96	; 0x60
 8008b96:	4618      	mov	r0, r3
 8008b98:	f000 fc2c 	bl	80093f4 <TIM_ITRx_SetConfig>
      break;
 8008b9c:	e01c      	b.n	8008bd8 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6818      	ldr	r0, [r3, #0]
 8008ba2:	683b      	ldr	r3, [r7, #0]
 8008ba4:	6859      	ldr	r1, [r3, #4]
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	68db      	ldr	r3, [r3, #12]
 8008baa:	461a      	mov	r2, r3
 8008bac:	f000 fbc2 	bl	8009334 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	2140      	movs	r1, #64	; 0x40
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f000 fc1c 	bl	80093f4 <TIM_ITRx_SetConfig>
      break;
 8008bbc:	e00c      	b.n	8008bd8 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4619      	mov	r1, r3
 8008bc8:	4610      	mov	r0, r2
 8008bca:	f000 fc13 	bl	80093f4 <TIM_ITRx_SetConfig>
      break;
 8008bce:	e003      	b.n	8008bd8 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	73fb      	strb	r3, [r7, #15]
      break;
 8008bd4:	e000      	b.n	8008bd8 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8008bd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3710      	adds	r7, #16
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	ffceff88 	.word	0xffceff88
 8008bf8:	00100040 	.word	0x00100040
 8008bfc:	00100030 	.word	0x00100030
 8008c00:	00100020 	.word	0x00100020

08008c04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c04:	b480      	push	{r7}
 8008c06:	b083      	sub	sp, #12
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c0c:	bf00      	nop
 8008c0e:	370c      	adds	r7, #12
 8008c10:	46bd      	mov	sp, r7
 8008c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c16:	4770      	bx	lr

08008c18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b083      	sub	sp, #12
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c20:	bf00      	nop
 8008c22:	370c      	adds	r7, #12
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr

08008c2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008c34:	bf00      	nop
 8008c36:	370c      	adds	r7, #12
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c40:	b480      	push	{r7}
 8008c42:	b083      	sub	sp, #12
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a40      	ldr	r2, [pc, #256]	; (8008d68 <TIM_Base_SetConfig+0x114>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d013      	beq.n	8008c94 <TIM_Base_SetConfig+0x40>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c72:	d00f      	beq.n	8008c94 <TIM_Base_SetConfig+0x40>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a3d      	ldr	r2, [pc, #244]	; (8008d6c <TIM_Base_SetConfig+0x118>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d00b      	beq.n	8008c94 <TIM_Base_SetConfig+0x40>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a3c      	ldr	r2, [pc, #240]	; (8008d70 <TIM_Base_SetConfig+0x11c>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d007      	beq.n	8008c94 <TIM_Base_SetConfig+0x40>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	4a3b      	ldr	r2, [pc, #236]	; (8008d74 <TIM_Base_SetConfig+0x120>)
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d003      	beq.n	8008c94 <TIM_Base_SetConfig+0x40>
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	4a3a      	ldr	r2, [pc, #232]	; (8008d78 <TIM_Base_SetConfig+0x124>)
 8008c90:	4293      	cmp	r3, r2
 8008c92:	d108      	bne.n	8008ca6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	68fa      	ldr	r2, [r7, #12]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a2f      	ldr	r2, [pc, #188]	; (8008d68 <TIM_Base_SetConfig+0x114>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d01f      	beq.n	8008cee <TIM_Base_SetConfig+0x9a>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cb4:	d01b      	beq.n	8008cee <TIM_Base_SetConfig+0x9a>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a2c      	ldr	r2, [pc, #176]	; (8008d6c <TIM_Base_SetConfig+0x118>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d017      	beq.n	8008cee <TIM_Base_SetConfig+0x9a>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a2b      	ldr	r2, [pc, #172]	; (8008d70 <TIM_Base_SetConfig+0x11c>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d013      	beq.n	8008cee <TIM_Base_SetConfig+0x9a>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a2a      	ldr	r2, [pc, #168]	; (8008d74 <TIM_Base_SetConfig+0x120>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d00f      	beq.n	8008cee <TIM_Base_SetConfig+0x9a>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a29      	ldr	r2, [pc, #164]	; (8008d78 <TIM_Base_SetConfig+0x124>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d00b      	beq.n	8008cee <TIM_Base_SetConfig+0x9a>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a28      	ldr	r2, [pc, #160]	; (8008d7c <TIM_Base_SetConfig+0x128>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d007      	beq.n	8008cee <TIM_Base_SetConfig+0x9a>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a27      	ldr	r2, [pc, #156]	; (8008d80 <TIM_Base_SetConfig+0x12c>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d003      	beq.n	8008cee <TIM_Base_SetConfig+0x9a>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a26      	ldr	r2, [pc, #152]	; (8008d84 <TIM_Base_SetConfig+0x130>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d108      	bne.n	8008d00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cf6:	683b      	ldr	r3, [r7, #0]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	68fa      	ldr	r2, [r7, #12]
 8008cfc:	4313      	orrs	r3, r2
 8008cfe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	695b      	ldr	r3, [r3, #20]
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	68fa      	ldr	r2, [r7, #12]
 8008d12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d14:	683b      	ldr	r3, [r7, #0]
 8008d16:	689a      	ldr	r2, [r3, #8]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a10      	ldr	r2, [pc, #64]	; (8008d68 <TIM_Base_SetConfig+0x114>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d00f      	beq.n	8008d4c <TIM_Base_SetConfig+0xf8>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a12      	ldr	r2, [pc, #72]	; (8008d78 <TIM_Base_SetConfig+0x124>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d00b      	beq.n	8008d4c <TIM_Base_SetConfig+0xf8>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a11      	ldr	r2, [pc, #68]	; (8008d7c <TIM_Base_SetConfig+0x128>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d007      	beq.n	8008d4c <TIM_Base_SetConfig+0xf8>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	4a10      	ldr	r2, [pc, #64]	; (8008d80 <TIM_Base_SetConfig+0x12c>)
 8008d40:	4293      	cmp	r3, r2
 8008d42:	d003      	beq.n	8008d4c <TIM_Base_SetConfig+0xf8>
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	4a0f      	ldr	r2, [pc, #60]	; (8008d84 <TIM_Base_SetConfig+0x130>)
 8008d48:	4293      	cmp	r3, r2
 8008d4a:	d103      	bne.n	8008d54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	691a      	ldr	r2, [r3, #16]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2201      	movs	r2, #1
 8008d58:	615a      	str	r2, [r3, #20]
}
 8008d5a:	bf00      	nop
 8008d5c:	3714      	adds	r7, #20
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr
 8008d66:	bf00      	nop
 8008d68:	40010000 	.word	0x40010000
 8008d6c:	40000400 	.word	0x40000400
 8008d70:	40000800 	.word	0x40000800
 8008d74:	40000c00 	.word	0x40000c00
 8008d78:	40010400 	.word	0x40010400
 8008d7c:	40014000 	.word	0x40014000
 8008d80:	40014400 	.word	0x40014400
 8008d84:	40014800 	.word	0x40014800

08008d88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b087      	sub	sp, #28
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
 8008d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6a1b      	ldr	r3, [r3, #32]
 8008d96:	f023 0201 	bic.w	r2, r3, #1
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6a1b      	ldr	r3, [r3, #32]
 8008da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	699b      	ldr	r3, [r3, #24]
 8008dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	4b37      	ldr	r3, [pc, #220]	; (8008e90 <TIM_OC1_SetConfig+0x108>)
 8008db4:	4013      	ands	r3, r2
 8008db6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	f023 0303 	bic.w	r3, r3, #3
 8008dbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dc0:	683b      	ldr	r3, [r7, #0]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	68fa      	ldr	r2, [r7, #12]
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	f023 0302 	bic.w	r3, r3, #2
 8008dd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	697a      	ldr	r2, [r7, #20]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	4a2d      	ldr	r2, [pc, #180]	; (8008e94 <TIM_OC1_SetConfig+0x10c>)
 8008de0:	4293      	cmp	r3, r2
 8008de2:	d00f      	beq.n	8008e04 <TIM_OC1_SetConfig+0x7c>
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	4a2c      	ldr	r2, [pc, #176]	; (8008e98 <TIM_OC1_SetConfig+0x110>)
 8008de8:	4293      	cmp	r3, r2
 8008dea:	d00b      	beq.n	8008e04 <TIM_OC1_SetConfig+0x7c>
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a2b      	ldr	r2, [pc, #172]	; (8008e9c <TIM_OC1_SetConfig+0x114>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d007      	beq.n	8008e04 <TIM_OC1_SetConfig+0x7c>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	4a2a      	ldr	r2, [pc, #168]	; (8008ea0 <TIM_OC1_SetConfig+0x118>)
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d003      	beq.n	8008e04 <TIM_OC1_SetConfig+0x7c>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a29      	ldr	r2, [pc, #164]	; (8008ea4 <TIM_OC1_SetConfig+0x11c>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d10c      	bne.n	8008e1e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	f023 0308 	bic.w	r3, r3, #8
 8008e0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008e0c:	683b      	ldr	r3, [r7, #0]
 8008e0e:	68db      	ldr	r3, [r3, #12]
 8008e10:	697a      	ldr	r2, [r7, #20]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	f023 0304 	bic.w	r3, r3, #4
 8008e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	4a1c      	ldr	r2, [pc, #112]	; (8008e94 <TIM_OC1_SetConfig+0x10c>)
 8008e22:	4293      	cmp	r3, r2
 8008e24:	d00f      	beq.n	8008e46 <TIM_OC1_SetConfig+0xbe>
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	4a1b      	ldr	r2, [pc, #108]	; (8008e98 <TIM_OC1_SetConfig+0x110>)
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d00b      	beq.n	8008e46 <TIM_OC1_SetConfig+0xbe>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a1a      	ldr	r2, [pc, #104]	; (8008e9c <TIM_OC1_SetConfig+0x114>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d007      	beq.n	8008e46 <TIM_OC1_SetConfig+0xbe>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	4a19      	ldr	r2, [pc, #100]	; (8008ea0 <TIM_OC1_SetConfig+0x118>)
 8008e3a:	4293      	cmp	r3, r2
 8008e3c:	d003      	beq.n	8008e46 <TIM_OC1_SetConfig+0xbe>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a18      	ldr	r2, [pc, #96]	; (8008ea4 <TIM_OC1_SetConfig+0x11c>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d111      	bne.n	8008e6a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	695b      	ldr	r3, [r3, #20]
 8008e5a:	693a      	ldr	r2, [r7, #16]
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e60:	683b      	ldr	r3, [r7, #0]
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	693a      	ldr	r2, [r7, #16]
 8008e66:	4313      	orrs	r3, r2
 8008e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	693a      	ldr	r2, [r7, #16]
 8008e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	68fa      	ldr	r2, [r7, #12]
 8008e74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	685a      	ldr	r2, [r3, #4]
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	697a      	ldr	r2, [r7, #20]
 8008e82:	621a      	str	r2, [r3, #32]
}
 8008e84:	bf00      	nop
 8008e86:	371c      	adds	r7, #28
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr
 8008e90:	fffeff8f 	.word	0xfffeff8f
 8008e94:	40010000 	.word	0x40010000
 8008e98:	40010400 	.word	0x40010400
 8008e9c:	40014000 	.word	0x40014000
 8008ea0:	40014400 	.word	0x40014400
 8008ea4:	40014800 	.word	0x40014800

08008ea8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b087      	sub	sp, #28
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]
 8008eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6a1b      	ldr	r3, [r3, #32]
 8008eb6:	f023 0210 	bic.w	r2, r3, #16
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a1b      	ldr	r3, [r3, #32]
 8008ec2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	699b      	ldr	r3, [r3, #24]
 8008ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ed0:	68fa      	ldr	r2, [r7, #12]
 8008ed2:	4b34      	ldr	r3, [pc, #208]	; (8008fa4 <TIM_OC2_SetConfig+0xfc>)
 8008ed4:	4013      	ands	r3, r2
 8008ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	021b      	lsls	r3, r3, #8
 8008ee6:	68fa      	ldr	r2, [r7, #12]
 8008ee8:	4313      	orrs	r3, r2
 8008eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008eec:	697b      	ldr	r3, [r7, #20]
 8008eee:	f023 0320 	bic.w	r3, r3, #32
 8008ef2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	689b      	ldr	r3, [r3, #8]
 8008ef8:	011b      	lsls	r3, r3, #4
 8008efa:	697a      	ldr	r2, [r7, #20]
 8008efc:	4313      	orrs	r3, r2
 8008efe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	4a29      	ldr	r2, [pc, #164]	; (8008fa8 <TIM_OC2_SetConfig+0x100>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d003      	beq.n	8008f10 <TIM_OC2_SetConfig+0x68>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	4a28      	ldr	r2, [pc, #160]	; (8008fac <TIM_OC2_SetConfig+0x104>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d10d      	bne.n	8008f2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	011b      	lsls	r3, r3, #4
 8008f1e:	697a      	ldr	r2, [r7, #20]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008f24:	697b      	ldr	r3, [r7, #20]
 8008f26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a1e      	ldr	r2, [pc, #120]	; (8008fa8 <TIM_OC2_SetConfig+0x100>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d00f      	beq.n	8008f54 <TIM_OC2_SetConfig+0xac>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a1d      	ldr	r2, [pc, #116]	; (8008fac <TIM_OC2_SetConfig+0x104>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d00b      	beq.n	8008f54 <TIM_OC2_SetConfig+0xac>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a1c      	ldr	r2, [pc, #112]	; (8008fb0 <TIM_OC2_SetConfig+0x108>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d007      	beq.n	8008f54 <TIM_OC2_SetConfig+0xac>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a1b      	ldr	r2, [pc, #108]	; (8008fb4 <TIM_OC2_SetConfig+0x10c>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d003      	beq.n	8008f54 <TIM_OC2_SetConfig+0xac>
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4a1a      	ldr	r2, [pc, #104]	; (8008fb8 <TIM_OC2_SetConfig+0x110>)
 8008f50:	4293      	cmp	r3, r2
 8008f52:	d113      	bne.n	8008f7c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	695b      	ldr	r3, [r3, #20]
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	699b      	ldr	r3, [r3, #24]
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	693a      	ldr	r2, [r7, #16]
 8008f78:	4313      	orrs	r3, r2
 8008f7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	693a      	ldr	r2, [r7, #16]
 8008f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	621a      	str	r2, [r3, #32]
}
 8008f96:	bf00      	nop
 8008f98:	371c      	adds	r7, #28
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa0:	4770      	bx	lr
 8008fa2:	bf00      	nop
 8008fa4:	feff8fff 	.word	0xfeff8fff
 8008fa8:	40010000 	.word	0x40010000
 8008fac:	40010400 	.word	0x40010400
 8008fb0:	40014000 	.word	0x40014000
 8008fb4:	40014400 	.word	0x40014400
 8008fb8:	40014800 	.word	0x40014800

08008fbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b087      	sub	sp, #28
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6a1b      	ldr	r3, [r3, #32]
 8008fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	69db      	ldr	r3, [r3, #28]
 8008fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	4b33      	ldr	r3, [pc, #204]	; (80090b4 <TIM_OC3_SetConfig+0xf8>)
 8008fe8:	4013      	ands	r3, r2
 8008fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f023 0303 	bic.w	r3, r3, #3
 8008ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	4313      	orrs	r3, r2
 8008ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	021b      	lsls	r3, r3, #8
 800900c:	697a      	ldr	r2, [r7, #20]
 800900e:	4313      	orrs	r3, r2
 8009010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	4a28      	ldr	r2, [pc, #160]	; (80090b8 <TIM_OC3_SetConfig+0xfc>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d003      	beq.n	8009022 <TIM_OC3_SetConfig+0x66>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	4a27      	ldr	r2, [pc, #156]	; (80090bc <TIM_OC3_SetConfig+0x100>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d10d      	bne.n	800903e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800902a:	683b      	ldr	r3, [r7, #0]
 800902c:	68db      	ldr	r3, [r3, #12]
 800902e:	021b      	lsls	r3, r3, #8
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	4313      	orrs	r3, r2
 8009034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800903c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	4a1d      	ldr	r2, [pc, #116]	; (80090b8 <TIM_OC3_SetConfig+0xfc>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d00f      	beq.n	8009066 <TIM_OC3_SetConfig+0xaa>
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	4a1c      	ldr	r2, [pc, #112]	; (80090bc <TIM_OC3_SetConfig+0x100>)
 800904a:	4293      	cmp	r3, r2
 800904c:	d00b      	beq.n	8009066 <TIM_OC3_SetConfig+0xaa>
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	4a1b      	ldr	r2, [pc, #108]	; (80090c0 <TIM_OC3_SetConfig+0x104>)
 8009052:	4293      	cmp	r3, r2
 8009054:	d007      	beq.n	8009066 <TIM_OC3_SetConfig+0xaa>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	4a1a      	ldr	r2, [pc, #104]	; (80090c4 <TIM_OC3_SetConfig+0x108>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d003      	beq.n	8009066 <TIM_OC3_SetConfig+0xaa>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a19      	ldr	r2, [pc, #100]	; (80090c8 <TIM_OC3_SetConfig+0x10c>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d113      	bne.n	800908e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009066:	693b      	ldr	r3, [r7, #16]
 8009068:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800906c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009074:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009076:	683b      	ldr	r3, [r7, #0]
 8009078:	695b      	ldr	r3, [r3, #20]
 800907a:	011b      	lsls	r3, r3, #4
 800907c:	693a      	ldr	r2, [r7, #16]
 800907e:	4313      	orrs	r3, r2
 8009080:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	699b      	ldr	r3, [r3, #24]
 8009086:	011b      	lsls	r3, r3, #4
 8009088:	693a      	ldr	r2, [r7, #16]
 800908a:	4313      	orrs	r3, r2
 800908c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	693a      	ldr	r2, [r7, #16]
 8009092:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	685a      	ldr	r2, [r3, #4]
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	697a      	ldr	r2, [r7, #20]
 80090a6:	621a      	str	r2, [r3, #32]
}
 80090a8:	bf00      	nop
 80090aa:	371c      	adds	r7, #28
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr
 80090b4:	fffeff8f 	.word	0xfffeff8f
 80090b8:	40010000 	.word	0x40010000
 80090bc:	40010400 	.word	0x40010400
 80090c0:	40014000 	.word	0x40014000
 80090c4:	40014400 	.word	0x40014400
 80090c8:	40014800 	.word	0x40014800

080090cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b087      	sub	sp, #28
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6a1b      	ldr	r3, [r3, #32]
 80090da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6a1b      	ldr	r3, [r3, #32]
 80090e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	685b      	ldr	r3, [r3, #4]
 80090ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	69db      	ldr	r3, [r3, #28]
 80090f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090f4:	68fa      	ldr	r2, [r7, #12]
 80090f6:	4b24      	ldr	r3, [pc, #144]	; (8009188 <TIM_OC4_SetConfig+0xbc>)
 80090f8:	4013      	ands	r3, r2
 80090fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009102:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	021b      	lsls	r3, r3, #8
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	4313      	orrs	r3, r2
 800910e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009110:	693b      	ldr	r3, [r7, #16]
 8009112:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009116:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	031b      	lsls	r3, r3, #12
 800911e:	693a      	ldr	r2, [r7, #16]
 8009120:	4313      	orrs	r3, r2
 8009122:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	4a19      	ldr	r2, [pc, #100]	; (800918c <TIM_OC4_SetConfig+0xc0>)
 8009128:	4293      	cmp	r3, r2
 800912a:	d00f      	beq.n	800914c <TIM_OC4_SetConfig+0x80>
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	4a18      	ldr	r2, [pc, #96]	; (8009190 <TIM_OC4_SetConfig+0xc4>)
 8009130:	4293      	cmp	r3, r2
 8009132:	d00b      	beq.n	800914c <TIM_OC4_SetConfig+0x80>
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a17      	ldr	r2, [pc, #92]	; (8009194 <TIM_OC4_SetConfig+0xc8>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d007      	beq.n	800914c <TIM_OC4_SetConfig+0x80>
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a16      	ldr	r2, [pc, #88]	; (8009198 <TIM_OC4_SetConfig+0xcc>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d003      	beq.n	800914c <TIM_OC4_SetConfig+0x80>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a15      	ldr	r2, [pc, #84]	; (800919c <TIM_OC4_SetConfig+0xd0>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d109      	bne.n	8009160 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800914c:	697b      	ldr	r3, [r7, #20]
 800914e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009152:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	695b      	ldr	r3, [r3, #20]
 8009158:	019b      	lsls	r3, r3, #6
 800915a:	697a      	ldr	r2, [r7, #20]
 800915c:	4313      	orrs	r3, r2
 800915e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	697a      	ldr	r2, [r7, #20]
 8009164:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	68fa      	ldr	r2, [r7, #12]
 800916a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	685a      	ldr	r2, [r3, #4]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	693a      	ldr	r2, [r7, #16]
 8009178:	621a      	str	r2, [r3, #32]
}
 800917a:	bf00      	nop
 800917c:	371c      	adds	r7, #28
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	feff8fff 	.word	0xfeff8fff
 800918c:	40010000 	.word	0x40010000
 8009190:	40010400 	.word	0x40010400
 8009194:	40014000 	.word	0x40014000
 8009198:	40014400 	.word	0x40014400
 800919c:	40014800 	.word	0x40014800

080091a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80091a0:	b480      	push	{r7}
 80091a2:	b087      	sub	sp, #28
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6a1b      	ldr	r3, [r3, #32]
 80091ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6a1b      	ldr	r3, [r3, #32]
 80091ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	685b      	ldr	r3, [r3, #4]
 80091c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80091c8:	68fa      	ldr	r2, [r7, #12]
 80091ca:	4b21      	ldr	r3, [pc, #132]	; (8009250 <TIM_OC5_SetConfig+0xb0>)
 80091cc:	4013      	ands	r3, r2
 80091ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80091d0:	683b      	ldr	r3, [r7, #0]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	4313      	orrs	r3, r2
 80091d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80091e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	041b      	lsls	r3, r3, #16
 80091e8:	693a      	ldr	r2, [r7, #16]
 80091ea:	4313      	orrs	r3, r2
 80091ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a18      	ldr	r2, [pc, #96]	; (8009254 <TIM_OC5_SetConfig+0xb4>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d00f      	beq.n	8009216 <TIM_OC5_SetConfig+0x76>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a17      	ldr	r2, [pc, #92]	; (8009258 <TIM_OC5_SetConfig+0xb8>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d00b      	beq.n	8009216 <TIM_OC5_SetConfig+0x76>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a16      	ldr	r2, [pc, #88]	; (800925c <TIM_OC5_SetConfig+0xbc>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d007      	beq.n	8009216 <TIM_OC5_SetConfig+0x76>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	4a15      	ldr	r2, [pc, #84]	; (8009260 <TIM_OC5_SetConfig+0xc0>)
 800920a:	4293      	cmp	r3, r2
 800920c:	d003      	beq.n	8009216 <TIM_OC5_SetConfig+0x76>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	4a14      	ldr	r2, [pc, #80]	; (8009264 <TIM_OC5_SetConfig+0xc4>)
 8009212:	4293      	cmp	r3, r2
 8009214:	d109      	bne.n	800922a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009216:	697b      	ldr	r3, [r7, #20]
 8009218:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800921c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	695b      	ldr	r3, [r3, #20]
 8009222:	021b      	lsls	r3, r3, #8
 8009224:	697a      	ldr	r2, [r7, #20]
 8009226:	4313      	orrs	r3, r2
 8009228:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	697a      	ldr	r2, [r7, #20]
 800922e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	68fa      	ldr	r2, [r7, #12]
 8009234:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	685a      	ldr	r2, [r3, #4]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	693a      	ldr	r2, [r7, #16]
 8009242:	621a      	str	r2, [r3, #32]
}
 8009244:	bf00      	nop
 8009246:	371c      	adds	r7, #28
 8009248:	46bd      	mov	sp, r7
 800924a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800924e:	4770      	bx	lr
 8009250:	fffeff8f 	.word	0xfffeff8f
 8009254:	40010000 	.word	0x40010000
 8009258:	40010400 	.word	0x40010400
 800925c:	40014000 	.word	0x40014000
 8009260:	40014400 	.word	0x40014400
 8009264:	40014800 	.word	0x40014800

08009268 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009268:	b480      	push	{r7}
 800926a:	b087      	sub	sp, #28
 800926c:	af00      	add	r7, sp, #0
 800926e:	6078      	str	r0, [r7, #4]
 8009270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6a1b      	ldr	r3, [r3, #32]
 8009276:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6a1b      	ldr	r3, [r3, #32]
 8009282:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800928e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	4b22      	ldr	r3, [pc, #136]	; (800931c <TIM_OC6_SetConfig+0xb4>)
 8009294:	4013      	ands	r3, r2
 8009296:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	021b      	lsls	r3, r3, #8
 800929e:	68fa      	ldr	r2, [r7, #12]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80092aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	051b      	lsls	r3, r3, #20
 80092b2:	693a      	ldr	r2, [r7, #16]
 80092b4:	4313      	orrs	r3, r2
 80092b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	4a19      	ldr	r2, [pc, #100]	; (8009320 <TIM_OC6_SetConfig+0xb8>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d00f      	beq.n	80092e0 <TIM_OC6_SetConfig+0x78>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	4a18      	ldr	r2, [pc, #96]	; (8009324 <TIM_OC6_SetConfig+0xbc>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d00b      	beq.n	80092e0 <TIM_OC6_SetConfig+0x78>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	4a17      	ldr	r2, [pc, #92]	; (8009328 <TIM_OC6_SetConfig+0xc0>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d007      	beq.n	80092e0 <TIM_OC6_SetConfig+0x78>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	4a16      	ldr	r2, [pc, #88]	; (800932c <TIM_OC6_SetConfig+0xc4>)
 80092d4:	4293      	cmp	r3, r2
 80092d6:	d003      	beq.n	80092e0 <TIM_OC6_SetConfig+0x78>
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	4a15      	ldr	r2, [pc, #84]	; (8009330 <TIM_OC6_SetConfig+0xc8>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d109      	bne.n	80092f4 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80092e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	695b      	ldr	r3, [r3, #20]
 80092ec:	029b      	lsls	r3, r3, #10
 80092ee:	697a      	ldr	r2, [r7, #20]
 80092f0:	4313      	orrs	r3, r2
 80092f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	697a      	ldr	r2, [r7, #20]
 80092f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009300:	683b      	ldr	r3, [r7, #0]
 8009302:	685a      	ldr	r2, [r3, #4]
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	693a      	ldr	r2, [r7, #16]
 800930c:	621a      	str	r2, [r3, #32]
}
 800930e:	bf00      	nop
 8009310:	371c      	adds	r7, #28
 8009312:	46bd      	mov	sp, r7
 8009314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009318:	4770      	bx	lr
 800931a:	bf00      	nop
 800931c:	feff8fff 	.word	0xfeff8fff
 8009320:	40010000 	.word	0x40010000
 8009324:	40010400 	.word	0x40010400
 8009328:	40014000 	.word	0x40014000
 800932c:	40014400 	.word	0x40014400
 8009330:	40014800 	.word	0x40014800

08009334 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009334:	b480      	push	{r7}
 8009336:	b087      	sub	sp, #28
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	6a1b      	ldr	r3, [r3, #32]
 8009344:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	6a1b      	ldr	r3, [r3, #32]
 800934a:	f023 0201 	bic.w	r2, r3, #1
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	699b      	ldr	r3, [r3, #24]
 8009356:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009358:	693b      	ldr	r3, [r7, #16]
 800935a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800935e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	011b      	lsls	r3, r3, #4
 8009364:	693a      	ldr	r2, [r7, #16]
 8009366:	4313      	orrs	r3, r2
 8009368:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	f023 030a 	bic.w	r3, r3, #10
 8009370:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009372:	697a      	ldr	r2, [r7, #20]
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	4313      	orrs	r3, r2
 8009378:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	693a      	ldr	r2, [r7, #16]
 800937e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	697a      	ldr	r2, [r7, #20]
 8009384:	621a      	str	r2, [r3, #32]
}
 8009386:	bf00      	nop
 8009388:	371c      	adds	r7, #28
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr

08009392 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009392:	b480      	push	{r7}
 8009394:	b087      	sub	sp, #28
 8009396:	af00      	add	r7, sp, #0
 8009398:	60f8      	str	r0, [r7, #12]
 800939a:	60b9      	str	r1, [r7, #8]
 800939c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6a1b      	ldr	r3, [r3, #32]
 80093a2:	f023 0210 	bic.w	r2, r3, #16
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	699b      	ldr	r3, [r3, #24]
 80093ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6a1b      	ldr	r3, [r3, #32]
 80093b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80093b6:	697b      	ldr	r3, [r7, #20]
 80093b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80093bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	031b      	lsls	r3, r3, #12
 80093c2:	697a      	ldr	r2, [r7, #20]
 80093c4:	4313      	orrs	r3, r2
 80093c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80093ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80093d0:	68bb      	ldr	r3, [r7, #8]
 80093d2:	011b      	lsls	r3, r3, #4
 80093d4:	693a      	ldr	r2, [r7, #16]
 80093d6:	4313      	orrs	r3, r2
 80093d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	697a      	ldr	r2, [r7, #20]
 80093de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	693a      	ldr	r2, [r7, #16]
 80093e4:	621a      	str	r2, [r3, #32]
}
 80093e6:	bf00      	nop
 80093e8:	371c      	adds	r7, #28
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
	...

080093f4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b085      	sub	sp, #20
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
 80093fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	689b      	ldr	r3, [r3, #8]
 8009402:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009404:	68fa      	ldr	r2, [r7, #12]
 8009406:	4b09      	ldr	r3, [pc, #36]	; (800942c <TIM_ITRx_SetConfig+0x38>)
 8009408:	4013      	ands	r3, r2
 800940a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800940c:	683a      	ldr	r2, [r7, #0]
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	4313      	orrs	r3, r2
 8009412:	f043 0307 	orr.w	r3, r3, #7
 8009416:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	68fa      	ldr	r2, [r7, #12]
 800941c:	609a      	str	r2, [r3, #8]
}
 800941e:	bf00      	nop
 8009420:	3714      	adds	r7, #20
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr
 800942a:	bf00      	nop
 800942c:	ffcfff8f 	.word	0xffcfff8f

08009430 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009430:	b480      	push	{r7}
 8009432:	b087      	sub	sp, #28
 8009434:	af00      	add	r7, sp, #0
 8009436:	60f8      	str	r0, [r7, #12]
 8009438:	60b9      	str	r1, [r7, #8]
 800943a:	607a      	str	r2, [r7, #4]
 800943c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800944a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	021a      	lsls	r2, r3, #8
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	431a      	orrs	r2, r3
 8009454:	68bb      	ldr	r3, [r7, #8]
 8009456:	4313      	orrs	r3, r2
 8009458:	697a      	ldr	r2, [r7, #20]
 800945a:	4313      	orrs	r3, r2
 800945c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	697a      	ldr	r2, [r7, #20]
 8009462:	609a      	str	r2, [r3, #8]
}
 8009464:	bf00      	nop
 8009466:	371c      	adds	r7, #28
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009470:	b480      	push	{r7}
 8009472:	b087      	sub	sp, #28
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	f003 031f 	and.w	r3, r3, #31
 8009482:	2201      	movs	r2, #1
 8009484:	fa02 f303 	lsl.w	r3, r2, r3
 8009488:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	6a1a      	ldr	r2, [r3, #32]
 800948e:	697b      	ldr	r3, [r7, #20]
 8009490:	43db      	mvns	r3, r3
 8009492:	401a      	ands	r2, r3
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	6a1a      	ldr	r2, [r3, #32]
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	f003 031f 	and.w	r3, r3, #31
 80094a2:	6879      	ldr	r1, [r7, #4]
 80094a4:	fa01 f303 	lsl.w	r3, r1, r3
 80094a8:	431a      	orrs	r2, r3
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	621a      	str	r2, [r3, #32]
}
 80094ae:	bf00      	nop
 80094b0:	371c      	adds	r7, #28
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
	...

080094bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
 80094c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d101      	bne.n	80094d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80094d0:	2302      	movs	r3, #2
 80094d2:	e06d      	b.n	80095b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2202      	movs	r2, #2
 80094e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a30      	ldr	r2, [pc, #192]	; (80095bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d004      	beq.n	8009508 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a2f      	ldr	r2, [pc, #188]	; (80095c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d108      	bne.n	800951a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800950e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	685b      	ldr	r3, [r3, #4]
 8009514:	68fa      	ldr	r2, [r7, #12]
 8009516:	4313      	orrs	r3, r2
 8009518:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009520:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68fa      	ldr	r2, [r7, #12]
 8009528:	4313      	orrs	r3, r2
 800952a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4a20      	ldr	r2, [pc, #128]	; (80095bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800953a:	4293      	cmp	r3, r2
 800953c:	d022      	beq.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009546:	d01d      	beq.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	4a1d      	ldr	r2, [pc, #116]	; (80095c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800954e:	4293      	cmp	r3, r2
 8009550:	d018      	beq.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a1c      	ldr	r2, [pc, #112]	; (80095c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d013      	beq.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a1a      	ldr	r2, [pc, #104]	; (80095cc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d00e      	beq.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4a15      	ldr	r2, [pc, #84]	; (80095c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800956c:	4293      	cmp	r3, r2
 800956e:	d009      	beq.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a16      	ldr	r2, [pc, #88]	; (80095d0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d004      	beq.n	8009584 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	4a15      	ldr	r2, [pc, #84]	; (80095d4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009580:	4293      	cmp	r3, r2
 8009582:	d10c      	bne.n	800959e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800958a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800958c:	683b      	ldr	r3, [r7, #0]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	68ba      	ldr	r2, [r7, #8]
 8009592:	4313      	orrs	r3, r2
 8009594:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	68ba      	ldr	r2, [r7, #8]
 800959c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2201      	movs	r2, #1
 80095a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	3714      	adds	r7, #20
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr
 80095bc:	40010000 	.word	0x40010000
 80095c0:	40010400 	.word	0x40010400
 80095c4:	40000400 	.word	0x40000400
 80095c8:	40000800 	.word	0x40000800
 80095cc:	40000c00 	.word	0x40000c00
 80095d0:	40001800 	.word	0x40001800
 80095d4:	40014000 	.word	0x40014000

080095d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80095e2:	2300      	movs	r3, #0
 80095e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095ec:	2b01      	cmp	r3, #1
 80095ee:	d101      	bne.n	80095f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80095f0:	2302      	movs	r3, #2
 80095f2:	e065      	b.n	80096c0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2201      	movs	r2, #1
 80095f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	4313      	orrs	r3, r2
 8009608:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009610:	683b      	ldr	r3, [r7, #0]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	4313      	orrs	r3, r2
 8009616:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800961e:	683b      	ldr	r3, [r7, #0]
 8009620:	685b      	ldr	r3, [r3, #4]
 8009622:	4313      	orrs	r3, r2
 8009624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	4313      	orrs	r3, r2
 8009632:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	691b      	ldr	r3, [r3, #16]
 800963e:	4313      	orrs	r3, r2
 8009640:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009648:	683b      	ldr	r3, [r7, #0]
 800964a:	695b      	ldr	r3, [r3, #20]
 800964c:	4313      	orrs	r3, r2
 800964e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800965a:	4313      	orrs	r3, r2
 800965c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	699b      	ldr	r3, [r3, #24]
 8009668:	041b      	lsls	r3, r3, #16
 800966a:	4313      	orrs	r3, r2
 800966c:	60fb      	str	r3, [r7, #12]
    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
  }

#endif /* TIM_BDTR_BKBID */
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a16      	ldr	r2, [pc, #88]	; (80096cc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d004      	beq.n	8009682 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a14      	ldr	r2, [pc, #80]	; (80096d0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d115      	bne.n	80096ae <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968c:	051b      	lsls	r3, r3, #20
 800968e:	4313      	orrs	r3, r2
 8009690:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009698:	683b      	ldr	r3, [r7, #0]
 800969a:	69db      	ldr	r3, [r3, #28]
 800969c:	4313      	orrs	r3, r2
 800969e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	6a1b      	ldr	r3, [r3, #32]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	60fb      	str	r3, [r7, #12]
    }
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	68fa      	ldr	r2, [r7, #12]
 80096b4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80096be:	2300      	movs	r3, #0
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3714      	adds	r7, #20
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr
 80096cc:	40010000 	.word	0x40010000
 80096d0:	40010400 	.word	0x40010400

080096d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80096d4:	b480      	push	{r7}
 80096d6:	b083      	sub	sp, #12
 80096d8:	af00      	add	r7, sp, #0
 80096da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80096dc:	bf00      	nop
 80096de:	370c      	adds	r7, #12
 80096e0:	46bd      	mov	sp, r7
 80096e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e6:	4770      	bx	lr

080096e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80096f0:	bf00      	nop
 80096f2:	370c      	adds	r7, #12
 80096f4:	46bd      	mov	sp, r7
 80096f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fa:	4770      	bx	lr

080096fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009704:	bf00      	nop
 8009706:	370c      	adds	r7, #12
 8009708:	46bd      	mov	sp, r7
 800970a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970e:	4770      	bx	lr

08009710 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009710:	b580      	push	{r7, lr}
 8009712:	b082      	sub	sp, #8
 8009714:	af00      	add	r7, sp, #0
 8009716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d101      	bne.n	8009722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800971e:	2301      	movs	r3, #1
 8009720:	e042      	b.n	80097a8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009728:	2b00      	cmp	r3, #0
 800972a:	d106      	bne.n	800973a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2200      	movs	r2, #0
 8009730:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7f8 fde3 	bl	8002300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2224      	movs	r2, #36	; 0x24
 800973e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f022 0201 	bic.w	r2, r2, #1
 8009750:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 fbea 	bl	8009f2c <UART_SetConfig>
 8009758:	4603      	mov	r3, r0
 800975a:	2b01      	cmp	r3, #1
 800975c:	d101      	bne.n	8009762 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	e022      	b.n	80097a8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009766:	2b00      	cmp	r3, #0
 8009768:	d002      	beq.n	8009770 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f001 f93e 	bl	800a9ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	685a      	ldr	r2, [r3, #4]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800977e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	689a      	ldr	r2, [r3, #8]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800978e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f042 0201 	orr.w	r2, r2, #1
 800979e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80097a0:	6878      	ldr	r0, [r7, #4]
 80097a2:	f001 f9c5 	bl	800ab30 <UART_CheckIdleState>
 80097a6:	4603      	mov	r3, r0
}
 80097a8:	4618      	mov	r0, r3
 80097aa:	3708      	adds	r7, #8
 80097ac:	46bd      	mov	sp, r7
 80097ae:	bd80      	pop	{r7, pc}

080097b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b0ba      	sub	sp, #232	; 0xe8
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	69db      	ldr	r3, [r3, #28]
 80097be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80097d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80097da:	f640 030f 	movw	r3, #2063	; 0x80f
 80097de:	4013      	ands	r3, r2
 80097e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80097e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d11b      	bne.n	8009824 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80097ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097f0:	f003 0320 	and.w	r3, r3, #32
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d015      	beq.n	8009824 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80097f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097fc:	f003 0320 	and.w	r3, r3, #32
 8009800:	2b00      	cmp	r3, #0
 8009802:	d105      	bne.n	8009810 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009804:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009808:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800980c:	2b00      	cmp	r3, #0
 800980e:	d009      	beq.n	8009824 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009814:	2b00      	cmp	r3, #0
 8009816:	f000 835a 	beq.w	8009ece <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	4798      	blx	r3
      }
      return;
 8009822:	e354      	b.n	8009ece <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8009824:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009828:	2b00      	cmp	r3, #0
 800982a:	f000 811f 	beq.w	8009a6c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800982e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009832:	4b8b      	ldr	r3, [pc, #556]	; (8009a60 <HAL_UART_IRQHandler+0x2b0>)
 8009834:	4013      	ands	r3, r2
 8009836:	2b00      	cmp	r3, #0
 8009838:	d106      	bne.n	8009848 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800983a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800983e:	4b89      	ldr	r3, [pc, #548]	; (8009a64 <HAL_UART_IRQHandler+0x2b4>)
 8009840:	4013      	ands	r3, r2
 8009842:	2b00      	cmp	r3, #0
 8009844:	f000 8112 	beq.w	8009a6c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800984c:	f003 0301 	and.w	r3, r3, #1
 8009850:	2b00      	cmp	r3, #0
 8009852:	d011      	beq.n	8009878 <HAL_UART_IRQHandler+0xc8>
 8009854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00b      	beq.n	8009878 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2201      	movs	r2, #1
 8009866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800986e:	f043 0201 	orr.w	r2, r3, #1
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800987c:	f003 0302 	and.w	r3, r3, #2
 8009880:	2b00      	cmp	r3, #0
 8009882:	d011      	beq.n	80098a8 <HAL_UART_IRQHandler+0xf8>
 8009884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009888:	f003 0301 	and.w	r3, r3, #1
 800988c:	2b00      	cmp	r3, #0
 800988e:	d00b      	beq.n	80098a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2202      	movs	r2, #2
 8009896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800989e:	f043 0204 	orr.w	r2, r3, #4
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80098a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098ac:	f003 0304 	and.w	r3, r3, #4
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d011      	beq.n	80098d8 <HAL_UART_IRQHandler+0x128>
 80098b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80098b8:	f003 0301 	and.w	r3, r3, #1
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00b      	beq.n	80098d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2204      	movs	r2, #4
 80098c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098ce:	f043 0202 	orr.w	r2, r3, #2
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80098d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098dc:	f003 0308 	and.w	r3, r3, #8
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d017      	beq.n	8009914 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80098e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098e8:	f003 0320 	and.w	r3, r3, #32
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d105      	bne.n	80098fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80098f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80098f4:	4b5a      	ldr	r3, [pc, #360]	; (8009a60 <HAL_UART_IRQHandler+0x2b0>)
 80098f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00b      	beq.n	8009914 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2208      	movs	r2, #8
 8009902:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800990a:	f043 0208 	orr.w	r2, r3, #8
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8009914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800991c:	2b00      	cmp	r3, #0
 800991e:	d012      	beq.n	8009946 <HAL_UART_IRQHandler+0x196>
 8009920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009924:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009928:	2b00      	cmp	r3, #0
 800992a:	d00c      	beq.n	8009946 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009934:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800993c:	f043 0220 	orr.w	r2, r3, #32
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800994c:	2b00      	cmp	r3, #0
 800994e:	f000 82c0 	beq.w	8009ed2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009956:	f003 0320 	and.w	r3, r3, #32
 800995a:	2b00      	cmp	r3, #0
 800995c:	d013      	beq.n	8009986 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800995e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009962:	f003 0320 	and.w	r3, r3, #32
 8009966:	2b00      	cmp	r3, #0
 8009968:	d105      	bne.n	8009976 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800996a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800996e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009972:	2b00      	cmp	r3, #0
 8009974:	d007      	beq.n	8009986 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800997a:	2b00      	cmp	r3, #0
 800997c:	d003      	beq.n	8009986 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800998c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	689b      	ldr	r3, [r3, #8]
 8009996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800999a:	2b40      	cmp	r3, #64	; 0x40
 800999c:	d005      	beq.n	80099aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800999e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80099a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d04f      	beq.n	8009a4a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f001 f9d4 	bl	800ad58 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	689b      	ldr	r3, [r3, #8]
 80099b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099ba:	2b40      	cmp	r3, #64	; 0x40
 80099bc:	d141      	bne.n	8009a42 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	3308      	adds	r3, #8
 80099c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80099cc:	e853 3f00 	ldrex	r3, [r3]
 80099d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80099d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80099d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	3308      	adds	r3, #8
 80099e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80099ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80099ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80099f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80099fa:	e841 2300 	strex	r3, r2, [r1]
 80099fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009a02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d1d9      	bne.n	80099be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d013      	beq.n	8009a3a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a16:	4a14      	ldr	r2, [pc, #80]	; (8009a68 <HAL_UART_IRQHandler+0x2b8>)
 8009a18:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a1e:	4618      	mov	r0, r3
 8009a20:	f7fa f9e0 	bl	8003de4 <HAL_DMA_Abort_IT>
 8009a24:	4603      	mov	r3, r0
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d017      	beq.n	8009a5a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a30:	687a      	ldr	r2, [r7, #4]
 8009a32:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8009a34:	4610      	mov	r0, r2
 8009a36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a38:	e00f      	b.n	8009a5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fa60 	bl	8009f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a40:	e00b      	b.n	8009a5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 fa5c 	bl	8009f00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a48:	e007      	b.n	8009a5a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fa58 	bl	8009f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2200      	movs	r2, #0
 8009a54:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009a58:	e23b      	b.n	8009ed2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a5a:	bf00      	nop
    return;
 8009a5c:	e239      	b.n	8009ed2 <HAL_UART_IRQHandler+0x722>
 8009a5e:	bf00      	nop
 8009a60:	10000001 	.word	0x10000001
 8009a64:	04000120 	.word	0x04000120
 8009a68:	0800ae25 	.word	0x0800ae25

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	f040 81ce 	bne.w	8009e12 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009a76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a7a:	f003 0310 	and.w	r3, r3, #16
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	f000 81c7 	beq.w	8009e12 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009a84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a88:	f003 0310 	and.w	r3, r3, #16
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	f000 81c0 	beq.w	8009e12 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	2210      	movs	r2, #16
 8009a98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	689b      	ldr	r3, [r3, #8]
 8009aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aa4:	2b40      	cmp	r3, #64	; 0x40
 8009aa6:	f040 813b 	bne.w	8009d20 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a8b      	ldr	r2, [pc, #556]	; (8009ce0 <HAL_UART_IRQHandler+0x530>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d059      	beq.n	8009b6a <HAL_UART_IRQHandler+0x3ba>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a89      	ldr	r2, [pc, #548]	; (8009ce4 <HAL_UART_IRQHandler+0x534>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d053      	beq.n	8009b6a <HAL_UART_IRQHandler+0x3ba>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a87      	ldr	r2, [pc, #540]	; (8009ce8 <HAL_UART_IRQHandler+0x538>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d04d      	beq.n	8009b6a <HAL_UART_IRQHandler+0x3ba>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a85      	ldr	r2, [pc, #532]	; (8009cec <HAL_UART_IRQHandler+0x53c>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d047      	beq.n	8009b6a <HAL_UART_IRQHandler+0x3ba>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a83      	ldr	r2, [pc, #524]	; (8009cf0 <HAL_UART_IRQHandler+0x540>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d041      	beq.n	8009b6a <HAL_UART_IRQHandler+0x3ba>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a81      	ldr	r2, [pc, #516]	; (8009cf4 <HAL_UART_IRQHandler+0x544>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d03b      	beq.n	8009b6a <HAL_UART_IRQHandler+0x3ba>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a7f      	ldr	r2, [pc, #508]	; (8009cf8 <HAL_UART_IRQHandler+0x548>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d035      	beq.n	8009b6a <HAL_UART_IRQHandler+0x3ba>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a7d      	ldr	r2, [pc, #500]	; (8009cfc <HAL_UART_IRQHandler+0x54c>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d02f      	beq.n	8009b6a <HAL_UART_IRQHandler+0x3ba>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a7b      	ldr	r2, [pc, #492]	; (8009d00 <HAL_UART_IRQHandler+0x550>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d029      	beq.n	8009b6a <HAL_UART_IRQHandler+0x3ba>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a79      	ldr	r2, [pc, #484]	; (8009d04 <HAL_UART_IRQHandler+0x554>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d023      	beq.n	8009b6a <HAL_UART_IRQHandler+0x3ba>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a77      	ldr	r2, [pc, #476]	; (8009d08 <HAL_UART_IRQHandler+0x558>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d01d      	beq.n	8009b6a <HAL_UART_IRQHandler+0x3ba>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a75      	ldr	r2, [pc, #468]	; (8009d0c <HAL_UART_IRQHandler+0x55c>)
 8009b36:	4293      	cmp	r3, r2
 8009b38:	d017      	beq.n	8009b6a <HAL_UART_IRQHandler+0x3ba>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	4a73      	ldr	r2, [pc, #460]	; (8009d10 <HAL_UART_IRQHandler+0x560>)
 8009b42:	4293      	cmp	r3, r2
 8009b44:	d011      	beq.n	8009b6a <HAL_UART_IRQHandler+0x3ba>
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4a71      	ldr	r2, [pc, #452]	; (8009d14 <HAL_UART_IRQHandler+0x564>)
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d00b      	beq.n	8009b6a <HAL_UART_IRQHandler+0x3ba>
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	4a6f      	ldr	r2, [pc, #444]	; (8009d18 <HAL_UART_IRQHandler+0x568>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d005      	beq.n	8009b6a <HAL_UART_IRQHandler+0x3ba>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a6d      	ldr	r2, [pc, #436]	; (8009d1c <HAL_UART_IRQHandler+0x56c>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d105      	bne.n	8009b76 <HAL_UART_IRQHandler+0x3c6>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	b29b      	uxth	r3, r3
 8009b74:	e004      	b.n	8009b80 <HAL_UART_IRQHandler+0x3d0>
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	685b      	ldr	r3, [r3, #4]
 8009b7e:	b29b      	uxth	r3, r3
 8009b80:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009b84:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	f000 81a4 	beq.w	8009ed6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b94:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	f080 819c 	bcs.w	8009ed6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009ba4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009bac:	69db      	ldr	r3, [r3, #28]
 8009bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bb2:	f000 8086 	beq.w	8009cc2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009bc2:	e853 3f00 	ldrex	r3, [r3]
 8009bc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009bca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009bce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bd2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	461a      	mov	r2, r3
 8009bdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009be0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009be4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009be8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009bec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009bf0:	e841 2300 	strex	r3, r2, [r1]
 8009bf4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009bf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1da      	bne.n	8009bb6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	3308      	adds	r3, #8
 8009c06:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c0a:	e853 3f00 	ldrex	r3, [r3]
 8009c0e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009c10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c12:	f023 0301 	bic.w	r3, r3, #1
 8009c16:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	3308      	adds	r3, #8
 8009c20:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009c24:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009c28:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009c2c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009c30:	e841 2300 	strex	r3, r2, [r1]
 8009c34:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009c36:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d1e1      	bne.n	8009c00 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	3308      	adds	r3, #8
 8009c42:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c46:	e853 3f00 	ldrex	r3, [r3]
 8009c4a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009c4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	3308      	adds	r3, #8
 8009c5c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009c60:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009c62:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c64:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009c66:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009c68:	e841 2300 	strex	r3, r2, [r1]
 8009c6c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009c6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1e3      	bne.n	8009c3c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2220      	movs	r2, #32
 8009c78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	2200      	movs	r2, #0
 8009c80:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c8a:	e853 3f00 	ldrex	r3, [r3]
 8009c8e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009c90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c92:	f023 0310 	bic.w	r3, r3, #16
 8009c96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	461a      	mov	r2, r3
 8009ca0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009ca4:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ca6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009caa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009cac:	e841 2300 	strex	r3, r2, [r1]
 8009cb0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009cb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d1e4      	bne.n	8009c82 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	f7f9 fd73 	bl	80037a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	1ad3      	subs	r3, r2, r3
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f000 f91c 	bl	8009f14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009cdc:	e0fb      	b.n	8009ed6 <HAL_UART_IRQHandler+0x726>
 8009cde:	bf00      	nop
 8009ce0:	40020010 	.word	0x40020010
 8009ce4:	40020028 	.word	0x40020028
 8009ce8:	40020040 	.word	0x40020040
 8009cec:	40020058 	.word	0x40020058
 8009cf0:	40020070 	.word	0x40020070
 8009cf4:	40020088 	.word	0x40020088
 8009cf8:	400200a0 	.word	0x400200a0
 8009cfc:	400200b8 	.word	0x400200b8
 8009d00:	40020410 	.word	0x40020410
 8009d04:	40020428 	.word	0x40020428
 8009d08:	40020440 	.word	0x40020440
 8009d0c:	40020458 	.word	0x40020458
 8009d10:	40020470 	.word	0x40020470
 8009d14:	40020488 	.word	0x40020488
 8009d18:	400204a0 	.word	0x400204a0
 8009d1c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	1ad3      	subs	r3, r2, r3
 8009d30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009d3a:	b29b      	uxth	r3, r3
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	f000 80cc 	beq.w	8009eda <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8009d42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	f000 80c7 	beq.w	8009eda <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d54:	e853 3f00 	ldrex	r3, [r3]
 8009d58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	461a      	mov	r2, r3
 8009d6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d6e:	647b      	str	r3, [r7, #68]	; 0x44
 8009d70:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d76:	e841 2300 	strex	r3, r2, [r1]
 8009d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d7e:	2b00      	cmp	r3, #0
 8009d80:	d1e4      	bne.n	8009d4c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	3308      	adds	r3, #8
 8009d88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8c:	e853 3f00 	ldrex	r3, [r3]
 8009d90:	623b      	str	r3, [r7, #32]
   return(result);
 8009d92:	6a3a      	ldr	r2, [r7, #32]
 8009d94:	4b54      	ldr	r3, [pc, #336]	; (8009ee8 <HAL_UART_IRQHandler+0x738>)
 8009d96:	4013      	ands	r3, r2
 8009d98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	3308      	adds	r3, #8
 8009da2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009da6:	633a      	str	r2, [r7, #48]	; 0x30
 8009da8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009daa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009dac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dae:	e841 2300 	strex	r3, r2, [r1]
 8009db2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d1e3      	bne.n	8009d82 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	2220      	movs	r2, #32
 8009dbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2200      	movs	r2, #0
 8009dc6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	e853 3f00 	ldrex	r3, [r3]
 8009dda:	60fb      	str	r3, [r7, #12]
   return(result);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f023 0310 	bic.w	r3, r3, #16
 8009de2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	461a      	mov	r2, r3
 8009dec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009df0:	61fb      	str	r3, [r7, #28]
 8009df2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009df4:	69b9      	ldr	r1, [r7, #24]
 8009df6:	69fa      	ldr	r2, [r7, #28]
 8009df8:	e841 2300 	strex	r3, r2, [r1]
 8009dfc:	617b      	str	r3, [r7, #20]
   return(result);
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d1e4      	bne.n	8009dce <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009e04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009e08:	4619      	mov	r1, r3
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 f882 	bl	8009f14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009e10:	e063      	b.n	8009eda <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00e      	beq.n	8009e3c <HAL_UART_IRQHandler+0x68c>
 8009e1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d008      	beq.n	8009e3c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009e32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f001 f836 	bl	800aea6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e3a:	e051      	b.n	8009ee0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d014      	beq.n	8009e72 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d105      	bne.n	8009e60 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009e54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d008      	beq.n	8009e72 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d03a      	beq.n	8009ede <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	4798      	blx	r3
    }
    return;
 8009e70:	e035      	b.n	8009ede <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009e72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d009      	beq.n	8009e92 <HAL_UART_IRQHandler+0x6e2>
 8009e7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d003      	beq.n	8009e92 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 ffe0 	bl	800ae50 <UART_EndTransmit_IT>
    return;
 8009e90:	e026      	b.n	8009ee0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d009      	beq.n	8009eb2 <HAL_UART_IRQHandler+0x702>
 8009e9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ea2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d003      	beq.n	8009eb2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	f001 f80f 	bl	800aece <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009eb0:	e016      	b.n	8009ee0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009eb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d010      	beq.n	8009ee0 <HAL_UART_IRQHandler+0x730>
 8009ebe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	da0c      	bge.n	8009ee0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 fff7 	bl	800aeba <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009ecc:	e008      	b.n	8009ee0 <HAL_UART_IRQHandler+0x730>
      return;
 8009ece:	bf00      	nop
 8009ed0:	e006      	b.n	8009ee0 <HAL_UART_IRQHandler+0x730>
    return;
 8009ed2:	bf00      	nop
 8009ed4:	e004      	b.n	8009ee0 <HAL_UART_IRQHandler+0x730>
      return;
 8009ed6:	bf00      	nop
 8009ed8:	e002      	b.n	8009ee0 <HAL_UART_IRQHandler+0x730>
      return;
 8009eda:	bf00      	nop
 8009edc:	e000      	b.n	8009ee0 <HAL_UART_IRQHandler+0x730>
    return;
 8009ede:	bf00      	nop
  }
}
 8009ee0:	37e8      	adds	r7, #232	; 0xe8
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	effffffe 	.word	0xeffffffe

08009eec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009eec:	b480      	push	{r7}
 8009eee:	b083      	sub	sp, #12
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009ef4:	bf00      	nop
 8009ef6:	370c      	adds	r7, #12
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009f00:	b480      	push	{r7}
 8009f02:	b083      	sub	sp, #12
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009f08:	bf00      	nop
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b083      	sub	sp, #12
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	460b      	mov	r3, r1
 8009f1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009f20:	bf00      	nop
 8009f22:	370c      	adds	r7, #12
 8009f24:	46bd      	mov	sp, r7
 8009f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2a:	4770      	bx	lr

08009f2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f2c:	b5b0      	push	{r4, r5, r7, lr}
 8009f2e:	b08e      	sub	sp, #56	; 0x38
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009f34:	2300      	movs	r3, #0
 8009f36:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	689a      	ldr	r2, [r3, #8]
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	691b      	ldr	r3, [r3, #16]
 8009f42:	431a      	orrs	r2, r3
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	695b      	ldr	r3, [r3, #20]
 8009f48:	431a      	orrs	r2, r3
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	69db      	ldr	r3, [r3, #28]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	4bbf      	ldr	r3, [pc, #764]	; (800a258 <UART_SetConfig+0x32c>)
 8009f5a:	4013      	ands	r3, r2
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	6812      	ldr	r2, [r2, #0]
 8009f60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009f62:	430b      	orrs	r3, r1
 8009f64:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68da      	ldr	r2, [r3, #12]
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	430a      	orrs	r2, r1
 8009f7a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	699b      	ldr	r3, [r3, #24]
 8009f80:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	4ab5      	ldr	r2, [pc, #724]	; (800a25c <UART_SetConfig+0x330>)
 8009f88:	4293      	cmp	r3, r2
 8009f8a:	d004      	beq.n	8009f96 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	6a1b      	ldr	r3, [r3, #32]
 8009f90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009f92:	4313      	orrs	r3, r2
 8009f94:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	689a      	ldr	r2, [r3, #8]
 8009f9c:	4bb0      	ldr	r3, [pc, #704]	; (800a260 <UART_SetConfig+0x334>)
 8009f9e:	4013      	ands	r3, r2
 8009fa0:	687a      	ldr	r2, [r7, #4]
 8009fa2:	6812      	ldr	r2, [r2, #0]
 8009fa4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009fa6:	430b      	orrs	r3, r1
 8009fa8:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb0:	f023 010f 	bic.w	r1, r3, #15
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	430a      	orrs	r2, r1
 8009fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	4aa7      	ldr	r2, [pc, #668]	; (800a264 <UART_SetConfig+0x338>)
 8009fc6:	4293      	cmp	r3, r2
 8009fc8:	d176      	bne.n	800a0b8 <UART_SetConfig+0x18c>
 8009fca:	4ba7      	ldr	r3, [pc, #668]	; (800a268 <UART_SetConfig+0x33c>)
 8009fcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009fce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fd2:	2b28      	cmp	r3, #40	; 0x28
 8009fd4:	d86c      	bhi.n	800a0b0 <UART_SetConfig+0x184>
 8009fd6:	a201      	add	r2, pc, #4	; (adr r2, 8009fdc <UART_SetConfig+0xb0>)
 8009fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fdc:	0800a081 	.word	0x0800a081
 8009fe0:	0800a0b1 	.word	0x0800a0b1
 8009fe4:	0800a0b1 	.word	0x0800a0b1
 8009fe8:	0800a0b1 	.word	0x0800a0b1
 8009fec:	0800a0b1 	.word	0x0800a0b1
 8009ff0:	0800a0b1 	.word	0x0800a0b1
 8009ff4:	0800a0b1 	.word	0x0800a0b1
 8009ff8:	0800a0b1 	.word	0x0800a0b1
 8009ffc:	0800a089 	.word	0x0800a089
 800a000:	0800a0b1 	.word	0x0800a0b1
 800a004:	0800a0b1 	.word	0x0800a0b1
 800a008:	0800a0b1 	.word	0x0800a0b1
 800a00c:	0800a0b1 	.word	0x0800a0b1
 800a010:	0800a0b1 	.word	0x0800a0b1
 800a014:	0800a0b1 	.word	0x0800a0b1
 800a018:	0800a0b1 	.word	0x0800a0b1
 800a01c:	0800a091 	.word	0x0800a091
 800a020:	0800a0b1 	.word	0x0800a0b1
 800a024:	0800a0b1 	.word	0x0800a0b1
 800a028:	0800a0b1 	.word	0x0800a0b1
 800a02c:	0800a0b1 	.word	0x0800a0b1
 800a030:	0800a0b1 	.word	0x0800a0b1
 800a034:	0800a0b1 	.word	0x0800a0b1
 800a038:	0800a0b1 	.word	0x0800a0b1
 800a03c:	0800a099 	.word	0x0800a099
 800a040:	0800a0b1 	.word	0x0800a0b1
 800a044:	0800a0b1 	.word	0x0800a0b1
 800a048:	0800a0b1 	.word	0x0800a0b1
 800a04c:	0800a0b1 	.word	0x0800a0b1
 800a050:	0800a0b1 	.word	0x0800a0b1
 800a054:	0800a0b1 	.word	0x0800a0b1
 800a058:	0800a0b1 	.word	0x0800a0b1
 800a05c:	0800a0a1 	.word	0x0800a0a1
 800a060:	0800a0b1 	.word	0x0800a0b1
 800a064:	0800a0b1 	.word	0x0800a0b1
 800a068:	0800a0b1 	.word	0x0800a0b1
 800a06c:	0800a0b1 	.word	0x0800a0b1
 800a070:	0800a0b1 	.word	0x0800a0b1
 800a074:	0800a0b1 	.word	0x0800a0b1
 800a078:	0800a0b1 	.word	0x0800a0b1
 800a07c:	0800a0a9 	.word	0x0800a0a9
 800a080:	2301      	movs	r3, #1
 800a082:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a086:	e222      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a088:	2304      	movs	r3, #4
 800a08a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a08e:	e21e      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a090:	2308      	movs	r3, #8
 800a092:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a096:	e21a      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a098:	2310      	movs	r3, #16
 800a09a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a09e:	e216      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a0a0:	2320      	movs	r3, #32
 800a0a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0a6:	e212      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a0a8:	2340      	movs	r3, #64	; 0x40
 800a0aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0ae:	e20e      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a0b0:	2380      	movs	r3, #128	; 0x80
 800a0b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0b6:	e20a      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	4a6b      	ldr	r2, [pc, #428]	; (800a26c <UART_SetConfig+0x340>)
 800a0be:	4293      	cmp	r3, r2
 800a0c0:	d130      	bne.n	800a124 <UART_SetConfig+0x1f8>
 800a0c2:	4b69      	ldr	r3, [pc, #420]	; (800a268 <UART_SetConfig+0x33c>)
 800a0c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0c6:	f003 0307 	and.w	r3, r3, #7
 800a0ca:	2b05      	cmp	r3, #5
 800a0cc:	d826      	bhi.n	800a11c <UART_SetConfig+0x1f0>
 800a0ce:	a201      	add	r2, pc, #4	; (adr r2, 800a0d4 <UART_SetConfig+0x1a8>)
 800a0d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0d4:	0800a0ed 	.word	0x0800a0ed
 800a0d8:	0800a0f5 	.word	0x0800a0f5
 800a0dc:	0800a0fd 	.word	0x0800a0fd
 800a0e0:	0800a105 	.word	0x0800a105
 800a0e4:	0800a10d 	.word	0x0800a10d
 800a0e8:	0800a115 	.word	0x0800a115
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0f2:	e1ec      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a0f4:	2304      	movs	r3, #4
 800a0f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a0fa:	e1e8      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a0fc:	2308      	movs	r3, #8
 800a0fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a102:	e1e4      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a104:	2310      	movs	r3, #16
 800a106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a10a:	e1e0      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a10c:	2320      	movs	r3, #32
 800a10e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a112:	e1dc      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a114:	2340      	movs	r3, #64	; 0x40
 800a116:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a11a:	e1d8      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a11c:	2380      	movs	r3, #128	; 0x80
 800a11e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a122:	e1d4      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a51      	ldr	r2, [pc, #324]	; (800a270 <UART_SetConfig+0x344>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d130      	bne.n	800a190 <UART_SetConfig+0x264>
 800a12e:	4b4e      	ldr	r3, [pc, #312]	; (800a268 <UART_SetConfig+0x33c>)
 800a130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a132:	f003 0307 	and.w	r3, r3, #7
 800a136:	2b05      	cmp	r3, #5
 800a138:	d826      	bhi.n	800a188 <UART_SetConfig+0x25c>
 800a13a:	a201      	add	r2, pc, #4	; (adr r2, 800a140 <UART_SetConfig+0x214>)
 800a13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a140:	0800a159 	.word	0x0800a159
 800a144:	0800a161 	.word	0x0800a161
 800a148:	0800a169 	.word	0x0800a169
 800a14c:	0800a171 	.word	0x0800a171
 800a150:	0800a179 	.word	0x0800a179
 800a154:	0800a181 	.word	0x0800a181
 800a158:	2300      	movs	r3, #0
 800a15a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a15e:	e1b6      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a160:	2304      	movs	r3, #4
 800a162:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a166:	e1b2      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a168:	2308      	movs	r3, #8
 800a16a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a16e:	e1ae      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a170:	2310      	movs	r3, #16
 800a172:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a176:	e1aa      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a178:	2320      	movs	r3, #32
 800a17a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a17e:	e1a6      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a180:	2340      	movs	r3, #64	; 0x40
 800a182:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a186:	e1a2      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a188:	2380      	movs	r3, #128	; 0x80
 800a18a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a18e:	e19e      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a37      	ldr	r2, [pc, #220]	; (800a274 <UART_SetConfig+0x348>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d130      	bne.n	800a1fc <UART_SetConfig+0x2d0>
 800a19a:	4b33      	ldr	r3, [pc, #204]	; (800a268 <UART_SetConfig+0x33c>)
 800a19c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a19e:	f003 0307 	and.w	r3, r3, #7
 800a1a2:	2b05      	cmp	r3, #5
 800a1a4:	d826      	bhi.n	800a1f4 <UART_SetConfig+0x2c8>
 800a1a6:	a201      	add	r2, pc, #4	; (adr r2, 800a1ac <UART_SetConfig+0x280>)
 800a1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ac:	0800a1c5 	.word	0x0800a1c5
 800a1b0:	0800a1cd 	.word	0x0800a1cd
 800a1b4:	0800a1d5 	.word	0x0800a1d5
 800a1b8:	0800a1dd 	.word	0x0800a1dd
 800a1bc:	0800a1e5 	.word	0x0800a1e5
 800a1c0:	0800a1ed 	.word	0x0800a1ed
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ca:	e180      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a1cc:	2304      	movs	r3, #4
 800a1ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1d2:	e17c      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a1d4:	2308      	movs	r3, #8
 800a1d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1da:	e178      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a1dc:	2310      	movs	r3, #16
 800a1de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1e2:	e174      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a1e4:	2320      	movs	r3, #32
 800a1e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1ea:	e170      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a1ec:	2340      	movs	r3, #64	; 0x40
 800a1ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1f2:	e16c      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a1f4:	2380      	movs	r3, #128	; 0x80
 800a1f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a1fa:	e168      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a1d      	ldr	r2, [pc, #116]	; (800a278 <UART_SetConfig+0x34c>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d142      	bne.n	800a28c <UART_SetConfig+0x360>
 800a206:	4b18      	ldr	r3, [pc, #96]	; (800a268 <UART_SetConfig+0x33c>)
 800a208:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a20a:	f003 0307 	and.w	r3, r3, #7
 800a20e:	2b05      	cmp	r3, #5
 800a210:	d838      	bhi.n	800a284 <UART_SetConfig+0x358>
 800a212:	a201      	add	r2, pc, #4	; (adr r2, 800a218 <UART_SetConfig+0x2ec>)
 800a214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a218:	0800a231 	.word	0x0800a231
 800a21c:	0800a239 	.word	0x0800a239
 800a220:	0800a241 	.word	0x0800a241
 800a224:	0800a249 	.word	0x0800a249
 800a228:	0800a251 	.word	0x0800a251
 800a22c:	0800a27d 	.word	0x0800a27d
 800a230:	2300      	movs	r3, #0
 800a232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a236:	e14a      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a238:	2304      	movs	r3, #4
 800a23a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a23e:	e146      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a240:	2308      	movs	r3, #8
 800a242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a246:	e142      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a248:	2310      	movs	r3, #16
 800a24a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a24e:	e13e      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a250:	2320      	movs	r3, #32
 800a252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a256:	e13a      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a258:	cfff69f3 	.word	0xcfff69f3
 800a25c:	58000c00 	.word	0x58000c00
 800a260:	11fff4ff 	.word	0x11fff4ff
 800a264:	40011000 	.word	0x40011000
 800a268:	58024400 	.word	0x58024400
 800a26c:	40004400 	.word	0x40004400
 800a270:	40004800 	.word	0x40004800
 800a274:	40004c00 	.word	0x40004c00
 800a278:	40005000 	.word	0x40005000
 800a27c:	2340      	movs	r3, #64	; 0x40
 800a27e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a282:	e124      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a284:	2380      	movs	r3, #128	; 0x80
 800a286:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a28a:	e120      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4acc      	ldr	r2, [pc, #816]	; (800a5c4 <UART_SetConfig+0x698>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d176      	bne.n	800a384 <UART_SetConfig+0x458>
 800a296:	4bcc      	ldr	r3, [pc, #816]	; (800a5c8 <UART_SetConfig+0x69c>)
 800a298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a29a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a29e:	2b28      	cmp	r3, #40	; 0x28
 800a2a0:	d86c      	bhi.n	800a37c <UART_SetConfig+0x450>
 800a2a2:	a201      	add	r2, pc, #4	; (adr r2, 800a2a8 <UART_SetConfig+0x37c>)
 800a2a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2a8:	0800a34d 	.word	0x0800a34d
 800a2ac:	0800a37d 	.word	0x0800a37d
 800a2b0:	0800a37d 	.word	0x0800a37d
 800a2b4:	0800a37d 	.word	0x0800a37d
 800a2b8:	0800a37d 	.word	0x0800a37d
 800a2bc:	0800a37d 	.word	0x0800a37d
 800a2c0:	0800a37d 	.word	0x0800a37d
 800a2c4:	0800a37d 	.word	0x0800a37d
 800a2c8:	0800a355 	.word	0x0800a355
 800a2cc:	0800a37d 	.word	0x0800a37d
 800a2d0:	0800a37d 	.word	0x0800a37d
 800a2d4:	0800a37d 	.word	0x0800a37d
 800a2d8:	0800a37d 	.word	0x0800a37d
 800a2dc:	0800a37d 	.word	0x0800a37d
 800a2e0:	0800a37d 	.word	0x0800a37d
 800a2e4:	0800a37d 	.word	0x0800a37d
 800a2e8:	0800a35d 	.word	0x0800a35d
 800a2ec:	0800a37d 	.word	0x0800a37d
 800a2f0:	0800a37d 	.word	0x0800a37d
 800a2f4:	0800a37d 	.word	0x0800a37d
 800a2f8:	0800a37d 	.word	0x0800a37d
 800a2fc:	0800a37d 	.word	0x0800a37d
 800a300:	0800a37d 	.word	0x0800a37d
 800a304:	0800a37d 	.word	0x0800a37d
 800a308:	0800a365 	.word	0x0800a365
 800a30c:	0800a37d 	.word	0x0800a37d
 800a310:	0800a37d 	.word	0x0800a37d
 800a314:	0800a37d 	.word	0x0800a37d
 800a318:	0800a37d 	.word	0x0800a37d
 800a31c:	0800a37d 	.word	0x0800a37d
 800a320:	0800a37d 	.word	0x0800a37d
 800a324:	0800a37d 	.word	0x0800a37d
 800a328:	0800a36d 	.word	0x0800a36d
 800a32c:	0800a37d 	.word	0x0800a37d
 800a330:	0800a37d 	.word	0x0800a37d
 800a334:	0800a37d 	.word	0x0800a37d
 800a338:	0800a37d 	.word	0x0800a37d
 800a33c:	0800a37d 	.word	0x0800a37d
 800a340:	0800a37d 	.word	0x0800a37d
 800a344:	0800a37d 	.word	0x0800a37d
 800a348:	0800a375 	.word	0x0800a375
 800a34c:	2301      	movs	r3, #1
 800a34e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a352:	e0bc      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a354:	2304      	movs	r3, #4
 800a356:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a35a:	e0b8      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a35c:	2308      	movs	r3, #8
 800a35e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a362:	e0b4      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a364:	2310      	movs	r3, #16
 800a366:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a36a:	e0b0      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a36c:	2320      	movs	r3, #32
 800a36e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a372:	e0ac      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a374:	2340      	movs	r3, #64	; 0x40
 800a376:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a37a:	e0a8      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a37c:	2380      	movs	r3, #128	; 0x80
 800a37e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a382:	e0a4      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a90      	ldr	r2, [pc, #576]	; (800a5cc <UART_SetConfig+0x6a0>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d130      	bne.n	800a3f0 <UART_SetConfig+0x4c4>
 800a38e:	4b8e      	ldr	r3, [pc, #568]	; (800a5c8 <UART_SetConfig+0x69c>)
 800a390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a392:	f003 0307 	and.w	r3, r3, #7
 800a396:	2b05      	cmp	r3, #5
 800a398:	d826      	bhi.n	800a3e8 <UART_SetConfig+0x4bc>
 800a39a:	a201      	add	r2, pc, #4	; (adr r2, 800a3a0 <UART_SetConfig+0x474>)
 800a39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3a0:	0800a3b9 	.word	0x0800a3b9
 800a3a4:	0800a3c1 	.word	0x0800a3c1
 800a3a8:	0800a3c9 	.word	0x0800a3c9
 800a3ac:	0800a3d1 	.word	0x0800a3d1
 800a3b0:	0800a3d9 	.word	0x0800a3d9
 800a3b4:	0800a3e1 	.word	0x0800a3e1
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3be:	e086      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a3c0:	2304      	movs	r3, #4
 800a3c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3c6:	e082      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a3c8:	2308      	movs	r3, #8
 800a3ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ce:	e07e      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a3d0:	2310      	movs	r3, #16
 800a3d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3d6:	e07a      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a3d8:	2320      	movs	r3, #32
 800a3da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3de:	e076      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a3e0:	2340      	movs	r3, #64	; 0x40
 800a3e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3e6:	e072      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a3e8:	2380      	movs	r3, #128	; 0x80
 800a3ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ee:	e06e      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	4a76      	ldr	r2, [pc, #472]	; (800a5d0 <UART_SetConfig+0x6a4>)
 800a3f6:	4293      	cmp	r3, r2
 800a3f8:	d130      	bne.n	800a45c <UART_SetConfig+0x530>
 800a3fa:	4b73      	ldr	r3, [pc, #460]	; (800a5c8 <UART_SetConfig+0x69c>)
 800a3fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3fe:	f003 0307 	and.w	r3, r3, #7
 800a402:	2b05      	cmp	r3, #5
 800a404:	d826      	bhi.n	800a454 <UART_SetConfig+0x528>
 800a406:	a201      	add	r2, pc, #4	; (adr r2, 800a40c <UART_SetConfig+0x4e0>)
 800a408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a40c:	0800a425 	.word	0x0800a425
 800a410:	0800a42d 	.word	0x0800a42d
 800a414:	0800a435 	.word	0x0800a435
 800a418:	0800a43d 	.word	0x0800a43d
 800a41c:	0800a445 	.word	0x0800a445
 800a420:	0800a44d 	.word	0x0800a44d
 800a424:	2300      	movs	r3, #0
 800a426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a42a:	e050      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a42c:	2304      	movs	r3, #4
 800a42e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a432:	e04c      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a434:	2308      	movs	r3, #8
 800a436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a43a:	e048      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a43c:	2310      	movs	r3, #16
 800a43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a442:	e044      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a444:	2320      	movs	r3, #32
 800a446:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a44a:	e040      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a44c:	2340      	movs	r3, #64	; 0x40
 800a44e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a452:	e03c      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a454:	2380      	movs	r3, #128	; 0x80
 800a456:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a45a:	e038      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	4a5c      	ldr	r2, [pc, #368]	; (800a5d4 <UART_SetConfig+0x6a8>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d130      	bne.n	800a4c8 <UART_SetConfig+0x59c>
 800a466:	4b58      	ldr	r3, [pc, #352]	; (800a5c8 <UART_SetConfig+0x69c>)
 800a468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a46a:	f003 0307 	and.w	r3, r3, #7
 800a46e:	2b05      	cmp	r3, #5
 800a470:	d826      	bhi.n	800a4c0 <UART_SetConfig+0x594>
 800a472:	a201      	add	r2, pc, #4	; (adr r2, 800a478 <UART_SetConfig+0x54c>)
 800a474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a478:	0800a491 	.word	0x0800a491
 800a47c:	0800a499 	.word	0x0800a499
 800a480:	0800a4a1 	.word	0x0800a4a1
 800a484:	0800a4a9 	.word	0x0800a4a9
 800a488:	0800a4b1 	.word	0x0800a4b1
 800a48c:	0800a4b9 	.word	0x0800a4b9
 800a490:	2302      	movs	r3, #2
 800a492:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a496:	e01a      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a498:	2304      	movs	r3, #4
 800a49a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a49e:	e016      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a4a0:	2308      	movs	r3, #8
 800a4a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4a6:	e012      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a4a8:	2310      	movs	r3, #16
 800a4aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4ae:	e00e      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a4b0:	2320      	movs	r3, #32
 800a4b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4b6:	e00a      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a4b8:	2340      	movs	r3, #64	; 0x40
 800a4ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4be:	e006      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a4c0:	2380      	movs	r3, #128	; 0x80
 800a4c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4c6:	e002      	b.n	800a4ce <UART_SetConfig+0x5a2>
 800a4c8:	2380      	movs	r3, #128	; 0x80
 800a4ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a40      	ldr	r2, [pc, #256]	; (800a5d4 <UART_SetConfig+0x6a8>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	f040 80ef 	bne.w	800a6b8 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a4da:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a4de:	2b20      	cmp	r3, #32
 800a4e0:	dc46      	bgt.n	800a570 <UART_SetConfig+0x644>
 800a4e2:	2b02      	cmp	r3, #2
 800a4e4:	f2c0 8081 	blt.w	800a5ea <UART_SetConfig+0x6be>
 800a4e8:	3b02      	subs	r3, #2
 800a4ea:	2b1e      	cmp	r3, #30
 800a4ec:	d87d      	bhi.n	800a5ea <UART_SetConfig+0x6be>
 800a4ee:	a201      	add	r2, pc, #4	; (adr r2, 800a4f4 <UART_SetConfig+0x5c8>)
 800a4f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4f4:	0800a577 	.word	0x0800a577
 800a4f8:	0800a5eb 	.word	0x0800a5eb
 800a4fc:	0800a57f 	.word	0x0800a57f
 800a500:	0800a5eb 	.word	0x0800a5eb
 800a504:	0800a5eb 	.word	0x0800a5eb
 800a508:	0800a5eb 	.word	0x0800a5eb
 800a50c:	0800a58f 	.word	0x0800a58f
 800a510:	0800a5eb 	.word	0x0800a5eb
 800a514:	0800a5eb 	.word	0x0800a5eb
 800a518:	0800a5eb 	.word	0x0800a5eb
 800a51c:	0800a5eb 	.word	0x0800a5eb
 800a520:	0800a5eb 	.word	0x0800a5eb
 800a524:	0800a5eb 	.word	0x0800a5eb
 800a528:	0800a5eb 	.word	0x0800a5eb
 800a52c:	0800a59f 	.word	0x0800a59f
 800a530:	0800a5eb 	.word	0x0800a5eb
 800a534:	0800a5eb 	.word	0x0800a5eb
 800a538:	0800a5eb 	.word	0x0800a5eb
 800a53c:	0800a5eb 	.word	0x0800a5eb
 800a540:	0800a5eb 	.word	0x0800a5eb
 800a544:	0800a5eb 	.word	0x0800a5eb
 800a548:	0800a5eb 	.word	0x0800a5eb
 800a54c:	0800a5eb 	.word	0x0800a5eb
 800a550:	0800a5eb 	.word	0x0800a5eb
 800a554:	0800a5eb 	.word	0x0800a5eb
 800a558:	0800a5eb 	.word	0x0800a5eb
 800a55c:	0800a5eb 	.word	0x0800a5eb
 800a560:	0800a5eb 	.word	0x0800a5eb
 800a564:	0800a5eb 	.word	0x0800a5eb
 800a568:	0800a5eb 	.word	0x0800a5eb
 800a56c:	0800a5dd 	.word	0x0800a5dd
 800a570:	2b40      	cmp	r3, #64	; 0x40
 800a572:	d036      	beq.n	800a5e2 <UART_SetConfig+0x6b6>
 800a574:	e039      	b.n	800a5ea <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a576:	f7fd f90f 	bl	8007798 <HAL_RCCEx_GetD3PCLK1Freq>
 800a57a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a57c:	e03b      	b.n	800a5f6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a57e:	f107 0314 	add.w	r3, r7, #20
 800a582:	4618      	mov	r0, r3
 800a584:	f7fd f91e 	bl	80077c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a588:	69bb      	ldr	r3, [r7, #24]
 800a58a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a58c:	e033      	b.n	800a5f6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a58e:	f107 0308 	add.w	r3, r7, #8
 800a592:	4618      	mov	r0, r3
 800a594:	f7fd fa6a 	bl	8007a6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a59c:	e02b      	b.n	800a5f6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a59e:	4b0a      	ldr	r3, [pc, #40]	; (800a5c8 <UART_SetConfig+0x69c>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f003 0320 	and.w	r3, r3, #32
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d009      	beq.n	800a5be <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a5aa:	4b07      	ldr	r3, [pc, #28]	; (800a5c8 <UART_SetConfig+0x69c>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	08db      	lsrs	r3, r3, #3
 800a5b0:	f003 0303 	and.w	r3, r3, #3
 800a5b4:	4a08      	ldr	r2, [pc, #32]	; (800a5d8 <UART_SetConfig+0x6ac>)
 800a5b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a5ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a5bc:	e01b      	b.n	800a5f6 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800a5be:	4b06      	ldr	r3, [pc, #24]	; (800a5d8 <UART_SetConfig+0x6ac>)
 800a5c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a5c2:	e018      	b.n	800a5f6 <UART_SetConfig+0x6ca>
 800a5c4:	40011400 	.word	0x40011400
 800a5c8:	58024400 	.word	0x58024400
 800a5cc:	40007800 	.word	0x40007800
 800a5d0:	40007c00 	.word	0x40007c00
 800a5d4:	58000c00 	.word	0x58000c00
 800a5d8:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a5dc:	4bc4      	ldr	r3, [pc, #784]	; (800a8f0 <UART_SetConfig+0x9c4>)
 800a5de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a5e0:	e009      	b.n	800a5f6 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a5e8:	e005      	b.n	800a5f6 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a5ee:	2301      	movs	r3, #1
 800a5f0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a5f4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a5f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	f000 81da 	beq.w	800a9b2 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a602:	4abc      	ldr	r2, [pc, #752]	; (800a8f4 <UART_SetConfig+0x9c8>)
 800a604:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a608:	461a      	mov	r2, r3
 800a60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a610:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	685a      	ldr	r2, [r3, #4]
 800a616:	4613      	mov	r3, r2
 800a618:	005b      	lsls	r3, r3, #1
 800a61a:	4413      	add	r3, r2
 800a61c:	6a3a      	ldr	r2, [r7, #32]
 800a61e:	429a      	cmp	r2, r3
 800a620:	d305      	bcc.n	800a62e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	685b      	ldr	r3, [r3, #4]
 800a626:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a628:	6a3a      	ldr	r2, [r7, #32]
 800a62a:	429a      	cmp	r2, r3
 800a62c:	d903      	bls.n	800a636 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a634:	e1bd      	b.n	800a9b2 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a638:	4618      	mov	r0, r3
 800a63a:	f04f 0100 	mov.w	r1, #0
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a642:	4aac      	ldr	r2, [pc, #688]	; (800a8f4 <UART_SetConfig+0x9c8>)
 800a644:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a648:	b29a      	uxth	r2, r3
 800a64a:	f04f 0300 	mov.w	r3, #0
 800a64e:	f7f5 fe9f 	bl	8000390 <__aeabi_uldivmod>
 800a652:	4602      	mov	r2, r0
 800a654:	460b      	mov	r3, r1
 800a656:	4610      	mov	r0, r2
 800a658:	4619      	mov	r1, r3
 800a65a:	f04f 0200 	mov.w	r2, #0
 800a65e:	f04f 0300 	mov.w	r3, #0
 800a662:	020b      	lsls	r3, r1, #8
 800a664:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a668:	0202      	lsls	r2, r0, #8
 800a66a:	6879      	ldr	r1, [r7, #4]
 800a66c:	6849      	ldr	r1, [r1, #4]
 800a66e:	0849      	lsrs	r1, r1, #1
 800a670:	4608      	mov	r0, r1
 800a672:	f04f 0100 	mov.w	r1, #0
 800a676:	1814      	adds	r4, r2, r0
 800a678:	eb43 0501 	adc.w	r5, r3, r1
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	461a      	mov	r2, r3
 800a682:	f04f 0300 	mov.w	r3, #0
 800a686:	4620      	mov	r0, r4
 800a688:	4629      	mov	r1, r5
 800a68a:	f7f5 fe81 	bl	8000390 <__aeabi_uldivmod>
 800a68e:	4602      	mov	r2, r0
 800a690:	460b      	mov	r3, r1
 800a692:	4613      	mov	r3, r2
 800a694:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a698:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a69c:	d308      	bcc.n	800a6b0 <UART_SetConfig+0x784>
 800a69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6a4:	d204      	bcs.n	800a6b0 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6ac:	60da      	str	r2, [r3, #12]
 800a6ae:	e180      	b.n	800a9b2 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 800a6b0:	2301      	movs	r3, #1
 800a6b2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a6b6:	e17c      	b.n	800a9b2 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	69db      	ldr	r3, [r3, #28]
 800a6bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6c0:	f040 80be 	bne.w	800a840 <UART_SetConfig+0x914>
  {
    switch (clocksource)
 800a6c4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a6c8:	2b20      	cmp	r3, #32
 800a6ca:	dc49      	bgt.n	800a760 <UART_SetConfig+0x834>
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	db7c      	blt.n	800a7ca <UART_SetConfig+0x89e>
 800a6d0:	2b20      	cmp	r3, #32
 800a6d2:	d87a      	bhi.n	800a7ca <UART_SetConfig+0x89e>
 800a6d4:	a201      	add	r2, pc, #4	; (adr r2, 800a6dc <UART_SetConfig+0x7b0>)
 800a6d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6da:	bf00      	nop
 800a6dc:	0800a767 	.word	0x0800a767
 800a6e0:	0800a76f 	.word	0x0800a76f
 800a6e4:	0800a7cb 	.word	0x0800a7cb
 800a6e8:	0800a7cb 	.word	0x0800a7cb
 800a6ec:	0800a777 	.word	0x0800a777
 800a6f0:	0800a7cb 	.word	0x0800a7cb
 800a6f4:	0800a7cb 	.word	0x0800a7cb
 800a6f8:	0800a7cb 	.word	0x0800a7cb
 800a6fc:	0800a787 	.word	0x0800a787
 800a700:	0800a7cb 	.word	0x0800a7cb
 800a704:	0800a7cb 	.word	0x0800a7cb
 800a708:	0800a7cb 	.word	0x0800a7cb
 800a70c:	0800a7cb 	.word	0x0800a7cb
 800a710:	0800a7cb 	.word	0x0800a7cb
 800a714:	0800a7cb 	.word	0x0800a7cb
 800a718:	0800a7cb 	.word	0x0800a7cb
 800a71c:	0800a797 	.word	0x0800a797
 800a720:	0800a7cb 	.word	0x0800a7cb
 800a724:	0800a7cb 	.word	0x0800a7cb
 800a728:	0800a7cb 	.word	0x0800a7cb
 800a72c:	0800a7cb 	.word	0x0800a7cb
 800a730:	0800a7cb 	.word	0x0800a7cb
 800a734:	0800a7cb 	.word	0x0800a7cb
 800a738:	0800a7cb 	.word	0x0800a7cb
 800a73c:	0800a7cb 	.word	0x0800a7cb
 800a740:	0800a7cb 	.word	0x0800a7cb
 800a744:	0800a7cb 	.word	0x0800a7cb
 800a748:	0800a7cb 	.word	0x0800a7cb
 800a74c:	0800a7cb 	.word	0x0800a7cb
 800a750:	0800a7cb 	.word	0x0800a7cb
 800a754:	0800a7cb 	.word	0x0800a7cb
 800a758:	0800a7cb 	.word	0x0800a7cb
 800a75c:	0800a7bd 	.word	0x0800a7bd
 800a760:	2b40      	cmp	r3, #64	; 0x40
 800a762:	d02e      	beq.n	800a7c2 <UART_SetConfig+0x896>
 800a764:	e031      	b.n	800a7ca <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a766:	f7fc f8ab 	bl	80068c0 <HAL_RCC_GetPCLK1Freq>
 800a76a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a76c:	e033      	b.n	800a7d6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a76e:	f7fc f8bd 	bl	80068ec <HAL_RCC_GetPCLK2Freq>
 800a772:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a774:	e02f      	b.n	800a7d6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a776:	f107 0314 	add.w	r3, r7, #20
 800a77a:	4618      	mov	r0, r3
 800a77c:	f7fd f822 	bl	80077c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a780:	69bb      	ldr	r3, [r7, #24]
 800a782:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a784:	e027      	b.n	800a7d6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a786:	f107 0308 	add.w	r3, r7, #8
 800a78a:	4618      	mov	r0, r3
 800a78c:	f7fd f96e 	bl	8007a6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a794:	e01f      	b.n	800a7d6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a796:	4b58      	ldr	r3, [pc, #352]	; (800a8f8 <UART_SetConfig+0x9cc>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f003 0320 	and.w	r3, r3, #32
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d009      	beq.n	800a7b6 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a7a2:	4b55      	ldr	r3, [pc, #340]	; (800a8f8 <UART_SetConfig+0x9cc>)
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	08db      	lsrs	r3, r3, #3
 800a7a8:	f003 0303 	and.w	r3, r3, #3
 800a7ac:	4a53      	ldr	r2, [pc, #332]	; (800a8fc <UART_SetConfig+0x9d0>)
 800a7ae:	fa22 f303 	lsr.w	r3, r2, r3
 800a7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a7b4:	e00f      	b.n	800a7d6 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 800a7b6:	4b51      	ldr	r3, [pc, #324]	; (800a8fc <UART_SetConfig+0x9d0>)
 800a7b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7ba:	e00c      	b.n	800a7d6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a7bc:	4b4c      	ldr	r3, [pc, #304]	; (800a8f0 <UART_SetConfig+0x9c4>)
 800a7be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7c0:	e009      	b.n	800a7d6 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a7c8:	e005      	b.n	800a7d6 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a7d4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	f000 80ea 	beq.w	800a9b2 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7e2:	4a44      	ldr	r2, [pc, #272]	; (800a8f4 <UART_SetConfig+0x9c8>)
 800a7e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7e8:	461a      	mov	r2, r3
 800a7ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a7ec:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7f0:	005a      	lsls	r2, r3, #1
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	085b      	lsrs	r3, r3, #1
 800a7f8:	441a      	add	r2, r3
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a802:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a806:	2b0f      	cmp	r3, #15
 800a808:	d916      	bls.n	800a838 <UART_SetConfig+0x90c>
 800a80a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a80c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a810:	d212      	bcs.n	800a838 <UART_SetConfig+0x90c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a814:	b29b      	uxth	r3, r3
 800a816:	f023 030f 	bic.w	r3, r3, #15
 800a81a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a81e:	085b      	lsrs	r3, r3, #1
 800a820:	b29b      	uxth	r3, r3
 800a822:	f003 0307 	and.w	r3, r3, #7
 800a826:	b29a      	uxth	r2, r3
 800a828:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a82a:	4313      	orrs	r3, r2
 800a82c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a834:	60da      	str	r2, [r3, #12]
 800a836:	e0bc      	b.n	800a9b2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a838:	2301      	movs	r3, #1
 800a83a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a83e:	e0b8      	b.n	800a9b2 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a840:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a844:	2b20      	cmp	r3, #32
 800a846:	dc4b      	bgt.n	800a8e0 <UART_SetConfig+0x9b4>
 800a848:	2b00      	cmp	r3, #0
 800a84a:	f2c0 8087 	blt.w	800a95c <UART_SetConfig+0xa30>
 800a84e:	2b20      	cmp	r3, #32
 800a850:	f200 8084 	bhi.w	800a95c <UART_SetConfig+0xa30>
 800a854:	a201      	add	r2, pc, #4	; (adr r2, 800a85c <UART_SetConfig+0x930>)
 800a856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a85a:	bf00      	nop
 800a85c:	0800a8e7 	.word	0x0800a8e7
 800a860:	0800a901 	.word	0x0800a901
 800a864:	0800a95d 	.word	0x0800a95d
 800a868:	0800a95d 	.word	0x0800a95d
 800a86c:	0800a909 	.word	0x0800a909
 800a870:	0800a95d 	.word	0x0800a95d
 800a874:	0800a95d 	.word	0x0800a95d
 800a878:	0800a95d 	.word	0x0800a95d
 800a87c:	0800a919 	.word	0x0800a919
 800a880:	0800a95d 	.word	0x0800a95d
 800a884:	0800a95d 	.word	0x0800a95d
 800a888:	0800a95d 	.word	0x0800a95d
 800a88c:	0800a95d 	.word	0x0800a95d
 800a890:	0800a95d 	.word	0x0800a95d
 800a894:	0800a95d 	.word	0x0800a95d
 800a898:	0800a95d 	.word	0x0800a95d
 800a89c:	0800a929 	.word	0x0800a929
 800a8a0:	0800a95d 	.word	0x0800a95d
 800a8a4:	0800a95d 	.word	0x0800a95d
 800a8a8:	0800a95d 	.word	0x0800a95d
 800a8ac:	0800a95d 	.word	0x0800a95d
 800a8b0:	0800a95d 	.word	0x0800a95d
 800a8b4:	0800a95d 	.word	0x0800a95d
 800a8b8:	0800a95d 	.word	0x0800a95d
 800a8bc:	0800a95d 	.word	0x0800a95d
 800a8c0:	0800a95d 	.word	0x0800a95d
 800a8c4:	0800a95d 	.word	0x0800a95d
 800a8c8:	0800a95d 	.word	0x0800a95d
 800a8cc:	0800a95d 	.word	0x0800a95d
 800a8d0:	0800a95d 	.word	0x0800a95d
 800a8d4:	0800a95d 	.word	0x0800a95d
 800a8d8:	0800a95d 	.word	0x0800a95d
 800a8dc:	0800a94f 	.word	0x0800a94f
 800a8e0:	2b40      	cmp	r3, #64	; 0x40
 800a8e2:	d037      	beq.n	800a954 <UART_SetConfig+0xa28>
 800a8e4:	e03a      	b.n	800a95c <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8e6:	f7fb ffeb 	bl	80068c0 <HAL_RCC_GetPCLK1Freq>
 800a8ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a8ec:	e03c      	b.n	800a968 <UART_SetConfig+0xa3c>
 800a8ee:	bf00      	nop
 800a8f0:	003d0900 	.word	0x003d0900
 800a8f4:	0800da00 	.word	0x0800da00
 800a8f8:	58024400 	.word	0x58024400
 800a8fc:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a900:	f7fb fff4 	bl	80068ec <HAL_RCC_GetPCLK2Freq>
 800a904:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a906:	e02f      	b.n	800a968 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a908:	f107 0314 	add.w	r3, r7, #20
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7fc ff59 	bl	80077c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a912:	69bb      	ldr	r3, [r7, #24]
 800a914:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a916:	e027      	b.n	800a968 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a918:	f107 0308 	add.w	r3, r7, #8
 800a91c:	4618      	mov	r0, r3
 800a91e:	f7fd f8a5 	bl	8007a6c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a926:	e01f      	b.n	800a968 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a928:	4b2c      	ldr	r3, [pc, #176]	; (800a9dc <UART_SetConfig+0xab0>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f003 0320 	and.w	r3, r3, #32
 800a930:	2b00      	cmp	r3, #0
 800a932:	d009      	beq.n	800a948 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a934:	4b29      	ldr	r3, [pc, #164]	; (800a9dc <UART_SetConfig+0xab0>)
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	08db      	lsrs	r3, r3, #3
 800a93a:	f003 0303 	and.w	r3, r3, #3
 800a93e:	4a28      	ldr	r2, [pc, #160]	; (800a9e0 <UART_SetConfig+0xab4>)
 800a940:	fa22 f303 	lsr.w	r3, r2, r3
 800a944:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a946:	e00f      	b.n	800a968 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 800a948:	4b25      	ldr	r3, [pc, #148]	; (800a9e0 <UART_SetConfig+0xab4>)
 800a94a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a94c:	e00c      	b.n	800a968 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a94e:	4b25      	ldr	r3, [pc, #148]	; (800a9e4 <UART_SetConfig+0xab8>)
 800a950:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a952:	e009      	b.n	800a968 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a954:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a958:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a95a:	e005      	b.n	800a968 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 800a95c:	2300      	movs	r3, #0
 800a95e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a960:	2301      	movs	r3, #1
 800a962:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a966:	bf00      	nop
    }

    if (pclk != 0U)
 800a968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d021      	beq.n	800a9b2 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a972:	4a1d      	ldr	r2, [pc, #116]	; (800a9e8 <UART_SetConfig+0xabc>)
 800a974:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a978:	461a      	mov	r2, r3
 800a97a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97c:	fbb3 f2f2 	udiv	r2, r3, r2
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	085b      	lsrs	r3, r3, #1
 800a986:	441a      	add	r2, r3
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	685b      	ldr	r3, [r3, #4]
 800a98c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a990:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a994:	2b0f      	cmp	r3, #15
 800a996:	d909      	bls.n	800a9ac <UART_SetConfig+0xa80>
 800a998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a99e:	d205      	bcs.n	800a9ac <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a2:	b29a      	uxth	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	60da      	str	r2, [r3, #12]
 800a9aa:	e002      	b.n	800a9b2 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800a9ac:	2301      	movs	r3, #1
 800a9ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	2201      	movs	r2, #1
 800a9b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2201      	movs	r2, #1
 800a9be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a9ce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3738      	adds	r7, #56	; 0x38
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bdb0      	pop	{r4, r5, r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	58024400 	.word	0x58024400
 800a9e0:	03d09000 	.word	0x03d09000
 800a9e4:	003d0900 	.word	0x003d0900
 800a9e8:	0800da00 	.word	0x0800da00

0800a9ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9f8:	f003 0301 	and.w	r3, r3, #1
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d00a      	beq.n	800aa16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	685b      	ldr	r3, [r3, #4]
 800aa06:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	430a      	orrs	r2, r1
 800aa14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa1a:	f003 0302 	and.w	r3, r3, #2
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d00a      	beq.n	800aa38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	685b      	ldr	r3, [r3, #4]
 800aa28:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	430a      	orrs	r2, r1
 800aa36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa3c:	f003 0304 	and.w	r3, r3, #4
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d00a      	beq.n	800aa5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	685b      	ldr	r3, [r3, #4]
 800aa4a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	430a      	orrs	r2, r1
 800aa58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa5e:	f003 0308 	and.w	r3, r3, #8
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d00a      	beq.n	800aa7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	685b      	ldr	r3, [r3, #4]
 800aa6c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	430a      	orrs	r2, r1
 800aa7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa80:	f003 0310 	and.w	r3, r3, #16
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d00a      	beq.n	800aa9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	689b      	ldr	r3, [r3, #8]
 800aa8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	430a      	orrs	r2, r1
 800aa9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aaa2:	f003 0320 	and.w	r3, r3, #32
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d00a      	beq.n	800aac0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	430a      	orrs	r2, r1
 800aabe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d01a      	beq.n	800ab02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	430a      	orrs	r2, r1
 800aae0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aaea:	d10a      	bne.n	800ab02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	430a      	orrs	r2, r1
 800ab00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d00a      	beq.n	800ab24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	685b      	ldr	r3, [r3, #4]
 800ab14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	430a      	orrs	r2, r1
 800ab22:	605a      	str	r2, [r3, #4]
  }
}
 800ab24:	bf00      	nop
 800ab26:	370c      	adds	r7, #12
 800ab28:	46bd      	mov	sp, r7
 800ab2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2e:	4770      	bx	lr

0800ab30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b086      	sub	sp, #24
 800ab34:	af02      	add	r7, sp, #8
 800ab36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ab40:	f7f8 f8c4 	bl	8002ccc <HAL_GetTick>
 800ab44:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f003 0308 	and.w	r3, r3, #8
 800ab50:	2b08      	cmp	r3, #8
 800ab52:	d10e      	bne.n	800ab72 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab58:	9300      	str	r3, [sp, #0]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 f82f 	bl	800abc6 <UART_WaitOnFlagUntilTimeout>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d001      	beq.n	800ab72 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab6e:	2303      	movs	r3, #3
 800ab70:	e025      	b.n	800abbe <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f003 0304 	and.w	r3, r3, #4
 800ab7c:	2b04      	cmp	r3, #4
 800ab7e:	d10e      	bne.n	800ab9e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab80:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab84:	9300      	str	r3, [sp, #0]
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 f819 	bl	800abc6 <UART_WaitOnFlagUntilTimeout>
 800ab94:	4603      	mov	r3, r0
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d001      	beq.n	800ab9e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab9a:	2303      	movs	r3, #3
 800ab9c:	e00f      	b.n	800abbe <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	2220      	movs	r2, #32
 800aba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	2220      	movs	r2, #32
 800abaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2200      	movs	r2, #0
 800abb2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800abbc:	2300      	movs	r3, #0
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b09c      	sub	sp, #112	; 0x70
 800abca:	af00      	add	r7, sp, #0
 800abcc:	60f8      	str	r0, [r7, #12]
 800abce:	60b9      	str	r1, [r7, #8]
 800abd0:	603b      	str	r3, [r7, #0]
 800abd2:	4613      	mov	r3, r2
 800abd4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abd6:	e0a9      	b.n	800ad2c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abd8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abde:	f000 80a5 	beq.w	800ad2c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abe2:	f7f8 f873 	bl	8002ccc <HAL_GetTick>
 800abe6:	4602      	mov	r2, r0
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	1ad3      	subs	r3, r2, r3
 800abec:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800abee:	429a      	cmp	r2, r3
 800abf0:	d302      	bcc.n	800abf8 <UART_WaitOnFlagUntilTimeout+0x32>
 800abf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d140      	bne.n	800ac7a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac00:	e853 3f00 	ldrex	r3, [r3]
 800ac04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ac06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac08:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ac0c:	667b      	str	r3, [r7, #100]	; 0x64
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	461a      	mov	r2, r3
 800ac14:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac16:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac18:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ac1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ac1e:	e841 2300 	strex	r3, r2, [r1]
 800ac22:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ac24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d1e6      	bne.n	800abf8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	3308      	adds	r3, #8
 800ac30:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac34:	e853 3f00 	ldrex	r3, [r3]
 800ac38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac3c:	f023 0301 	bic.w	r3, r3, #1
 800ac40:	663b      	str	r3, [r7, #96]	; 0x60
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	3308      	adds	r3, #8
 800ac48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ac4a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ac4c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac4e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac52:	e841 2300 	strex	r3, r2, [r1]
 800ac56:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ac58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d1e5      	bne.n	800ac2a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2220      	movs	r2, #32
 800ac62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	2220      	movs	r2, #32
 800ac6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2200      	movs	r2, #0
 800ac72:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ac76:	2303      	movs	r3, #3
 800ac78:	e069      	b.n	800ad4e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f003 0304 	and.w	r3, r3, #4
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d051      	beq.n	800ad2c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	69db      	ldr	r3, [r3, #28]
 800ac8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac96:	d149      	bne.n	800ad2c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aca0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acaa:	e853 3f00 	ldrex	r3, [r3]
 800acae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800acb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800acb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	461a      	mov	r2, r3
 800acbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800acc0:	637b      	str	r3, [r7, #52]	; 0x34
 800acc2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800acc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acc8:	e841 2300 	strex	r3, r2, [r1]
 800accc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800acce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d1e6      	bne.n	800aca2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800acd4:	68fb      	ldr	r3, [r7, #12]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	3308      	adds	r3, #8
 800acda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	e853 3f00 	ldrex	r3, [r3]
 800ace2:	613b      	str	r3, [r7, #16]
   return(result);
 800ace4:	693b      	ldr	r3, [r7, #16]
 800ace6:	f023 0301 	bic.w	r3, r3, #1
 800acea:	66bb      	str	r3, [r7, #104]	; 0x68
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	3308      	adds	r3, #8
 800acf2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800acf4:	623a      	str	r2, [r7, #32]
 800acf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf8:	69f9      	ldr	r1, [r7, #28]
 800acfa:	6a3a      	ldr	r2, [r7, #32]
 800acfc:	e841 2300 	strex	r3, r2, [r1]
 800ad00:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad02:	69bb      	ldr	r3, [r7, #24]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d1e5      	bne.n	800acd4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800ad08:	68fb      	ldr	r3, [r7, #12]
 800ad0a:	2220      	movs	r2, #32
 800ad0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	2220      	movs	r2, #32
 800ad14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	2220      	movs	r2, #32
 800ad1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800ad28:	2303      	movs	r3, #3
 800ad2a:	e010      	b.n	800ad4e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	69da      	ldr	r2, [r3, #28]
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	4013      	ands	r3, r2
 800ad36:	68ba      	ldr	r2, [r7, #8]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	bf0c      	ite	eq
 800ad3c:	2301      	moveq	r3, #1
 800ad3e:	2300      	movne	r3, #0
 800ad40:	b2db      	uxtb	r3, r3
 800ad42:	461a      	mov	r2, r3
 800ad44:	79fb      	ldrb	r3, [r7, #7]
 800ad46:	429a      	cmp	r2, r3
 800ad48:	f43f af46 	beq.w	800abd8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad4c:	2300      	movs	r3, #0
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3770      	adds	r7, #112	; 0x70
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bd80      	pop	{r7, pc}
	...

0800ad58 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b095      	sub	sp, #84	; 0x54
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad68:	e853 3f00 	ldrex	r3, [r3]
 800ad6c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad74:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	461a      	mov	r2, r3
 800ad7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad7e:	643b      	str	r3, [r7, #64]	; 0x40
 800ad80:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad82:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad84:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad86:	e841 2300 	strex	r3, r2, [r1]
 800ad8a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad8e:	2b00      	cmp	r3, #0
 800ad90:	d1e6      	bne.n	800ad60 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	3308      	adds	r3, #8
 800ad98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad9a:	6a3b      	ldr	r3, [r7, #32]
 800ad9c:	e853 3f00 	ldrex	r3, [r3]
 800ada0:	61fb      	str	r3, [r7, #28]
   return(result);
 800ada2:	69fa      	ldr	r2, [r7, #28]
 800ada4:	4b1e      	ldr	r3, [pc, #120]	; (800ae20 <UART_EndRxTransfer+0xc8>)
 800ada6:	4013      	ands	r3, r2
 800ada8:	64bb      	str	r3, [r7, #72]	; 0x48
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	3308      	adds	r3, #8
 800adb0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800adb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800adb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800adb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800adba:	e841 2300 	strex	r3, r2, [r1]
 800adbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800adc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d1e5      	bne.n	800ad92 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800adca:	2b01      	cmp	r3, #1
 800adcc:	d118      	bne.n	800ae00 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	e853 3f00 	ldrex	r3, [r3]
 800adda:	60bb      	str	r3, [r7, #8]
   return(result);
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	f023 0310 	bic.w	r3, r3, #16
 800ade2:	647b      	str	r3, [r7, #68]	; 0x44
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	461a      	mov	r2, r3
 800adea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adec:	61bb      	str	r3, [r7, #24]
 800adee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adf0:	6979      	ldr	r1, [r7, #20]
 800adf2:	69ba      	ldr	r2, [r7, #24]
 800adf4:	e841 2300 	strex	r3, r2, [r1]
 800adf8:	613b      	str	r3, [r7, #16]
   return(result);
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d1e6      	bne.n	800adce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	2220      	movs	r2, #32
 800ae04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2200      	movs	r2, #0
 800ae12:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ae14:	bf00      	nop
 800ae16:	3754      	adds	r7, #84	; 0x54
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1e:	4770      	bx	lr
 800ae20:	effffffe 	.word	0xeffffffe

0800ae24 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	2200      	movs	r2, #0
 800ae36:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ae3a:	68fb      	ldr	r3, [r7, #12]
 800ae3c:	2200      	movs	r2, #0
 800ae3e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae42:	68f8      	ldr	r0, [r7, #12]
 800ae44:	f7ff f85c 	bl	8009f00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae48:	bf00      	nop
 800ae4a:	3710      	adds	r7, #16
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b088      	sub	sp, #32
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	e853 3f00 	ldrex	r3, [r3]
 800ae64:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae6c:	61fb      	str	r3, [r7, #28]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	461a      	mov	r2, r3
 800ae74:	69fb      	ldr	r3, [r7, #28]
 800ae76:	61bb      	str	r3, [r7, #24]
 800ae78:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae7a:	6979      	ldr	r1, [r7, #20]
 800ae7c:	69ba      	ldr	r2, [r7, #24]
 800ae7e:	e841 2300 	strex	r3, r2, [r1]
 800ae82:	613b      	str	r3, [r7, #16]
   return(result);
 800ae84:	693b      	ldr	r3, [r7, #16]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d1e6      	bne.n	800ae58 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	2220      	movs	r2, #32
 800ae8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	2200      	movs	r2, #0
 800ae96:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f7ff f827 	bl	8009eec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae9e:	bf00      	nop
 800aea0:	3720      	adds	r7, #32
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800aea6:	b480      	push	{r7}
 800aea8:	b083      	sub	sp, #12
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800aeae:	bf00      	nop
 800aeb0:	370c      	adds	r7, #12
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr

0800aeba <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800aeba:	b480      	push	{r7}
 800aebc:	b083      	sub	sp, #12
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800aec2:	bf00      	nop
 800aec4:	370c      	adds	r7, #12
 800aec6:	46bd      	mov	sp, r7
 800aec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aecc:	4770      	bx	lr

0800aece <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aece:	b480      	push	{r7}
 800aed0:	b083      	sub	sp, #12
 800aed2:	af00      	add	r7, sp, #0
 800aed4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aed6:	bf00      	nop
 800aed8:	370c      	adds	r7, #12
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr

0800aee2 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 800aee2:	b580      	push	{r7, lr}
 800aee4:	b084      	sub	sp, #16
 800aee6:	af00      	add	r7, sp, #0
 800aee8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aef0:	2b01      	cmp	r3, #1
 800aef2:	d101      	bne.n	800aef8 <HAL_UARTEx_EnableFifoMode+0x16>
 800aef4:	2302      	movs	r3, #2
 800aef6:	e02b      	b.n	800af50 <HAL_UARTEx_EnableFifoMode+0x6e>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2201      	movs	r2, #1
 800aefc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2224      	movs	r2, #36	; 0x24
 800af04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	681a      	ldr	r2, [r3, #0]
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	f022 0201 	bic.w	r2, r2, #1
 800af1e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af26:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800af2e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	68fa      	ldr	r2, [r7, #12]
 800af36:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f000 f889 	bl	800b050 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2220      	movs	r2, #32
 800af42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af4e:	2300      	movs	r3, #0
}
 800af50:	4618      	mov	r0, r3
 800af52:	3710      	adds	r7, #16
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d101      	bne.n	800af70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af6c:	2302      	movs	r3, #2
 800af6e:	e02d      	b.n	800afcc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2201      	movs	r2, #1
 800af74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2224      	movs	r2, #36	; 0x24
 800af7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	681a      	ldr	r2, [r3, #0]
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f022 0201 	bic.w	r2, r2, #1
 800af96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	683a      	ldr	r2, [r7, #0]
 800afa8:	430a      	orrs	r2, r1
 800afaa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800afac:	6878      	ldr	r0, [r7, #4]
 800afae:	f000 f84f 	bl	800b050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	68fa      	ldr	r2, [r7, #12]
 800afb8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	2220      	movs	r2, #32
 800afbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2200      	movs	r2, #0
 800afc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800afca:	2300      	movs	r3, #0
}
 800afcc:	4618      	mov	r0, r3
 800afce:	3710      	adds	r7, #16
 800afd0:	46bd      	mov	sp, r7
 800afd2:	bd80      	pop	{r7, pc}

0800afd4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b084      	sub	sp, #16
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d101      	bne.n	800afec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800afe8:	2302      	movs	r3, #2
 800afea:	e02d      	b.n	800b048 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2201      	movs	r2, #1
 800aff0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2224      	movs	r2, #36	; 0x24
 800aff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f022 0201 	bic.w	r2, r2, #1
 800b012:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	683a      	ldr	r2, [r7, #0]
 800b024:	430a      	orrs	r2, r1
 800b026:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 f811 	bl	800b050 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	68fa      	ldr	r2, [r7, #12]
 800b034:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	2220      	movs	r2, #32
 800b03a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	2200      	movs	r2, #0
 800b042:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b046:	2300      	movs	r3, #0
}
 800b048:	4618      	mov	r0, r3
 800b04a:	3710      	adds	r7, #16
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b050:	b480      	push	{r7}
 800b052:	b085      	sub	sp, #20
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d108      	bne.n	800b072 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2201      	movs	r2, #1
 800b064:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2201      	movs	r2, #1
 800b06c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b070:	e031      	b.n	800b0d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b072:	2310      	movs	r3, #16
 800b074:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b076:	2310      	movs	r3, #16
 800b078:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	689b      	ldr	r3, [r3, #8]
 800b080:	0e5b      	lsrs	r3, r3, #25
 800b082:	b2db      	uxtb	r3, r3
 800b084:	f003 0307 	and.w	r3, r3, #7
 800b088:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	689b      	ldr	r3, [r3, #8]
 800b090:	0f5b      	lsrs	r3, r3, #29
 800b092:	b2db      	uxtb	r3, r3
 800b094:	f003 0307 	and.w	r3, r3, #7
 800b098:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b09a:	7bbb      	ldrb	r3, [r7, #14]
 800b09c:	7b3a      	ldrb	r2, [r7, #12]
 800b09e:	4911      	ldr	r1, [pc, #68]	; (800b0e4 <UARTEx_SetNbDataToProcess+0x94>)
 800b0a0:	5c8a      	ldrb	r2, [r1, r2]
 800b0a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b0a6:	7b3a      	ldrb	r2, [r7, #12]
 800b0a8:	490f      	ldr	r1, [pc, #60]	; (800b0e8 <UARTEx_SetNbDataToProcess+0x98>)
 800b0aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b0ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0b0:	b29a      	uxth	r2, r3
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0b8:	7bfb      	ldrb	r3, [r7, #15]
 800b0ba:	7b7a      	ldrb	r2, [r7, #13]
 800b0bc:	4909      	ldr	r1, [pc, #36]	; (800b0e4 <UARTEx_SetNbDataToProcess+0x94>)
 800b0be:	5c8a      	ldrb	r2, [r1, r2]
 800b0c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b0c4:	7b7a      	ldrb	r2, [r7, #13]
 800b0c6:	4908      	ldr	r1, [pc, #32]	; (800b0e8 <UARTEx_SetNbDataToProcess+0x98>)
 800b0c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b0ca:	fb93 f3f2 	sdiv	r3, r3, r2
 800b0ce:	b29a      	uxth	r2, r3
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b0d6:	bf00      	nop
 800b0d8:	3714      	adds	r7, #20
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr
 800b0e2:	bf00      	nop
 800b0e4:	0800da18 	.word	0x0800da18
 800b0e8:	0800da20 	.word	0x0800da20

0800b0ec <__errno>:
 800b0ec:	4b01      	ldr	r3, [pc, #4]	; (800b0f4 <__errno+0x8>)
 800b0ee:	6818      	ldr	r0, [r3, #0]
 800b0f0:	4770      	bx	lr
 800b0f2:	bf00      	nop
 800b0f4:	24000010 	.word	0x24000010

0800b0f8 <__libc_init_array>:
 800b0f8:	b570      	push	{r4, r5, r6, lr}
 800b0fa:	4d0d      	ldr	r5, [pc, #52]	; (800b130 <__libc_init_array+0x38>)
 800b0fc:	4c0d      	ldr	r4, [pc, #52]	; (800b134 <__libc_init_array+0x3c>)
 800b0fe:	1b64      	subs	r4, r4, r5
 800b100:	10a4      	asrs	r4, r4, #2
 800b102:	2600      	movs	r6, #0
 800b104:	42a6      	cmp	r6, r4
 800b106:	d109      	bne.n	800b11c <__libc_init_array+0x24>
 800b108:	4d0b      	ldr	r5, [pc, #44]	; (800b138 <__libc_init_array+0x40>)
 800b10a:	4c0c      	ldr	r4, [pc, #48]	; (800b13c <__libc_init_array+0x44>)
 800b10c:	f002 fc60 	bl	800d9d0 <_init>
 800b110:	1b64      	subs	r4, r4, r5
 800b112:	10a4      	asrs	r4, r4, #2
 800b114:	2600      	movs	r6, #0
 800b116:	42a6      	cmp	r6, r4
 800b118:	d105      	bne.n	800b126 <__libc_init_array+0x2e>
 800b11a:	bd70      	pop	{r4, r5, r6, pc}
 800b11c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b120:	4798      	blx	r3
 800b122:	3601      	adds	r6, #1
 800b124:	e7ee      	b.n	800b104 <__libc_init_array+0xc>
 800b126:	f855 3b04 	ldr.w	r3, [r5], #4
 800b12a:	4798      	blx	r3
 800b12c:	3601      	adds	r6, #1
 800b12e:	e7f2      	b.n	800b116 <__libc_init_array+0x1e>
 800b130:	0800de14 	.word	0x0800de14
 800b134:	0800de14 	.word	0x0800de14
 800b138:	0800de14 	.word	0x0800de14
 800b13c:	0800de1c 	.word	0x0800de1c

0800b140 <memset>:
 800b140:	4402      	add	r2, r0
 800b142:	4603      	mov	r3, r0
 800b144:	4293      	cmp	r3, r2
 800b146:	d100      	bne.n	800b14a <memset+0xa>
 800b148:	4770      	bx	lr
 800b14a:	f803 1b01 	strb.w	r1, [r3], #1
 800b14e:	e7f9      	b.n	800b144 <memset+0x4>

0800b150 <__cvt>:
 800b150:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b152:	ed2d 8b02 	vpush	{d8}
 800b156:	eeb0 8b40 	vmov.f64	d8, d0
 800b15a:	b085      	sub	sp, #20
 800b15c:	4617      	mov	r7, r2
 800b15e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800b160:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800b162:	ee18 2a90 	vmov	r2, s17
 800b166:	f025 0520 	bic.w	r5, r5, #32
 800b16a:	2a00      	cmp	r2, #0
 800b16c:	bfb6      	itet	lt
 800b16e:	222d      	movlt	r2, #45	; 0x2d
 800b170:	2200      	movge	r2, #0
 800b172:	eeb1 8b40 	vneglt.f64	d8, d0
 800b176:	2d46      	cmp	r5, #70	; 0x46
 800b178:	460c      	mov	r4, r1
 800b17a:	701a      	strb	r2, [r3, #0]
 800b17c:	d004      	beq.n	800b188 <__cvt+0x38>
 800b17e:	2d45      	cmp	r5, #69	; 0x45
 800b180:	d100      	bne.n	800b184 <__cvt+0x34>
 800b182:	3401      	adds	r4, #1
 800b184:	2102      	movs	r1, #2
 800b186:	e000      	b.n	800b18a <__cvt+0x3a>
 800b188:	2103      	movs	r1, #3
 800b18a:	ab03      	add	r3, sp, #12
 800b18c:	9301      	str	r3, [sp, #4]
 800b18e:	ab02      	add	r3, sp, #8
 800b190:	9300      	str	r3, [sp, #0]
 800b192:	4622      	mov	r2, r4
 800b194:	4633      	mov	r3, r6
 800b196:	eeb0 0b48 	vmov.f64	d0, d8
 800b19a:	f000 fca9 	bl	800baf0 <_dtoa_r>
 800b19e:	2d47      	cmp	r5, #71	; 0x47
 800b1a0:	d109      	bne.n	800b1b6 <__cvt+0x66>
 800b1a2:	07fb      	lsls	r3, r7, #31
 800b1a4:	d407      	bmi.n	800b1b6 <__cvt+0x66>
 800b1a6:	9b03      	ldr	r3, [sp, #12]
 800b1a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b1aa:	1a1b      	subs	r3, r3, r0
 800b1ac:	6013      	str	r3, [r2, #0]
 800b1ae:	b005      	add	sp, #20
 800b1b0:	ecbd 8b02 	vpop	{d8}
 800b1b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1b6:	2d46      	cmp	r5, #70	; 0x46
 800b1b8:	eb00 0204 	add.w	r2, r0, r4
 800b1bc:	d10c      	bne.n	800b1d8 <__cvt+0x88>
 800b1be:	7803      	ldrb	r3, [r0, #0]
 800b1c0:	2b30      	cmp	r3, #48	; 0x30
 800b1c2:	d107      	bne.n	800b1d4 <__cvt+0x84>
 800b1c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b1c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1cc:	bf1c      	itt	ne
 800b1ce:	f1c4 0401 	rsbne	r4, r4, #1
 800b1d2:	6034      	strne	r4, [r6, #0]
 800b1d4:	6833      	ldr	r3, [r6, #0]
 800b1d6:	441a      	add	r2, r3
 800b1d8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800b1dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1e0:	bf08      	it	eq
 800b1e2:	9203      	streq	r2, [sp, #12]
 800b1e4:	2130      	movs	r1, #48	; 0x30
 800b1e6:	9b03      	ldr	r3, [sp, #12]
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d2dc      	bcs.n	800b1a6 <__cvt+0x56>
 800b1ec:	1c5c      	adds	r4, r3, #1
 800b1ee:	9403      	str	r4, [sp, #12]
 800b1f0:	7019      	strb	r1, [r3, #0]
 800b1f2:	e7f8      	b.n	800b1e6 <__cvt+0x96>

0800b1f4 <__exponent>:
 800b1f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1f6:	4603      	mov	r3, r0
 800b1f8:	2900      	cmp	r1, #0
 800b1fa:	bfb8      	it	lt
 800b1fc:	4249      	neglt	r1, r1
 800b1fe:	f803 2b02 	strb.w	r2, [r3], #2
 800b202:	bfb4      	ite	lt
 800b204:	222d      	movlt	r2, #45	; 0x2d
 800b206:	222b      	movge	r2, #43	; 0x2b
 800b208:	2909      	cmp	r1, #9
 800b20a:	7042      	strb	r2, [r0, #1]
 800b20c:	dd2a      	ble.n	800b264 <__exponent+0x70>
 800b20e:	f10d 0407 	add.w	r4, sp, #7
 800b212:	46a4      	mov	ip, r4
 800b214:	270a      	movs	r7, #10
 800b216:	46a6      	mov	lr, r4
 800b218:	460a      	mov	r2, r1
 800b21a:	fb91 f6f7 	sdiv	r6, r1, r7
 800b21e:	fb07 1516 	mls	r5, r7, r6, r1
 800b222:	3530      	adds	r5, #48	; 0x30
 800b224:	2a63      	cmp	r2, #99	; 0x63
 800b226:	f104 34ff 	add.w	r4, r4, #4294967295
 800b22a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b22e:	4631      	mov	r1, r6
 800b230:	dcf1      	bgt.n	800b216 <__exponent+0x22>
 800b232:	3130      	adds	r1, #48	; 0x30
 800b234:	f1ae 0502 	sub.w	r5, lr, #2
 800b238:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b23c:	1c44      	adds	r4, r0, #1
 800b23e:	4629      	mov	r1, r5
 800b240:	4561      	cmp	r1, ip
 800b242:	d30a      	bcc.n	800b25a <__exponent+0x66>
 800b244:	f10d 0209 	add.w	r2, sp, #9
 800b248:	eba2 020e 	sub.w	r2, r2, lr
 800b24c:	4565      	cmp	r5, ip
 800b24e:	bf88      	it	hi
 800b250:	2200      	movhi	r2, #0
 800b252:	4413      	add	r3, r2
 800b254:	1a18      	subs	r0, r3, r0
 800b256:	b003      	add	sp, #12
 800b258:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b25a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b25e:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b262:	e7ed      	b.n	800b240 <__exponent+0x4c>
 800b264:	2330      	movs	r3, #48	; 0x30
 800b266:	3130      	adds	r1, #48	; 0x30
 800b268:	7083      	strb	r3, [r0, #2]
 800b26a:	70c1      	strb	r1, [r0, #3]
 800b26c:	1d03      	adds	r3, r0, #4
 800b26e:	e7f1      	b.n	800b254 <__exponent+0x60>

0800b270 <_printf_float>:
 800b270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b274:	b08b      	sub	sp, #44	; 0x2c
 800b276:	460c      	mov	r4, r1
 800b278:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800b27c:	4616      	mov	r6, r2
 800b27e:	461f      	mov	r7, r3
 800b280:	4605      	mov	r5, r0
 800b282:	f001 f9b7 	bl	800c5f4 <_localeconv_r>
 800b286:	f8d0 b000 	ldr.w	fp, [r0]
 800b28a:	4658      	mov	r0, fp
 800b28c:	f7f5 f828 	bl	80002e0 <strlen>
 800b290:	2300      	movs	r3, #0
 800b292:	9308      	str	r3, [sp, #32]
 800b294:	f8d8 3000 	ldr.w	r3, [r8]
 800b298:	f894 9018 	ldrb.w	r9, [r4, #24]
 800b29c:	6822      	ldr	r2, [r4, #0]
 800b29e:	3307      	adds	r3, #7
 800b2a0:	f023 0307 	bic.w	r3, r3, #7
 800b2a4:	f103 0108 	add.w	r1, r3, #8
 800b2a8:	f8c8 1000 	str.w	r1, [r8]
 800b2ac:	4682      	mov	sl, r0
 800b2ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 800b2b2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 800b2b6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 800b518 <_printf_float+0x2a8>
 800b2ba:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 800b2be:	eeb0 6bc0 	vabs.f64	d6, d0
 800b2c2:	eeb4 6b47 	vcmp.f64	d6, d7
 800b2c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2ca:	dd24      	ble.n	800b316 <_printf_float+0xa6>
 800b2cc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800b2d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b2d4:	d502      	bpl.n	800b2dc <_printf_float+0x6c>
 800b2d6:	232d      	movs	r3, #45	; 0x2d
 800b2d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b2dc:	4b90      	ldr	r3, [pc, #576]	; (800b520 <_printf_float+0x2b0>)
 800b2de:	4891      	ldr	r0, [pc, #580]	; (800b524 <_printf_float+0x2b4>)
 800b2e0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800b2e4:	bf94      	ite	ls
 800b2e6:	4698      	movls	r8, r3
 800b2e8:	4680      	movhi	r8, r0
 800b2ea:	2303      	movs	r3, #3
 800b2ec:	6123      	str	r3, [r4, #16]
 800b2ee:	f022 0204 	bic.w	r2, r2, #4
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	6022      	str	r2, [r4, #0]
 800b2f6:	9304      	str	r3, [sp, #16]
 800b2f8:	9700      	str	r7, [sp, #0]
 800b2fa:	4633      	mov	r3, r6
 800b2fc:	aa09      	add	r2, sp, #36	; 0x24
 800b2fe:	4621      	mov	r1, r4
 800b300:	4628      	mov	r0, r5
 800b302:	f000 f9d3 	bl	800b6ac <_printf_common>
 800b306:	3001      	adds	r0, #1
 800b308:	f040 808a 	bne.w	800b420 <_printf_float+0x1b0>
 800b30c:	f04f 30ff 	mov.w	r0, #4294967295
 800b310:	b00b      	add	sp, #44	; 0x2c
 800b312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b316:	eeb4 0b40 	vcmp.f64	d0, d0
 800b31a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b31e:	d709      	bvc.n	800b334 <_printf_float+0xc4>
 800b320:	ee10 3a90 	vmov	r3, s1
 800b324:	2b00      	cmp	r3, #0
 800b326:	bfbc      	itt	lt
 800b328:	232d      	movlt	r3, #45	; 0x2d
 800b32a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b32e:	487e      	ldr	r0, [pc, #504]	; (800b528 <_printf_float+0x2b8>)
 800b330:	4b7e      	ldr	r3, [pc, #504]	; (800b52c <_printf_float+0x2bc>)
 800b332:	e7d5      	b.n	800b2e0 <_printf_float+0x70>
 800b334:	6863      	ldr	r3, [r4, #4]
 800b336:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800b33a:	9104      	str	r1, [sp, #16]
 800b33c:	1c59      	adds	r1, r3, #1
 800b33e:	d13c      	bne.n	800b3ba <_printf_float+0x14a>
 800b340:	2306      	movs	r3, #6
 800b342:	6063      	str	r3, [r4, #4]
 800b344:	2300      	movs	r3, #0
 800b346:	9303      	str	r3, [sp, #12]
 800b348:	ab08      	add	r3, sp, #32
 800b34a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800b34e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b352:	ab07      	add	r3, sp, #28
 800b354:	6861      	ldr	r1, [r4, #4]
 800b356:	9300      	str	r3, [sp, #0]
 800b358:	6022      	str	r2, [r4, #0]
 800b35a:	f10d 031b 	add.w	r3, sp, #27
 800b35e:	4628      	mov	r0, r5
 800b360:	f7ff fef6 	bl	800b150 <__cvt>
 800b364:	9b04      	ldr	r3, [sp, #16]
 800b366:	9907      	ldr	r1, [sp, #28]
 800b368:	2b47      	cmp	r3, #71	; 0x47
 800b36a:	4680      	mov	r8, r0
 800b36c:	d108      	bne.n	800b380 <_printf_float+0x110>
 800b36e:	1cc8      	adds	r0, r1, #3
 800b370:	db02      	blt.n	800b378 <_printf_float+0x108>
 800b372:	6863      	ldr	r3, [r4, #4]
 800b374:	4299      	cmp	r1, r3
 800b376:	dd41      	ble.n	800b3fc <_printf_float+0x18c>
 800b378:	f1a9 0902 	sub.w	r9, r9, #2
 800b37c:	fa5f f989 	uxtb.w	r9, r9
 800b380:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b384:	d820      	bhi.n	800b3c8 <_printf_float+0x158>
 800b386:	3901      	subs	r1, #1
 800b388:	464a      	mov	r2, r9
 800b38a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b38e:	9107      	str	r1, [sp, #28]
 800b390:	f7ff ff30 	bl	800b1f4 <__exponent>
 800b394:	9a08      	ldr	r2, [sp, #32]
 800b396:	9004      	str	r0, [sp, #16]
 800b398:	1813      	adds	r3, r2, r0
 800b39a:	2a01      	cmp	r2, #1
 800b39c:	6123      	str	r3, [r4, #16]
 800b39e:	dc02      	bgt.n	800b3a6 <_printf_float+0x136>
 800b3a0:	6822      	ldr	r2, [r4, #0]
 800b3a2:	07d2      	lsls	r2, r2, #31
 800b3a4:	d501      	bpl.n	800b3aa <_printf_float+0x13a>
 800b3a6:	3301      	adds	r3, #1
 800b3a8:	6123      	str	r3, [r4, #16]
 800b3aa:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d0a2      	beq.n	800b2f8 <_printf_float+0x88>
 800b3b2:	232d      	movs	r3, #45	; 0x2d
 800b3b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b3b8:	e79e      	b.n	800b2f8 <_printf_float+0x88>
 800b3ba:	9904      	ldr	r1, [sp, #16]
 800b3bc:	2947      	cmp	r1, #71	; 0x47
 800b3be:	d1c1      	bne.n	800b344 <_printf_float+0xd4>
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d1bf      	bne.n	800b344 <_printf_float+0xd4>
 800b3c4:	2301      	movs	r3, #1
 800b3c6:	e7bc      	b.n	800b342 <_printf_float+0xd2>
 800b3c8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800b3cc:	d118      	bne.n	800b400 <_printf_float+0x190>
 800b3ce:	2900      	cmp	r1, #0
 800b3d0:	6863      	ldr	r3, [r4, #4]
 800b3d2:	dd0b      	ble.n	800b3ec <_printf_float+0x17c>
 800b3d4:	6121      	str	r1, [r4, #16]
 800b3d6:	b913      	cbnz	r3, 800b3de <_printf_float+0x16e>
 800b3d8:	6822      	ldr	r2, [r4, #0]
 800b3da:	07d0      	lsls	r0, r2, #31
 800b3dc:	d502      	bpl.n	800b3e4 <_printf_float+0x174>
 800b3de:	3301      	adds	r3, #1
 800b3e0:	440b      	add	r3, r1
 800b3e2:	6123      	str	r3, [r4, #16]
 800b3e4:	2300      	movs	r3, #0
 800b3e6:	65a1      	str	r1, [r4, #88]	; 0x58
 800b3e8:	9304      	str	r3, [sp, #16]
 800b3ea:	e7de      	b.n	800b3aa <_printf_float+0x13a>
 800b3ec:	b913      	cbnz	r3, 800b3f4 <_printf_float+0x184>
 800b3ee:	6822      	ldr	r2, [r4, #0]
 800b3f0:	07d2      	lsls	r2, r2, #31
 800b3f2:	d501      	bpl.n	800b3f8 <_printf_float+0x188>
 800b3f4:	3302      	adds	r3, #2
 800b3f6:	e7f4      	b.n	800b3e2 <_printf_float+0x172>
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	e7f2      	b.n	800b3e2 <_printf_float+0x172>
 800b3fc:	f04f 0967 	mov.w	r9, #103	; 0x67
 800b400:	9b08      	ldr	r3, [sp, #32]
 800b402:	4299      	cmp	r1, r3
 800b404:	db05      	blt.n	800b412 <_printf_float+0x1a2>
 800b406:	6823      	ldr	r3, [r4, #0]
 800b408:	6121      	str	r1, [r4, #16]
 800b40a:	07d8      	lsls	r0, r3, #31
 800b40c:	d5ea      	bpl.n	800b3e4 <_printf_float+0x174>
 800b40e:	1c4b      	adds	r3, r1, #1
 800b410:	e7e7      	b.n	800b3e2 <_printf_float+0x172>
 800b412:	2900      	cmp	r1, #0
 800b414:	bfd4      	ite	le
 800b416:	f1c1 0202 	rsble	r2, r1, #2
 800b41a:	2201      	movgt	r2, #1
 800b41c:	4413      	add	r3, r2
 800b41e:	e7e0      	b.n	800b3e2 <_printf_float+0x172>
 800b420:	6823      	ldr	r3, [r4, #0]
 800b422:	055a      	lsls	r2, r3, #21
 800b424:	d407      	bmi.n	800b436 <_printf_float+0x1c6>
 800b426:	6923      	ldr	r3, [r4, #16]
 800b428:	4642      	mov	r2, r8
 800b42a:	4631      	mov	r1, r6
 800b42c:	4628      	mov	r0, r5
 800b42e:	47b8      	blx	r7
 800b430:	3001      	adds	r0, #1
 800b432:	d12a      	bne.n	800b48a <_printf_float+0x21a>
 800b434:	e76a      	b.n	800b30c <_printf_float+0x9c>
 800b436:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800b43a:	f240 80e2 	bls.w	800b602 <_printf_float+0x392>
 800b43e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b442:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b44a:	d133      	bne.n	800b4b4 <_printf_float+0x244>
 800b44c:	4a38      	ldr	r2, [pc, #224]	; (800b530 <_printf_float+0x2c0>)
 800b44e:	2301      	movs	r3, #1
 800b450:	4631      	mov	r1, r6
 800b452:	4628      	mov	r0, r5
 800b454:	47b8      	blx	r7
 800b456:	3001      	adds	r0, #1
 800b458:	f43f af58 	beq.w	800b30c <_printf_float+0x9c>
 800b45c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b460:	429a      	cmp	r2, r3
 800b462:	db02      	blt.n	800b46a <_printf_float+0x1fa>
 800b464:	6823      	ldr	r3, [r4, #0]
 800b466:	07d8      	lsls	r0, r3, #31
 800b468:	d50f      	bpl.n	800b48a <_printf_float+0x21a>
 800b46a:	4653      	mov	r3, sl
 800b46c:	465a      	mov	r2, fp
 800b46e:	4631      	mov	r1, r6
 800b470:	4628      	mov	r0, r5
 800b472:	47b8      	blx	r7
 800b474:	3001      	adds	r0, #1
 800b476:	f43f af49 	beq.w	800b30c <_printf_float+0x9c>
 800b47a:	f04f 0800 	mov.w	r8, #0
 800b47e:	f104 091a 	add.w	r9, r4, #26
 800b482:	9b08      	ldr	r3, [sp, #32]
 800b484:	3b01      	subs	r3, #1
 800b486:	4543      	cmp	r3, r8
 800b488:	dc09      	bgt.n	800b49e <_printf_float+0x22e>
 800b48a:	6823      	ldr	r3, [r4, #0]
 800b48c:	079b      	lsls	r3, r3, #30
 800b48e:	f100 8108 	bmi.w	800b6a2 <_printf_float+0x432>
 800b492:	68e0      	ldr	r0, [r4, #12]
 800b494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b496:	4298      	cmp	r0, r3
 800b498:	bfb8      	it	lt
 800b49a:	4618      	movlt	r0, r3
 800b49c:	e738      	b.n	800b310 <_printf_float+0xa0>
 800b49e:	2301      	movs	r3, #1
 800b4a0:	464a      	mov	r2, r9
 800b4a2:	4631      	mov	r1, r6
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	47b8      	blx	r7
 800b4a8:	3001      	adds	r0, #1
 800b4aa:	f43f af2f 	beq.w	800b30c <_printf_float+0x9c>
 800b4ae:	f108 0801 	add.w	r8, r8, #1
 800b4b2:	e7e6      	b.n	800b482 <_printf_float+0x212>
 800b4b4:	9b07      	ldr	r3, [sp, #28]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	dc3c      	bgt.n	800b534 <_printf_float+0x2c4>
 800b4ba:	4a1d      	ldr	r2, [pc, #116]	; (800b530 <_printf_float+0x2c0>)
 800b4bc:	2301      	movs	r3, #1
 800b4be:	4631      	mov	r1, r6
 800b4c0:	4628      	mov	r0, r5
 800b4c2:	47b8      	blx	r7
 800b4c4:	3001      	adds	r0, #1
 800b4c6:	f43f af21 	beq.w	800b30c <_printf_float+0x9c>
 800b4ca:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	d102      	bne.n	800b4d8 <_printf_float+0x268>
 800b4d2:	6823      	ldr	r3, [r4, #0]
 800b4d4:	07d9      	lsls	r1, r3, #31
 800b4d6:	d5d8      	bpl.n	800b48a <_printf_float+0x21a>
 800b4d8:	4653      	mov	r3, sl
 800b4da:	465a      	mov	r2, fp
 800b4dc:	4631      	mov	r1, r6
 800b4de:	4628      	mov	r0, r5
 800b4e0:	47b8      	blx	r7
 800b4e2:	3001      	adds	r0, #1
 800b4e4:	f43f af12 	beq.w	800b30c <_printf_float+0x9c>
 800b4e8:	f04f 0900 	mov.w	r9, #0
 800b4ec:	f104 0a1a 	add.w	sl, r4, #26
 800b4f0:	9b07      	ldr	r3, [sp, #28]
 800b4f2:	425b      	negs	r3, r3
 800b4f4:	454b      	cmp	r3, r9
 800b4f6:	dc01      	bgt.n	800b4fc <_printf_float+0x28c>
 800b4f8:	9b08      	ldr	r3, [sp, #32]
 800b4fa:	e795      	b.n	800b428 <_printf_float+0x1b8>
 800b4fc:	2301      	movs	r3, #1
 800b4fe:	4652      	mov	r2, sl
 800b500:	4631      	mov	r1, r6
 800b502:	4628      	mov	r0, r5
 800b504:	47b8      	blx	r7
 800b506:	3001      	adds	r0, #1
 800b508:	f43f af00 	beq.w	800b30c <_printf_float+0x9c>
 800b50c:	f109 0901 	add.w	r9, r9, #1
 800b510:	e7ee      	b.n	800b4f0 <_printf_float+0x280>
 800b512:	bf00      	nop
 800b514:	f3af 8000 	nop.w
 800b518:	ffffffff 	.word	0xffffffff
 800b51c:	7fefffff 	.word	0x7fefffff
 800b520:	0800da2c 	.word	0x0800da2c
 800b524:	0800da30 	.word	0x0800da30
 800b528:	0800da38 	.word	0x0800da38
 800b52c:	0800da34 	.word	0x0800da34
 800b530:	0800da3c 	.word	0x0800da3c
 800b534:	9a08      	ldr	r2, [sp, #32]
 800b536:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b538:	429a      	cmp	r2, r3
 800b53a:	bfa8      	it	ge
 800b53c:	461a      	movge	r2, r3
 800b53e:	2a00      	cmp	r2, #0
 800b540:	4691      	mov	r9, r2
 800b542:	dc38      	bgt.n	800b5b6 <_printf_float+0x346>
 800b544:	2300      	movs	r3, #0
 800b546:	9305      	str	r3, [sp, #20]
 800b548:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b54c:	f104 021a 	add.w	r2, r4, #26
 800b550:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b552:	9905      	ldr	r1, [sp, #20]
 800b554:	9304      	str	r3, [sp, #16]
 800b556:	eba3 0309 	sub.w	r3, r3, r9
 800b55a:	428b      	cmp	r3, r1
 800b55c:	dc33      	bgt.n	800b5c6 <_printf_float+0x356>
 800b55e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b562:	429a      	cmp	r2, r3
 800b564:	db3c      	blt.n	800b5e0 <_printf_float+0x370>
 800b566:	6823      	ldr	r3, [r4, #0]
 800b568:	07da      	lsls	r2, r3, #31
 800b56a:	d439      	bmi.n	800b5e0 <_printf_float+0x370>
 800b56c:	9a08      	ldr	r2, [sp, #32]
 800b56e:	9b04      	ldr	r3, [sp, #16]
 800b570:	9907      	ldr	r1, [sp, #28]
 800b572:	1ad3      	subs	r3, r2, r3
 800b574:	eba2 0901 	sub.w	r9, r2, r1
 800b578:	4599      	cmp	r9, r3
 800b57a:	bfa8      	it	ge
 800b57c:	4699      	movge	r9, r3
 800b57e:	f1b9 0f00 	cmp.w	r9, #0
 800b582:	dc35      	bgt.n	800b5f0 <_printf_float+0x380>
 800b584:	f04f 0800 	mov.w	r8, #0
 800b588:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b58c:	f104 0a1a 	add.w	sl, r4, #26
 800b590:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800b594:	1a9b      	subs	r3, r3, r2
 800b596:	eba3 0309 	sub.w	r3, r3, r9
 800b59a:	4543      	cmp	r3, r8
 800b59c:	f77f af75 	ble.w	800b48a <_printf_float+0x21a>
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	4652      	mov	r2, sl
 800b5a4:	4631      	mov	r1, r6
 800b5a6:	4628      	mov	r0, r5
 800b5a8:	47b8      	blx	r7
 800b5aa:	3001      	adds	r0, #1
 800b5ac:	f43f aeae 	beq.w	800b30c <_printf_float+0x9c>
 800b5b0:	f108 0801 	add.w	r8, r8, #1
 800b5b4:	e7ec      	b.n	800b590 <_printf_float+0x320>
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	4631      	mov	r1, r6
 800b5ba:	4642      	mov	r2, r8
 800b5bc:	4628      	mov	r0, r5
 800b5be:	47b8      	blx	r7
 800b5c0:	3001      	adds	r0, #1
 800b5c2:	d1bf      	bne.n	800b544 <_printf_float+0x2d4>
 800b5c4:	e6a2      	b.n	800b30c <_printf_float+0x9c>
 800b5c6:	2301      	movs	r3, #1
 800b5c8:	4631      	mov	r1, r6
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	9204      	str	r2, [sp, #16]
 800b5ce:	47b8      	blx	r7
 800b5d0:	3001      	adds	r0, #1
 800b5d2:	f43f ae9b 	beq.w	800b30c <_printf_float+0x9c>
 800b5d6:	9b05      	ldr	r3, [sp, #20]
 800b5d8:	9a04      	ldr	r2, [sp, #16]
 800b5da:	3301      	adds	r3, #1
 800b5dc:	9305      	str	r3, [sp, #20]
 800b5de:	e7b7      	b.n	800b550 <_printf_float+0x2e0>
 800b5e0:	4653      	mov	r3, sl
 800b5e2:	465a      	mov	r2, fp
 800b5e4:	4631      	mov	r1, r6
 800b5e6:	4628      	mov	r0, r5
 800b5e8:	47b8      	blx	r7
 800b5ea:	3001      	adds	r0, #1
 800b5ec:	d1be      	bne.n	800b56c <_printf_float+0x2fc>
 800b5ee:	e68d      	b.n	800b30c <_printf_float+0x9c>
 800b5f0:	9a04      	ldr	r2, [sp, #16]
 800b5f2:	464b      	mov	r3, r9
 800b5f4:	4442      	add	r2, r8
 800b5f6:	4631      	mov	r1, r6
 800b5f8:	4628      	mov	r0, r5
 800b5fa:	47b8      	blx	r7
 800b5fc:	3001      	adds	r0, #1
 800b5fe:	d1c1      	bne.n	800b584 <_printf_float+0x314>
 800b600:	e684      	b.n	800b30c <_printf_float+0x9c>
 800b602:	9a08      	ldr	r2, [sp, #32]
 800b604:	2a01      	cmp	r2, #1
 800b606:	dc01      	bgt.n	800b60c <_printf_float+0x39c>
 800b608:	07db      	lsls	r3, r3, #31
 800b60a:	d537      	bpl.n	800b67c <_printf_float+0x40c>
 800b60c:	2301      	movs	r3, #1
 800b60e:	4642      	mov	r2, r8
 800b610:	4631      	mov	r1, r6
 800b612:	4628      	mov	r0, r5
 800b614:	47b8      	blx	r7
 800b616:	3001      	adds	r0, #1
 800b618:	f43f ae78 	beq.w	800b30c <_printf_float+0x9c>
 800b61c:	4653      	mov	r3, sl
 800b61e:	465a      	mov	r2, fp
 800b620:	4631      	mov	r1, r6
 800b622:	4628      	mov	r0, r5
 800b624:	47b8      	blx	r7
 800b626:	3001      	adds	r0, #1
 800b628:	f43f ae70 	beq.w	800b30c <_printf_float+0x9c>
 800b62c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800b630:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800b634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b638:	d01b      	beq.n	800b672 <_printf_float+0x402>
 800b63a:	9b08      	ldr	r3, [sp, #32]
 800b63c:	f108 0201 	add.w	r2, r8, #1
 800b640:	3b01      	subs	r3, #1
 800b642:	4631      	mov	r1, r6
 800b644:	4628      	mov	r0, r5
 800b646:	47b8      	blx	r7
 800b648:	3001      	adds	r0, #1
 800b64a:	d10e      	bne.n	800b66a <_printf_float+0x3fa>
 800b64c:	e65e      	b.n	800b30c <_printf_float+0x9c>
 800b64e:	2301      	movs	r3, #1
 800b650:	464a      	mov	r2, r9
 800b652:	4631      	mov	r1, r6
 800b654:	4628      	mov	r0, r5
 800b656:	47b8      	blx	r7
 800b658:	3001      	adds	r0, #1
 800b65a:	f43f ae57 	beq.w	800b30c <_printf_float+0x9c>
 800b65e:	f108 0801 	add.w	r8, r8, #1
 800b662:	9b08      	ldr	r3, [sp, #32]
 800b664:	3b01      	subs	r3, #1
 800b666:	4543      	cmp	r3, r8
 800b668:	dcf1      	bgt.n	800b64e <_printf_float+0x3de>
 800b66a:	9b04      	ldr	r3, [sp, #16]
 800b66c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b670:	e6db      	b.n	800b42a <_printf_float+0x1ba>
 800b672:	f04f 0800 	mov.w	r8, #0
 800b676:	f104 091a 	add.w	r9, r4, #26
 800b67a:	e7f2      	b.n	800b662 <_printf_float+0x3f2>
 800b67c:	2301      	movs	r3, #1
 800b67e:	4642      	mov	r2, r8
 800b680:	e7df      	b.n	800b642 <_printf_float+0x3d2>
 800b682:	2301      	movs	r3, #1
 800b684:	464a      	mov	r2, r9
 800b686:	4631      	mov	r1, r6
 800b688:	4628      	mov	r0, r5
 800b68a:	47b8      	blx	r7
 800b68c:	3001      	adds	r0, #1
 800b68e:	f43f ae3d 	beq.w	800b30c <_printf_float+0x9c>
 800b692:	f108 0801 	add.w	r8, r8, #1
 800b696:	68e3      	ldr	r3, [r4, #12]
 800b698:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b69a:	1a5b      	subs	r3, r3, r1
 800b69c:	4543      	cmp	r3, r8
 800b69e:	dcf0      	bgt.n	800b682 <_printf_float+0x412>
 800b6a0:	e6f7      	b.n	800b492 <_printf_float+0x222>
 800b6a2:	f04f 0800 	mov.w	r8, #0
 800b6a6:	f104 0919 	add.w	r9, r4, #25
 800b6aa:	e7f4      	b.n	800b696 <_printf_float+0x426>

0800b6ac <_printf_common>:
 800b6ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6b0:	4616      	mov	r6, r2
 800b6b2:	4699      	mov	r9, r3
 800b6b4:	688a      	ldr	r2, [r1, #8]
 800b6b6:	690b      	ldr	r3, [r1, #16]
 800b6b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	bfb8      	it	lt
 800b6c0:	4613      	movlt	r3, r2
 800b6c2:	6033      	str	r3, [r6, #0]
 800b6c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b6c8:	4607      	mov	r7, r0
 800b6ca:	460c      	mov	r4, r1
 800b6cc:	b10a      	cbz	r2, 800b6d2 <_printf_common+0x26>
 800b6ce:	3301      	adds	r3, #1
 800b6d0:	6033      	str	r3, [r6, #0]
 800b6d2:	6823      	ldr	r3, [r4, #0]
 800b6d4:	0699      	lsls	r1, r3, #26
 800b6d6:	bf42      	ittt	mi
 800b6d8:	6833      	ldrmi	r3, [r6, #0]
 800b6da:	3302      	addmi	r3, #2
 800b6dc:	6033      	strmi	r3, [r6, #0]
 800b6de:	6825      	ldr	r5, [r4, #0]
 800b6e0:	f015 0506 	ands.w	r5, r5, #6
 800b6e4:	d106      	bne.n	800b6f4 <_printf_common+0x48>
 800b6e6:	f104 0a19 	add.w	sl, r4, #25
 800b6ea:	68e3      	ldr	r3, [r4, #12]
 800b6ec:	6832      	ldr	r2, [r6, #0]
 800b6ee:	1a9b      	subs	r3, r3, r2
 800b6f0:	42ab      	cmp	r3, r5
 800b6f2:	dc26      	bgt.n	800b742 <_printf_common+0x96>
 800b6f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b6f8:	1e13      	subs	r3, r2, #0
 800b6fa:	6822      	ldr	r2, [r4, #0]
 800b6fc:	bf18      	it	ne
 800b6fe:	2301      	movne	r3, #1
 800b700:	0692      	lsls	r2, r2, #26
 800b702:	d42b      	bmi.n	800b75c <_printf_common+0xb0>
 800b704:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b708:	4649      	mov	r1, r9
 800b70a:	4638      	mov	r0, r7
 800b70c:	47c0      	blx	r8
 800b70e:	3001      	adds	r0, #1
 800b710:	d01e      	beq.n	800b750 <_printf_common+0xa4>
 800b712:	6823      	ldr	r3, [r4, #0]
 800b714:	68e5      	ldr	r5, [r4, #12]
 800b716:	6832      	ldr	r2, [r6, #0]
 800b718:	f003 0306 	and.w	r3, r3, #6
 800b71c:	2b04      	cmp	r3, #4
 800b71e:	bf08      	it	eq
 800b720:	1aad      	subeq	r5, r5, r2
 800b722:	68a3      	ldr	r3, [r4, #8]
 800b724:	6922      	ldr	r2, [r4, #16]
 800b726:	bf0c      	ite	eq
 800b728:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b72c:	2500      	movne	r5, #0
 800b72e:	4293      	cmp	r3, r2
 800b730:	bfc4      	itt	gt
 800b732:	1a9b      	subgt	r3, r3, r2
 800b734:	18ed      	addgt	r5, r5, r3
 800b736:	2600      	movs	r6, #0
 800b738:	341a      	adds	r4, #26
 800b73a:	42b5      	cmp	r5, r6
 800b73c:	d11a      	bne.n	800b774 <_printf_common+0xc8>
 800b73e:	2000      	movs	r0, #0
 800b740:	e008      	b.n	800b754 <_printf_common+0xa8>
 800b742:	2301      	movs	r3, #1
 800b744:	4652      	mov	r2, sl
 800b746:	4649      	mov	r1, r9
 800b748:	4638      	mov	r0, r7
 800b74a:	47c0      	blx	r8
 800b74c:	3001      	adds	r0, #1
 800b74e:	d103      	bne.n	800b758 <_printf_common+0xac>
 800b750:	f04f 30ff 	mov.w	r0, #4294967295
 800b754:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b758:	3501      	adds	r5, #1
 800b75a:	e7c6      	b.n	800b6ea <_printf_common+0x3e>
 800b75c:	18e1      	adds	r1, r4, r3
 800b75e:	1c5a      	adds	r2, r3, #1
 800b760:	2030      	movs	r0, #48	; 0x30
 800b762:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b766:	4422      	add	r2, r4
 800b768:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b76c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b770:	3302      	adds	r3, #2
 800b772:	e7c7      	b.n	800b704 <_printf_common+0x58>
 800b774:	2301      	movs	r3, #1
 800b776:	4622      	mov	r2, r4
 800b778:	4649      	mov	r1, r9
 800b77a:	4638      	mov	r0, r7
 800b77c:	47c0      	blx	r8
 800b77e:	3001      	adds	r0, #1
 800b780:	d0e6      	beq.n	800b750 <_printf_common+0xa4>
 800b782:	3601      	adds	r6, #1
 800b784:	e7d9      	b.n	800b73a <_printf_common+0x8e>
	...

0800b788 <_printf_i>:
 800b788:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b78c:	460c      	mov	r4, r1
 800b78e:	4691      	mov	r9, r2
 800b790:	7e27      	ldrb	r7, [r4, #24]
 800b792:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b794:	2f78      	cmp	r7, #120	; 0x78
 800b796:	4680      	mov	r8, r0
 800b798:	469a      	mov	sl, r3
 800b79a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b79e:	d807      	bhi.n	800b7b0 <_printf_i+0x28>
 800b7a0:	2f62      	cmp	r7, #98	; 0x62
 800b7a2:	d80a      	bhi.n	800b7ba <_printf_i+0x32>
 800b7a4:	2f00      	cmp	r7, #0
 800b7a6:	f000 80d8 	beq.w	800b95a <_printf_i+0x1d2>
 800b7aa:	2f58      	cmp	r7, #88	; 0x58
 800b7ac:	f000 80a3 	beq.w	800b8f6 <_printf_i+0x16e>
 800b7b0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b7b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b7b8:	e03a      	b.n	800b830 <_printf_i+0xa8>
 800b7ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b7be:	2b15      	cmp	r3, #21
 800b7c0:	d8f6      	bhi.n	800b7b0 <_printf_i+0x28>
 800b7c2:	a001      	add	r0, pc, #4	; (adr r0, 800b7c8 <_printf_i+0x40>)
 800b7c4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b7c8:	0800b821 	.word	0x0800b821
 800b7cc:	0800b835 	.word	0x0800b835
 800b7d0:	0800b7b1 	.word	0x0800b7b1
 800b7d4:	0800b7b1 	.word	0x0800b7b1
 800b7d8:	0800b7b1 	.word	0x0800b7b1
 800b7dc:	0800b7b1 	.word	0x0800b7b1
 800b7e0:	0800b835 	.word	0x0800b835
 800b7e4:	0800b7b1 	.word	0x0800b7b1
 800b7e8:	0800b7b1 	.word	0x0800b7b1
 800b7ec:	0800b7b1 	.word	0x0800b7b1
 800b7f0:	0800b7b1 	.word	0x0800b7b1
 800b7f4:	0800b941 	.word	0x0800b941
 800b7f8:	0800b865 	.word	0x0800b865
 800b7fc:	0800b923 	.word	0x0800b923
 800b800:	0800b7b1 	.word	0x0800b7b1
 800b804:	0800b7b1 	.word	0x0800b7b1
 800b808:	0800b963 	.word	0x0800b963
 800b80c:	0800b7b1 	.word	0x0800b7b1
 800b810:	0800b865 	.word	0x0800b865
 800b814:	0800b7b1 	.word	0x0800b7b1
 800b818:	0800b7b1 	.word	0x0800b7b1
 800b81c:	0800b92b 	.word	0x0800b92b
 800b820:	680b      	ldr	r3, [r1, #0]
 800b822:	1d1a      	adds	r2, r3, #4
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	600a      	str	r2, [r1, #0]
 800b828:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b82c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b830:	2301      	movs	r3, #1
 800b832:	e0a3      	b.n	800b97c <_printf_i+0x1f4>
 800b834:	6825      	ldr	r5, [r4, #0]
 800b836:	6808      	ldr	r0, [r1, #0]
 800b838:	062e      	lsls	r6, r5, #24
 800b83a:	f100 0304 	add.w	r3, r0, #4
 800b83e:	d50a      	bpl.n	800b856 <_printf_i+0xce>
 800b840:	6805      	ldr	r5, [r0, #0]
 800b842:	600b      	str	r3, [r1, #0]
 800b844:	2d00      	cmp	r5, #0
 800b846:	da03      	bge.n	800b850 <_printf_i+0xc8>
 800b848:	232d      	movs	r3, #45	; 0x2d
 800b84a:	426d      	negs	r5, r5
 800b84c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b850:	485e      	ldr	r0, [pc, #376]	; (800b9cc <_printf_i+0x244>)
 800b852:	230a      	movs	r3, #10
 800b854:	e019      	b.n	800b88a <_printf_i+0x102>
 800b856:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b85a:	6805      	ldr	r5, [r0, #0]
 800b85c:	600b      	str	r3, [r1, #0]
 800b85e:	bf18      	it	ne
 800b860:	b22d      	sxthne	r5, r5
 800b862:	e7ef      	b.n	800b844 <_printf_i+0xbc>
 800b864:	680b      	ldr	r3, [r1, #0]
 800b866:	6825      	ldr	r5, [r4, #0]
 800b868:	1d18      	adds	r0, r3, #4
 800b86a:	6008      	str	r0, [r1, #0]
 800b86c:	0628      	lsls	r0, r5, #24
 800b86e:	d501      	bpl.n	800b874 <_printf_i+0xec>
 800b870:	681d      	ldr	r5, [r3, #0]
 800b872:	e002      	b.n	800b87a <_printf_i+0xf2>
 800b874:	0669      	lsls	r1, r5, #25
 800b876:	d5fb      	bpl.n	800b870 <_printf_i+0xe8>
 800b878:	881d      	ldrh	r5, [r3, #0]
 800b87a:	4854      	ldr	r0, [pc, #336]	; (800b9cc <_printf_i+0x244>)
 800b87c:	2f6f      	cmp	r7, #111	; 0x6f
 800b87e:	bf0c      	ite	eq
 800b880:	2308      	moveq	r3, #8
 800b882:	230a      	movne	r3, #10
 800b884:	2100      	movs	r1, #0
 800b886:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b88a:	6866      	ldr	r6, [r4, #4]
 800b88c:	60a6      	str	r6, [r4, #8]
 800b88e:	2e00      	cmp	r6, #0
 800b890:	bfa2      	ittt	ge
 800b892:	6821      	ldrge	r1, [r4, #0]
 800b894:	f021 0104 	bicge.w	r1, r1, #4
 800b898:	6021      	strge	r1, [r4, #0]
 800b89a:	b90d      	cbnz	r5, 800b8a0 <_printf_i+0x118>
 800b89c:	2e00      	cmp	r6, #0
 800b89e:	d04d      	beq.n	800b93c <_printf_i+0x1b4>
 800b8a0:	4616      	mov	r6, r2
 800b8a2:	fbb5 f1f3 	udiv	r1, r5, r3
 800b8a6:	fb03 5711 	mls	r7, r3, r1, r5
 800b8aa:	5dc7      	ldrb	r7, [r0, r7]
 800b8ac:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b8b0:	462f      	mov	r7, r5
 800b8b2:	42bb      	cmp	r3, r7
 800b8b4:	460d      	mov	r5, r1
 800b8b6:	d9f4      	bls.n	800b8a2 <_printf_i+0x11a>
 800b8b8:	2b08      	cmp	r3, #8
 800b8ba:	d10b      	bne.n	800b8d4 <_printf_i+0x14c>
 800b8bc:	6823      	ldr	r3, [r4, #0]
 800b8be:	07df      	lsls	r7, r3, #31
 800b8c0:	d508      	bpl.n	800b8d4 <_printf_i+0x14c>
 800b8c2:	6923      	ldr	r3, [r4, #16]
 800b8c4:	6861      	ldr	r1, [r4, #4]
 800b8c6:	4299      	cmp	r1, r3
 800b8c8:	bfde      	ittt	le
 800b8ca:	2330      	movle	r3, #48	; 0x30
 800b8cc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b8d0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b8d4:	1b92      	subs	r2, r2, r6
 800b8d6:	6122      	str	r2, [r4, #16]
 800b8d8:	f8cd a000 	str.w	sl, [sp]
 800b8dc:	464b      	mov	r3, r9
 800b8de:	aa03      	add	r2, sp, #12
 800b8e0:	4621      	mov	r1, r4
 800b8e2:	4640      	mov	r0, r8
 800b8e4:	f7ff fee2 	bl	800b6ac <_printf_common>
 800b8e8:	3001      	adds	r0, #1
 800b8ea:	d14c      	bne.n	800b986 <_printf_i+0x1fe>
 800b8ec:	f04f 30ff 	mov.w	r0, #4294967295
 800b8f0:	b004      	add	sp, #16
 800b8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8f6:	4835      	ldr	r0, [pc, #212]	; (800b9cc <_printf_i+0x244>)
 800b8f8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b8fc:	6823      	ldr	r3, [r4, #0]
 800b8fe:	680e      	ldr	r6, [r1, #0]
 800b900:	061f      	lsls	r7, r3, #24
 800b902:	f856 5b04 	ldr.w	r5, [r6], #4
 800b906:	600e      	str	r6, [r1, #0]
 800b908:	d514      	bpl.n	800b934 <_printf_i+0x1ac>
 800b90a:	07d9      	lsls	r1, r3, #31
 800b90c:	bf44      	itt	mi
 800b90e:	f043 0320 	orrmi.w	r3, r3, #32
 800b912:	6023      	strmi	r3, [r4, #0]
 800b914:	b91d      	cbnz	r5, 800b91e <_printf_i+0x196>
 800b916:	6823      	ldr	r3, [r4, #0]
 800b918:	f023 0320 	bic.w	r3, r3, #32
 800b91c:	6023      	str	r3, [r4, #0]
 800b91e:	2310      	movs	r3, #16
 800b920:	e7b0      	b.n	800b884 <_printf_i+0xfc>
 800b922:	6823      	ldr	r3, [r4, #0]
 800b924:	f043 0320 	orr.w	r3, r3, #32
 800b928:	6023      	str	r3, [r4, #0]
 800b92a:	2378      	movs	r3, #120	; 0x78
 800b92c:	4828      	ldr	r0, [pc, #160]	; (800b9d0 <_printf_i+0x248>)
 800b92e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b932:	e7e3      	b.n	800b8fc <_printf_i+0x174>
 800b934:	065e      	lsls	r6, r3, #25
 800b936:	bf48      	it	mi
 800b938:	b2ad      	uxthmi	r5, r5
 800b93a:	e7e6      	b.n	800b90a <_printf_i+0x182>
 800b93c:	4616      	mov	r6, r2
 800b93e:	e7bb      	b.n	800b8b8 <_printf_i+0x130>
 800b940:	680b      	ldr	r3, [r1, #0]
 800b942:	6826      	ldr	r6, [r4, #0]
 800b944:	6960      	ldr	r0, [r4, #20]
 800b946:	1d1d      	adds	r5, r3, #4
 800b948:	600d      	str	r5, [r1, #0]
 800b94a:	0635      	lsls	r5, r6, #24
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	d501      	bpl.n	800b954 <_printf_i+0x1cc>
 800b950:	6018      	str	r0, [r3, #0]
 800b952:	e002      	b.n	800b95a <_printf_i+0x1d2>
 800b954:	0671      	lsls	r1, r6, #25
 800b956:	d5fb      	bpl.n	800b950 <_printf_i+0x1c8>
 800b958:	8018      	strh	r0, [r3, #0]
 800b95a:	2300      	movs	r3, #0
 800b95c:	6123      	str	r3, [r4, #16]
 800b95e:	4616      	mov	r6, r2
 800b960:	e7ba      	b.n	800b8d8 <_printf_i+0x150>
 800b962:	680b      	ldr	r3, [r1, #0]
 800b964:	1d1a      	adds	r2, r3, #4
 800b966:	600a      	str	r2, [r1, #0]
 800b968:	681e      	ldr	r6, [r3, #0]
 800b96a:	6862      	ldr	r2, [r4, #4]
 800b96c:	2100      	movs	r1, #0
 800b96e:	4630      	mov	r0, r6
 800b970:	f7f4 fcbe 	bl	80002f0 <memchr>
 800b974:	b108      	cbz	r0, 800b97a <_printf_i+0x1f2>
 800b976:	1b80      	subs	r0, r0, r6
 800b978:	6060      	str	r0, [r4, #4]
 800b97a:	6863      	ldr	r3, [r4, #4]
 800b97c:	6123      	str	r3, [r4, #16]
 800b97e:	2300      	movs	r3, #0
 800b980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b984:	e7a8      	b.n	800b8d8 <_printf_i+0x150>
 800b986:	6923      	ldr	r3, [r4, #16]
 800b988:	4632      	mov	r2, r6
 800b98a:	4649      	mov	r1, r9
 800b98c:	4640      	mov	r0, r8
 800b98e:	47d0      	blx	sl
 800b990:	3001      	adds	r0, #1
 800b992:	d0ab      	beq.n	800b8ec <_printf_i+0x164>
 800b994:	6823      	ldr	r3, [r4, #0]
 800b996:	079b      	lsls	r3, r3, #30
 800b998:	d413      	bmi.n	800b9c2 <_printf_i+0x23a>
 800b99a:	68e0      	ldr	r0, [r4, #12]
 800b99c:	9b03      	ldr	r3, [sp, #12]
 800b99e:	4298      	cmp	r0, r3
 800b9a0:	bfb8      	it	lt
 800b9a2:	4618      	movlt	r0, r3
 800b9a4:	e7a4      	b.n	800b8f0 <_printf_i+0x168>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	4632      	mov	r2, r6
 800b9aa:	4649      	mov	r1, r9
 800b9ac:	4640      	mov	r0, r8
 800b9ae:	47d0      	blx	sl
 800b9b0:	3001      	adds	r0, #1
 800b9b2:	d09b      	beq.n	800b8ec <_printf_i+0x164>
 800b9b4:	3501      	adds	r5, #1
 800b9b6:	68e3      	ldr	r3, [r4, #12]
 800b9b8:	9903      	ldr	r1, [sp, #12]
 800b9ba:	1a5b      	subs	r3, r3, r1
 800b9bc:	42ab      	cmp	r3, r5
 800b9be:	dcf2      	bgt.n	800b9a6 <_printf_i+0x21e>
 800b9c0:	e7eb      	b.n	800b99a <_printf_i+0x212>
 800b9c2:	2500      	movs	r5, #0
 800b9c4:	f104 0619 	add.w	r6, r4, #25
 800b9c8:	e7f5      	b.n	800b9b6 <_printf_i+0x22e>
 800b9ca:	bf00      	nop
 800b9cc:	0800da3e 	.word	0x0800da3e
 800b9d0:	0800da4f 	.word	0x0800da4f

0800b9d4 <quorem>:
 800b9d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9d8:	6903      	ldr	r3, [r0, #16]
 800b9da:	690c      	ldr	r4, [r1, #16]
 800b9dc:	42a3      	cmp	r3, r4
 800b9de:	4607      	mov	r7, r0
 800b9e0:	f2c0 8081 	blt.w	800bae6 <quorem+0x112>
 800b9e4:	3c01      	subs	r4, #1
 800b9e6:	f101 0814 	add.w	r8, r1, #20
 800b9ea:	f100 0514 	add.w	r5, r0, #20
 800b9ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b9f2:	9301      	str	r3, [sp, #4]
 800b9f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b9f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b9fc:	3301      	adds	r3, #1
 800b9fe:	429a      	cmp	r2, r3
 800ba00:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ba04:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ba08:	fbb2 f6f3 	udiv	r6, r2, r3
 800ba0c:	d331      	bcc.n	800ba72 <quorem+0x9e>
 800ba0e:	f04f 0e00 	mov.w	lr, #0
 800ba12:	4640      	mov	r0, r8
 800ba14:	46ac      	mov	ip, r5
 800ba16:	46f2      	mov	sl, lr
 800ba18:	f850 2b04 	ldr.w	r2, [r0], #4
 800ba1c:	b293      	uxth	r3, r2
 800ba1e:	fb06 e303 	mla	r3, r6, r3, lr
 800ba22:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ba26:	b29b      	uxth	r3, r3
 800ba28:	ebaa 0303 	sub.w	r3, sl, r3
 800ba2c:	0c12      	lsrs	r2, r2, #16
 800ba2e:	f8dc a000 	ldr.w	sl, [ip]
 800ba32:	fb06 e202 	mla	r2, r6, r2, lr
 800ba36:	fa13 f38a 	uxtah	r3, r3, sl
 800ba3a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ba3e:	fa1f fa82 	uxth.w	sl, r2
 800ba42:	f8dc 2000 	ldr.w	r2, [ip]
 800ba46:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800ba4a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ba4e:	b29b      	uxth	r3, r3
 800ba50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ba54:	4581      	cmp	r9, r0
 800ba56:	f84c 3b04 	str.w	r3, [ip], #4
 800ba5a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ba5e:	d2db      	bcs.n	800ba18 <quorem+0x44>
 800ba60:	f855 300b 	ldr.w	r3, [r5, fp]
 800ba64:	b92b      	cbnz	r3, 800ba72 <quorem+0x9e>
 800ba66:	9b01      	ldr	r3, [sp, #4]
 800ba68:	3b04      	subs	r3, #4
 800ba6a:	429d      	cmp	r5, r3
 800ba6c:	461a      	mov	r2, r3
 800ba6e:	d32e      	bcc.n	800bace <quorem+0xfa>
 800ba70:	613c      	str	r4, [r7, #16]
 800ba72:	4638      	mov	r0, r7
 800ba74:	f001 f856 	bl	800cb24 <__mcmp>
 800ba78:	2800      	cmp	r0, #0
 800ba7a:	db24      	blt.n	800bac6 <quorem+0xf2>
 800ba7c:	3601      	adds	r6, #1
 800ba7e:	4628      	mov	r0, r5
 800ba80:	f04f 0c00 	mov.w	ip, #0
 800ba84:	f858 2b04 	ldr.w	r2, [r8], #4
 800ba88:	f8d0 e000 	ldr.w	lr, [r0]
 800ba8c:	b293      	uxth	r3, r2
 800ba8e:	ebac 0303 	sub.w	r3, ip, r3
 800ba92:	0c12      	lsrs	r2, r2, #16
 800ba94:	fa13 f38e 	uxtah	r3, r3, lr
 800ba98:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ba9c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800baa6:	45c1      	cmp	r9, r8
 800baa8:	f840 3b04 	str.w	r3, [r0], #4
 800baac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bab0:	d2e8      	bcs.n	800ba84 <quorem+0xb0>
 800bab2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bab6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800baba:	b922      	cbnz	r2, 800bac6 <quorem+0xf2>
 800babc:	3b04      	subs	r3, #4
 800babe:	429d      	cmp	r5, r3
 800bac0:	461a      	mov	r2, r3
 800bac2:	d30a      	bcc.n	800bada <quorem+0x106>
 800bac4:	613c      	str	r4, [r7, #16]
 800bac6:	4630      	mov	r0, r6
 800bac8:	b003      	add	sp, #12
 800baca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bace:	6812      	ldr	r2, [r2, #0]
 800bad0:	3b04      	subs	r3, #4
 800bad2:	2a00      	cmp	r2, #0
 800bad4:	d1cc      	bne.n	800ba70 <quorem+0x9c>
 800bad6:	3c01      	subs	r4, #1
 800bad8:	e7c7      	b.n	800ba6a <quorem+0x96>
 800bada:	6812      	ldr	r2, [r2, #0]
 800badc:	3b04      	subs	r3, #4
 800bade:	2a00      	cmp	r2, #0
 800bae0:	d1f0      	bne.n	800bac4 <quorem+0xf0>
 800bae2:	3c01      	subs	r4, #1
 800bae4:	e7eb      	b.n	800babe <quorem+0xea>
 800bae6:	2000      	movs	r0, #0
 800bae8:	e7ee      	b.n	800bac8 <quorem+0xf4>
 800baea:	0000      	movs	r0, r0
 800baec:	0000      	movs	r0, r0
	...

0800baf0 <_dtoa_r>:
 800baf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf4:	ec59 8b10 	vmov	r8, r9, d0
 800baf8:	b095      	sub	sp, #84	; 0x54
 800bafa:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bafc:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800bafe:	9107      	str	r1, [sp, #28]
 800bb00:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800bb04:	4606      	mov	r6, r0
 800bb06:	9209      	str	r2, [sp, #36]	; 0x24
 800bb08:	9310      	str	r3, [sp, #64]	; 0x40
 800bb0a:	b975      	cbnz	r5, 800bb2a <_dtoa_r+0x3a>
 800bb0c:	2010      	movs	r0, #16
 800bb0e:	f000 fd75 	bl	800c5fc <malloc>
 800bb12:	4602      	mov	r2, r0
 800bb14:	6270      	str	r0, [r6, #36]	; 0x24
 800bb16:	b920      	cbnz	r0, 800bb22 <_dtoa_r+0x32>
 800bb18:	4bab      	ldr	r3, [pc, #684]	; (800bdc8 <_dtoa_r+0x2d8>)
 800bb1a:	21ea      	movs	r1, #234	; 0xea
 800bb1c:	48ab      	ldr	r0, [pc, #684]	; (800bdcc <_dtoa_r+0x2dc>)
 800bb1e:	f001 f9cb 	bl	800ceb8 <__assert_func>
 800bb22:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bb26:	6005      	str	r5, [r0, #0]
 800bb28:	60c5      	str	r5, [r0, #12]
 800bb2a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bb2c:	6819      	ldr	r1, [r3, #0]
 800bb2e:	b151      	cbz	r1, 800bb46 <_dtoa_r+0x56>
 800bb30:	685a      	ldr	r2, [r3, #4]
 800bb32:	604a      	str	r2, [r1, #4]
 800bb34:	2301      	movs	r3, #1
 800bb36:	4093      	lsls	r3, r2
 800bb38:	608b      	str	r3, [r1, #8]
 800bb3a:	4630      	mov	r0, r6
 800bb3c:	f000 fdb4 	bl	800c6a8 <_Bfree>
 800bb40:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800bb42:	2200      	movs	r2, #0
 800bb44:	601a      	str	r2, [r3, #0]
 800bb46:	f1b9 0300 	subs.w	r3, r9, #0
 800bb4a:	bfbb      	ittet	lt
 800bb4c:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800bb50:	9303      	strlt	r3, [sp, #12]
 800bb52:	2300      	movge	r3, #0
 800bb54:	2201      	movlt	r2, #1
 800bb56:	bfac      	ite	ge
 800bb58:	6023      	strge	r3, [r4, #0]
 800bb5a:	6022      	strlt	r2, [r4, #0]
 800bb5c:	4b9c      	ldr	r3, [pc, #624]	; (800bdd0 <_dtoa_r+0x2e0>)
 800bb5e:	9c03      	ldr	r4, [sp, #12]
 800bb60:	43a3      	bics	r3, r4
 800bb62:	d11a      	bne.n	800bb9a <_dtoa_r+0xaa>
 800bb64:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bb66:	f242 730f 	movw	r3, #9999	; 0x270f
 800bb6a:	6013      	str	r3, [r2, #0]
 800bb6c:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800bb70:	ea53 0308 	orrs.w	r3, r3, r8
 800bb74:	f000 8512 	beq.w	800c59c <_dtoa_r+0xaac>
 800bb78:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bb7a:	b953      	cbnz	r3, 800bb92 <_dtoa_r+0xa2>
 800bb7c:	4b95      	ldr	r3, [pc, #596]	; (800bdd4 <_dtoa_r+0x2e4>)
 800bb7e:	e01f      	b.n	800bbc0 <_dtoa_r+0xd0>
 800bb80:	4b95      	ldr	r3, [pc, #596]	; (800bdd8 <_dtoa_r+0x2e8>)
 800bb82:	9300      	str	r3, [sp, #0]
 800bb84:	3308      	adds	r3, #8
 800bb86:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800bb88:	6013      	str	r3, [r2, #0]
 800bb8a:	9800      	ldr	r0, [sp, #0]
 800bb8c:	b015      	add	sp, #84	; 0x54
 800bb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb92:	4b90      	ldr	r3, [pc, #576]	; (800bdd4 <_dtoa_r+0x2e4>)
 800bb94:	9300      	str	r3, [sp, #0]
 800bb96:	3303      	adds	r3, #3
 800bb98:	e7f5      	b.n	800bb86 <_dtoa_r+0x96>
 800bb9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb9e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800bba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bba6:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800bbaa:	d10b      	bne.n	800bbc4 <_dtoa_r+0xd4>
 800bbac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bbae:	2301      	movs	r3, #1
 800bbb0:	6013      	str	r3, [r2, #0]
 800bbb2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	f000 84ee 	beq.w	800c596 <_dtoa_r+0xaa6>
 800bbba:	4888      	ldr	r0, [pc, #544]	; (800bddc <_dtoa_r+0x2ec>)
 800bbbc:	6018      	str	r0, [r3, #0]
 800bbbe:	1e43      	subs	r3, r0, #1
 800bbc0:	9300      	str	r3, [sp, #0]
 800bbc2:	e7e2      	b.n	800bb8a <_dtoa_r+0x9a>
 800bbc4:	a913      	add	r1, sp, #76	; 0x4c
 800bbc6:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800bbca:	aa12      	add	r2, sp, #72	; 0x48
 800bbcc:	4630      	mov	r0, r6
 800bbce:	f001 f84d 	bl	800cc6c <__d2b>
 800bbd2:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800bbd6:	4605      	mov	r5, r0
 800bbd8:	9812      	ldr	r0, [sp, #72]	; 0x48
 800bbda:	2900      	cmp	r1, #0
 800bbdc:	d047      	beq.n	800bc6e <_dtoa_r+0x17e>
 800bbde:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800bbe0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800bbe4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800bbe8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800bbec:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bbf0:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800bbf4:	2400      	movs	r4, #0
 800bbf6:	ec43 2b16 	vmov	d6, r2, r3
 800bbfa:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800bbfe:	ed9f 5b6c 	vldr	d5, [pc, #432]	; 800bdb0 <_dtoa_r+0x2c0>
 800bc02:	ee36 7b47 	vsub.f64	d7, d6, d7
 800bc06:	ed9f 6b6c 	vldr	d6, [pc, #432]	; 800bdb8 <_dtoa_r+0x2c8>
 800bc0a:	eea7 6b05 	vfma.f64	d6, d7, d5
 800bc0e:	eeb0 7b46 	vmov.f64	d7, d6
 800bc12:	ee06 1a90 	vmov	s13, r1
 800bc16:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800bc1a:	ed9f 6b69 	vldr	d6, [pc, #420]	; 800bdc0 <_dtoa_r+0x2d0>
 800bc1e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800bc22:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800bc26:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800bc2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc2e:	ee16 ba90 	vmov	fp, s13
 800bc32:	9411      	str	r4, [sp, #68]	; 0x44
 800bc34:	d508      	bpl.n	800bc48 <_dtoa_r+0x158>
 800bc36:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800bc3a:	eeb4 6b47 	vcmp.f64	d6, d7
 800bc3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc42:	bf18      	it	ne
 800bc44:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800bc48:	f1bb 0f16 	cmp.w	fp, #22
 800bc4c:	d832      	bhi.n	800bcb4 <_dtoa_r+0x1c4>
 800bc4e:	4b64      	ldr	r3, [pc, #400]	; (800bde0 <_dtoa_r+0x2f0>)
 800bc50:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bc54:	ed93 7b00 	vldr	d7, [r3]
 800bc58:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800bc5c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bc60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc64:	d501      	bpl.n	800bc6a <_dtoa_r+0x17a>
 800bc66:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bc6a:	2300      	movs	r3, #0
 800bc6c:	e023      	b.n	800bcb6 <_dtoa_r+0x1c6>
 800bc6e:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800bc70:	4401      	add	r1, r0
 800bc72:	f201 4332 	addw	r3, r1, #1074	; 0x432
 800bc76:	2b20      	cmp	r3, #32
 800bc78:	bfc3      	ittte	gt
 800bc7a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bc7e:	fa04 f303 	lslgt.w	r3, r4, r3
 800bc82:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 800bc86:	f1c3 0320 	rsble	r3, r3, #32
 800bc8a:	bfc6      	itte	gt
 800bc8c:	fa28 f804 	lsrgt.w	r8, r8, r4
 800bc90:	ea43 0308 	orrgt.w	r3, r3, r8
 800bc94:	fa08 f303 	lslle.w	r3, r8, r3
 800bc98:	ee07 3a90 	vmov	s15, r3
 800bc9c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800bca0:	3901      	subs	r1, #1
 800bca2:	ed8d 7b00 	vstr	d7, [sp]
 800bca6:	9c01      	ldr	r4, [sp, #4]
 800bca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bcac:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 800bcb0:	2401      	movs	r4, #1
 800bcb2:	e7a0      	b.n	800bbf6 <_dtoa_r+0x106>
 800bcb4:	2301      	movs	r3, #1
 800bcb6:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcb8:	1a43      	subs	r3, r0, r1
 800bcba:	1e5a      	subs	r2, r3, #1
 800bcbc:	bf45      	ittet	mi
 800bcbe:	f1c3 0301 	rsbmi	r3, r3, #1
 800bcc2:	9305      	strmi	r3, [sp, #20]
 800bcc4:	2300      	movpl	r3, #0
 800bcc6:	2300      	movmi	r3, #0
 800bcc8:	9206      	str	r2, [sp, #24]
 800bcca:	bf54      	ite	pl
 800bccc:	9305      	strpl	r3, [sp, #20]
 800bcce:	9306      	strmi	r3, [sp, #24]
 800bcd0:	f1bb 0f00 	cmp.w	fp, #0
 800bcd4:	db18      	blt.n	800bd08 <_dtoa_r+0x218>
 800bcd6:	9b06      	ldr	r3, [sp, #24]
 800bcd8:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800bcdc:	445b      	add	r3, fp
 800bcde:	9306      	str	r3, [sp, #24]
 800bce0:	2300      	movs	r3, #0
 800bce2:	9a07      	ldr	r2, [sp, #28]
 800bce4:	2a09      	cmp	r2, #9
 800bce6:	d849      	bhi.n	800bd7c <_dtoa_r+0x28c>
 800bce8:	2a05      	cmp	r2, #5
 800bcea:	bfc4      	itt	gt
 800bcec:	3a04      	subgt	r2, #4
 800bcee:	9207      	strgt	r2, [sp, #28]
 800bcf0:	9a07      	ldr	r2, [sp, #28]
 800bcf2:	f1a2 0202 	sub.w	r2, r2, #2
 800bcf6:	bfcc      	ite	gt
 800bcf8:	2400      	movgt	r4, #0
 800bcfa:	2401      	movle	r4, #1
 800bcfc:	2a03      	cmp	r2, #3
 800bcfe:	d848      	bhi.n	800bd92 <_dtoa_r+0x2a2>
 800bd00:	e8df f002 	tbb	[pc, r2]
 800bd04:	3a2c2e0b 	.word	0x3a2c2e0b
 800bd08:	9b05      	ldr	r3, [sp, #20]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	eba3 030b 	sub.w	r3, r3, fp
 800bd10:	9305      	str	r3, [sp, #20]
 800bd12:	920e      	str	r2, [sp, #56]	; 0x38
 800bd14:	f1cb 0300 	rsb	r3, fp, #0
 800bd18:	e7e3      	b.n	800bce2 <_dtoa_r+0x1f2>
 800bd1a:	2200      	movs	r2, #0
 800bd1c:	9208      	str	r2, [sp, #32]
 800bd1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd20:	2a00      	cmp	r2, #0
 800bd22:	dc39      	bgt.n	800bd98 <_dtoa_r+0x2a8>
 800bd24:	f04f 0a01 	mov.w	sl, #1
 800bd28:	46d1      	mov	r9, sl
 800bd2a:	4652      	mov	r2, sl
 800bd2c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800bd30:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800bd32:	2100      	movs	r1, #0
 800bd34:	6079      	str	r1, [r7, #4]
 800bd36:	2004      	movs	r0, #4
 800bd38:	f100 0c14 	add.w	ip, r0, #20
 800bd3c:	4594      	cmp	ip, r2
 800bd3e:	6879      	ldr	r1, [r7, #4]
 800bd40:	d92f      	bls.n	800bda2 <_dtoa_r+0x2b2>
 800bd42:	4630      	mov	r0, r6
 800bd44:	930c      	str	r3, [sp, #48]	; 0x30
 800bd46:	f000 fc6f 	bl	800c628 <_Balloc>
 800bd4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd4c:	9000      	str	r0, [sp, #0]
 800bd4e:	4602      	mov	r2, r0
 800bd50:	2800      	cmp	r0, #0
 800bd52:	d149      	bne.n	800bde8 <_dtoa_r+0x2f8>
 800bd54:	4b23      	ldr	r3, [pc, #140]	; (800bde4 <_dtoa_r+0x2f4>)
 800bd56:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bd5a:	e6df      	b.n	800bb1c <_dtoa_r+0x2c>
 800bd5c:	2201      	movs	r2, #1
 800bd5e:	e7dd      	b.n	800bd1c <_dtoa_r+0x22c>
 800bd60:	2200      	movs	r2, #0
 800bd62:	9208      	str	r2, [sp, #32]
 800bd64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd66:	eb0b 0a02 	add.w	sl, fp, r2
 800bd6a:	f10a 0901 	add.w	r9, sl, #1
 800bd6e:	464a      	mov	r2, r9
 800bd70:	2a01      	cmp	r2, #1
 800bd72:	bfb8      	it	lt
 800bd74:	2201      	movlt	r2, #1
 800bd76:	e7db      	b.n	800bd30 <_dtoa_r+0x240>
 800bd78:	2201      	movs	r2, #1
 800bd7a:	e7f2      	b.n	800bd62 <_dtoa_r+0x272>
 800bd7c:	2401      	movs	r4, #1
 800bd7e:	2200      	movs	r2, #0
 800bd80:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800bd84:	f04f 3aff 	mov.w	sl, #4294967295
 800bd88:	2100      	movs	r1, #0
 800bd8a:	46d1      	mov	r9, sl
 800bd8c:	2212      	movs	r2, #18
 800bd8e:	9109      	str	r1, [sp, #36]	; 0x24
 800bd90:	e7ce      	b.n	800bd30 <_dtoa_r+0x240>
 800bd92:	2201      	movs	r2, #1
 800bd94:	9208      	str	r2, [sp, #32]
 800bd96:	e7f5      	b.n	800bd84 <_dtoa_r+0x294>
 800bd98:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800bd9c:	46d1      	mov	r9, sl
 800bd9e:	4652      	mov	r2, sl
 800bda0:	e7c6      	b.n	800bd30 <_dtoa_r+0x240>
 800bda2:	3101      	adds	r1, #1
 800bda4:	6079      	str	r1, [r7, #4]
 800bda6:	0040      	lsls	r0, r0, #1
 800bda8:	e7c6      	b.n	800bd38 <_dtoa_r+0x248>
 800bdaa:	bf00      	nop
 800bdac:	f3af 8000 	nop.w
 800bdb0:	636f4361 	.word	0x636f4361
 800bdb4:	3fd287a7 	.word	0x3fd287a7
 800bdb8:	8b60c8b3 	.word	0x8b60c8b3
 800bdbc:	3fc68a28 	.word	0x3fc68a28
 800bdc0:	509f79fb 	.word	0x509f79fb
 800bdc4:	3fd34413 	.word	0x3fd34413
 800bdc8:	0800da6d 	.word	0x0800da6d
 800bdcc:	0800da84 	.word	0x0800da84
 800bdd0:	7ff00000 	.word	0x7ff00000
 800bdd4:	0800da69 	.word	0x0800da69
 800bdd8:	0800da60 	.word	0x0800da60
 800bddc:	0800da3d 	.word	0x0800da3d
 800bde0:	0800db80 	.word	0x0800db80
 800bde4:	0800dae3 	.word	0x0800dae3
 800bde8:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800bdea:	9900      	ldr	r1, [sp, #0]
 800bdec:	6011      	str	r1, [r2, #0]
 800bdee:	f1b9 0f0e 	cmp.w	r9, #14
 800bdf2:	d872      	bhi.n	800beda <_dtoa_r+0x3ea>
 800bdf4:	2c00      	cmp	r4, #0
 800bdf6:	d070      	beq.n	800beda <_dtoa_r+0x3ea>
 800bdf8:	f1bb 0f00 	cmp.w	fp, #0
 800bdfc:	f340 80a6 	ble.w	800bf4c <_dtoa_r+0x45c>
 800be00:	49ca      	ldr	r1, [pc, #808]	; (800c12c <_dtoa_r+0x63c>)
 800be02:	f00b 020f 	and.w	r2, fp, #15
 800be06:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800be0a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800be0e:	ed92 7b00 	vldr	d7, [r2]
 800be12:	ea4f 112b 	mov.w	r1, fp, asr #4
 800be16:	f000 808d 	beq.w	800bf34 <_dtoa_r+0x444>
 800be1a:	4ac5      	ldr	r2, [pc, #788]	; (800c130 <_dtoa_r+0x640>)
 800be1c:	ed9d 5b0a 	vldr	d5, [sp, #40]	; 0x28
 800be20:	ed92 6b08 	vldr	d6, [r2, #32]
 800be24:	ee85 6b06 	vdiv.f64	d6, d5, d6
 800be28:	ed8d 6b02 	vstr	d6, [sp, #8]
 800be2c:	f001 010f 	and.w	r1, r1, #15
 800be30:	2203      	movs	r2, #3
 800be32:	48bf      	ldr	r0, [pc, #764]	; (800c130 <_dtoa_r+0x640>)
 800be34:	2900      	cmp	r1, #0
 800be36:	d17f      	bne.n	800bf38 <_dtoa_r+0x448>
 800be38:	ed9d 6b02 	vldr	d6, [sp, #8]
 800be3c:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800be40:	ed8d 7b02 	vstr	d7, [sp, #8]
 800be44:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800be46:	2900      	cmp	r1, #0
 800be48:	f000 80b2 	beq.w	800bfb0 <_dtoa_r+0x4c0>
 800be4c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800be50:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be54:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800be58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be5c:	f140 80a8 	bpl.w	800bfb0 <_dtoa_r+0x4c0>
 800be60:	f1b9 0f00 	cmp.w	r9, #0
 800be64:	f000 80a4 	beq.w	800bfb0 <_dtoa_r+0x4c0>
 800be68:	f1ba 0f00 	cmp.w	sl, #0
 800be6c:	dd31      	ble.n	800bed2 <_dtoa_r+0x3e2>
 800be6e:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800be72:	ee27 7b06 	vmul.f64	d7, d7, d6
 800be76:	ed8d 7b02 	vstr	d7, [sp, #8]
 800be7a:	f10b 37ff 	add.w	r7, fp, #4294967295
 800be7e:	3201      	adds	r2, #1
 800be80:	4650      	mov	r0, sl
 800be82:	ed9d 6b02 	vldr	d6, [sp, #8]
 800be86:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800be8a:	ee07 2a90 	vmov	s15, r2
 800be8e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800be92:	eea7 5b06 	vfma.f64	d5, d7, d6
 800be96:	ed8d 5b02 	vstr	d5, [sp, #8]
 800be9a:	9c03      	ldr	r4, [sp, #12]
 800be9c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800bea0:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 800bea4:	2800      	cmp	r0, #0
 800bea6:	f040 8086 	bne.w	800bfb6 <_dtoa_r+0x4c6>
 800beaa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800beae:	ee36 6b47 	vsub.f64	d6, d6, d7
 800beb2:	ec42 1b17 	vmov	d7, r1, r2
 800beb6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800beba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bebe:	f300 8272 	bgt.w	800c3a6 <_dtoa_r+0x8b6>
 800bec2:	eeb1 7b47 	vneg.f64	d7, d7
 800bec6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800beca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bece:	f100 8267 	bmi.w	800c3a0 <_dtoa_r+0x8b0>
 800bed2:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
 800bed6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800beda:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800bedc:	2a00      	cmp	r2, #0
 800bede:	f2c0 8129 	blt.w	800c134 <_dtoa_r+0x644>
 800bee2:	f1bb 0f0e 	cmp.w	fp, #14
 800bee6:	f300 8125 	bgt.w	800c134 <_dtoa_r+0x644>
 800beea:	4b90      	ldr	r3, [pc, #576]	; (800c12c <_dtoa_r+0x63c>)
 800beec:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bef0:	ed93 6b00 	vldr	d6, [r3]
 800bef4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	f280 80c3 	bge.w	800c082 <_dtoa_r+0x592>
 800befc:	f1b9 0f00 	cmp.w	r9, #0
 800bf00:	f300 80bf 	bgt.w	800c082 <_dtoa_r+0x592>
 800bf04:	f040 824c 	bne.w	800c3a0 <_dtoa_r+0x8b0>
 800bf08:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800bf0c:	ee26 6b07 	vmul.f64	d6, d6, d7
 800bf10:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bf14:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bf18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf1c:	464c      	mov	r4, r9
 800bf1e:	464f      	mov	r7, r9
 800bf20:	f280 8222 	bge.w	800c368 <_dtoa_r+0x878>
 800bf24:	f8dd 8000 	ldr.w	r8, [sp]
 800bf28:	2331      	movs	r3, #49	; 0x31
 800bf2a:	f808 3b01 	strb.w	r3, [r8], #1
 800bf2e:	f10b 0b01 	add.w	fp, fp, #1
 800bf32:	e21e      	b.n	800c372 <_dtoa_r+0x882>
 800bf34:	2202      	movs	r2, #2
 800bf36:	e77c      	b.n	800be32 <_dtoa_r+0x342>
 800bf38:	07cc      	lsls	r4, r1, #31
 800bf3a:	d504      	bpl.n	800bf46 <_dtoa_r+0x456>
 800bf3c:	ed90 6b00 	vldr	d6, [r0]
 800bf40:	3201      	adds	r2, #1
 800bf42:	ee27 7b06 	vmul.f64	d7, d7, d6
 800bf46:	1049      	asrs	r1, r1, #1
 800bf48:	3008      	adds	r0, #8
 800bf4a:	e773      	b.n	800be34 <_dtoa_r+0x344>
 800bf4c:	d02e      	beq.n	800bfac <_dtoa_r+0x4bc>
 800bf4e:	f1cb 0100 	rsb	r1, fp, #0
 800bf52:	4a76      	ldr	r2, [pc, #472]	; (800c12c <_dtoa_r+0x63c>)
 800bf54:	f001 000f 	and.w	r0, r1, #15
 800bf58:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800bf5c:	ed92 7b00 	vldr	d7, [r2]
 800bf60:	ed9d 6b0a 	vldr	d6, [sp, #40]	; 0x28
 800bf64:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bf68:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800bf6c:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	; 0x30
 800bf70:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800bf74:	486e      	ldr	r0, [pc, #440]	; (800c130 <_dtoa_r+0x640>)
 800bf76:	1109      	asrs	r1, r1, #4
 800bf78:	2400      	movs	r4, #0
 800bf7a:	2202      	movs	r2, #2
 800bf7c:	b939      	cbnz	r1, 800bf8e <_dtoa_r+0x49e>
 800bf7e:	2c00      	cmp	r4, #0
 800bf80:	f43f af60 	beq.w	800be44 <_dtoa_r+0x354>
 800bf84:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800bf88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf8c:	e75a      	b.n	800be44 <_dtoa_r+0x354>
 800bf8e:	07cf      	lsls	r7, r1, #31
 800bf90:	d509      	bpl.n	800bfa6 <_dtoa_r+0x4b6>
 800bf92:	ed9d 6b0c 	vldr	d6, [sp, #48]	; 0x30
 800bf96:	ed90 7b00 	vldr	d7, [r0]
 800bf9a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800bf9e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800bfa2:	3201      	adds	r2, #1
 800bfa4:	2401      	movs	r4, #1
 800bfa6:	1049      	asrs	r1, r1, #1
 800bfa8:	3008      	adds	r0, #8
 800bfaa:	e7e7      	b.n	800bf7c <_dtoa_r+0x48c>
 800bfac:	2202      	movs	r2, #2
 800bfae:	e749      	b.n	800be44 <_dtoa_r+0x354>
 800bfb0:	465f      	mov	r7, fp
 800bfb2:	4648      	mov	r0, r9
 800bfb4:	e765      	b.n	800be82 <_dtoa_r+0x392>
 800bfb6:	ec42 1b17 	vmov	d7, r1, r2
 800bfba:	4a5c      	ldr	r2, [pc, #368]	; (800c12c <_dtoa_r+0x63c>)
 800bfbc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800bfc0:	ed12 4b02 	vldr	d4, [r2, #-8]
 800bfc4:	9a00      	ldr	r2, [sp, #0]
 800bfc6:	1814      	adds	r4, r2, r0
 800bfc8:	9a08      	ldr	r2, [sp, #32]
 800bfca:	b352      	cbz	r2, 800c022 <_dtoa_r+0x532>
 800bfcc:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800bfd0:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800bfd4:	f8dd 8000 	ldr.w	r8, [sp]
 800bfd8:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800bfdc:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800bfe0:	ee35 7b47 	vsub.f64	d7, d5, d7
 800bfe4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800bfe8:	ee14 2a90 	vmov	r2, s9
 800bfec:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800bff0:	3230      	adds	r2, #48	; 0x30
 800bff2:	ee36 6b45 	vsub.f64	d6, d6, d5
 800bff6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800bffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bffe:	f808 2b01 	strb.w	r2, [r8], #1
 800c002:	d439      	bmi.n	800c078 <_dtoa_r+0x588>
 800c004:	ee32 5b46 	vsub.f64	d5, d2, d6
 800c008:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800c00c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c010:	d472      	bmi.n	800c0f8 <_dtoa_r+0x608>
 800c012:	45a0      	cmp	r8, r4
 800c014:	f43f af5d 	beq.w	800bed2 <_dtoa_r+0x3e2>
 800c018:	ee27 7b03 	vmul.f64	d7, d7, d3
 800c01c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c020:	e7e0      	b.n	800bfe4 <_dtoa_r+0x4f4>
 800c022:	f8dd 8000 	ldr.w	r8, [sp]
 800c026:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c02a:	4621      	mov	r1, r4
 800c02c:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800c030:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800c034:	ee14 2a90 	vmov	r2, s9
 800c038:	3230      	adds	r2, #48	; 0x30
 800c03a:	f808 2b01 	strb.w	r2, [r8], #1
 800c03e:	45a0      	cmp	r8, r4
 800c040:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800c044:	ee36 6b45 	vsub.f64	d6, d6, d5
 800c048:	d118      	bne.n	800c07c <_dtoa_r+0x58c>
 800c04a:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800c04e:	ee37 4b05 	vadd.f64	d4, d7, d5
 800c052:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800c056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c05a:	dc4d      	bgt.n	800c0f8 <_dtoa_r+0x608>
 800c05c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800c060:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800c064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c068:	f57f af33 	bpl.w	800bed2 <_dtoa_r+0x3e2>
 800c06c:	4688      	mov	r8, r1
 800c06e:	3901      	subs	r1, #1
 800c070:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800c074:	2b30      	cmp	r3, #48	; 0x30
 800c076:	d0f9      	beq.n	800c06c <_dtoa_r+0x57c>
 800c078:	46bb      	mov	fp, r7
 800c07a:	e02a      	b.n	800c0d2 <_dtoa_r+0x5e2>
 800c07c:	ee26 6b03 	vmul.f64	d6, d6, d3
 800c080:	e7d6      	b.n	800c030 <_dtoa_r+0x540>
 800c082:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c086:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800c08a:	f8dd 8000 	ldr.w	r8, [sp]
 800c08e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800c092:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800c096:	ee15 3a10 	vmov	r3, s10
 800c09a:	3330      	adds	r3, #48	; 0x30
 800c09c:	f808 3b01 	strb.w	r3, [r8], #1
 800c0a0:	9b00      	ldr	r3, [sp, #0]
 800c0a2:	eba8 0303 	sub.w	r3, r8, r3
 800c0a6:	4599      	cmp	r9, r3
 800c0a8:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800c0ac:	eea3 7b46 	vfms.f64	d7, d3, d6
 800c0b0:	d133      	bne.n	800c11a <_dtoa_r+0x62a>
 800c0b2:	ee37 7b07 	vadd.f64	d7, d7, d7
 800c0b6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800c0ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0be:	dc1a      	bgt.n	800c0f6 <_dtoa_r+0x606>
 800c0c0:	eeb4 7b46 	vcmp.f64	d7, d6
 800c0c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0c8:	d103      	bne.n	800c0d2 <_dtoa_r+0x5e2>
 800c0ca:	ee15 3a10 	vmov	r3, s10
 800c0ce:	07d9      	lsls	r1, r3, #31
 800c0d0:	d411      	bmi.n	800c0f6 <_dtoa_r+0x606>
 800c0d2:	4629      	mov	r1, r5
 800c0d4:	4630      	mov	r0, r6
 800c0d6:	f000 fae7 	bl	800c6a8 <_Bfree>
 800c0da:	2300      	movs	r3, #0
 800c0dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800c0de:	f888 3000 	strb.w	r3, [r8]
 800c0e2:	f10b 0301 	add.w	r3, fp, #1
 800c0e6:	6013      	str	r3, [r2, #0]
 800c0e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	f43f ad4d 	beq.w	800bb8a <_dtoa_r+0x9a>
 800c0f0:	f8c3 8000 	str.w	r8, [r3]
 800c0f4:	e549      	b.n	800bb8a <_dtoa_r+0x9a>
 800c0f6:	465f      	mov	r7, fp
 800c0f8:	4643      	mov	r3, r8
 800c0fa:	4698      	mov	r8, r3
 800c0fc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c100:	2a39      	cmp	r2, #57	; 0x39
 800c102:	d106      	bne.n	800c112 <_dtoa_r+0x622>
 800c104:	9a00      	ldr	r2, [sp, #0]
 800c106:	429a      	cmp	r2, r3
 800c108:	d1f7      	bne.n	800c0fa <_dtoa_r+0x60a>
 800c10a:	9900      	ldr	r1, [sp, #0]
 800c10c:	2230      	movs	r2, #48	; 0x30
 800c10e:	3701      	adds	r7, #1
 800c110:	700a      	strb	r2, [r1, #0]
 800c112:	781a      	ldrb	r2, [r3, #0]
 800c114:	3201      	adds	r2, #1
 800c116:	701a      	strb	r2, [r3, #0]
 800c118:	e7ae      	b.n	800c078 <_dtoa_r+0x588>
 800c11a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800c11e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800c122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c126:	d1b2      	bne.n	800c08e <_dtoa_r+0x59e>
 800c128:	e7d3      	b.n	800c0d2 <_dtoa_r+0x5e2>
 800c12a:	bf00      	nop
 800c12c:	0800db80 	.word	0x0800db80
 800c130:	0800db58 	.word	0x0800db58
 800c134:	9908      	ldr	r1, [sp, #32]
 800c136:	2900      	cmp	r1, #0
 800c138:	f000 80d1 	beq.w	800c2de <_dtoa_r+0x7ee>
 800c13c:	9907      	ldr	r1, [sp, #28]
 800c13e:	2901      	cmp	r1, #1
 800c140:	f300 80b4 	bgt.w	800c2ac <_dtoa_r+0x7bc>
 800c144:	9911      	ldr	r1, [sp, #68]	; 0x44
 800c146:	2900      	cmp	r1, #0
 800c148:	f000 80ac 	beq.w	800c2a4 <_dtoa_r+0x7b4>
 800c14c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c150:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c154:	461c      	mov	r4, r3
 800c156:	930a      	str	r3, [sp, #40]	; 0x28
 800c158:	9b05      	ldr	r3, [sp, #20]
 800c15a:	4413      	add	r3, r2
 800c15c:	9305      	str	r3, [sp, #20]
 800c15e:	9b06      	ldr	r3, [sp, #24]
 800c160:	2101      	movs	r1, #1
 800c162:	4413      	add	r3, r2
 800c164:	4630      	mov	r0, r6
 800c166:	9306      	str	r3, [sp, #24]
 800c168:	f000 fb5a 	bl	800c820 <__i2b>
 800c16c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c16e:	4607      	mov	r7, r0
 800c170:	f1b8 0f00 	cmp.w	r8, #0
 800c174:	dd0d      	ble.n	800c192 <_dtoa_r+0x6a2>
 800c176:	9a06      	ldr	r2, [sp, #24]
 800c178:	2a00      	cmp	r2, #0
 800c17a:	dd0a      	ble.n	800c192 <_dtoa_r+0x6a2>
 800c17c:	4542      	cmp	r2, r8
 800c17e:	9905      	ldr	r1, [sp, #20]
 800c180:	bfa8      	it	ge
 800c182:	4642      	movge	r2, r8
 800c184:	1a89      	subs	r1, r1, r2
 800c186:	9105      	str	r1, [sp, #20]
 800c188:	9906      	ldr	r1, [sp, #24]
 800c18a:	eba8 0802 	sub.w	r8, r8, r2
 800c18e:	1a8a      	subs	r2, r1, r2
 800c190:	9206      	str	r2, [sp, #24]
 800c192:	b303      	cbz	r3, 800c1d6 <_dtoa_r+0x6e6>
 800c194:	9a08      	ldr	r2, [sp, #32]
 800c196:	2a00      	cmp	r2, #0
 800c198:	f000 80a6 	beq.w	800c2e8 <_dtoa_r+0x7f8>
 800c19c:	2c00      	cmp	r4, #0
 800c19e:	dd13      	ble.n	800c1c8 <_dtoa_r+0x6d8>
 800c1a0:	4639      	mov	r1, r7
 800c1a2:	4622      	mov	r2, r4
 800c1a4:	4630      	mov	r0, r6
 800c1a6:	930c      	str	r3, [sp, #48]	; 0x30
 800c1a8:	f000 fbf6 	bl	800c998 <__pow5mult>
 800c1ac:	462a      	mov	r2, r5
 800c1ae:	4601      	mov	r1, r0
 800c1b0:	4607      	mov	r7, r0
 800c1b2:	4630      	mov	r0, r6
 800c1b4:	f000 fb4a 	bl	800c84c <__multiply>
 800c1b8:	4629      	mov	r1, r5
 800c1ba:	900a      	str	r0, [sp, #40]	; 0x28
 800c1bc:	4630      	mov	r0, r6
 800c1be:	f000 fa73 	bl	800c6a8 <_Bfree>
 800c1c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c1c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c1c6:	4615      	mov	r5, r2
 800c1c8:	1b1a      	subs	r2, r3, r4
 800c1ca:	d004      	beq.n	800c1d6 <_dtoa_r+0x6e6>
 800c1cc:	4629      	mov	r1, r5
 800c1ce:	4630      	mov	r0, r6
 800c1d0:	f000 fbe2 	bl	800c998 <__pow5mult>
 800c1d4:	4605      	mov	r5, r0
 800c1d6:	2101      	movs	r1, #1
 800c1d8:	4630      	mov	r0, r6
 800c1da:	f000 fb21 	bl	800c820 <__i2b>
 800c1de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	4604      	mov	r4, r0
 800c1e4:	f340 8082 	ble.w	800c2ec <_dtoa_r+0x7fc>
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	4601      	mov	r1, r0
 800c1ec:	4630      	mov	r0, r6
 800c1ee:	f000 fbd3 	bl	800c998 <__pow5mult>
 800c1f2:	9b07      	ldr	r3, [sp, #28]
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	4604      	mov	r4, r0
 800c1f8:	dd7b      	ble.n	800c2f2 <_dtoa_r+0x802>
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	930a      	str	r3, [sp, #40]	; 0x28
 800c1fe:	6922      	ldr	r2, [r4, #16]
 800c200:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c204:	6910      	ldr	r0, [r2, #16]
 800c206:	f000 fabb 	bl	800c780 <__hi0bits>
 800c20a:	f1c0 0020 	rsb	r0, r0, #32
 800c20e:	9b06      	ldr	r3, [sp, #24]
 800c210:	4418      	add	r0, r3
 800c212:	f010 001f 	ands.w	r0, r0, #31
 800c216:	f000 808d 	beq.w	800c334 <_dtoa_r+0x844>
 800c21a:	f1c0 0220 	rsb	r2, r0, #32
 800c21e:	2a04      	cmp	r2, #4
 800c220:	f340 8086 	ble.w	800c330 <_dtoa_r+0x840>
 800c224:	f1c0 001c 	rsb	r0, r0, #28
 800c228:	9b05      	ldr	r3, [sp, #20]
 800c22a:	4403      	add	r3, r0
 800c22c:	9305      	str	r3, [sp, #20]
 800c22e:	9b06      	ldr	r3, [sp, #24]
 800c230:	4403      	add	r3, r0
 800c232:	4480      	add	r8, r0
 800c234:	9306      	str	r3, [sp, #24]
 800c236:	9b05      	ldr	r3, [sp, #20]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	dd05      	ble.n	800c248 <_dtoa_r+0x758>
 800c23c:	4629      	mov	r1, r5
 800c23e:	461a      	mov	r2, r3
 800c240:	4630      	mov	r0, r6
 800c242:	f000 fc03 	bl	800ca4c <__lshift>
 800c246:	4605      	mov	r5, r0
 800c248:	9b06      	ldr	r3, [sp, #24]
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	dd05      	ble.n	800c25a <_dtoa_r+0x76a>
 800c24e:	4621      	mov	r1, r4
 800c250:	461a      	mov	r2, r3
 800c252:	4630      	mov	r0, r6
 800c254:	f000 fbfa 	bl	800ca4c <__lshift>
 800c258:	4604      	mov	r4, r0
 800c25a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d06b      	beq.n	800c338 <_dtoa_r+0x848>
 800c260:	4621      	mov	r1, r4
 800c262:	4628      	mov	r0, r5
 800c264:	f000 fc5e 	bl	800cb24 <__mcmp>
 800c268:	2800      	cmp	r0, #0
 800c26a:	da65      	bge.n	800c338 <_dtoa_r+0x848>
 800c26c:	2300      	movs	r3, #0
 800c26e:	4629      	mov	r1, r5
 800c270:	220a      	movs	r2, #10
 800c272:	4630      	mov	r0, r6
 800c274:	f000 fa3a 	bl	800c6ec <__multadd>
 800c278:	9b08      	ldr	r3, [sp, #32]
 800c27a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c27e:	4605      	mov	r5, r0
 800c280:	2b00      	cmp	r3, #0
 800c282:	f000 8192 	beq.w	800c5aa <_dtoa_r+0xaba>
 800c286:	4639      	mov	r1, r7
 800c288:	2300      	movs	r3, #0
 800c28a:	220a      	movs	r2, #10
 800c28c:	4630      	mov	r0, r6
 800c28e:	f000 fa2d 	bl	800c6ec <__multadd>
 800c292:	f1ba 0f00 	cmp.w	sl, #0
 800c296:	4607      	mov	r7, r0
 800c298:	f300 808e 	bgt.w	800c3b8 <_dtoa_r+0x8c8>
 800c29c:	9b07      	ldr	r3, [sp, #28]
 800c29e:	2b02      	cmp	r3, #2
 800c2a0:	dc51      	bgt.n	800c346 <_dtoa_r+0x856>
 800c2a2:	e089      	b.n	800c3b8 <_dtoa_r+0x8c8>
 800c2a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c2a6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c2aa:	e751      	b.n	800c150 <_dtoa_r+0x660>
 800c2ac:	f109 34ff 	add.w	r4, r9, #4294967295
 800c2b0:	42a3      	cmp	r3, r4
 800c2b2:	bfbf      	itttt	lt
 800c2b4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 800c2b6:	1ae3      	sublt	r3, r4, r3
 800c2b8:	18d2      	addlt	r2, r2, r3
 800c2ba:	4613      	movlt	r3, r2
 800c2bc:	bfb7      	itett	lt
 800c2be:	930e      	strlt	r3, [sp, #56]	; 0x38
 800c2c0:	1b1c      	subge	r4, r3, r4
 800c2c2:	4623      	movlt	r3, r4
 800c2c4:	2400      	movlt	r4, #0
 800c2c6:	f1b9 0f00 	cmp.w	r9, #0
 800c2ca:	bfb5      	itete	lt
 800c2cc:	9a05      	ldrlt	r2, [sp, #20]
 800c2ce:	f8dd 8014 	ldrge.w	r8, [sp, #20]
 800c2d2:	eba2 0809 	sublt.w	r8, r2, r9
 800c2d6:	464a      	movge	r2, r9
 800c2d8:	bfb8      	it	lt
 800c2da:	2200      	movlt	r2, #0
 800c2dc:	e73b      	b.n	800c156 <_dtoa_r+0x666>
 800c2de:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c2e2:	9f08      	ldr	r7, [sp, #32]
 800c2e4:	461c      	mov	r4, r3
 800c2e6:	e743      	b.n	800c170 <_dtoa_r+0x680>
 800c2e8:	461a      	mov	r2, r3
 800c2ea:	e76f      	b.n	800c1cc <_dtoa_r+0x6dc>
 800c2ec:	9b07      	ldr	r3, [sp, #28]
 800c2ee:	2b01      	cmp	r3, #1
 800c2f0:	dc18      	bgt.n	800c324 <_dtoa_r+0x834>
 800c2f2:	9b02      	ldr	r3, [sp, #8]
 800c2f4:	b9b3      	cbnz	r3, 800c324 <_dtoa_r+0x834>
 800c2f6:	9b03      	ldr	r3, [sp, #12]
 800c2f8:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800c2fc:	b9a2      	cbnz	r2, 800c328 <_dtoa_r+0x838>
 800c2fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c302:	0d12      	lsrs	r2, r2, #20
 800c304:	0512      	lsls	r2, r2, #20
 800c306:	b18a      	cbz	r2, 800c32c <_dtoa_r+0x83c>
 800c308:	9b05      	ldr	r3, [sp, #20]
 800c30a:	3301      	adds	r3, #1
 800c30c:	9305      	str	r3, [sp, #20]
 800c30e:	9b06      	ldr	r3, [sp, #24]
 800c310:	3301      	adds	r3, #1
 800c312:	9306      	str	r3, [sp, #24]
 800c314:	2301      	movs	r3, #1
 800c316:	930a      	str	r3, [sp, #40]	; 0x28
 800c318:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	f47f af6f 	bne.w	800c1fe <_dtoa_r+0x70e>
 800c320:	2001      	movs	r0, #1
 800c322:	e774      	b.n	800c20e <_dtoa_r+0x71e>
 800c324:	2300      	movs	r3, #0
 800c326:	e7f6      	b.n	800c316 <_dtoa_r+0x826>
 800c328:	9b02      	ldr	r3, [sp, #8]
 800c32a:	e7f4      	b.n	800c316 <_dtoa_r+0x826>
 800c32c:	920a      	str	r2, [sp, #40]	; 0x28
 800c32e:	e7f3      	b.n	800c318 <_dtoa_r+0x828>
 800c330:	d081      	beq.n	800c236 <_dtoa_r+0x746>
 800c332:	4610      	mov	r0, r2
 800c334:	301c      	adds	r0, #28
 800c336:	e777      	b.n	800c228 <_dtoa_r+0x738>
 800c338:	f1b9 0f00 	cmp.w	r9, #0
 800c33c:	dc37      	bgt.n	800c3ae <_dtoa_r+0x8be>
 800c33e:	9b07      	ldr	r3, [sp, #28]
 800c340:	2b02      	cmp	r3, #2
 800c342:	dd34      	ble.n	800c3ae <_dtoa_r+0x8be>
 800c344:	46ca      	mov	sl, r9
 800c346:	f1ba 0f00 	cmp.w	sl, #0
 800c34a:	d10d      	bne.n	800c368 <_dtoa_r+0x878>
 800c34c:	4621      	mov	r1, r4
 800c34e:	4653      	mov	r3, sl
 800c350:	2205      	movs	r2, #5
 800c352:	4630      	mov	r0, r6
 800c354:	f000 f9ca 	bl	800c6ec <__multadd>
 800c358:	4601      	mov	r1, r0
 800c35a:	4604      	mov	r4, r0
 800c35c:	4628      	mov	r0, r5
 800c35e:	f000 fbe1 	bl	800cb24 <__mcmp>
 800c362:	2800      	cmp	r0, #0
 800c364:	f73f adde 	bgt.w	800bf24 <_dtoa_r+0x434>
 800c368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c36a:	f8dd 8000 	ldr.w	r8, [sp]
 800c36e:	ea6f 0b03 	mvn.w	fp, r3
 800c372:	f04f 0900 	mov.w	r9, #0
 800c376:	4621      	mov	r1, r4
 800c378:	4630      	mov	r0, r6
 800c37a:	f000 f995 	bl	800c6a8 <_Bfree>
 800c37e:	2f00      	cmp	r7, #0
 800c380:	f43f aea7 	beq.w	800c0d2 <_dtoa_r+0x5e2>
 800c384:	f1b9 0f00 	cmp.w	r9, #0
 800c388:	d005      	beq.n	800c396 <_dtoa_r+0x8a6>
 800c38a:	45b9      	cmp	r9, r7
 800c38c:	d003      	beq.n	800c396 <_dtoa_r+0x8a6>
 800c38e:	4649      	mov	r1, r9
 800c390:	4630      	mov	r0, r6
 800c392:	f000 f989 	bl	800c6a8 <_Bfree>
 800c396:	4639      	mov	r1, r7
 800c398:	4630      	mov	r0, r6
 800c39a:	f000 f985 	bl	800c6a8 <_Bfree>
 800c39e:	e698      	b.n	800c0d2 <_dtoa_r+0x5e2>
 800c3a0:	2400      	movs	r4, #0
 800c3a2:	4627      	mov	r7, r4
 800c3a4:	e7e0      	b.n	800c368 <_dtoa_r+0x878>
 800c3a6:	46bb      	mov	fp, r7
 800c3a8:	4604      	mov	r4, r0
 800c3aa:	4607      	mov	r7, r0
 800c3ac:	e5ba      	b.n	800bf24 <_dtoa_r+0x434>
 800c3ae:	9b08      	ldr	r3, [sp, #32]
 800c3b0:	46ca      	mov	sl, r9
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	f000 8100 	beq.w	800c5b8 <_dtoa_r+0xac8>
 800c3b8:	f1b8 0f00 	cmp.w	r8, #0
 800c3bc:	dd05      	ble.n	800c3ca <_dtoa_r+0x8da>
 800c3be:	4639      	mov	r1, r7
 800c3c0:	4642      	mov	r2, r8
 800c3c2:	4630      	mov	r0, r6
 800c3c4:	f000 fb42 	bl	800ca4c <__lshift>
 800c3c8:	4607      	mov	r7, r0
 800c3ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d05d      	beq.n	800c48c <_dtoa_r+0x99c>
 800c3d0:	6879      	ldr	r1, [r7, #4]
 800c3d2:	4630      	mov	r0, r6
 800c3d4:	f000 f928 	bl	800c628 <_Balloc>
 800c3d8:	4680      	mov	r8, r0
 800c3da:	b928      	cbnz	r0, 800c3e8 <_dtoa_r+0x8f8>
 800c3dc:	4b82      	ldr	r3, [pc, #520]	; (800c5e8 <_dtoa_r+0xaf8>)
 800c3de:	4602      	mov	r2, r0
 800c3e0:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c3e4:	f7ff bb9a 	b.w	800bb1c <_dtoa_r+0x2c>
 800c3e8:	693a      	ldr	r2, [r7, #16]
 800c3ea:	3202      	adds	r2, #2
 800c3ec:	0092      	lsls	r2, r2, #2
 800c3ee:	f107 010c 	add.w	r1, r7, #12
 800c3f2:	300c      	adds	r0, #12
 800c3f4:	f000 f90a 	bl	800c60c <memcpy>
 800c3f8:	2201      	movs	r2, #1
 800c3fa:	4641      	mov	r1, r8
 800c3fc:	4630      	mov	r0, r6
 800c3fe:	f000 fb25 	bl	800ca4c <__lshift>
 800c402:	9b00      	ldr	r3, [sp, #0]
 800c404:	3301      	adds	r3, #1
 800c406:	9305      	str	r3, [sp, #20]
 800c408:	9b00      	ldr	r3, [sp, #0]
 800c40a:	4453      	add	r3, sl
 800c40c:	9309      	str	r3, [sp, #36]	; 0x24
 800c40e:	9b02      	ldr	r3, [sp, #8]
 800c410:	f003 0301 	and.w	r3, r3, #1
 800c414:	46b9      	mov	r9, r7
 800c416:	9308      	str	r3, [sp, #32]
 800c418:	4607      	mov	r7, r0
 800c41a:	9b05      	ldr	r3, [sp, #20]
 800c41c:	4621      	mov	r1, r4
 800c41e:	3b01      	subs	r3, #1
 800c420:	4628      	mov	r0, r5
 800c422:	9302      	str	r3, [sp, #8]
 800c424:	f7ff fad6 	bl	800b9d4 <quorem>
 800c428:	4603      	mov	r3, r0
 800c42a:	3330      	adds	r3, #48	; 0x30
 800c42c:	9006      	str	r0, [sp, #24]
 800c42e:	4649      	mov	r1, r9
 800c430:	4628      	mov	r0, r5
 800c432:	930a      	str	r3, [sp, #40]	; 0x28
 800c434:	f000 fb76 	bl	800cb24 <__mcmp>
 800c438:	463a      	mov	r2, r7
 800c43a:	4682      	mov	sl, r0
 800c43c:	4621      	mov	r1, r4
 800c43e:	4630      	mov	r0, r6
 800c440:	f000 fb8c 	bl	800cb5c <__mdiff>
 800c444:	68c2      	ldr	r2, [r0, #12]
 800c446:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c448:	4680      	mov	r8, r0
 800c44a:	bb0a      	cbnz	r2, 800c490 <_dtoa_r+0x9a0>
 800c44c:	4601      	mov	r1, r0
 800c44e:	4628      	mov	r0, r5
 800c450:	f000 fb68 	bl	800cb24 <__mcmp>
 800c454:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c456:	4602      	mov	r2, r0
 800c458:	4641      	mov	r1, r8
 800c45a:	4630      	mov	r0, r6
 800c45c:	920e      	str	r2, [sp, #56]	; 0x38
 800c45e:	930a      	str	r3, [sp, #40]	; 0x28
 800c460:	f000 f922 	bl	800c6a8 <_Bfree>
 800c464:	9b07      	ldr	r3, [sp, #28]
 800c466:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c468:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800c46c:	ea43 0102 	orr.w	r1, r3, r2
 800c470:	9b08      	ldr	r3, [sp, #32]
 800c472:	430b      	orrs	r3, r1
 800c474:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c476:	d10d      	bne.n	800c494 <_dtoa_r+0x9a4>
 800c478:	2b39      	cmp	r3, #57	; 0x39
 800c47a:	d029      	beq.n	800c4d0 <_dtoa_r+0x9e0>
 800c47c:	f1ba 0f00 	cmp.w	sl, #0
 800c480:	dd01      	ble.n	800c486 <_dtoa_r+0x996>
 800c482:	9b06      	ldr	r3, [sp, #24]
 800c484:	3331      	adds	r3, #49	; 0x31
 800c486:	9a02      	ldr	r2, [sp, #8]
 800c488:	7013      	strb	r3, [r2, #0]
 800c48a:	e774      	b.n	800c376 <_dtoa_r+0x886>
 800c48c:	4638      	mov	r0, r7
 800c48e:	e7b8      	b.n	800c402 <_dtoa_r+0x912>
 800c490:	2201      	movs	r2, #1
 800c492:	e7e1      	b.n	800c458 <_dtoa_r+0x968>
 800c494:	f1ba 0f00 	cmp.w	sl, #0
 800c498:	db06      	blt.n	800c4a8 <_dtoa_r+0x9b8>
 800c49a:	9907      	ldr	r1, [sp, #28]
 800c49c:	ea41 0a0a 	orr.w	sl, r1, sl
 800c4a0:	9908      	ldr	r1, [sp, #32]
 800c4a2:	ea5a 0101 	orrs.w	r1, sl, r1
 800c4a6:	d120      	bne.n	800c4ea <_dtoa_r+0x9fa>
 800c4a8:	2a00      	cmp	r2, #0
 800c4aa:	ddec      	ble.n	800c486 <_dtoa_r+0x996>
 800c4ac:	4629      	mov	r1, r5
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	4630      	mov	r0, r6
 800c4b2:	9305      	str	r3, [sp, #20]
 800c4b4:	f000 faca 	bl	800ca4c <__lshift>
 800c4b8:	4621      	mov	r1, r4
 800c4ba:	4605      	mov	r5, r0
 800c4bc:	f000 fb32 	bl	800cb24 <__mcmp>
 800c4c0:	2800      	cmp	r0, #0
 800c4c2:	9b05      	ldr	r3, [sp, #20]
 800c4c4:	dc02      	bgt.n	800c4cc <_dtoa_r+0x9dc>
 800c4c6:	d1de      	bne.n	800c486 <_dtoa_r+0x996>
 800c4c8:	07da      	lsls	r2, r3, #31
 800c4ca:	d5dc      	bpl.n	800c486 <_dtoa_r+0x996>
 800c4cc:	2b39      	cmp	r3, #57	; 0x39
 800c4ce:	d1d8      	bne.n	800c482 <_dtoa_r+0x992>
 800c4d0:	9a02      	ldr	r2, [sp, #8]
 800c4d2:	2339      	movs	r3, #57	; 0x39
 800c4d4:	7013      	strb	r3, [r2, #0]
 800c4d6:	4643      	mov	r3, r8
 800c4d8:	4698      	mov	r8, r3
 800c4da:	3b01      	subs	r3, #1
 800c4dc:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800c4e0:	2a39      	cmp	r2, #57	; 0x39
 800c4e2:	d051      	beq.n	800c588 <_dtoa_r+0xa98>
 800c4e4:	3201      	adds	r2, #1
 800c4e6:	701a      	strb	r2, [r3, #0]
 800c4e8:	e745      	b.n	800c376 <_dtoa_r+0x886>
 800c4ea:	2a00      	cmp	r2, #0
 800c4ec:	dd03      	ble.n	800c4f6 <_dtoa_r+0xa06>
 800c4ee:	2b39      	cmp	r3, #57	; 0x39
 800c4f0:	d0ee      	beq.n	800c4d0 <_dtoa_r+0x9e0>
 800c4f2:	3301      	adds	r3, #1
 800c4f4:	e7c7      	b.n	800c486 <_dtoa_r+0x996>
 800c4f6:	9a05      	ldr	r2, [sp, #20]
 800c4f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c4fa:	f802 3c01 	strb.w	r3, [r2, #-1]
 800c4fe:	428a      	cmp	r2, r1
 800c500:	d02b      	beq.n	800c55a <_dtoa_r+0xa6a>
 800c502:	4629      	mov	r1, r5
 800c504:	2300      	movs	r3, #0
 800c506:	220a      	movs	r2, #10
 800c508:	4630      	mov	r0, r6
 800c50a:	f000 f8ef 	bl	800c6ec <__multadd>
 800c50e:	45b9      	cmp	r9, r7
 800c510:	4605      	mov	r5, r0
 800c512:	f04f 0300 	mov.w	r3, #0
 800c516:	f04f 020a 	mov.w	r2, #10
 800c51a:	4649      	mov	r1, r9
 800c51c:	4630      	mov	r0, r6
 800c51e:	d107      	bne.n	800c530 <_dtoa_r+0xa40>
 800c520:	f000 f8e4 	bl	800c6ec <__multadd>
 800c524:	4681      	mov	r9, r0
 800c526:	4607      	mov	r7, r0
 800c528:	9b05      	ldr	r3, [sp, #20]
 800c52a:	3301      	adds	r3, #1
 800c52c:	9305      	str	r3, [sp, #20]
 800c52e:	e774      	b.n	800c41a <_dtoa_r+0x92a>
 800c530:	f000 f8dc 	bl	800c6ec <__multadd>
 800c534:	4639      	mov	r1, r7
 800c536:	4681      	mov	r9, r0
 800c538:	2300      	movs	r3, #0
 800c53a:	220a      	movs	r2, #10
 800c53c:	4630      	mov	r0, r6
 800c53e:	f000 f8d5 	bl	800c6ec <__multadd>
 800c542:	4607      	mov	r7, r0
 800c544:	e7f0      	b.n	800c528 <_dtoa_r+0xa38>
 800c546:	f1ba 0f00 	cmp.w	sl, #0
 800c54a:	9a00      	ldr	r2, [sp, #0]
 800c54c:	bfcc      	ite	gt
 800c54e:	46d0      	movgt	r8, sl
 800c550:	f04f 0801 	movle.w	r8, #1
 800c554:	4490      	add	r8, r2
 800c556:	f04f 0900 	mov.w	r9, #0
 800c55a:	4629      	mov	r1, r5
 800c55c:	2201      	movs	r2, #1
 800c55e:	4630      	mov	r0, r6
 800c560:	9302      	str	r3, [sp, #8]
 800c562:	f000 fa73 	bl	800ca4c <__lshift>
 800c566:	4621      	mov	r1, r4
 800c568:	4605      	mov	r5, r0
 800c56a:	f000 fadb 	bl	800cb24 <__mcmp>
 800c56e:	2800      	cmp	r0, #0
 800c570:	dcb1      	bgt.n	800c4d6 <_dtoa_r+0x9e6>
 800c572:	d102      	bne.n	800c57a <_dtoa_r+0xa8a>
 800c574:	9b02      	ldr	r3, [sp, #8]
 800c576:	07db      	lsls	r3, r3, #31
 800c578:	d4ad      	bmi.n	800c4d6 <_dtoa_r+0x9e6>
 800c57a:	4643      	mov	r3, r8
 800c57c:	4698      	mov	r8, r3
 800c57e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c582:	2a30      	cmp	r2, #48	; 0x30
 800c584:	d0fa      	beq.n	800c57c <_dtoa_r+0xa8c>
 800c586:	e6f6      	b.n	800c376 <_dtoa_r+0x886>
 800c588:	9a00      	ldr	r2, [sp, #0]
 800c58a:	429a      	cmp	r2, r3
 800c58c:	d1a4      	bne.n	800c4d8 <_dtoa_r+0x9e8>
 800c58e:	f10b 0b01 	add.w	fp, fp, #1
 800c592:	2331      	movs	r3, #49	; 0x31
 800c594:	e778      	b.n	800c488 <_dtoa_r+0x998>
 800c596:	4b15      	ldr	r3, [pc, #84]	; (800c5ec <_dtoa_r+0xafc>)
 800c598:	f7ff bb12 	b.w	800bbc0 <_dtoa_r+0xd0>
 800c59c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f47f aaee 	bne.w	800bb80 <_dtoa_r+0x90>
 800c5a4:	4b12      	ldr	r3, [pc, #72]	; (800c5f0 <_dtoa_r+0xb00>)
 800c5a6:	f7ff bb0b 	b.w	800bbc0 <_dtoa_r+0xd0>
 800c5aa:	f1ba 0f00 	cmp.w	sl, #0
 800c5ae:	dc03      	bgt.n	800c5b8 <_dtoa_r+0xac8>
 800c5b0:	9b07      	ldr	r3, [sp, #28]
 800c5b2:	2b02      	cmp	r3, #2
 800c5b4:	f73f aec7 	bgt.w	800c346 <_dtoa_r+0x856>
 800c5b8:	f8dd 8000 	ldr.w	r8, [sp]
 800c5bc:	4621      	mov	r1, r4
 800c5be:	4628      	mov	r0, r5
 800c5c0:	f7ff fa08 	bl	800b9d4 <quorem>
 800c5c4:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800c5c8:	f808 3b01 	strb.w	r3, [r8], #1
 800c5cc:	9a00      	ldr	r2, [sp, #0]
 800c5ce:	eba8 0202 	sub.w	r2, r8, r2
 800c5d2:	4592      	cmp	sl, r2
 800c5d4:	ddb7      	ble.n	800c546 <_dtoa_r+0xa56>
 800c5d6:	4629      	mov	r1, r5
 800c5d8:	2300      	movs	r3, #0
 800c5da:	220a      	movs	r2, #10
 800c5dc:	4630      	mov	r0, r6
 800c5de:	f000 f885 	bl	800c6ec <__multadd>
 800c5e2:	4605      	mov	r5, r0
 800c5e4:	e7ea      	b.n	800c5bc <_dtoa_r+0xacc>
 800c5e6:	bf00      	nop
 800c5e8:	0800dae3 	.word	0x0800dae3
 800c5ec:	0800da3c 	.word	0x0800da3c
 800c5f0:	0800da60 	.word	0x0800da60

0800c5f4 <_localeconv_r>:
 800c5f4:	4800      	ldr	r0, [pc, #0]	; (800c5f8 <_localeconv_r+0x4>)
 800c5f6:	4770      	bx	lr
 800c5f8:	24000164 	.word	0x24000164

0800c5fc <malloc>:
 800c5fc:	4b02      	ldr	r3, [pc, #8]	; (800c608 <malloc+0xc>)
 800c5fe:	4601      	mov	r1, r0
 800c600:	6818      	ldr	r0, [r3, #0]
 800c602:	f000 bbef 	b.w	800cde4 <_malloc_r>
 800c606:	bf00      	nop
 800c608:	24000010 	.word	0x24000010

0800c60c <memcpy>:
 800c60c:	440a      	add	r2, r1
 800c60e:	4291      	cmp	r1, r2
 800c610:	f100 33ff 	add.w	r3, r0, #4294967295
 800c614:	d100      	bne.n	800c618 <memcpy+0xc>
 800c616:	4770      	bx	lr
 800c618:	b510      	push	{r4, lr}
 800c61a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c61e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c622:	4291      	cmp	r1, r2
 800c624:	d1f9      	bne.n	800c61a <memcpy+0xe>
 800c626:	bd10      	pop	{r4, pc}

0800c628 <_Balloc>:
 800c628:	b570      	push	{r4, r5, r6, lr}
 800c62a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c62c:	4604      	mov	r4, r0
 800c62e:	460d      	mov	r5, r1
 800c630:	b976      	cbnz	r6, 800c650 <_Balloc+0x28>
 800c632:	2010      	movs	r0, #16
 800c634:	f7ff ffe2 	bl	800c5fc <malloc>
 800c638:	4602      	mov	r2, r0
 800c63a:	6260      	str	r0, [r4, #36]	; 0x24
 800c63c:	b920      	cbnz	r0, 800c648 <_Balloc+0x20>
 800c63e:	4b18      	ldr	r3, [pc, #96]	; (800c6a0 <_Balloc+0x78>)
 800c640:	4818      	ldr	r0, [pc, #96]	; (800c6a4 <_Balloc+0x7c>)
 800c642:	2166      	movs	r1, #102	; 0x66
 800c644:	f000 fc38 	bl	800ceb8 <__assert_func>
 800c648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c64c:	6006      	str	r6, [r0, #0]
 800c64e:	60c6      	str	r6, [r0, #12]
 800c650:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c652:	68f3      	ldr	r3, [r6, #12]
 800c654:	b183      	cbz	r3, 800c678 <_Balloc+0x50>
 800c656:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c658:	68db      	ldr	r3, [r3, #12]
 800c65a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c65e:	b9b8      	cbnz	r0, 800c690 <_Balloc+0x68>
 800c660:	2101      	movs	r1, #1
 800c662:	fa01 f605 	lsl.w	r6, r1, r5
 800c666:	1d72      	adds	r2, r6, #5
 800c668:	0092      	lsls	r2, r2, #2
 800c66a:	4620      	mov	r0, r4
 800c66c:	f000 fb5a 	bl	800cd24 <_calloc_r>
 800c670:	b160      	cbz	r0, 800c68c <_Balloc+0x64>
 800c672:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c676:	e00e      	b.n	800c696 <_Balloc+0x6e>
 800c678:	2221      	movs	r2, #33	; 0x21
 800c67a:	2104      	movs	r1, #4
 800c67c:	4620      	mov	r0, r4
 800c67e:	f000 fb51 	bl	800cd24 <_calloc_r>
 800c682:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c684:	60f0      	str	r0, [r6, #12]
 800c686:	68db      	ldr	r3, [r3, #12]
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d1e4      	bne.n	800c656 <_Balloc+0x2e>
 800c68c:	2000      	movs	r0, #0
 800c68e:	bd70      	pop	{r4, r5, r6, pc}
 800c690:	6802      	ldr	r2, [r0, #0]
 800c692:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c696:	2300      	movs	r3, #0
 800c698:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c69c:	e7f7      	b.n	800c68e <_Balloc+0x66>
 800c69e:	bf00      	nop
 800c6a0:	0800da6d 	.word	0x0800da6d
 800c6a4:	0800daf4 	.word	0x0800daf4

0800c6a8 <_Bfree>:
 800c6a8:	b570      	push	{r4, r5, r6, lr}
 800c6aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c6ac:	4605      	mov	r5, r0
 800c6ae:	460c      	mov	r4, r1
 800c6b0:	b976      	cbnz	r6, 800c6d0 <_Bfree+0x28>
 800c6b2:	2010      	movs	r0, #16
 800c6b4:	f7ff ffa2 	bl	800c5fc <malloc>
 800c6b8:	4602      	mov	r2, r0
 800c6ba:	6268      	str	r0, [r5, #36]	; 0x24
 800c6bc:	b920      	cbnz	r0, 800c6c8 <_Bfree+0x20>
 800c6be:	4b09      	ldr	r3, [pc, #36]	; (800c6e4 <_Bfree+0x3c>)
 800c6c0:	4809      	ldr	r0, [pc, #36]	; (800c6e8 <_Bfree+0x40>)
 800c6c2:	218a      	movs	r1, #138	; 0x8a
 800c6c4:	f000 fbf8 	bl	800ceb8 <__assert_func>
 800c6c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c6cc:	6006      	str	r6, [r0, #0]
 800c6ce:	60c6      	str	r6, [r0, #12]
 800c6d0:	b13c      	cbz	r4, 800c6e2 <_Bfree+0x3a>
 800c6d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c6d4:	6862      	ldr	r2, [r4, #4]
 800c6d6:	68db      	ldr	r3, [r3, #12]
 800c6d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c6dc:	6021      	str	r1, [r4, #0]
 800c6de:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c6e2:	bd70      	pop	{r4, r5, r6, pc}
 800c6e4:	0800da6d 	.word	0x0800da6d
 800c6e8:	0800daf4 	.word	0x0800daf4

0800c6ec <__multadd>:
 800c6ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6f0:	690e      	ldr	r6, [r1, #16]
 800c6f2:	4607      	mov	r7, r0
 800c6f4:	4698      	mov	r8, r3
 800c6f6:	460c      	mov	r4, r1
 800c6f8:	f101 0014 	add.w	r0, r1, #20
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	6805      	ldr	r5, [r0, #0]
 800c700:	b2a9      	uxth	r1, r5
 800c702:	fb02 8101 	mla	r1, r2, r1, r8
 800c706:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800c70a:	0c2d      	lsrs	r5, r5, #16
 800c70c:	fb02 c505 	mla	r5, r2, r5, ip
 800c710:	b289      	uxth	r1, r1
 800c712:	3301      	adds	r3, #1
 800c714:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800c718:	429e      	cmp	r6, r3
 800c71a:	f840 1b04 	str.w	r1, [r0], #4
 800c71e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800c722:	dcec      	bgt.n	800c6fe <__multadd+0x12>
 800c724:	f1b8 0f00 	cmp.w	r8, #0
 800c728:	d022      	beq.n	800c770 <__multadd+0x84>
 800c72a:	68a3      	ldr	r3, [r4, #8]
 800c72c:	42b3      	cmp	r3, r6
 800c72e:	dc19      	bgt.n	800c764 <__multadd+0x78>
 800c730:	6861      	ldr	r1, [r4, #4]
 800c732:	4638      	mov	r0, r7
 800c734:	3101      	adds	r1, #1
 800c736:	f7ff ff77 	bl	800c628 <_Balloc>
 800c73a:	4605      	mov	r5, r0
 800c73c:	b928      	cbnz	r0, 800c74a <__multadd+0x5e>
 800c73e:	4602      	mov	r2, r0
 800c740:	4b0d      	ldr	r3, [pc, #52]	; (800c778 <__multadd+0x8c>)
 800c742:	480e      	ldr	r0, [pc, #56]	; (800c77c <__multadd+0x90>)
 800c744:	21b5      	movs	r1, #181	; 0xb5
 800c746:	f000 fbb7 	bl	800ceb8 <__assert_func>
 800c74a:	6922      	ldr	r2, [r4, #16]
 800c74c:	3202      	adds	r2, #2
 800c74e:	f104 010c 	add.w	r1, r4, #12
 800c752:	0092      	lsls	r2, r2, #2
 800c754:	300c      	adds	r0, #12
 800c756:	f7ff ff59 	bl	800c60c <memcpy>
 800c75a:	4621      	mov	r1, r4
 800c75c:	4638      	mov	r0, r7
 800c75e:	f7ff ffa3 	bl	800c6a8 <_Bfree>
 800c762:	462c      	mov	r4, r5
 800c764:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800c768:	3601      	adds	r6, #1
 800c76a:	f8c3 8014 	str.w	r8, [r3, #20]
 800c76e:	6126      	str	r6, [r4, #16]
 800c770:	4620      	mov	r0, r4
 800c772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c776:	bf00      	nop
 800c778:	0800dae3 	.word	0x0800dae3
 800c77c:	0800daf4 	.word	0x0800daf4

0800c780 <__hi0bits>:
 800c780:	0c03      	lsrs	r3, r0, #16
 800c782:	041b      	lsls	r3, r3, #16
 800c784:	b9d3      	cbnz	r3, 800c7bc <__hi0bits+0x3c>
 800c786:	0400      	lsls	r0, r0, #16
 800c788:	2310      	movs	r3, #16
 800c78a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c78e:	bf04      	itt	eq
 800c790:	0200      	lsleq	r0, r0, #8
 800c792:	3308      	addeq	r3, #8
 800c794:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c798:	bf04      	itt	eq
 800c79a:	0100      	lsleq	r0, r0, #4
 800c79c:	3304      	addeq	r3, #4
 800c79e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c7a2:	bf04      	itt	eq
 800c7a4:	0080      	lsleq	r0, r0, #2
 800c7a6:	3302      	addeq	r3, #2
 800c7a8:	2800      	cmp	r0, #0
 800c7aa:	db05      	blt.n	800c7b8 <__hi0bits+0x38>
 800c7ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c7b0:	f103 0301 	add.w	r3, r3, #1
 800c7b4:	bf08      	it	eq
 800c7b6:	2320      	moveq	r3, #32
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	4770      	bx	lr
 800c7bc:	2300      	movs	r3, #0
 800c7be:	e7e4      	b.n	800c78a <__hi0bits+0xa>

0800c7c0 <__lo0bits>:
 800c7c0:	6803      	ldr	r3, [r0, #0]
 800c7c2:	f013 0207 	ands.w	r2, r3, #7
 800c7c6:	4601      	mov	r1, r0
 800c7c8:	d00b      	beq.n	800c7e2 <__lo0bits+0x22>
 800c7ca:	07da      	lsls	r2, r3, #31
 800c7cc:	d424      	bmi.n	800c818 <__lo0bits+0x58>
 800c7ce:	0798      	lsls	r0, r3, #30
 800c7d0:	bf49      	itett	mi
 800c7d2:	085b      	lsrmi	r3, r3, #1
 800c7d4:	089b      	lsrpl	r3, r3, #2
 800c7d6:	2001      	movmi	r0, #1
 800c7d8:	600b      	strmi	r3, [r1, #0]
 800c7da:	bf5c      	itt	pl
 800c7dc:	600b      	strpl	r3, [r1, #0]
 800c7de:	2002      	movpl	r0, #2
 800c7e0:	4770      	bx	lr
 800c7e2:	b298      	uxth	r0, r3
 800c7e4:	b9b0      	cbnz	r0, 800c814 <__lo0bits+0x54>
 800c7e6:	0c1b      	lsrs	r3, r3, #16
 800c7e8:	2010      	movs	r0, #16
 800c7ea:	f013 0fff 	tst.w	r3, #255	; 0xff
 800c7ee:	bf04      	itt	eq
 800c7f0:	0a1b      	lsreq	r3, r3, #8
 800c7f2:	3008      	addeq	r0, #8
 800c7f4:	071a      	lsls	r2, r3, #28
 800c7f6:	bf04      	itt	eq
 800c7f8:	091b      	lsreq	r3, r3, #4
 800c7fa:	3004      	addeq	r0, #4
 800c7fc:	079a      	lsls	r2, r3, #30
 800c7fe:	bf04      	itt	eq
 800c800:	089b      	lsreq	r3, r3, #2
 800c802:	3002      	addeq	r0, #2
 800c804:	07da      	lsls	r2, r3, #31
 800c806:	d403      	bmi.n	800c810 <__lo0bits+0x50>
 800c808:	085b      	lsrs	r3, r3, #1
 800c80a:	f100 0001 	add.w	r0, r0, #1
 800c80e:	d005      	beq.n	800c81c <__lo0bits+0x5c>
 800c810:	600b      	str	r3, [r1, #0]
 800c812:	4770      	bx	lr
 800c814:	4610      	mov	r0, r2
 800c816:	e7e8      	b.n	800c7ea <__lo0bits+0x2a>
 800c818:	2000      	movs	r0, #0
 800c81a:	4770      	bx	lr
 800c81c:	2020      	movs	r0, #32
 800c81e:	4770      	bx	lr

0800c820 <__i2b>:
 800c820:	b510      	push	{r4, lr}
 800c822:	460c      	mov	r4, r1
 800c824:	2101      	movs	r1, #1
 800c826:	f7ff feff 	bl	800c628 <_Balloc>
 800c82a:	4602      	mov	r2, r0
 800c82c:	b928      	cbnz	r0, 800c83a <__i2b+0x1a>
 800c82e:	4b05      	ldr	r3, [pc, #20]	; (800c844 <__i2b+0x24>)
 800c830:	4805      	ldr	r0, [pc, #20]	; (800c848 <__i2b+0x28>)
 800c832:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c836:	f000 fb3f 	bl	800ceb8 <__assert_func>
 800c83a:	2301      	movs	r3, #1
 800c83c:	6144      	str	r4, [r0, #20]
 800c83e:	6103      	str	r3, [r0, #16]
 800c840:	bd10      	pop	{r4, pc}
 800c842:	bf00      	nop
 800c844:	0800dae3 	.word	0x0800dae3
 800c848:	0800daf4 	.word	0x0800daf4

0800c84c <__multiply>:
 800c84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c850:	4614      	mov	r4, r2
 800c852:	690a      	ldr	r2, [r1, #16]
 800c854:	6923      	ldr	r3, [r4, #16]
 800c856:	429a      	cmp	r2, r3
 800c858:	bfb8      	it	lt
 800c85a:	460b      	movlt	r3, r1
 800c85c:	460d      	mov	r5, r1
 800c85e:	bfbc      	itt	lt
 800c860:	4625      	movlt	r5, r4
 800c862:	461c      	movlt	r4, r3
 800c864:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800c868:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800c86c:	68ab      	ldr	r3, [r5, #8]
 800c86e:	6869      	ldr	r1, [r5, #4]
 800c870:	eb0a 0709 	add.w	r7, sl, r9
 800c874:	42bb      	cmp	r3, r7
 800c876:	b085      	sub	sp, #20
 800c878:	bfb8      	it	lt
 800c87a:	3101      	addlt	r1, #1
 800c87c:	f7ff fed4 	bl	800c628 <_Balloc>
 800c880:	b930      	cbnz	r0, 800c890 <__multiply+0x44>
 800c882:	4602      	mov	r2, r0
 800c884:	4b42      	ldr	r3, [pc, #264]	; (800c990 <__multiply+0x144>)
 800c886:	4843      	ldr	r0, [pc, #268]	; (800c994 <__multiply+0x148>)
 800c888:	f240 115d 	movw	r1, #349	; 0x15d
 800c88c:	f000 fb14 	bl	800ceb8 <__assert_func>
 800c890:	f100 0614 	add.w	r6, r0, #20
 800c894:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800c898:	4633      	mov	r3, r6
 800c89a:	2200      	movs	r2, #0
 800c89c:	4543      	cmp	r3, r8
 800c89e:	d31e      	bcc.n	800c8de <__multiply+0x92>
 800c8a0:	f105 0c14 	add.w	ip, r5, #20
 800c8a4:	f104 0314 	add.w	r3, r4, #20
 800c8a8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800c8ac:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800c8b0:	9202      	str	r2, [sp, #8]
 800c8b2:	ebac 0205 	sub.w	r2, ip, r5
 800c8b6:	3a15      	subs	r2, #21
 800c8b8:	f022 0203 	bic.w	r2, r2, #3
 800c8bc:	3204      	adds	r2, #4
 800c8be:	f105 0115 	add.w	r1, r5, #21
 800c8c2:	458c      	cmp	ip, r1
 800c8c4:	bf38      	it	cc
 800c8c6:	2204      	movcc	r2, #4
 800c8c8:	9201      	str	r2, [sp, #4]
 800c8ca:	9a02      	ldr	r2, [sp, #8]
 800c8cc:	9303      	str	r3, [sp, #12]
 800c8ce:	429a      	cmp	r2, r3
 800c8d0:	d808      	bhi.n	800c8e4 <__multiply+0x98>
 800c8d2:	2f00      	cmp	r7, #0
 800c8d4:	dc55      	bgt.n	800c982 <__multiply+0x136>
 800c8d6:	6107      	str	r7, [r0, #16]
 800c8d8:	b005      	add	sp, #20
 800c8da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8de:	f843 2b04 	str.w	r2, [r3], #4
 800c8e2:	e7db      	b.n	800c89c <__multiply+0x50>
 800c8e4:	f8b3 a000 	ldrh.w	sl, [r3]
 800c8e8:	f1ba 0f00 	cmp.w	sl, #0
 800c8ec:	d020      	beq.n	800c930 <__multiply+0xe4>
 800c8ee:	f105 0e14 	add.w	lr, r5, #20
 800c8f2:	46b1      	mov	r9, r6
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800c8fa:	f8d9 b000 	ldr.w	fp, [r9]
 800c8fe:	b2a1      	uxth	r1, r4
 800c900:	fa1f fb8b 	uxth.w	fp, fp
 800c904:	fb0a b101 	mla	r1, sl, r1, fp
 800c908:	4411      	add	r1, r2
 800c90a:	f8d9 2000 	ldr.w	r2, [r9]
 800c90e:	0c24      	lsrs	r4, r4, #16
 800c910:	0c12      	lsrs	r2, r2, #16
 800c912:	fb0a 2404 	mla	r4, sl, r4, r2
 800c916:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800c91a:	b289      	uxth	r1, r1
 800c91c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800c920:	45f4      	cmp	ip, lr
 800c922:	f849 1b04 	str.w	r1, [r9], #4
 800c926:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800c92a:	d8e4      	bhi.n	800c8f6 <__multiply+0xaa>
 800c92c:	9901      	ldr	r1, [sp, #4]
 800c92e:	5072      	str	r2, [r6, r1]
 800c930:	9a03      	ldr	r2, [sp, #12]
 800c932:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c936:	3304      	adds	r3, #4
 800c938:	f1b9 0f00 	cmp.w	r9, #0
 800c93c:	d01f      	beq.n	800c97e <__multiply+0x132>
 800c93e:	6834      	ldr	r4, [r6, #0]
 800c940:	f105 0114 	add.w	r1, r5, #20
 800c944:	46b6      	mov	lr, r6
 800c946:	f04f 0a00 	mov.w	sl, #0
 800c94a:	880a      	ldrh	r2, [r1, #0]
 800c94c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800c950:	fb09 b202 	mla	r2, r9, r2, fp
 800c954:	4492      	add	sl, r2
 800c956:	b2a4      	uxth	r4, r4
 800c958:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800c95c:	f84e 4b04 	str.w	r4, [lr], #4
 800c960:	f851 4b04 	ldr.w	r4, [r1], #4
 800c964:	f8be 2000 	ldrh.w	r2, [lr]
 800c968:	0c24      	lsrs	r4, r4, #16
 800c96a:	fb09 2404 	mla	r4, r9, r4, r2
 800c96e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800c972:	458c      	cmp	ip, r1
 800c974:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800c978:	d8e7      	bhi.n	800c94a <__multiply+0xfe>
 800c97a:	9a01      	ldr	r2, [sp, #4]
 800c97c:	50b4      	str	r4, [r6, r2]
 800c97e:	3604      	adds	r6, #4
 800c980:	e7a3      	b.n	800c8ca <__multiply+0x7e>
 800c982:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c986:	2b00      	cmp	r3, #0
 800c988:	d1a5      	bne.n	800c8d6 <__multiply+0x8a>
 800c98a:	3f01      	subs	r7, #1
 800c98c:	e7a1      	b.n	800c8d2 <__multiply+0x86>
 800c98e:	bf00      	nop
 800c990:	0800dae3 	.word	0x0800dae3
 800c994:	0800daf4 	.word	0x0800daf4

0800c998 <__pow5mult>:
 800c998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c99c:	4615      	mov	r5, r2
 800c99e:	f012 0203 	ands.w	r2, r2, #3
 800c9a2:	4606      	mov	r6, r0
 800c9a4:	460f      	mov	r7, r1
 800c9a6:	d007      	beq.n	800c9b8 <__pow5mult+0x20>
 800c9a8:	4c25      	ldr	r4, [pc, #148]	; (800ca40 <__pow5mult+0xa8>)
 800c9aa:	3a01      	subs	r2, #1
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c9b2:	f7ff fe9b 	bl	800c6ec <__multadd>
 800c9b6:	4607      	mov	r7, r0
 800c9b8:	10ad      	asrs	r5, r5, #2
 800c9ba:	d03d      	beq.n	800ca38 <__pow5mult+0xa0>
 800c9bc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c9be:	b97c      	cbnz	r4, 800c9e0 <__pow5mult+0x48>
 800c9c0:	2010      	movs	r0, #16
 800c9c2:	f7ff fe1b 	bl	800c5fc <malloc>
 800c9c6:	4602      	mov	r2, r0
 800c9c8:	6270      	str	r0, [r6, #36]	; 0x24
 800c9ca:	b928      	cbnz	r0, 800c9d8 <__pow5mult+0x40>
 800c9cc:	4b1d      	ldr	r3, [pc, #116]	; (800ca44 <__pow5mult+0xac>)
 800c9ce:	481e      	ldr	r0, [pc, #120]	; (800ca48 <__pow5mult+0xb0>)
 800c9d0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c9d4:	f000 fa70 	bl	800ceb8 <__assert_func>
 800c9d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c9dc:	6004      	str	r4, [r0, #0]
 800c9de:	60c4      	str	r4, [r0, #12]
 800c9e0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c9e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c9e8:	b94c      	cbnz	r4, 800c9fe <__pow5mult+0x66>
 800c9ea:	f240 2171 	movw	r1, #625	; 0x271
 800c9ee:	4630      	mov	r0, r6
 800c9f0:	f7ff ff16 	bl	800c820 <__i2b>
 800c9f4:	2300      	movs	r3, #0
 800c9f6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c9fa:	4604      	mov	r4, r0
 800c9fc:	6003      	str	r3, [r0, #0]
 800c9fe:	f04f 0900 	mov.w	r9, #0
 800ca02:	07eb      	lsls	r3, r5, #31
 800ca04:	d50a      	bpl.n	800ca1c <__pow5mult+0x84>
 800ca06:	4639      	mov	r1, r7
 800ca08:	4622      	mov	r2, r4
 800ca0a:	4630      	mov	r0, r6
 800ca0c:	f7ff ff1e 	bl	800c84c <__multiply>
 800ca10:	4639      	mov	r1, r7
 800ca12:	4680      	mov	r8, r0
 800ca14:	4630      	mov	r0, r6
 800ca16:	f7ff fe47 	bl	800c6a8 <_Bfree>
 800ca1a:	4647      	mov	r7, r8
 800ca1c:	106d      	asrs	r5, r5, #1
 800ca1e:	d00b      	beq.n	800ca38 <__pow5mult+0xa0>
 800ca20:	6820      	ldr	r0, [r4, #0]
 800ca22:	b938      	cbnz	r0, 800ca34 <__pow5mult+0x9c>
 800ca24:	4622      	mov	r2, r4
 800ca26:	4621      	mov	r1, r4
 800ca28:	4630      	mov	r0, r6
 800ca2a:	f7ff ff0f 	bl	800c84c <__multiply>
 800ca2e:	6020      	str	r0, [r4, #0]
 800ca30:	f8c0 9000 	str.w	r9, [r0]
 800ca34:	4604      	mov	r4, r0
 800ca36:	e7e4      	b.n	800ca02 <__pow5mult+0x6a>
 800ca38:	4638      	mov	r0, r7
 800ca3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca3e:	bf00      	nop
 800ca40:	0800dc48 	.word	0x0800dc48
 800ca44:	0800da6d 	.word	0x0800da6d
 800ca48:	0800daf4 	.word	0x0800daf4

0800ca4c <__lshift>:
 800ca4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ca50:	460c      	mov	r4, r1
 800ca52:	6849      	ldr	r1, [r1, #4]
 800ca54:	6923      	ldr	r3, [r4, #16]
 800ca56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ca5a:	68a3      	ldr	r3, [r4, #8]
 800ca5c:	4607      	mov	r7, r0
 800ca5e:	4691      	mov	r9, r2
 800ca60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ca64:	f108 0601 	add.w	r6, r8, #1
 800ca68:	42b3      	cmp	r3, r6
 800ca6a:	db0b      	blt.n	800ca84 <__lshift+0x38>
 800ca6c:	4638      	mov	r0, r7
 800ca6e:	f7ff fddb 	bl	800c628 <_Balloc>
 800ca72:	4605      	mov	r5, r0
 800ca74:	b948      	cbnz	r0, 800ca8a <__lshift+0x3e>
 800ca76:	4602      	mov	r2, r0
 800ca78:	4b28      	ldr	r3, [pc, #160]	; (800cb1c <__lshift+0xd0>)
 800ca7a:	4829      	ldr	r0, [pc, #164]	; (800cb20 <__lshift+0xd4>)
 800ca7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ca80:	f000 fa1a 	bl	800ceb8 <__assert_func>
 800ca84:	3101      	adds	r1, #1
 800ca86:	005b      	lsls	r3, r3, #1
 800ca88:	e7ee      	b.n	800ca68 <__lshift+0x1c>
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	f100 0114 	add.w	r1, r0, #20
 800ca90:	f100 0210 	add.w	r2, r0, #16
 800ca94:	4618      	mov	r0, r3
 800ca96:	4553      	cmp	r3, sl
 800ca98:	db33      	blt.n	800cb02 <__lshift+0xb6>
 800ca9a:	6920      	ldr	r0, [r4, #16]
 800ca9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800caa0:	f104 0314 	add.w	r3, r4, #20
 800caa4:	f019 091f 	ands.w	r9, r9, #31
 800caa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800caac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cab0:	d02b      	beq.n	800cb0a <__lshift+0xbe>
 800cab2:	f1c9 0e20 	rsb	lr, r9, #32
 800cab6:	468a      	mov	sl, r1
 800cab8:	2200      	movs	r2, #0
 800caba:	6818      	ldr	r0, [r3, #0]
 800cabc:	fa00 f009 	lsl.w	r0, r0, r9
 800cac0:	4302      	orrs	r2, r0
 800cac2:	f84a 2b04 	str.w	r2, [sl], #4
 800cac6:	f853 2b04 	ldr.w	r2, [r3], #4
 800caca:	459c      	cmp	ip, r3
 800cacc:	fa22 f20e 	lsr.w	r2, r2, lr
 800cad0:	d8f3      	bhi.n	800caba <__lshift+0x6e>
 800cad2:	ebac 0304 	sub.w	r3, ip, r4
 800cad6:	3b15      	subs	r3, #21
 800cad8:	f023 0303 	bic.w	r3, r3, #3
 800cadc:	3304      	adds	r3, #4
 800cade:	f104 0015 	add.w	r0, r4, #21
 800cae2:	4584      	cmp	ip, r0
 800cae4:	bf38      	it	cc
 800cae6:	2304      	movcc	r3, #4
 800cae8:	50ca      	str	r2, [r1, r3]
 800caea:	b10a      	cbz	r2, 800caf0 <__lshift+0xa4>
 800caec:	f108 0602 	add.w	r6, r8, #2
 800caf0:	3e01      	subs	r6, #1
 800caf2:	4638      	mov	r0, r7
 800caf4:	612e      	str	r6, [r5, #16]
 800caf6:	4621      	mov	r1, r4
 800caf8:	f7ff fdd6 	bl	800c6a8 <_Bfree>
 800cafc:	4628      	mov	r0, r5
 800cafe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb02:	f842 0f04 	str.w	r0, [r2, #4]!
 800cb06:	3301      	adds	r3, #1
 800cb08:	e7c5      	b.n	800ca96 <__lshift+0x4a>
 800cb0a:	3904      	subs	r1, #4
 800cb0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb10:	f841 2f04 	str.w	r2, [r1, #4]!
 800cb14:	459c      	cmp	ip, r3
 800cb16:	d8f9      	bhi.n	800cb0c <__lshift+0xc0>
 800cb18:	e7ea      	b.n	800caf0 <__lshift+0xa4>
 800cb1a:	bf00      	nop
 800cb1c:	0800dae3 	.word	0x0800dae3
 800cb20:	0800daf4 	.word	0x0800daf4

0800cb24 <__mcmp>:
 800cb24:	b530      	push	{r4, r5, lr}
 800cb26:	6902      	ldr	r2, [r0, #16]
 800cb28:	690c      	ldr	r4, [r1, #16]
 800cb2a:	1b12      	subs	r2, r2, r4
 800cb2c:	d10e      	bne.n	800cb4c <__mcmp+0x28>
 800cb2e:	f100 0314 	add.w	r3, r0, #20
 800cb32:	3114      	adds	r1, #20
 800cb34:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800cb38:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800cb3c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800cb40:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800cb44:	42a5      	cmp	r5, r4
 800cb46:	d003      	beq.n	800cb50 <__mcmp+0x2c>
 800cb48:	d305      	bcc.n	800cb56 <__mcmp+0x32>
 800cb4a:	2201      	movs	r2, #1
 800cb4c:	4610      	mov	r0, r2
 800cb4e:	bd30      	pop	{r4, r5, pc}
 800cb50:	4283      	cmp	r3, r0
 800cb52:	d3f3      	bcc.n	800cb3c <__mcmp+0x18>
 800cb54:	e7fa      	b.n	800cb4c <__mcmp+0x28>
 800cb56:	f04f 32ff 	mov.w	r2, #4294967295
 800cb5a:	e7f7      	b.n	800cb4c <__mcmp+0x28>

0800cb5c <__mdiff>:
 800cb5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb60:	460c      	mov	r4, r1
 800cb62:	4606      	mov	r6, r0
 800cb64:	4611      	mov	r1, r2
 800cb66:	4620      	mov	r0, r4
 800cb68:	4617      	mov	r7, r2
 800cb6a:	f7ff ffdb 	bl	800cb24 <__mcmp>
 800cb6e:	1e05      	subs	r5, r0, #0
 800cb70:	d110      	bne.n	800cb94 <__mdiff+0x38>
 800cb72:	4629      	mov	r1, r5
 800cb74:	4630      	mov	r0, r6
 800cb76:	f7ff fd57 	bl	800c628 <_Balloc>
 800cb7a:	b930      	cbnz	r0, 800cb8a <__mdiff+0x2e>
 800cb7c:	4b39      	ldr	r3, [pc, #228]	; (800cc64 <__mdiff+0x108>)
 800cb7e:	4602      	mov	r2, r0
 800cb80:	f240 2132 	movw	r1, #562	; 0x232
 800cb84:	4838      	ldr	r0, [pc, #224]	; (800cc68 <__mdiff+0x10c>)
 800cb86:	f000 f997 	bl	800ceb8 <__assert_func>
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cb90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb94:	bfa4      	itt	ge
 800cb96:	463b      	movge	r3, r7
 800cb98:	4627      	movge	r7, r4
 800cb9a:	4630      	mov	r0, r6
 800cb9c:	6879      	ldr	r1, [r7, #4]
 800cb9e:	bfa6      	itte	ge
 800cba0:	461c      	movge	r4, r3
 800cba2:	2500      	movge	r5, #0
 800cba4:	2501      	movlt	r5, #1
 800cba6:	f7ff fd3f 	bl	800c628 <_Balloc>
 800cbaa:	b920      	cbnz	r0, 800cbb6 <__mdiff+0x5a>
 800cbac:	4b2d      	ldr	r3, [pc, #180]	; (800cc64 <__mdiff+0x108>)
 800cbae:	4602      	mov	r2, r0
 800cbb0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800cbb4:	e7e6      	b.n	800cb84 <__mdiff+0x28>
 800cbb6:	693e      	ldr	r6, [r7, #16]
 800cbb8:	60c5      	str	r5, [r0, #12]
 800cbba:	6925      	ldr	r5, [r4, #16]
 800cbbc:	f107 0114 	add.w	r1, r7, #20
 800cbc0:	f104 0914 	add.w	r9, r4, #20
 800cbc4:	f100 0e14 	add.w	lr, r0, #20
 800cbc8:	f107 0210 	add.w	r2, r7, #16
 800cbcc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800cbd0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800cbd4:	46f2      	mov	sl, lr
 800cbd6:	2700      	movs	r7, #0
 800cbd8:	f859 3b04 	ldr.w	r3, [r9], #4
 800cbdc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800cbe0:	fa1f f883 	uxth.w	r8, r3
 800cbe4:	fa17 f78b 	uxtah	r7, r7, fp
 800cbe8:	0c1b      	lsrs	r3, r3, #16
 800cbea:	eba7 0808 	sub.w	r8, r7, r8
 800cbee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800cbf2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800cbf6:	fa1f f888 	uxth.w	r8, r8
 800cbfa:	141f      	asrs	r7, r3, #16
 800cbfc:	454d      	cmp	r5, r9
 800cbfe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800cc02:	f84a 3b04 	str.w	r3, [sl], #4
 800cc06:	d8e7      	bhi.n	800cbd8 <__mdiff+0x7c>
 800cc08:	1b2b      	subs	r3, r5, r4
 800cc0a:	3b15      	subs	r3, #21
 800cc0c:	f023 0303 	bic.w	r3, r3, #3
 800cc10:	3304      	adds	r3, #4
 800cc12:	3415      	adds	r4, #21
 800cc14:	42a5      	cmp	r5, r4
 800cc16:	bf38      	it	cc
 800cc18:	2304      	movcc	r3, #4
 800cc1a:	4419      	add	r1, r3
 800cc1c:	4473      	add	r3, lr
 800cc1e:	469e      	mov	lr, r3
 800cc20:	460d      	mov	r5, r1
 800cc22:	4565      	cmp	r5, ip
 800cc24:	d30e      	bcc.n	800cc44 <__mdiff+0xe8>
 800cc26:	f10c 0203 	add.w	r2, ip, #3
 800cc2a:	1a52      	subs	r2, r2, r1
 800cc2c:	f022 0203 	bic.w	r2, r2, #3
 800cc30:	3903      	subs	r1, #3
 800cc32:	458c      	cmp	ip, r1
 800cc34:	bf38      	it	cc
 800cc36:	2200      	movcc	r2, #0
 800cc38:	441a      	add	r2, r3
 800cc3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800cc3e:	b17b      	cbz	r3, 800cc60 <__mdiff+0x104>
 800cc40:	6106      	str	r6, [r0, #16]
 800cc42:	e7a5      	b.n	800cb90 <__mdiff+0x34>
 800cc44:	f855 8b04 	ldr.w	r8, [r5], #4
 800cc48:	fa17 f488 	uxtah	r4, r7, r8
 800cc4c:	1422      	asrs	r2, r4, #16
 800cc4e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800cc52:	b2a4      	uxth	r4, r4
 800cc54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800cc58:	f84e 4b04 	str.w	r4, [lr], #4
 800cc5c:	1417      	asrs	r7, r2, #16
 800cc5e:	e7e0      	b.n	800cc22 <__mdiff+0xc6>
 800cc60:	3e01      	subs	r6, #1
 800cc62:	e7ea      	b.n	800cc3a <__mdiff+0xde>
 800cc64:	0800dae3 	.word	0x0800dae3
 800cc68:	0800daf4 	.word	0x0800daf4

0800cc6c <__d2b>:
 800cc6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cc70:	4689      	mov	r9, r1
 800cc72:	2101      	movs	r1, #1
 800cc74:	ec57 6b10 	vmov	r6, r7, d0
 800cc78:	4690      	mov	r8, r2
 800cc7a:	f7ff fcd5 	bl	800c628 <_Balloc>
 800cc7e:	4604      	mov	r4, r0
 800cc80:	b930      	cbnz	r0, 800cc90 <__d2b+0x24>
 800cc82:	4602      	mov	r2, r0
 800cc84:	4b25      	ldr	r3, [pc, #148]	; (800cd1c <__d2b+0xb0>)
 800cc86:	4826      	ldr	r0, [pc, #152]	; (800cd20 <__d2b+0xb4>)
 800cc88:	f240 310a 	movw	r1, #778	; 0x30a
 800cc8c:	f000 f914 	bl	800ceb8 <__assert_func>
 800cc90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cc94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cc98:	bb35      	cbnz	r5, 800cce8 <__d2b+0x7c>
 800cc9a:	2e00      	cmp	r6, #0
 800cc9c:	9301      	str	r3, [sp, #4]
 800cc9e:	d028      	beq.n	800ccf2 <__d2b+0x86>
 800cca0:	4668      	mov	r0, sp
 800cca2:	9600      	str	r6, [sp, #0]
 800cca4:	f7ff fd8c 	bl	800c7c0 <__lo0bits>
 800cca8:	9900      	ldr	r1, [sp, #0]
 800ccaa:	b300      	cbz	r0, 800ccee <__d2b+0x82>
 800ccac:	9a01      	ldr	r2, [sp, #4]
 800ccae:	f1c0 0320 	rsb	r3, r0, #32
 800ccb2:	fa02 f303 	lsl.w	r3, r2, r3
 800ccb6:	430b      	orrs	r3, r1
 800ccb8:	40c2      	lsrs	r2, r0
 800ccba:	6163      	str	r3, [r4, #20]
 800ccbc:	9201      	str	r2, [sp, #4]
 800ccbe:	9b01      	ldr	r3, [sp, #4]
 800ccc0:	61a3      	str	r3, [r4, #24]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	bf14      	ite	ne
 800ccc6:	2202      	movne	r2, #2
 800ccc8:	2201      	moveq	r2, #1
 800ccca:	6122      	str	r2, [r4, #16]
 800cccc:	b1d5      	cbz	r5, 800cd04 <__d2b+0x98>
 800ccce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ccd2:	4405      	add	r5, r0
 800ccd4:	f8c9 5000 	str.w	r5, [r9]
 800ccd8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ccdc:	f8c8 0000 	str.w	r0, [r8]
 800cce0:	4620      	mov	r0, r4
 800cce2:	b003      	add	sp, #12
 800cce4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cce8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ccec:	e7d5      	b.n	800cc9a <__d2b+0x2e>
 800ccee:	6161      	str	r1, [r4, #20]
 800ccf0:	e7e5      	b.n	800ccbe <__d2b+0x52>
 800ccf2:	a801      	add	r0, sp, #4
 800ccf4:	f7ff fd64 	bl	800c7c0 <__lo0bits>
 800ccf8:	9b01      	ldr	r3, [sp, #4]
 800ccfa:	6163      	str	r3, [r4, #20]
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	6122      	str	r2, [r4, #16]
 800cd00:	3020      	adds	r0, #32
 800cd02:	e7e3      	b.n	800cccc <__d2b+0x60>
 800cd04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cd08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cd0c:	f8c9 0000 	str.w	r0, [r9]
 800cd10:	6918      	ldr	r0, [r3, #16]
 800cd12:	f7ff fd35 	bl	800c780 <__hi0bits>
 800cd16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cd1a:	e7df      	b.n	800ccdc <__d2b+0x70>
 800cd1c:	0800dae3 	.word	0x0800dae3
 800cd20:	0800daf4 	.word	0x0800daf4

0800cd24 <_calloc_r>:
 800cd24:	b513      	push	{r0, r1, r4, lr}
 800cd26:	434a      	muls	r2, r1
 800cd28:	4611      	mov	r1, r2
 800cd2a:	9201      	str	r2, [sp, #4]
 800cd2c:	f000 f85a 	bl	800cde4 <_malloc_r>
 800cd30:	4604      	mov	r4, r0
 800cd32:	b118      	cbz	r0, 800cd3c <_calloc_r+0x18>
 800cd34:	9a01      	ldr	r2, [sp, #4]
 800cd36:	2100      	movs	r1, #0
 800cd38:	f7fe fa02 	bl	800b140 <memset>
 800cd3c:	4620      	mov	r0, r4
 800cd3e:	b002      	add	sp, #8
 800cd40:	bd10      	pop	{r4, pc}
	...

0800cd44 <_free_r>:
 800cd44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd46:	2900      	cmp	r1, #0
 800cd48:	d048      	beq.n	800cddc <_free_r+0x98>
 800cd4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd4e:	9001      	str	r0, [sp, #4]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	f1a1 0404 	sub.w	r4, r1, #4
 800cd56:	bfb8      	it	lt
 800cd58:	18e4      	addlt	r4, r4, r3
 800cd5a:	f000 f8ef 	bl	800cf3c <__malloc_lock>
 800cd5e:	4a20      	ldr	r2, [pc, #128]	; (800cde0 <_free_r+0x9c>)
 800cd60:	9801      	ldr	r0, [sp, #4]
 800cd62:	6813      	ldr	r3, [r2, #0]
 800cd64:	4615      	mov	r5, r2
 800cd66:	b933      	cbnz	r3, 800cd76 <_free_r+0x32>
 800cd68:	6063      	str	r3, [r4, #4]
 800cd6a:	6014      	str	r4, [r2, #0]
 800cd6c:	b003      	add	sp, #12
 800cd6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd72:	f000 b8e9 	b.w	800cf48 <__malloc_unlock>
 800cd76:	42a3      	cmp	r3, r4
 800cd78:	d90b      	bls.n	800cd92 <_free_r+0x4e>
 800cd7a:	6821      	ldr	r1, [r4, #0]
 800cd7c:	1862      	adds	r2, r4, r1
 800cd7e:	4293      	cmp	r3, r2
 800cd80:	bf04      	itt	eq
 800cd82:	681a      	ldreq	r2, [r3, #0]
 800cd84:	685b      	ldreq	r3, [r3, #4]
 800cd86:	6063      	str	r3, [r4, #4]
 800cd88:	bf04      	itt	eq
 800cd8a:	1852      	addeq	r2, r2, r1
 800cd8c:	6022      	streq	r2, [r4, #0]
 800cd8e:	602c      	str	r4, [r5, #0]
 800cd90:	e7ec      	b.n	800cd6c <_free_r+0x28>
 800cd92:	461a      	mov	r2, r3
 800cd94:	685b      	ldr	r3, [r3, #4]
 800cd96:	b10b      	cbz	r3, 800cd9c <_free_r+0x58>
 800cd98:	42a3      	cmp	r3, r4
 800cd9a:	d9fa      	bls.n	800cd92 <_free_r+0x4e>
 800cd9c:	6811      	ldr	r1, [r2, #0]
 800cd9e:	1855      	adds	r5, r2, r1
 800cda0:	42a5      	cmp	r5, r4
 800cda2:	d10b      	bne.n	800cdbc <_free_r+0x78>
 800cda4:	6824      	ldr	r4, [r4, #0]
 800cda6:	4421      	add	r1, r4
 800cda8:	1854      	adds	r4, r2, r1
 800cdaa:	42a3      	cmp	r3, r4
 800cdac:	6011      	str	r1, [r2, #0]
 800cdae:	d1dd      	bne.n	800cd6c <_free_r+0x28>
 800cdb0:	681c      	ldr	r4, [r3, #0]
 800cdb2:	685b      	ldr	r3, [r3, #4]
 800cdb4:	6053      	str	r3, [r2, #4]
 800cdb6:	4421      	add	r1, r4
 800cdb8:	6011      	str	r1, [r2, #0]
 800cdba:	e7d7      	b.n	800cd6c <_free_r+0x28>
 800cdbc:	d902      	bls.n	800cdc4 <_free_r+0x80>
 800cdbe:	230c      	movs	r3, #12
 800cdc0:	6003      	str	r3, [r0, #0]
 800cdc2:	e7d3      	b.n	800cd6c <_free_r+0x28>
 800cdc4:	6825      	ldr	r5, [r4, #0]
 800cdc6:	1961      	adds	r1, r4, r5
 800cdc8:	428b      	cmp	r3, r1
 800cdca:	bf04      	itt	eq
 800cdcc:	6819      	ldreq	r1, [r3, #0]
 800cdce:	685b      	ldreq	r3, [r3, #4]
 800cdd0:	6063      	str	r3, [r4, #4]
 800cdd2:	bf04      	itt	eq
 800cdd4:	1949      	addeq	r1, r1, r5
 800cdd6:	6021      	streq	r1, [r4, #0]
 800cdd8:	6054      	str	r4, [r2, #4]
 800cdda:	e7c7      	b.n	800cd6c <_free_r+0x28>
 800cddc:	b003      	add	sp, #12
 800cdde:	bd30      	pop	{r4, r5, pc}
 800cde0:	24000968 	.word	0x24000968

0800cde4 <_malloc_r>:
 800cde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cde6:	1ccd      	adds	r5, r1, #3
 800cde8:	f025 0503 	bic.w	r5, r5, #3
 800cdec:	3508      	adds	r5, #8
 800cdee:	2d0c      	cmp	r5, #12
 800cdf0:	bf38      	it	cc
 800cdf2:	250c      	movcc	r5, #12
 800cdf4:	2d00      	cmp	r5, #0
 800cdf6:	4606      	mov	r6, r0
 800cdf8:	db01      	blt.n	800cdfe <_malloc_r+0x1a>
 800cdfa:	42a9      	cmp	r1, r5
 800cdfc:	d903      	bls.n	800ce06 <_malloc_r+0x22>
 800cdfe:	230c      	movs	r3, #12
 800ce00:	6033      	str	r3, [r6, #0]
 800ce02:	2000      	movs	r0, #0
 800ce04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce06:	f000 f899 	bl	800cf3c <__malloc_lock>
 800ce0a:	4921      	ldr	r1, [pc, #132]	; (800ce90 <_malloc_r+0xac>)
 800ce0c:	680a      	ldr	r2, [r1, #0]
 800ce0e:	4614      	mov	r4, r2
 800ce10:	b99c      	cbnz	r4, 800ce3a <_malloc_r+0x56>
 800ce12:	4f20      	ldr	r7, [pc, #128]	; (800ce94 <_malloc_r+0xb0>)
 800ce14:	683b      	ldr	r3, [r7, #0]
 800ce16:	b923      	cbnz	r3, 800ce22 <_malloc_r+0x3e>
 800ce18:	4621      	mov	r1, r4
 800ce1a:	4630      	mov	r0, r6
 800ce1c:	f000 f83c 	bl	800ce98 <_sbrk_r>
 800ce20:	6038      	str	r0, [r7, #0]
 800ce22:	4629      	mov	r1, r5
 800ce24:	4630      	mov	r0, r6
 800ce26:	f000 f837 	bl	800ce98 <_sbrk_r>
 800ce2a:	1c43      	adds	r3, r0, #1
 800ce2c:	d123      	bne.n	800ce76 <_malloc_r+0x92>
 800ce2e:	230c      	movs	r3, #12
 800ce30:	6033      	str	r3, [r6, #0]
 800ce32:	4630      	mov	r0, r6
 800ce34:	f000 f888 	bl	800cf48 <__malloc_unlock>
 800ce38:	e7e3      	b.n	800ce02 <_malloc_r+0x1e>
 800ce3a:	6823      	ldr	r3, [r4, #0]
 800ce3c:	1b5b      	subs	r3, r3, r5
 800ce3e:	d417      	bmi.n	800ce70 <_malloc_r+0x8c>
 800ce40:	2b0b      	cmp	r3, #11
 800ce42:	d903      	bls.n	800ce4c <_malloc_r+0x68>
 800ce44:	6023      	str	r3, [r4, #0]
 800ce46:	441c      	add	r4, r3
 800ce48:	6025      	str	r5, [r4, #0]
 800ce4a:	e004      	b.n	800ce56 <_malloc_r+0x72>
 800ce4c:	6863      	ldr	r3, [r4, #4]
 800ce4e:	42a2      	cmp	r2, r4
 800ce50:	bf0c      	ite	eq
 800ce52:	600b      	streq	r3, [r1, #0]
 800ce54:	6053      	strne	r3, [r2, #4]
 800ce56:	4630      	mov	r0, r6
 800ce58:	f000 f876 	bl	800cf48 <__malloc_unlock>
 800ce5c:	f104 000b 	add.w	r0, r4, #11
 800ce60:	1d23      	adds	r3, r4, #4
 800ce62:	f020 0007 	bic.w	r0, r0, #7
 800ce66:	1ac2      	subs	r2, r0, r3
 800ce68:	d0cc      	beq.n	800ce04 <_malloc_r+0x20>
 800ce6a:	1a1b      	subs	r3, r3, r0
 800ce6c:	50a3      	str	r3, [r4, r2]
 800ce6e:	e7c9      	b.n	800ce04 <_malloc_r+0x20>
 800ce70:	4622      	mov	r2, r4
 800ce72:	6864      	ldr	r4, [r4, #4]
 800ce74:	e7cc      	b.n	800ce10 <_malloc_r+0x2c>
 800ce76:	1cc4      	adds	r4, r0, #3
 800ce78:	f024 0403 	bic.w	r4, r4, #3
 800ce7c:	42a0      	cmp	r0, r4
 800ce7e:	d0e3      	beq.n	800ce48 <_malloc_r+0x64>
 800ce80:	1a21      	subs	r1, r4, r0
 800ce82:	4630      	mov	r0, r6
 800ce84:	f000 f808 	bl	800ce98 <_sbrk_r>
 800ce88:	3001      	adds	r0, #1
 800ce8a:	d1dd      	bne.n	800ce48 <_malloc_r+0x64>
 800ce8c:	e7cf      	b.n	800ce2e <_malloc_r+0x4a>
 800ce8e:	bf00      	nop
 800ce90:	24000968 	.word	0x24000968
 800ce94:	2400096c 	.word	0x2400096c

0800ce98 <_sbrk_r>:
 800ce98:	b538      	push	{r3, r4, r5, lr}
 800ce9a:	4d06      	ldr	r5, [pc, #24]	; (800ceb4 <_sbrk_r+0x1c>)
 800ce9c:	2300      	movs	r3, #0
 800ce9e:	4604      	mov	r4, r0
 800cea0:	4608      	mov	r0, r1
 800cea2:	602b      	str	r3, [r5, #0]
 800cea4:	f7f5 fda0 	bl	80029e8 <_sbrk>
 800cea8:	1c43      	adds	r3, r0, #1
 800ceaa:	d102      	bne.n	800ceb2 <_sbrk_r+0x1a>
 800ceac:	682b      	ldr	r3, [r5, #0]
 800ceae:	b103      	cbz	r3, 800ceb2 <_sbrk_r+0x1a>
 800ceb0:	6023      	str	r3, [r4, #0]
 800ceb2:	bd38      	pop	{r3, r4, r5, pc}
 800ceb4:	24000974 	.word	0x24000974

0800ceb8 <__assert_func>:
 800ceb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ceba:	4614      	mov	r4, r2
 800cebc:	461a      	mov	r2, r3
 800cebe:	4b09      	ldr	r3, [pc, #36]	; (800cee4 <__assert_func+0x2c>)
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	4605      	mov	r5, r0
 800cec4:	68d8      	ldr	r0, [r3, #12]
 800cec6:	b14c      	cbz	r4, 800cedc <__assert_func+0x24>
 800cec8:	4b07      	ldr	r3, [pc, #28]	; (800cee8 <__assert_func+0x30>)
 800ceca:	9100      	str	r1, [sp, #0]
 800cecc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ced0:	4906      	ldr	r1, [pc, #24]	; (800ceec <__assert_func+0x34>)
 800ced2:	462b      	mov	r3, r5
 800ced4:	f000 f80e 	bl	800cef4 <fiprintf>
 800ced8:	f000 fa64 	bl	800d3a4 <abort>
 800cedc:	4b04      	ldr	r3, [pc, #16]	; (800cef0 <__assert_func+0x38>)
 800cede:	461c      	mov	r4, r3
 800cee0:	e7f3      	b.n	800ceca <__assert_func+0x12>
 800cee2:	bf00      	nop
 800cee4:	24000010 	.word	0x24000010
 800cee8:	0800dc54 	.word	0x0800dc54
 800ceec:	0800dc61 	.word	0x0800dc61
 800cef0:	0800dc8f 	.word	0x0800dc8f

0800cef4 <fiprintf>:
 800cef4:	b40e      	push	{r1, r2, r3}
 800cef6:	b503      	push	{r0, r1, lr}
 800cef8:	4601      	mov	r1, r0
 800cefa:	ab03      	add	r3, sp, #12
 800cefc:	4805      	ldr	r0, [pc, #20]	; (800cf14 <fiprintf+0x20>)
 800cefe:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf02:	6800      	ldr	r0, [r0, #0]
 800cf04:	9301      	str	r3, [sp, #4]
 800cf06:	f000 f84f 	bl	800cfa8 <_vfiprintf_r>
 800cf0a:	b002      	add	sp, #8
 800cf0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf10:	b003      	add	sp, #12
 800cf12:	4770      	bx	lr
 800cf14:	24000010 	.word	0x24000010

0800cf18 <__ascii_mbtowc>:
 800cf18:	b082      	sub	sp, #8
 800cf1a:	b901      	cbnz	r1, 800cf1e <__ascii_mbtowc+0x6>
 800cf1c:	a901      	add	r1, sp, #4
 800cf1e:	b142      	cbz	r2, 800cf32 <__ascii_mbtowc+0x1a>
 800cf20:	b14b      	cbz	r3, 800cf36 <__ascii_mbtowc+0x1e>
 800cf22:	7813      	ldrb	r3, [r2, #0]
 800cf24:	600b      	str	r3, [r1, #0]
 800cf26:	7812      	ldrb	r2, [r2, #0]
 800cf28:	1e10      	subs	r0, r2, #0
 800cf2a:	bf18      	it	ne
 800cf2c:	2001      	movne	r0, #1
 800cf2e:	b002      	add	sp, #8
 800cf30:	4770      	bx	lr
 800cf32:	4610      	mov	r0, r2
 800cf34:	e7fb      	b.n	800cf2e <__ascii_mbtowc+0x16>
 800cf36:	f06f 0001 	mvn.w	r0, #1
 800cf3a:	e7f8      	b.n	800cf2e <__ascii_mbtowc+0x16>

0800cf3c <__malloc_lock>:
 800cf3c:	4801      	ldr	r0, [pc, #4]	; (800cf44 <__malloc_lock+0x8>)
 800cf3e:	f000 bbf1 	b.w	800d724 <__retarget_lock_acquire_recursive>
 800cf42:	bf00      	nop
 800cf44:	2400097c 	.word	0x2400097c

0800cf48 <__malloc_unlock>:
 800cf48:	4801      	ldr	r0, [pc, #4]	; (800cf50 <__malloc_unlock+0x8>)
 800cf4a:	f000 bbec 	b.w	800d726 <__retarget_lock_release_recursive>
 800cf4e:	bf00      	nop
 800cf50:	2400097c 	.word	0x2400097c

0800cf54 <__sfputc_r>:
 800cf54:	6893      	ldr	r3, [r2, #8]
 800cf56:	3b01      	subs	r3, #1
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	b410      	push	{r4}
 800cf5c:	6093      	str	r3, [r2, #8]
 800cf5e:	da08      	bge.n	800cf72 <__sfputc_r+0x1e>
 800cf60:	6994      	ldr	r4, [r2, #24]
 800cf62:	42a3      	cmp	r3, r4
 800cf64:	db01      	blt.n	800cf6a <__sfputc_r+0x16>
 800cf66:	290a      	cmp	r1, #10
 800cf68:	d103      	bne.n	800cf72 <__sfputc_r+0x1e>
 800cf6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf6e:	f000 b94b 	b.w	800d208 <__swbuf_r>
 800cf72:	6813      	ldr	r3, [r2, #0]
 800cf74:	1c58      	adds	r0, r3, #1
 800cf76:	6010      	str	r0, [r2, #0]
 800cf78:	7019      	strb	r1, [r3, #0]
 800cf7a:	4608      	mov	r0, r1
 800cf7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cf80:	4770      	bx	lr

0800cf82 <__sfputs_r>:
 800cf82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf84:	4606      	mov	r6, r0
 800cf86:	460f      	mov	r7, r1
 800cf88:	4614      	mov	r4, r2
 800cf8a:	18d5      	adds	r5, r2, r3
 800cf8c:	42ac      	cmp	r4, r5
 800cf8e:	d101      	bne.n	800cf94 <__sfputs_r+0x12>
 800cf90:	2000      	movs	r0, #0
 800cf92:	e007      	b.n	800cfa4 <__sfputs_r+0x22>
 800cf94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf98:	463a      	mov	r2, r7
 800cf9a:	4630      	mov	r0, r6
 800cf9c:	f7ff ffda 	bl	800cf54 <__sfputc_r>
 800cfa0:	1c43      	adds	r3, r0, #1
 800cfa2:	d1f3      	bne.n	800cf8c <__sfputs_r+0xa>
 800cfa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cfa8 <_vfiprintf_r>:
 800cfa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfac:	460d      	mov	r5, r1
 800cfae:	b09d      	sub	sp, #116	; 0x74
 800cfb0:	4614      	mov	r4, r2
 800cfb2:	4698      	mov	r8, r3
 800cfb4:	4606      	mov	r6, r0
 800cfb6:	b118      	cbz	r0, 800cfc0 <_vfiprintf_r+0x18>
 800cfb8:	6983      	ldr	r3, [r0, #24]
 800cfba:	b90b      	cbnz	r3, 800cfc0 <_vfiprintf_r+0x18>
 800cfbc:	f000 fb14 	bl	800d5e8 <__sinit>
 800cfc0:	4b89      	ldr	r3, [pc, #548]	; (800d1e8 <_vfiprintf_r+0x240>)
 800cfc2:	429d      	cmp	r5, r3
 800cfc4:	d11b      	bne.n	800cffe <_vfiprintf_r+0x56>
 800cfc6:	6875      	ldr	r5, [r6, #4]
 800cfc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cfca:	07d9      	lsls	r1, r3, #31
 800cfcc:	d405      	bmi.n	800cfda <_vfiprintf_r+0x32>
 800cfce:	89ab      	ldrh	r3, [r5, #12]
 800cfd0:	059a      	lsls	r2, r3, #22
 800cfd2:	d402      	bmi.n	800cfda <_vfiprintf_r+0x32>
 800cfd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cfd6:	f000 fba5 	bl	800d724 <__retarget_lock_acquire_recursive>
 800cfda:	89ab      	ldrh	r3, [r5, #12]
 800cfdc:	071b      	lsls	r3, r3, #28
 800cfde:	d501      	bpl.n	800cfe4 <_vfiprintf_r+0x3c>
 800cfe0:	692b      	ldr	r3, [r5, #16]
 800cfe2:	b9eb      	cbnz	r3, 800d020 <_vfiprintf_r+0x78>
 800cfe4:	4629      	mov	r1, r5
 800cfe6:	4630      	mov	r0, r6
 800cfe8:	f000 f96e 	bl	800d2c8 <__swsetup_r>
 800cfec:	b1c0      	cbz	r0, 800d020 <_vfiprintf_r+0x78>
 800cfee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cff0:	07dc      	lsls	r4, r3, #31
 800cff2:	d50e      	bpl.n	800d012 <_vfiprintf_r+0x6a>
 800cff4:	f04f 30ff 	mov.w	r0, #4294967295
 800cff8:	b01d      	add	sp, #116	; 0x74
 800cffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cffe:	4b7b      	ldr	r3, [pc, #492]	; (800d1ec <_vfiprintf_r+0x244>)
 800d000:	429d      	cmp	r5, r3
 800d002:	d101      	bne.n	800d008 <_vfiprintf_r+0x60>
 800d004:	68b5      	ldr	r5, [r6, #8]
 800d006:	e7df      	b.n	800cfc8 <_vfiprintf_r+0x20>
 800d008:	4b79      	ldr	r3, [pc, #484]	; (800d1f0 <_vfiprintf_r+0x248>)
 800d00a:	429d      	cmp	r5, r3
 800d00c:	bf08      	it	eq
 800d00e:	68f5      	ldreq	r5, [r6, #12]
 800d010:	e7da      	b.n	800cfc8 <_vfiprintf_r+0x20>
 800d012:	89ab      	ldrh	r3, [r5, #12]
 800d014:	0598      	lsls	r0, r3, #22
 800d016:	d4ed      	bmi.n	800cff4 <_vfiprintf_r+0x4c>
 800d018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d01a:	f000 fb84 	bl	800d726 <__retarget_lock_release_recursive>
 800d01e:	e7e9      	b.n	800cff4 <_vfiprintf_r+0x4c>
 800d020:	2300      	movs	r3, #0
 800d022:	9309      	str	r3, [sp, #36]	; 0x24
 800d024:	2320      	movs	r3, #32
 800d026:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d02a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d02e:	2330      	movs	r3, #48	; 0x30
 800d030:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d1f4 <_vfiprintf_r+0x24c>
 800d034:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d038:	f04f 0901 	mov.w	r9, #1
 800d03c:	4623      	mov	r3, r4
 800d03e:	469a      	mov	sl, r3
 800d040:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d044:	b10a      	cbz	r2, 800d04a <_vfiprintf_r+0xa2>
 800d046:	2a25      	cmp	r2, #37	; 0x25
 800d048:	d1f9      	bne.n	800d03e <_vfiprintf_r+0x96>
 800d04a:	ebba 0b04 	subs.w	fp, sl, r4
 800d04e:	d00b      	beq.n	800d068 <_vfiprintf_r+0xc0>
 800d050:	465b      	mov	r3, fp
 800d052:	4622      	mov	r2, r4
 800d054:	4629      	mov	r1, r5
 800d056:	4630      	mov	r0, r6
 800d058:	f7ff ff93 	bl	800cf82 <__sfputs_r>
 800d05c:	3001      	adds	r0, #1
 800d05e:	f000 80aa 	beq.w	800d1b6 <_vfiprintf_r+0x20e>
 800d062:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d064:	445a      	add	r2, fp
 800d066:	9209      	str	r2, [sp, #36]	; 0x24
 800d068:	f89a 3000 	ldrb.w	r3, [sl]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	f000 80a2 	beq.w	800d1b6 <_vfiprintf_r+0x20e>
 800d072:	2300      	movs	r3, #0
 800d074:	f04f 32ff 	mov.w	r2, #4294967295
 800d078:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d07c:	f10a 0a01 	add.w	sl, sl, #1
 800d080:	9304      	str	r3, [sp, #16]
 800d082:	9307      	str	r3, [sp, #28]
 800d084:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d088:	931a      	str	r3, [sp, #104]	; 0x68
 800d08a:	4654      	mov	r4, sl
 800d08c:	2205      	movs	r2, #5
 800d08e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d092:	4858      	ldr	r0, [pc, #352]	; (800d1f4 <_vfiprintf_r+0x24c>)
 800d094:	f7f3 f92c 	bl	80002f0 <memchr>
 800d098:	9a04      	ldr	r2, [sp, #16]
 800d09a:	b9d8      	cbnz	r0, 800d0d4 <_vfiprintf_r+0x12c>
 800d09c:	06d1      	lsls	r1, r2, #27
 800d09e:	bf44      	itt	mi
 800d0a0:	2320      	movmi	r3, #32
 800d0a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0a6:	0713      	lsls	r3, r2, #28
 800d0a8:	bf44      	itt	mi
 800d0aa:	232b      	movmi	r3, #43	; 0x2b
 800d0ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0b0:	f89a 3000 	ldrb.w	r3, [sl]
 800d0b4:	2b2a      	cmp	r3, #42	; 0x2a
 800d0b6:	d015      	beq.n	800d0e4 <_vfiprintf_r+0x13c>
 800d0b8:	9a07      	ldr	r2, [sp, #28]
 800d0ba:	4654      	mov	r4, sl
 800d0bc:	2000      	movs	r0, #0
 800d0be:	f04f 0c0a 	mov.w	ip, #10
 800d0c2:	4621      	mov	r1, r4
 800d0c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0c8:	3b30      	subs	r3, #48	; 0x30
 800d0ca:	2b09      	cmp	r3, #9
 800d0cc:	d94e      	bls.n	800d16c <_vfiprintf_r+0x1c4>
 800d0ce:	b1b0      	cbz	r0, 800d0fe <_vfiprintf_r+0x156>
 800d0d0:	9207      	str	r2, [sp, #28]
 800d0d2:	e014      	b.n	800d0fe <_vfiprintf_r+0x156>
 800d0d4:	eba0 0308 	sub.w	r3, r0, r8
 800d0d8:	fa09 f303 	lsl.w	r3, r9, r3
 800d0dc:	4313      	orrs	r3, r2
 800d0de:	9304      	str	r3, [sp, #16]
 800d0e0:	46a2      	mov	sl, r4
 800d0e2:	e7d2      	b.n	800d08a <_vfiprintf_r+0xe2>
 800d0e4:	9b03      	ldr	r3, [sp, #12]
 800d0e6:	1d19      	adds	r1, r3, #4
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	9103      	str	r1, [sp, #12]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	bfbb      	ittet	lt
 800d0f0:	425b      	neglt	r3, r3
 800d0f2:	f042 0202 	orrlt.w	r2, r2, #2
 800d0f6:	9307      	strge	r3, [sp, #28]
 800d0f8:	9307      	strlt	r3, [sp, #28]
 800d0fa:	bfb8      	it	lt
 800d0fc:	9204      	strlt	r2, [sp, #16]
 800d0fe:	7823      	ldrb	r3, [r4, #0]
 800d100:	2b2e      	cmp	r3, #46	; 0x2e
 800d102:	d10c      	bne.n	800d11e <_vfiprintf_r+0x176>
 800d104:	7863      	ldrb	r3, [r4, #1]
 800d106:	2b2a      	cmp	r3, #42	; 0x2a
 800d108:	d135      	bne.n	800d176 <_vfiprintf_r+0x1ce>
 800d10a:	9b03      	ldr	r3, [sp, #12]
 800d10c:	1d1a      	adds	r2, r3, #4
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	9203      	str	r2, [sp, #12]
 800d112:	2b00      	cmp	r3, #0
 800d114:	bfb8      	it	lt
 800d116:	f04f 33ff 	movlt.w	r3, #4294967295
 800d11a:	3402      	adds	r4, #2
 800d11c:	9305      	str	r3, [sp, #20]
 800d11e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d204 <_vfiprintf_r+0x25c>
 800d122:	7821      	ldrb	r1, [r4, #0]
 800d124:	2203      	movs	r2, #3
 800d126:	4650      	mov	r0, sl
 800d128:	f7f3 f8e2 	bl	80002f0 <memchr>
 800d12c:	b140      	cbz	r0, 800d140 <_vfiprintf_r+0x198>
 800d12e:	2340      	movs	r3, #64	; 0x40
 800d130:	eba0 000a 	sub.w	r0, r0, sl
 800d134:	fa03 f000 	lsl.w	r0, r3, r0
 800d138:	9b04      	ldr	r3, [sp, #16]
 800d13a:	4303      	orrs	r3, r0
 800d13c:	3401      	adds	r4, #1
 800d13e:	9304      	str	r3, [sp, #16]
 800d140:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d144:	482c      	ldr	r0, [pc, #176]	; (800d1f8 <_vfiprintf_r+0x250>)
 800d146:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d14a:	2206      	movs	r2, #6
 800d14c:	f7f3 f8d0 	bl	80002f0 <memchr>
 800d150:	2800      	cmp	r0, #0
 800d152:	d03f      	beq.n	800d1d4 <_vfiprintf_r+0x22c>
 800d154:	4b29      	ldr	r3, [pc, #164]	; (800d1fc <_vfiprintf_r+0x254>)
 800d156:	bb1b      	cbnz	r3, 800d1a0 <_vfiprintf_r+0x1f8>
 800d158:	9b03      	ldr	r3, [sp, #12]
 800d15a:	3307      	adds	r3, #7
 800d15c:	f023 0307 	bic.w	r3, r3, #7
 800d160:	3308      	adds	r3, #8
 800d162:	9303      	str	r3, [sp, #12]
 800d164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d166:	443b      	add	r3, r7
 800d168:	9309      	str	r3, [sp, #36]	; 0x24
 800d16a:	e767      	b.n	800d03c <_vfiprintf_r+0x94>
 800d16c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d170:	460c      	mov	r4, r1
 800d172:	2001      	movs	r0, #1
 800d174:	e7a5      	b.n	800d0c2 <_vfiprintf_r+0x11a>
 800d176:	2300      	movs	r3, #0
 800d178:	3401      	adds	r4, #1
 800d17a:	9305      	str	r3, [sp, #20]
 800d17c:	4619      	mov	r1, r3
 800d17e:	f04f 0c0a 	mov.w	ip, #10
 800d182:	4620      	mov	r0, r4
 800d184:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d188:	3a30      	subs	r2, #48	; 0x30
 800d18a:	2a09      	cmp	r2, #9
 800d18c:	d903      	bls.n	800d196 <_vfiprintf_r+0x1ee>
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d0c5      	beq.n	800d11e <_vfiprintf_r+0x176>
 800d192:	9105      	str	r1, [sp, #20]
 800d194:	e7c3      	b.n	800d11e <_vfiprintf_r+0x176>
 800d196:	fb0c 2101 	mla	r1, ip, r1, r2
 800d19a:	4604      	mov	r4, r0
 800d19c:	2301      	movs	r3, #1
 800d19e:	e7f0      	b.n	800d182 <_vfiprintf_r+0x1da>
 800d1a0:	ab03      	add	r3, sp, #12
 800d1a2:	9300      	str	r3, [sp, #0]
 800d1a4:	462a      	mov	r2, r5
 800d1a6:	4b16      	ldr	r3, [pc, #88]	; (800d200 <_vfiprintf_r+0x258>)
 800d1a8:	a904      	add	r1, sp, #16
 800d1aa:	4630      	mov	r0, r6
 800d1ac:	f7fe f860 	bl	800b270 <_printf_float>
 800d1b0:	4607      	mov	r7, r0
 800d1b2:	1c78      	adds	r0, r7, #1
 800d1b4:	d1d6      	bne.n	800d164 <_vfiprintf_r+0x1bc>
 800d1b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1b8:	07d9      	lsls	r1, r3, #31
 800d1ba:	d405      	bmi.n	800d1c8 <_vfiprintf_r+0x220>
 800d1bc:	89ab      	ldrh	r3, [r5, #12]
 800d1be:	059a      	lsls	r2, r3, #22
 800d1c0:	d402      	bmi.n	800d1c8 <_vfiprintf_r+0x220>
 800d1c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1c4:	f000 faaf 	bl	800d726 <__retarget_lock_release_recursive>
 800d1c8:	89ab      	ldrh	r3, [r5, #12]
 800d1ca:	065b      	lsls	r3, r3, #25
 800d1cc:	f53f af12 	bmi.w	800cff4 <_vfiprintf_r+0x4c>
 800d1d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1d2:	e711      	b.n	800cff8 <_vfiprintf_r+0x50>
 800d1d4:	ab03      	add	r3, sp, #12
 800d1d6:	9300      	str	r3, [sp, #0]
 800d1d8:	462a      	mov	r2, r5
 800d1da:	4b09      	ldr	r3, [pc, #36]	; (800d200 <_vfiprintf_r+0x258>)
 800d1dc:	a904      	add	r1, sp, #16
 800d1de:	4630      	mov	r0, r6
 800d1e0:	f7fe fad2 	bl	800b788 <_printf_i>
 800d1e4:	e7e4      	b.n	800d1b0 <_vfiprintf_r+0x208>
 800d1e6:	bf00      	nop
 800d1e8:	0800ddcc 	.word	0x0800ddcc
 800d1ec:	0800ddec 	.word	0x0800ddec
 800d1f0:	0800ddac 	.word	0x0800ddac
 800d1f4:	0800dc9a 	.word	0x0800dc9a
 800d1f8:	0800dca4 	.word	0x0800dca4
 800d1fc:	0800b271 	.word	0x0800b271
 800d200:	0800cf83 	.word	0x0800cf83
 800d204:	0800dca0 	.word	0x0800dca0

0800d208 <__swbuf_r>:
 800d208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d20a:	460e      	mov	r6, r1
 800d20c:	4614      	mov	r4, r2
 800d20e:	4605      	mov	r5, r0
 800d210:	b118      	cbz	r0, 800d21a <__swbuf_r+0x12>
 800d212:	6983      	ldr	r3, [r0, #24]
 800d214:	b90b      	cbnz	r3, 800d21a <__swbuf_r+0x12>
 800d216:	f000 f9e7 	bl	800d5e8 <__sinit>
 800d21a:	4b21      	ldr	r3, [pc, #132]	; (800d2a0 <__swbuf_r+0x98>)
 800d21c:	429c      	cmp	r4, r3
 800d21e:	d12b      	bne.n	800d278 <__swbuf_r+0x70>
 800d220:	686c      	ldr	r4, [r5, #4]
 800d222:	69a3      	ldr	r3, [r4, #24]
 800d224:	60a3      	str	r3, [r4, #8]
 800d226:	89a3      	ldrh	r3, [r4, #12]
 800d228:	071a      	lsls	r2, r3, #28
 800d22a:	d52f      	bpl.n	800d28c <__swbuf_r+0x84>
 800d22c:	6923      	ldr	r3, [r4, #16]
 800d22e:	b36b      	cbz	r3, 800d28c <__swbuf_r+0x84>
 800d230:	6923      	ldr	r3, [r4, #16]
 800d232:	6820      	ldr	r0, [r4, #0]
 800d234:	1ac0      	subs	r0, r0, r3
 800d236:	6963      	ldr	r3, [r4, #20]
 800d238:	b2f6      	uxtb	r6, r6
 800d23a:	4283      	cmp	r3, r0
 800d23c:	4637      	mov	r7, r6
 800d23e:	dc04      	bgt.n	800d24a <__swbuf_r+0x42>
 800d240:	4621      	mov	r1, r4
 800d242:	4628      	mov	r0, r5
 800d244:	f000 f93c 	bl	800d4c0 <_fflush_r>
 800d248:	bb30      	cbnz	r0, 800d298 <__swbuf_r+0x90>
 800d24a:	68a3      	ldr	r3, [r4, #8]
 800d24c:	3b01      	subs	r3, #1
 800d24e:	60a3      	str	r3, [r4, #8]
 800d250:	6823      	ldr	r3, [r4, #0]
 800d252:	1c5a      	adds	r2, r3, #1
 800d254:	6022      	str	r2, [r4, #0]
 800d256:	701e      	strb	r6, [r3, #0]
 800d258:	6963      	ldr	r3, [r4, #20]
 800d25a:	3001      	adds	r0, #1
 800d25c:	4283      	cmp	r3, r0
 800d25e:	d004      	beq.n	800d26a <__swbuf_r+0x62>
 800d260:	89a3      	ldrh	r3, [r4, #12]
 800d262:	07db      	lsls	r3, r3, #31
 800d264:	d506      	bpl.n	800d274 <__swbuf_r+0x6c>
 800d266:	2e0a      	cmp	r6, #10
 800d268:	d104      	bne.n	800d274 <__swbuf_r+0x6c>
 800d26a:	4621      	mov	r1, r4
 800d26c:	4628      	mov	r0, r5
 800d26e:	f000 f927 	bl	800d4c0 <_fflush_r>
 800d272:	b988      	cbnz	r0, 800d298 <__swbuf_r+0x90>
 800d274:	4638      	mov	r0, r7
 800d276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d278:	4b0a      	ldr	r3, [pc, #40]	; (800d2a4 <__swbuf_r+0x9c>)
 800d27a:	429c      	cmp	r4, r3
 800d27c:	d101      	bne.n	800d282 <__swbuf_r+0x7a>
 800d27e:	68ac      	ldr	r4, [r5, #8]
 800d280:	e7cf      	b.n	800d222 <__swbuf_r+0x1a>
 800d282:	4b09      	ldr	r3, [pc, #36]	; (800d2a8 <__swbuf_r+0xa0>)
 800d284:	429c      	cmp	r4, r3
 800d286:	bf08      	it	eq
 800d288:	68ec      	ldreq	r4, [r5, #12]
 800d28a:	e7ca      	b.n	800d222 <__swbuf_r+0x1a>
 800d28c:	4621      	mov	r1, r4
 800d28e:	4628      	mov	r0, r5
 800d290:	f000 f81a 	bl	800d2c8 <__swsetup_r>
 800d294:	2800      	cmp	r0, #0
 800d296:	d0cb      	beq.n	800d230 <__swbuf_r+0x28>
 800d298:	f04f 37ff 	mov.w	r7, #4294967295
 800d29c:	e7ea      	b.n	800d274 <__swbuf_r+0x6c>
 800d29e:	bf00      	nop
 800d2a0:	0800ddcc 	.word	0x0800ddcc
 800d2a4:	0800ddec 	.word	0x0800ddec
 800d2a8:	0800ddac 	.word	0x0800ddac

0800d2ac <__ascii_wctomb>:
 800d2ac:	b149      	cbz	r1, 800d2c2 <__ascii_wctomb+0x16>
 800d2ae:	2aff      	cmp	r2, #255	; 0xff
 800d2b0:	bf85      	ittet	hi
 800d2b2:	238a      	movhi	r3, #138	; 0x8a
 800d2b4:	6003      	strhi	r3, [r0, #0]
 800d2b6:	700a      	strbls	r2, [r1, #0]
 800d2b8:	f04f 30ff 	movhi.w	r0, #4294967295
 800d2bc:	bf98      	it	ls
 800d2be:	2001      	movls	r0, #1
 800d2c0:	4770      	bx	lr
 800d2c2:	4608      	mov	r0, r1
 800d2c4:	4770      	bx	lr
	...

0800d2c8 <__swsetup_r>:
 800d2c8:	4b32      	ldr	r3, [pc, #200]	; (800d394 <__swsetup_r+0xcc>)
 800d2ca:	b570      	push	{r4, r5, r6, lr}
 800d2cc:	681d      	ldr	r5, [r3, #0]
 800d2ce:	4606      	mov	r6, r0
 800d2d0:	460c      	mov	r4, r1
 800d2d2:	b125      	cbz	r5, 800d2de <__swsetup_r+0x16>
 800d2d4:	69ab      	ldr	r3, [r5, #24]
 800d2d6:	b913      	cbnz	r3, 800d2de <__swsetup_r+0x16>
 800d2d8:	4628      	mov	r0, r5
 800d2da:	f000 f985 	bl	800d5e8 <__sinit>
 800d2de:	4b2e      	ldr	r3, [pc, #184]	; (800d398 <__swsetup_r+0xd0>)
 800d2e0:	429c      	cmp	r4, r3
 800d2e2:	d10f      	bne.n	800d304 <__swsetup_r+0x3c>
 800d2e4:	686c      	ldr	r4, [r5, #4]
 800d2e6:	89a3      	ldrh	r3, [r4, #12]
 800d2e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2ec:	0719      	lsls	r1, r3, #28
 800d2ee:	d42c      	bmi.n	800d34a <__swsetup_r+0x82>
 800d2f0:	06dd      	lsls	r5, r3, #27
 800d2f2:	d411      	bmi.n	800d318 <__swsetup_r+0x50>
 800d2f4:	2309      	movs	r3, #9
 800d2f6:	6033      	str	r3, [r6, #0]
 800d2f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d2fc:	81a3      	strh	r3, [r4, #12]
 800d2fe:	f04f 30ff 	mov.w	r0, #4294967295
 800d302:	e03e      	b.n	800d382 <__swsetup_r+0xba>
 800d304:	4b25      	ldr	r3, [pc, #148]	; (800d39c <__swsetup_r+0xd4>)
 800d306:	429c      	cmp	r4, r3
 800d308:	d101      	bne.n	800d30e <__swsetup_r+0x46>
 800d30a:	68ac      	ldr	r4, [r5, #8]
 800d30c:	e7eb      	b.n	800d2e6 <__swsetup_r+0x1e>
 800d30e:	4b24      	ldr	r3, [pc, #144]	; (800d3a0 <__swsetup_r+0xd8>)
 800d310:	429c      	cmp	r4, r3
 800d312:	bf08      	it	eq
 800d314:	68ec      	ldreq	r4, [r5, #12]
 800d316:	e7e6      	b.n	800d2e6 <__swsetup_r+0x1e>
 800d318:	0758      	lsls	r0, r3, #29
 800d31a:	d512      	bpl.n	800d342 <__swsetup_r+0x7a>
 800d31c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d31e:	b141      	cbz	r1, 800d332 <__swsetup_r+0x6a>
 800d320:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d324:	4299      	cmp	r1, r3
 800d326:	d002      	beq.n	800d32e <__swsetup_r+0x66>
 800d328:	4630      	mov	r0, r6
 800d32a:	f7ff fd0b 	bl	800cd44 <_free_r>
 800d32e:	2300      	movs	r3, #0
 800d330:	6363      	str	r3, [r4, #52]	; 0x34
 800d332:	89a3      	ldrh	r3, [r4, #12]
 800d334:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d338:	81a3      	strh	r3, [r4, #12]
 800d33a:	2300      	movs	r3, #0
 800d33c:	6063      	str	r3, [r4, #4]
 800d33e:	6923      	ldr	r3, [r4, #16]
 800d340:	6023      	str	r3, [r4, #0]
 800d342:	89a3      	ldrh	r3, [r4, #12]
 800d344:	f043 0308 	orr.w	r3, r3, #8
 800d348:	81a3      	strh	r3, [r4, #12]
 800d34a:	6923      	ldr	r3, [r4, #16]
 800d34c:	b94b      	cbnz	r3, 800d362 <__swsetup_r+0x9a>
 800d34e:	89a3      	ldrh	r3, [r4, #12]
 800d350:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d354:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d358:	d003      	beq.n	800d362 <__swsetup_r+0x9a>
 800d35a:	4621      	mov	r1, r4
 800d35c:	4630      	mov	r0, r6
 800d35e:	f000 fa07 	bl	800d770 <__smakebuf_r>
 800d362:	89a0      	ldrh	r0, [r4, #12]
 800d364:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d368:	f010 0301 	ands.w	r3, r0, #1
 800d36c:	d00a      	beq.n	800d384 <__swsetup_r+0xbc>
 800d36e:	2300      	movs	r3, #0
 800d370:	60a3      	str	r3, [r4, #8]
 800d372:	6963      	ldr	r3, [r4, #20]
 800d374:	425b      	negs	r3, r3
 800d376:	61a3      	str	r3, [r4, #24]
 800d378:	6923      	ldr	r3, [r4, #16]
 800d37a:	b943      	cbnz	r3, 800d38e <__swsetup_r+0xc6>
 800d37c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d380:	d1ba      	bne.n	800d2f8 <__swsetup_r+0x30>
 800d382:	bd70      	pop	{r4, r5, r6, pc}
 800d384:	0781      	lsls	r1, r0, #30
 800d386:	bf58      	it	pl
 800d388:	6963      	ldrpl	r3, [r4, #20]
 800d38a:	60a3      	str	r3, [r4, #8]
 800d38c:	e7f4      	b.n	800d378 <__swsetup_r+0xb0>
 800d38e:	2000      	movs	r0, #0
 800d390:	e7f7      	b.n	800d382 <__swsetup_r+0xba>
 800d392:	bf00      	nop
 800d394:	24000010 	.word	0x24000010
 800d398:	0800ddcc 	.word	0x0800ddcc
 800d39c:	0800ddec 	.word	0x0800ddec
 800d3a0:	0800ddac 	.word	0x0800ddac

0800d3a4 <abort>:
 800d3a4:	b508      	push	{r3, lr}
 800d3a6:	2006      	movs	r0, #6
 800d3a8:	f000 fa4a 	bl	800d840 <raise>
 800d3ac:	2001      	movs	r0, #1
 800d3ae:	f7f5 faa3 	bl	80028f8 <_exit>
	...

0800d3b4 <__sflush_r>:
 800d3b4:	898a      	ldrh	r2, [r1, #12]
 800d3b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d3ba:	4605      	mov	r5, r0
 800d3bc:	0710      	lsls	r0, r2, #28
 800d3be:	460c      	mov	r4, r1
 800d3c0:	d458      	bmi.n	800d474 <__sflush_r+0xc0>
 800d3c2:	684b      	ldr	r3, [r1, #4]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	dc05      	bgt.n	800d3d4 <__sflush_r+0x20>
 800d3c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	dc02      	bgt.n	800d3d4 <__sflush_r+0x20>
 800d3ce:	2000      	movs	r0, #0
 800d3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d3d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d3d6:	2e00      	cmp	r6, #0
 800d3d8:	d0f9      	beq.n	800d3ce <__sflush_r+0x1a>
 800d3da:	2300      	movs	r3, #0
 800d3dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d3e0:	682f      	ldr	r7, [r5, #0]
 800d3e2:	602b      	str	r3, [r5, #0]
 800d3e4:	d032      	beq.n	800d44c <__sflush_r+0x98>
 800d3e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d3e8:	89a3      	ldrh	r3, [r4, #12]
 800d3ea:	075a      	lsls	r2, r3, #29
 800d3ec:	d505      	bpl.n	800d3fa <__sflush_r+0x46>
 800d3ee:	6863      	ldr	r3, [r4, #4]
 800d3f0:	1ac0      	subs	r0, r0, r3
 800d3f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d3f4:	b10b      	cbz	r3, 800d3fa <__sflush_r+0x46>
 800d3f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d3f8:	1ac0      	subs	r0, r0, r3
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	4602      	mov	r2, r0
 800d3fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d400:	6a21      	ldr	r1, [r4, #32]
 800d402:	4628      	mov	r0, r5
 800d404:	47b0      	blx	r6
 800d406:	1c43      	adds	r3, r0, #1
 800d408:	89a3      	ldrh	r3, [r4, #12]
 800d40a:	d106      	bne.n	800d41a <__sflush_r+0x66>
 800d40c:	6829      	ldr	r1, [r5, #0]
 800d40e:	291d      	cmp	r1, #29
 800d410:	d82c      	bhi.n	800d46c <__sflush_r+0xb8>
 800d412:	4a2a      	ldr	r2, [pc, #168]	; (800d4bc <__sflush_r+0x108>)
 800d414:	40ca      	lsrs	r2, r1
 800d416:	07d6      	lsls	r6, r2, #31
 800d418:	d528      	bpl.n	800d46c <__sflush_r+0xb8>
 800d41a:	2200      	movs	r2, #0
 800d41c:	6062      	str	r2, [r4, #4]
 800d41e:	04d9      	lsls	r1, r3, #19
 800d420:	6922      	ldr	r2, [r4, #16]
 800d422:	6022      	str	r2, [r4, #0]
 800d424:	d504      	bpl.n	800d430 <__sflush_r+0x7c>
 800d426:	1c42      	adds	r2, r0, #1
 800d428:	d101      	bne.n	800d42e <__sflush_r+0x7a>
 800d42a:	682b      	ldr	r3, [r5, #0]
 800d42c:	b903      	cbnz	r3, 800d430 <__sflush_r+0x7c>
 800d42e:	6560      	str	r0, [r4, #84]	; 0x54
 800d430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d432:	602f      	str	r7, [r5, #0]
 800d434:	2900      	cmp	r1, #0
 800d436:	d0ca      	beq.n	800d3ce <__sflush_r+0x1a>
 800d438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d43c:	4299      	cmp	r1, r3
 800d43e:	d002      	beq.n	800d446 <__sflush_r+0x92>
 800d440:	4628      	mov	r0, r5
 800d442:	f7ff fc7f 	bl	800cd44 <_free_r>
 800d446:	2000      	movs	r0, #0
 800d448:	6360      	str	r0, [r4, #52]	; 0x34
 800d44a:	e7c1      	b.n	800d3d0 <__sflush_r+0x1c>
 800d44c:	6a21      	ldr	r1, [r4, #32]
 800d44e:	2301      	movs	r3, #1
 800d450:	4628      	mov	r0, r5
 800d452:	47b0      	blx	r6
 800d454:	1c41      	adds	r1, r0, #1
 800d456:	d1c7      	bne.n	800d3e8 <__sflush_r+0x34>
 800d458:	682b      	ldr	r3, [r5, #0]
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d0c4      	beq.n	800d3e8 <__sflush_r+0x34>
 800d45e:	2b1d      	cmp	r3, #29
 800d460:	d001      	beq.n	800d466 <__sflush_r+0xb2>
 800d462:	2b16      	cmp	r3, #22
 800d464:	d101      	bne.n	800d46a <__sflush_r+0xb6>
 800d466:	602f      	str	r7, [r5, #0]
 800d468:	e7b1      	b.n	800d3ce <__sflush_r+0x1a>
 800d46a:	89a3      	ldrh	r3, [r4, #12]
 800d46c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d470:	81a3      	strh	r3, [r4, #12]
 800d472:	e7ad      	b.n	800d3d0 <__sflush_r+0x1c>
 800d474:	690f      	ldr	r7, [r1, #16]
 800d476:	2f00      	cmp	r7, #0
 800d478:	d0a9      	beq.n	800d3ce <__sflush_r+0x1a>
 800d47a:	0793      	lsls	r3, r2, #30
 800d47c:	680e      	ldr	r6, [r1, #0]
 800d47e:	bf08      	it	eq
 800d480:	694b      	ldreq	r3, [r1, #20]
 800d482:	600f      	str	r7, [r1, #0]
 800d484:	bf18      	it	ne
 800d486:	2300      	movne	r3, #0
 800d488:	eba6 0807 	sub.w	r8, r6, r7
 800d48c:	608b      	str	r3, [r1, #8]
 800d48e:	f1b8 0f00 	cmp.w	r8, #0
 800d492:	dd9c      	ble.n	800d3ce <__sflush_r+0x1a>
 800d494:	6a21      	ldr	r1, [r4, #32]
 800d496:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d498:	4643      	mov	r3, r8
 800d49a:	463a      	mov	r2, r7
 800d49c:	4628      	mov	r0, r5
 800d49e:	47b0      	blx	r6
 800d4a0:	2800      	cmp	r0, #0
 800d4a2:	dc06      	bgt.n	800d4b2 <__sflush_r+0xfe>
 800d4a4:	89a3      	ldrh	r3, [r4, #12]
 800d4a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4aa:	81a3      	strh	r3, [r4, #12]
 800d4ac:	f04f 30ff 	mov.w	r0, #4294967295
 800d4b0:	e78e      	b.n	800d3d0 <__sflush_r+0x1c>
 800d4b2:	4407      	add	r7, r0
 800d4b4:	eba8 0800 	sub.w	r8, r8, r0
 800d4b8:	e7e9      	b.n	800d48e <__sflush_r+0xda>
 800d4ba:	bf00      	nop
 800d4bc:	20400001 	.word	0x20400001

0800d4c0 <_fflush_r>:
 800d4c0:	b538      	push	{r3, r4, r5, lr}
 800d4c2:	690b      	ldr	r3, [r1, #16]
 800d4c4:	4605      	mov	r5, r0
 800d4c6:	460c      	mov	r4, r1
 800d4c8:	b913      	cbnz	r3, 800d4d0 <_fflush_r+0x10>
 800d4ca:	2500      	movs	r5, #0
 800d4cc:	4628      	mov	r0, r5
 800d4ce:	bd38      	pop	{r3, r4, r5, pc}
 800d4d0:	b118      	cbz	r0, 800d4da <_fflush_r+0x1a>
 800d4d2:	6983      	ldr	r3, [r0, #24]
 800d4d4:	b90b      	cbnz	r3, 800d4da <_fflush_r+0x1a>
 800d4d6:	f000 f887 	bl	800d5e8 <__sinit>
 800d4da:	4b14      	ldr	r3, [pc, #80]	; (800d52c <_fflush_r+0x6c>)
 800d4dc:	429c      	cmp	r4, r3
 800d4de:	d11b      	bne.n	800d518 <_fflush_r+0x58>
 800d4e0:	686c      	ldr	r4, [r5, #4]
 800d4e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d0ef      	beq.n	800d4ca <_fflush_r+0xa>
 800d4ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d4ec:	07d0      	lsls	r0, r2, #31
 800d4ee:	d404      	bmi.n	800d4fa <_fflush_r+0x3a>
 800d4f0:	0599      	lsls	r1, r3, #22
 800d4f2:	d402      	bmi.n	800d4fa <_fflush_r+0x3a>
 800d4f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d4f6:	f000 f915 	bl	800d724 <__retarget_lock_acquire_recursive>
 800d4fa:	4628      	mov	r0, r5
 800d4fc:	4621      	mov	r1, r4
 800d4fe:	f7ff ff59 	bl	800d3b4 <__sflush_r>
 800d502:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d504:	07da      	lsls	r2, r3, #31
 800d506:	4605      	mov	r5, r0
 800d508:	d4e0      	bmi.n	800d4cc <_fflush_r+0xc>
 800d50a:	89a3      	ldrh	r3, [r4, #12]
 800d50c:	059b      	lsls	r3, r3, #22
 800d50e:	d4dd      	bmi.n	800d4cc <_fflush_r+0xc>
 800d510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d512:	f000 f908 	bl	800d726 <__retarget_lock_release_recursive>
 800d516:	e7d9      	b.n	800d4cc <_fflush_r+0xc>
 800d518:	4b05      	ldr	r3, [pc, #20]	; (800d530 <_fflush_r+0x70>)
 800d51a:	429c      	cmp	r4, r3
 800d51c:	d101      	bne.n	800d522 <_fflush_r+0x62>
 800d51e:	68ac      	ldr	r4, [r5, #8]
 800d520:	e7df      	b.n	800d4e2 <_fflush_r+0x22>
 800d522:	4b04      	ldr	r3, [pc, #16]	; (800d534 <_fflush_r+0x74>)
 800d524:	429c      	cmp	r4, r3
 800d526:	bf08      	it	eq
 800d528:	68ec      	ldreq	r4, [r5, #12]
 800d52a:	e7da      	b.n	800d4e2 <_fflush_r+0x22>
 800d52c:	0800ddcc 	.word	0x0800ddcc
 800d530:	0800ddec 	.word	0x0800ddec
 800d534:	0800ddac 	.word	0x0800ddac

0800d538 <std>:
 800d538:	2300      	movs	r3, #0
 800d53a:	b510      	push	{r4, lr}
 800d53c:	4604      	mov	r4, r0
 800d53e:	e9c0 3300 	strd	r3, r3, [r0]
 800d542:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d546:	6083      	str	r3, [r0, #8]
 800d548:	8181      	strh	r1, [r0, #12]
 800d54a:	6643      	str	r3, [r0, #100]	; 0x64
 800d54c:	81c2      	strh	r2, [r0, #14]
 800d54e:	6183      	str	r3, [r0, #24]
 800d550:	4619      	mov	r1, r3
 800d552:	2208      	movs	r2, #8
 800d554:	305c      	adds	r0, #92	; 0x5c
 800d556:	f7fd fdf3 	bl	800b140 <memset>
 800d55a:	4b05      	ldr	r3, [pc, #20]	; (800d570 <std+0x38>)
 800d55c:	6263      	str	r3, [r4, #36]	; 0x24
 800d55e:	4b05      	ldr	r3, [pc, #20]	; (800d574 <std+0x3c>)
 800d560:	62a3      	str	r3, [r4, #40]	; 0x28
 800d562:	4b05      	ldr	r3, [pc, #20]	; (800d578 <std+0x40>)
 800d564:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d566:	4b05      	ldr	r3, [pc, #20]	; (800d57c <std+0x44>)
 800d568:	6224      	str	r4, [r4, #32]
 800d56a:	6323      	str	r3, [r4, #48]	; 0x30
 800d56c:	bd10      	pop	{r4, pc}
 800d56e:	bf00      	nop
 800d570:	0800d879 	.word	0x0800d879
 800d574:	0800d89b 	.word	0x0800d89b
 800d578:	0800d8d3 	.word	0x0800d8d3
 800d57c:	0800d8f7 	.word	0x0800d8f7

0800d580 <_cleanup_r>:
 800d580:	4901      	ldr	r1, [pc, #4]	; (800d588 <_cleanup_r+0x8>)
 800d582:	f000 b8af 	b.w	800d6e4 <_fwalk_reent>
 800d586:	bf00      	nop
 800d588:	0800d4c1 	.word	0x0800d4c1

0800d58c <__sfmoreglue>:
 800d58c:	b570      	push	{r4, r5, r6, lr}
 800d58e:	1e4a      	subs	r2, r1, #1
 800d590:	2568      	movs	r5, #104	; 0x68
 800d592:	4355      	muls	r5, r2
 800d594:	460e      	mov	r6, r1
 800d596:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d59a:	f7ff fc23 	bl	800cde4 <_malloc_r>
 800d59e:	4604      	mov	r4, r0
 800d5a0:	b140      	cbz	r0, 800d5b4 <__sfmoreglue+0x28>
 800d5a2:	2100      	movs	r1, #0
 800d5a4:	e9c0 1600 	strd	r1, r6, [r0]
 800d5a8:	300c      	adds	r0, #12
 800d5aa:	60a0      	str	r0, [r4, #8]
 800d5ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d5b0:	f7fd fdc6 	bl	800b140 <memset>
 800d5b4:	4620      	mov	r0, r4
 800d5b6:	bd70      	pop	{r4, r5, r6, pc}

0800d5b8 <__sfp_lock_acquire>:
 800d5b8:	4801      	ldr	r0, [pc, #4]	; (800d5c0 <__sfp_lock_acquire+0x8>)
 800d5ba:	f000 b8b3 	b.w	800d724 <__retarget_lock_acquire_recursive>
 800d5be:	bf00      	nop
 800d5c0:	24000980 	.word	0x24000980

0800d5c4 <__sfp_lock_release>:
 800d5c4:	4801      	ldr	r0, [pc, #4]	; (800d5cc <__sfp_lock_release+0x8>)
 800d5c6:	f000 b8ae 	b.w	800d726 <__retarget_lock_release_recursive>
 800d5ca:	bf00      	nop
 800d5cc:	24000980 	.word	0x24000980

0800d5d0 <__sinit_lock_acquire>:
 800d5d0:	4801      	ldr	r0, [pc, #4]	; (800d5d8 <__sinit_lock_acquire+0x8>)
 800d5d2:	f000 b8a7 	b.w	800d724 <__retarget_lock_acquire_recursive>
 800d5d6:	bf00      	nop
 800d5d8:	2400097b 	.word	0x2400097b

0800d5dc <__sinit_lock_release>:
 800d5dc:	4801      	ldr	r0, [pc, #4]	; (800d5e4 <__sinit_lock_release+0x8>)
 800d5de:	f000 b8a2 	b.w	800d726 <__retarget_lock_release_recursive>
 800d5e2:	bf00      	nop
 800d5e4:	2400097b 	.word	0x2400097b

0800d5e8 <__sinit>:
 800d5e8:	b510      	push	{r4, lr}
 800d5ea:	4604      	mov	r4, r0
 800d5ec:	f7ff fff0 	bl	800d5d0 <__sinit_lock_acquire>
 800d5f0:	69a3      	ldr	r3, [r4, #24]
 800d5f2:	b11b      	cbz	r3, 800d5fc <__sinit+0x14>
 800d5f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5f8:	f7ff bff0 	b.w	800d5dc <__sinit_lock_release>
 800d5fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d600:	6523      	str	r3, [r4, #80]	; 0x50
 800d602:	4b13      	ldr	r3, [pc, #76]	; (800d650 <__sinit+0x68>)
 800d604:	4a13      	ldr	r2, [pc, #76]	; (800d654 <__sinit+0x6c>)
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	62a2      	str	r2, [r4, #40]	; 0x28
 800d60a:	42a3      	cmp	r3, r4
 800d60c:	bf04      	itt	eq
 800d60e:	2301      	moveq	r3, #1
 800d610:	61a3      	streq	r3, [r4, #24]
 800d612:	4620      	mov	r0, r4
 800d614:	f000 f820 	bl	800d658 <__sfp>
 800d618:	6060      	str	r0, [r4, #4]
 800d61a:	4620      	mov	r0, r4
 800d61c:	f000 f81c 	bl	800d658 <__sfp>
 800d620:	60a0      	str	r0, [r4, #8]
 800d622:	4620      	mov	r0, r4
 800d624:	f000 f818 	bl	800d658 <__sfp>
 800d628:	2200      	movs	r2, #0
 800d62a:	60e0      	str	r0, [r4, #12]
 800d62c:	2104      	movs	r1, #4
 800d62e:	6860      	ldr	r0, [r4, #4]
 800d630:	f7ff ff82 	bl	800d538 <std>
 800d634:	68a0      	ldr	r0, [r4, #8]
 800d636:	2201      	movs	r2, #1
 800d638:	2109      	movs	r1, #9
 800d63a:	f7ff ff7d 	bl	800d538 <std>
 800d63e:	68e0      	ldr	r0, [r4, #12]
 800d640:	2202      	movs	r2, #2
 800d642:	2112      	movs	r1, #18
 800d644:	f7ff ff78 	bl	800d538 <std>
 800d648:	2301      	movs	r3, #1
 800d64a:	61a3      	str	r3, [r4, #24]
 800d64c:	e7d2      	b.n	800d5f4 <__sinit+0xc>
 800d64e:	bf00      	nop
 800d650:	0800da28 	.word	0x0800da28
 800d654:	0800d581 	.word	0x0800d581

0800d658 <__sfp>:
 800d658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d65a:	4607      	mov	r7, r0
 800d65c:	f7ff ffac 	bl	800d5b8 <__sfp_lock_acquire>
 800d660:	4b1e      	ldr	r3, [pc, #120]	; (800d6dc <__sfp+0x84>)
 800d662:	681e      	ldr	r6, [r3, #0]
 800d664:	69b3      	ldr	r3, [r6, #24]
 800d666:	b913      	cbnz	r3, 800d66e <__sfp+0x16>
 800d668:	4630      	mov	r0, r6
 800d66a:	f7ff ffbd 	bl	800d5e8 <__sinit>
 800d66e:	3648      	adds	r6, #72	; 0x48
 800d670:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d674:	3b01      	subs	r3, #1
 800d676:	d503      	bpl.n	800d680 <__sfp+0x28>
 800d678:	6833      	ldr	r3, [r6, #0]
 800d67a:	b30b      	cbz	r3, 800d6c0 <__sfp+0x68>
 800d67c:	6836      	ldr	r6, [r6, #0]
 800d67e:	e7f7      	b.n	800d670 <__sfp+0x18>
 800d680:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d684:	b9d5      	cbnz	r5, 800d6bc <__sfp+0x64>
 800d686:	4b16      	ldr	r3, [pc, #88]	; (800d6e0 <__sfp+0x88>)
 800d688:	60e3      	str	r3, [r4, #12]
 800d68a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d68e:	6665      	str	r5, [r4, #100]	; 0x64
 800d690:	f000 f847 	bl	800d722 <__retarget_lock_init_recursive>
 800d694:	f7ff ff96 	bl	800d5c4 <__sfp_lock_release>
 800d698:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d69c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d6a0:	6025      	str	r5, [r4, #0]
 800d6a2:	61a5      	str	r5, [r4, #24]
 800d6a4:	2208      	movs	r2, #8
 800d6a6:	4629      	mov	r1, r5
 800d6a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d6ac:	f7fd fd48 	bl	800b140 <memset>
 800d6b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d6b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6bc:	3468      	adds	r4, #104	; 0x68
 800d6be:	e7d9      	b.n	800d674 <__sfp+0x1c>
 800d6c0:	2104      	movs	r1, #4
 800d6c2:	4638      	mov	r0, r7
 800d6c4:	f7ff ff62 	bl	800d58c <__sfmoreglue>
 800d6c8:	4604      	mov	r4, r0
 800d6ca:	6030      	str	r0, [r6, #0]
 800d6cc:	2800      	cmp	r0, #0
 800d6ce:	d1d5      	bne.n	800d67c <__sfp+0x24>
 800d6d0:	f7ff ff78 	bl	800d5c4 <__sfp_lock_release>
 800d6d4:	230c      	movs	r3, #12
 800d6d6:	603b      	str	r3, [r7, #0]
 800d6d8:	e7ee      	b.n	800d6b8 <__sfp+0x60>
 800d6da:	bf00      	nop
 800d6dc:	0800da28 	.word	0x0800da28
 800d6e0:	ffff0001 	.word	0xffff0001

0800d6e4 <_fwalk_reent>:
 800d6e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d6e8:	4606      	mov	r6, r0
 800d6ea:	4688      	mov	r8, r1
 800d6ec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d6f0:	2700      	movs	r7, #0
 800d6f2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d6f6:	f1b9 0901 	subs.w	r9, r9, #1
 800d6fa:	d505      	bpl.n	800d708 <_fwalk_reent+0x24>
 800d6fc:	6824      	ldr	r4, [r4, #0]
 800d6fe:	2c00      	cmp	r4, #0
 800d700:	d1f7      	bne.n	800d6f2 <_fwalk_reent+0xe>
 800d702:	4638      	mov	r0, r7
 800d704:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d708:	89ab      	ldrh	r3, [r5, #12]
 800d70a:	2b01      	cmp	r3, #1
 800d70c:	d907      	bls.n	800d71e <_fwalk_reent+0x3a>
 800d70e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d712:	3301      	adds	r3, #1
 800d714:	d003      	beq.n	800d71e <_fwalk_reent+0x3a>
 800d716:	4629      	mov	r1, r5
 800d718:	4630      	mov	r0, r6
 800d71a:	47c0      	blx	r8
 800d71c:	4307      	orrs	r7, r0
 800d71e:	3568      	adds	r5, #104	; 0x68
 800d720:	e7e9      	b.n	800d6f6 <_fwalk_reent+0x12>

0800d722 <__retarget_lock_init_recursive>:
 800d722:	4770      	bx	lr

0800d724 <__retarget_lock_acquire_recursive>:
 800d724:	4770      	bx	lr

0800d726 <__retarget_lock_release_recursive>:
 800d726:	4770      	bx	lr

0800d728 <__swhatbuf_r>:
 800d728:	b570      	push	{r4, r5, r6, lr}
 800d72a:	460e      	mov	r6, r1
 800d72c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d730:	2900      	cmp	r1, #0
 800d732:	b096      	sub	sp, #88	; 0x58
 800d734:	4614      	mov	r4, r2
 800d736:	461d      	mov	r5, r3
 800d738:	da07      	bge.n	800d74a <__swhatbuf_r+0x22>
 800d73a:	2300      	movs	r3, #0
 800d73c:	602b      	str	r3, [r5, #0]
 800d73e:	89b3      	ldrh	r3, [r6, #12]
 800d740:	061a      	lsls	r2, r3, #24
 800d742:	d410      	bmi.n	800d766 <__swhatbuf_r+0x3e>
 800d744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d748:	e00e      	b.n	800d768 <__swhatbuf_r+0x40>
 800d74a:	466a      	mov	r2, sp
 800d74c:	f000 f8fa 	bl	800d944 <_fstat_r>
 800d750:	2800      	cmp	r0, #0
 800d752:	dbf2      	blt.n	800d73a <__swhatbuf_r+0x12>
 800d754:	9a01      	ldr	r2, [sp, #4]
 800d756:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d75a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d75e:	425a      	negs	r2, r3
 800d760:	415a      	adcs	r2, r3
 800d762:	602a      	str	r2, [r5, #0]
 800d764:	e7ee      	b.n	800d744 <__swhatbuf_r+0x1c>
 800d766:	2340      	movs	r3, #64	; 0x40
 800d768:	2000      	movs	r0, #0
 800d76a:	6023      	str	r3, [r4, #0]
 800d76c:	b016      	add	sp, #88	; 0x58
 800d76e:	bd70      	pop	{r4, r5, r6, pc}

0800d770 <__smakebuf_r>:
 800d770:	898b      	ldrh	r3, [r1, #12]
 800d772:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d774:	079d      	lsls	r5, r3, #30
 800d776:	4606      	mov	r6, r0
 800d778:	460c      	mov	r4, r1
 800d77a:	d507      	bpl.n	800d78c <__smakebuf_r+0x1c>
 800d77c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d780:	6023      	str	r3, [r4, #0]
 800d782:	6123      	str	r3, [r4, #16]
 800d784:	2301      	movs	r3, #1
 800d786:	6163      	str	r3, [r4, #20]
 800d788:	b002      	add	sp, #8
 800d78a:	bd70      	pop	{r4, r5, r6, pc}
 800d78c:	ab01      	add	r3, sp, #4
 800d78e:	466a      	mov	r2, sp
 800d790:	f7ff ffca 	bl	800d728 <__swhatbuf_r>
 800d794:	9900      	ldr	r1, [sp, #0]
 800d796:	4605      	mov	r5, r0
 800d798:	4630      	mov	r0, r6
 800d79a:	f7ff fb23 	bl	800cde4 <_malloc_r>
 800d79e:	b948      	cbnz	r0, 800d7b4 <__smakebuf_r+0x44>
 800d7a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7a4:	059a      	lsls	r2, r3, #22
 800d7a6:	d4ef      	bmi.n	800d788 <__smakebuf_r+0x18>
 800d7a8:	f023 0303 	bic.w	r3, r3, #3
 800d7ac:	f043 0302 	orr.w	r3, r3, #2
 800d7b0:	81a3      	strh	r3, [r4, #12]
 800d7b2:	e7e3      	b.n	800d77c <__smakebuf_r+0xc>
 800d7b4:	4b0d      	ldr	r3, [pc, #52]	; (800d7ec <__smakebuf_r+0x7c>)
 800d7b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800d7b8:	89a3      	ldrh	r3, [r4, #12]
 800d7ba:	6020      	str	r0, [r4, #0]
 800d7bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d7c0:	81a3      	strh	r3, [r4, #12]
 800d7c2:	9b00      	ldr	r3, [sp, #0]
 800d7c4:	6163      	str	r3, [r4, #20]
 800d7c6:	9b01      	ldr	r3, [sp, #4]
 800d7c8:	6120      	str	r0, [r4, #16]
 800d7ca:	b15b      	cbz	r3, 800d7e4 <__smakebuf_r+0x74>
 800d7cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7d0:	4630      	mov	r0, r6
 800d7d2:	f000 f8c9 	bl	800d968 <_isatty_r>
 800d7d6:	b128      	cbz	r0, 800d7e4 <__smakebuf_r+0x74>
 800d7d8:	89a3      	ldrh	r3, [r4, #12]
 800d7da:	f023 0303 	bic.w	r3, r3, #3
 800d7de:	f043 0301 	orr.w	r3, r3, #1
 800d7e2:	81a3      	strh	r3, [r4, #12]
 800d7e4:	89a0      	ldrh	r0, [r4, #12]
 800d7e6:	4305      	orrs	r5, r0
 800d7e8:	81a5      	strh	r5, [r4, #12]
 800d7ea:	e7cd      	b.n	800d788 <__smakebuf_r+0x18>
 800d7ec:	0800d581 	.word	0x0800d581

0800d7f0 <_raise_r>:
 800d7f0:	291f      	cmp	r1, #31
 800d7f2:	b538      	push	{r3, r4, r5, lr}
 800d7f4:	4604      	mov	r4, r0
 800d7f6:	460d      	mov	r5, r1
 800d7f8:	d904      	bls.n	800d804 <_raise_r+0x14>
 800d7fa:	2316      	movs	r3, #22
 800d7fc:	6003      	str	r3, [r0, #0]
 800d7fe:	f04f 30ff 	mov.w	r0, #4294967295
 800d802:	bd38      	pop	{r3, r4, r5, pc}
 800d804:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d806:	b112      	cbz	r2, 800d80e <_raise_r+0x1e>
 800d808:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d80c:	b94b      	cbnz	r3, 800d822 <_raise_r+0x32>
 800d80e:	4620      	mov	r0, r4
 800d810:	f000 f830 	bl	800d874 <_getpid_r>
 800d814:	462a      	mov	r2, r5
 800d816:	4601      	mov	r1, r0
 800d818:	4620      	mov	r0, r4
 800d81a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d81e:	f000 b817 	b.w	800d850 <_kill_r>
 800d822:	2b01      	cmp	r3, #1
 800d824:	d00a      	beq.n	800d83c <_raise_r+0x4c>
 800d826:	1c59      	adds	r1, r3, #1
 800d828:	d103      	bne.n	800d832 <_raise_r+0x42>
 800d82a:	2316      	movs	r3, #22
 800d82c:	6003      	str	r3, [r0, #0]
 800d82e:	2001      	movs	r0, #1
 800d830:	e7e7      	b.n	800d802 <_raise_r+0x12>
 800d832:	2400      	movs	r4, #0
 800d834:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d838:	4628      	mov	r0, r5
 800d83a:	4798      	blx	r3
 800d83c:	2000      	movs	r0, #0
 800d83e:	e7e0      	b.n	800d802 <_raise_r+0x12>

0800d840 <raise>:
 800d840:	4b02      	ldr	r3, [pc, #8]	; (800d84c <raise+0xc>)
 800d842:	4601      	mov	r1, r0
 800d844:	6818      	ldr	r0, [r3, #0]
 800d846:	f7ff bfd3 	b.w	800d7f0 <_raise_r>
 800d84a:	bf00      	nop
 800d84c:	24000010 	.word	0x24000010

0800d850 <_kill_r>:
 800d850:	b538      	push	{r3, r4, r5, lr}
 800d852:	4d07      	ldr	r5, [pc, #28]	; (800d870 <_kill_r+0x20>)
 800d854:	2300      	movs	r3, #0
 800d856:	4604      	mov	r4, r0
 800d858:	4608      	mov	r0, r1
 800d85a:	4611      	mov	r1, r2
 800d85c:	602b      	str	r3, [r5, #0]
 800d85e:	f7f5 f83b 	bl	80028d8 <_kill>
 800d862:	1c43      	adds	r3, r0, #1
 800d864:	d102      	bne.n	800d86c <_kill_r+0x1c>
 800d866:	682b      	ldr	r3, [r5, #0]
 800d868:	b103      	cbz	r3, 800d86c <_kill_r+0x1c>
 800d86a:	6023      	str	r3, [r4, #0]
 800d86c:	bd38      	pop	{r3, r4, r5, pc}
 800d86e:	bf00      	nop
 800d870:	24000974 	.word	0x24000974

0800d874 <_getpid_r>:
 800d874:	f7f5 b828 	b.w	80028c8 <_getpid>

0800d878 <__sread>:
 800d878:	b510      	push	{r4, lr}
 800d87a:	460c      	mov	r4, r1
 800d87c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d880:	f000 f894 	bl	800d9ac <_read_r>
 800d884:	2800      	cmp	r0, #0
 800d886:	bfab      	itete	ge
 800d888:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d88a:	89a3      	ldrhlt	r3, [r4, #12]
 800d88c:	181b      	addge	r3, r3, r0
 800d88e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d892:	bfac      	ite	ge
 800d894:	6563      	strge	r3, [r4, #84]	; 0x54
 800d896:	81a3      	strhlt	r3, [r4, #12]
 800d898:	bd10      	pop	{r4, pc}

0800d89a <__swrite>:
 800d89a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d89e:	461f      	mov	r7, r3
 800d8a0:	898b      	ldrh	r3, [r1, #12]
 800d8a2:	05db      	lsls	r3, r3, #23
 800d8a4:	4605      	mov	r5, r0
 800d8a6:	460c      	mov	r4, r1
 800d8a8:	4616      	mov	r6, r2
 800d8aa:	d505      	bpl.n	800d8b8 <__swrite+0x1e>
 800d8ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8b0:	2302      	movs	r3, #2
 800d8b2:	2200      	movs	r2, #0
 800d8b4:	f000 f868 	bl	800d988 <_lseek_r>
 800d8b8:	89a3      	ldrh	r3, [r4, #12]
 800d8ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8c2:	81a3      	strh	r3, [r4, #12]
 800d8c4:	4632      	mov	r2, r6
 800d8c6:	463b      	mov	r3, r7
 800d8c8:	4628      	mov	r0, r5
 800d8ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8ce:	f000 b817 	b.w	800d900 <_write_r>

0800d8d2 <__sseek>:
 800d8d2:	b510      	push	{r4, lr}
 800d8d4:	460c      	mov	r4, r1
 800d8d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8da:	f000 f855 	bl	800d988 <_lseek_r>
 800d8de:	1c43      	adds	r3, r0, #1
 800d8e0:	89a3      	ldrh	r3, [r4, #12]
 800d8e2:	bf15      	itete	ne
 800d8e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d8e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d8ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d8ee:	81a3      	strheq	r3, [r4, #12]
 800d8f0:	bf18      	it	ne
 800d8f2:	81a3      	strhne	r3, [r4, #12]
 800d8f4:	bd10      	pop	{r4, pc}

0800d8f6 <__sclose>:
 800d8f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8fa:	f000 b813 	b.w	800d924 <_close_r>
	...

0800d900 <_write_r>:
 800d900:	b538      	push	{r3, r4, r5, lr}
 800d902:	4d07      	ldr	r5, [pc, #28]	; (800d920 <_write_r+0x20>)
 800d904:	4604      	mov	r4, r0
 800d906:	4608      	mov	r0, r1
 800d908:	4611      	mov	r1, r2
 800d90a:	2200      	movs	r2, #0
 800d90c:	602a      	str	r2, [r5, #0]
 800d90e:	461a      	mov	r2, r3
 800d910:	f7f5 f819 	bl	8002946 <_write>
 800d914:	1c43      	adds	r3, r0, #1
 800d916:	d102      	bne.n	800d91e <_write_r+0x1e>
 800d918:	682b      	ldr	r3, [r5, #0]
 800d91a:	b103      	cbz	r3, 800d91e <_write_r+0x1e>
 800d91c:	6023      	str	r3, [r4, #0]
 800d91e:	bd38      	pop	{r3, r4, r5, pc}
 800d920:	24000974 	.word	0x24000974

0800d924 <_close_r>:
 800d924:	b538      	push	{r3, r4, r5, lr}
 800d926:	4d06      	ldr	r5, [pc, #24]	; (800d940 <_close_r+0x1c>)
 800d928:	2300      	movs	r3, #0
 800d92a:	4604      	mov	r4, r0
 800d92c:	4608      	mov	r0, r1
 800d92e:	602b      	str	r3, [r5, #0]
 800d930:	f7f5 f825 	bl	800297e <_close>
 800d934:	1c43      	adds	r3, r0, #1
 800d936:	d102      	bne.n	800d93e <_close_r+0x1a>
 800d938:	682b      	ldr	r3, [r5, #0]
 800d93a:	b103      	cbz	r3, 800d93e <_close_r+0x1a>
 800d93c:	6023      	str	r3, [r4, #0]
 800d93e:	bd38      	pop	{r3, r4, r5, pc}
 800d940:	24000974 	.word	0x24000974

0800d944 <_fstat_r>:
 800d944:	b538      	push	{r3, r4, r5, lr}
 800d946:	4d07      	ldr	r5, [pc, #28]	; (800d964 <_fstat_r+0x20>)
 800d948:	2300      	movs	r3, #0
 800d94a:	4604      	mov	r4, r0
 800d94c:	4608      	mov	r0, r1
 800d94e:	4611      	mov	r1, r2
 800d950:	602b      	str	r3, [r5, #0]
 800d952:	f7f5 f820 	bl	8002996 <_fstat>
 800d956:	1c43      	adds	r3, r0, #1
 800d958:	d102      	bne.n	800d960 <_fstat_r+0x1c>
 800d95a:	682b      	ldr	r3, [r5, #0]
 800d95c:	b103      	cbz	r3, 800d960 <_fstat_r+0x1c>
 800d95e:	6023      	str	r3, [r4, #0]
 800d960:	bd38      	pop	{r3, r4, r5, pc}
 800d962:	bf00      	nop
 800d964:	24000974 	.word	0x24000974

0800d968 <_isatty_r>:
 800d968:	b538      	push	{r3, r4, r5, lr}
 800d96a:	4d06      	ldr	r5, [pc, #24]	; (800d984 <_isatty_r+0x1c>)
 800d96c:	2300      	movs	r3, #0
 800d96e:	4604      	mov	r4, r0
 800d970:	4608      	mov	r0, r1
 800d972:	602b      	str	r3, [r5, #0]
 800d974:	f7f5 f81f 	bl	80029b6 <_isatty>
 800d978:	1c43      	adds	r3, r0, #1
 800d97a:	d102      	bne.n	800d982 <_isatty_r+0x1a>
 800d97c:	682b      	ldr	r3, [r5, #0]
 800d97e:	b103      	cbz	r3, 800d982 <_isatty_r+0x1a>
 800d980:	6023      	str	r3, [r4, #0]
 800d982:	bd38      	pop	{r3, r4, r5, pc}
 800d984:	24000974 	.word	0x24000974

0800d988 <_lseek_r>:
 800d988:	b538      	push	{r3, r4, r5, lr}
 800d98a:	4d07      	ldr	r5, [pc, #28]	; (800d9a8 <_lseek_r+0x20>)
 800d98c:	4604      	mov	r4, r0
 800d98e:	4608      	mov	r0, r1
 800d990:	4611      	mov	r1, r2
 800d992:	2200      	movs	r2, #0
 800d994:	602a      	str	r2, [r5, #0]
 800d996:	461a      	mov	r2, r3
 800d998:	f7f5 f818 	bl	80029cc <_lseek>
 800d99c:	1c43      	adds	r3, r0, #1
 800d99e:	d102      	bne.n	800d9a6 <_lseek_r+0x1e>
 800d9a0:	682b      	ldr	r3, [r5, #0]
 800d9a2:	b103      	cbz	r3, 800d9a6 <_lseek_r+0x1e>
 800d9a4:	6023      	str	r3, [r4, #0]
 800d9a6:	bd38      	pop	{r3, r4, r5, pc}
 800d9a8:	24000974 	.word	0x24000974

0800d9ac <_read_r>:
 800d9ac:	b538      	push	{r3, r4, r5, lr}
 800d9ae:	4d07      	ldr	r5, [pc, #28]	; (800d9cc <_read_r+0x20>)
 800d9b0:	4604      	mov	r4, r0
 800d9b2:	4608      	mov	r0, r1
 800d9b4:	4611      	mov	r1, r2
 800d9b6:	2200      	movs	r2, #0
 800d9b8:	602a      	str	r2, [r5, #0]
 800d9ba:	461a      	mov	r2, r3
 800d9bc:	f7f4 ffa6 	bl	800290c <_read>
 800d9c0:	1c43      	adds	r3, r0, #1
 800d9c2:	d102      	bne.n	800d9ca <_read_r+0x1e>
 800d9c4:	682b      	ldr	r3, [r5, #0]
 800d9c6:	b103      	cbz	r3, 800d9ca <_read_r+0x1e>
 800d9c8:	6023      	str	r3, [r4, #0]
 800d9ca:	bd38      	pop	{r3, r4, r5, pc}
 800d9cc:	24000974 	.word	0x24000974

0800d9d0 <_init>:
 800d9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9d2:	bf00      	nop
 800d9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9d6:	bc08      	pop	{r3}
 800d9d8:	469e      	mov	lr, r3
 800d9da:	4770      	bx	lr

0800d9dc <_fini>:
 800d9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9de:	bf00      	nop
 800d9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d9e2:	bc08      	pop	{r3}
 800d9e4:	469e      	mov	lr, r3
 800d9e6:	4770      	bx	lr
